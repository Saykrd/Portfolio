"use strict";
var DEBUG = false;
var LOGGING = false;
var Avota;
(function (Avota) {
    Avota.NAME = "AvotaJS";
    Avota.MAJOR = 1;
    Avota.MINOR = 17;
    Avota.BUILD = 6736;
    Avota.DATE = "Thu Sep 17 14:30:23 PDT 2015";
    Avota.VERSION = Avota.MAJOR + "." + Avota.MINOR + "." + Avota.BUILD;
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var LogMessage = (function () {
        function LogMessage(level, category, message) {
            this.level = level;
            this.category = category;
            this.message = message;
        }
        return LogMessage;
    })();
    Avota.LogMessage = LogMessage;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Logger = (function () {
        function Logger(category) {
            this._category = this.getName(category);
        }
        Logger.prototype.clear = function () {
            Avota.Log.clear();
        };
        Logger.prototype.trace = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.TRACE, this._category, args));
        };
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.DEBUG, this._category, args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.LOG, this._category, args));
        };
        Logger.prototype.print = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, this._category, args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.INFO, this._category, args));
        };
        Logger.prototype.notice = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.NOTICE, this._category, args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.WARN, this._category, args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.ERROR, this._category, args));
        };
        Logger.prototype.critical = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.CRITICAL, this._category, args));
        };
        Logger.prototype.fatal = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.FATAL, this._category, args));
        };
        Logger.prototype.mark = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.MARK, this._category, args));
        };
        Logger.prototype.command = function () {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                args[_i] = arguments[_i + 0];
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.COMMAND, this._category, args));
        };
        Logger.prototype.assert = function (condition) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            if(!condition) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.WARN, this._category, args));
            }
        };
        Logger.prototype.getName = function (reference) {
            if(reference.constructor && reference.constructor.toString) {
                var info = reference.constructor.toString().match(/function\s*(\w+)/);
                if(info && info.length == 2) {
                    return "[" + info[1] + "]";
                }
            } else {
                reference = reference.toString();
                return (reference.indexOf("[object ") != -1) ? "[" + reference.substring(8) : reference;
            }
        };
        return Logger;
    })();
    Avota.Logger = Logger;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Log = (function () {
        function Log() { }
        Log.MARK = -1;
        Log.ALL = 0;
        Log.TRACE = 1;
        Log.DEBUG = 2;
        Log.LOG = 3;
        Log.INFO = 4;
        Log.PRINT = 5;
        Log.NOTICE = 6;
        Log.WARN = 7;
        Log.CRITICAL = 8;
        Log.ERROR = 9;
        Log.FATAL = 10;
        Log.COMMAND = 100;
        Log.COLOR_TRACE = "#CCCCCC";
        Log.COLOR_DEBUG = "#999999";
        Log.COLOR_LOG = "#666666";
        Log.COLOR_INFO = "#333333";
        Log.COLOR_PRINT = "#000000";
        Log.COLOR_NOTICE = "#0066FF";
        Log.COLOR_WARN = "#FF6600";
        Log.COLOR_CRITICAL = "#FF0000";
        Log.COLOR_ERROR = "#FF0000";
        Log.COLOR_FATAL = "#FF0000";
        Log.COLOR_COMMAND = "#6666FF";
        Log._targets = [];
        Log.getLogger = function getLogger(category) {
            return new Avota.Logger(category);
        };
        Log.log = function log(logMessage) {
            for(var i = 0; i < Log._targets.length; i++) {
                Log._targets[i].output(logMessage);
            }
        };
        Log.clear = function clear() {
            for(var i = 0; i < Log._targets.length; i++) {
                Log._targets[i].clear();
            }
        };
        Log.addTarget = function addTarget(target) {
            if(Log._targets.indexOf(target) == -1) {
                Log._targets.push(target);
            }
        };
        Log.removeTarget = function removeTarget(target) {
            var target;
            for(var i = 0; i < Log._targets.length; i++) {
                target = Log._targets.splice(Log._targets.indexOf(target), 1)[0];
                target.destroy();
            }
        };
        Log.removeAllTargets = function removeAllTargets() {
            var target;
            for(var i = 0; i < Log._targets.length; i++) {
                target = Log._targets[i];
                target.destroy();
            }
            Log._targets = [];
        };
        Log.getTargetByType = function getTargetByType(type) {
            var target;
            var targetType;
            for(var key in Log._targets) {
                targetType = Log._targets[key];
                if(targetType instanceof type) {
                    target = targetType;
                }
            }
            return target;
        };
        Log.setLevel = function setLevel(level) {
            for(var i = 0; i < Log._targets.length; i++) {
                Log._targets[i].level = level;
            }
        };
        Log.setFilters = function setFilters(filters) {
            for(var i = 0; i < Log._targets.length; i++) {
                Log._targets[i].filters = filters;
            }
        };
        Log.formatCategory = function formatCategory(category) {
            return (category) ? "[" + category + "]: " : "";
        };
        Log.resolveLevelName = function resolveLevelName(level) {
            switch(level) {
                case Log.ALL:
                    return "|   ALL| ";
                    break;
                case Log.TRACE:
                    return "| TRACE| ";
                    break;
                case Log.DEBUG:
                    return "| DEBUG| ";
                    break;
                case Log.LOG:
                    return "|   LOG| ";
                    break;
                case Log.PRINT:
                    return "| PRINT| ";
                    break;
                case Log.INFO:
                    return "|  INFO| ";
                    break;
                case Log.NOTICE:
                    return "|NOTICE| ";
                    break;
                case Log.WARN:
                    return "|  WARN| ";
                    break;
                case Log.ERROR:
                    return "| ERROR| ";
                    break;
                case Log.CRITICAL:
                    return "|CRITICAL| ";
                    break;
                case Log.FATAL:
                    return "| FATAL| ";
                    break;
                case Log.COMMAND:
                    return "|   CMD| ";
                    break;
            }
        };
        Log.getColor = function getColor(level) {
            switch(level) {
                case Log.TRACE:
                    return Log.COLOR_TRACE;
                    break;
                case Log.DEBUG:
                    return Log.COLOR_DEBUG;
                    break;
                case Log.LOG:
                    return Log.COLOR_LOG;
                    break;
                case Log.PRINT:
                    return Log.COLOR_PRINT;
                    break;
                case Log.INFO:
                    return Log.COLOR_INFO;
                    break;
                case Log.NOTICE:
                    return Log.COLOR_NOTICE;
                    break;
                case Log.WARN:
                    return Log.COLOR_WARN;
                    break;
                case Log.ERROR:
                    return Log.COLOR_ERROR;
                    break;
                case Log.CRITICAL:
                    return Log.COLOR_CRITICAL;
                    break;
                case Log.FATAL:
                    return Log.COLOR_FATAL;
                    break;
                case Log.COMMAND:
                    return Log.COLOR_COMMAND;
                    break;
                default:
                    return Log.COLOR_LOG;
                    break;
            }
        };
        Log.destroy = function destroy() {
            for(var i = 0; i < Log._targets.length; i++) {
                Log._targets[i].destroy();
                Log._targets[i] = null;
            }
            Log._targets = null;
        };
        return Log;
    })();
    Avota.Log = Log;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AbstractBase = (function () {
        function AbstractBase() {
            this.destroyed = false;
            if(LOGGING) {
                this._log = Avota.Log.getLogger(this);
                this._log.debug("Constructed");
            }
        }
        AbstractBase.prototype.destroy = function () {
            if(DEBUG) {
                if(this.destroyed) {
                    throw new Error("Already destroyed");
                }
            }
            this.destroyed = true;
            if(LOGGING) {
                this._log.debug("Destroyed");
                this._log = null;
            }
        };
        return AbstractBase;
    })();
    Avota.AbstractBase = AbstractBase;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ClassUtil = (function () {
        function ClassUtil() { }
        ClassUtil.getClassName = function getClassName(reference) {
            if(reference.constructor && reference.constructor.toString) {
                var info = reference.constructor.toString().match(/function\s*(\w+)/);
                if(info && info.length == 2) {
                    return info[1];
                }
            } else {
                reference = reference.toString();
                return (reference.indexOf("[object ") != -1) ? "[" + reference.substring(8) : reference;
            }
        };
        return ClassUtil;
    })();
    Avota.ClassUtil = ClassUtil;    
})(Avota || (Avota = {}));
var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Avota;
(function (Avota) {
    var Element = (function (_super) {
        __extends(Element, _super);
        function Element(name) {
            Element.COUNT++;
                _super.call(this);
            this.name = name || Avota.ClassUtil.getClassName(this);
            this.id = Element.COUNT;
            this.tag = Number.MIN_VALUE;
        }
        Element.COUNT = 0;
        Object.defineProperty(Element.prototype, "context", {
            get: function () {
                return this._context;
            },
            set: function (value) {
                if(this._context) {
                    this._context._remove(this);
                }
                this._context = value;
                if(this._context && !this._context.has(this)) {
                    this._context._add(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Element.prototype, "group", {
            get: function () {
                return this._group;
            },
            set: function (value) {
                if(this._group) {
                    this._group._remove(this);
                }
                this._group = value;
                if(this._group && !this._group.has(this)) {
                    this._group._add(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Element.prototype._onCreate = function () {
        };
        Element.prototype.destroy = function () {
            if(this._context && this._context.has(this)) {
                this._context._remove(this);
            }
            if(this._group && this._group.has(this)) {
                this._group._remove(this);
            }
            _super.prototype.destroy.call(this);
            this._context = null;
            this._group = null;
            this.alias = null;
            this.tag = Number.MIN_VALUE;
        };
        return Element;
    })(Avota.AbstractBase);
    Avota.Element = Element;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Group = (function (_super) {
        __extends(Group, _super);
        function Group(name) {
                _super.call(this, name);
            this._elements = {
            };
        }
        Group.prototype._add = function (element) {
            if(element == this) {
                if(LOGGING) {
                    this._log.warn("Cannot add self.");
                }
                return;
            }
            if(this.has(element)) {
                if(LOGGING) {
                    this._log.warn("Already contains item.");
                }
                return;
            }
            this._elements[element.id] = element;
            if(LOGGING) {
                this._log.debug("Added: " + element.name);
            }
        };
        Group.prototype._remove = function (element) {
            if(element == this) {
                if(LOGGING) {
                    this._log.warn("Cannot remove self.");
                }
                return;
            }
            if(!this.has(element)) {
                if(LOGGING) {
                    this._log.warn("Does not contain item.");
                }
                return;
            }
            this._elements[element.id] = null;
            delete this._elements[element.id];
            if(LOGGING) {
                this._log.debug("Removed: " + element.name);
            }
        };
        Group.prototype.has = function (element) {
            return this._elements[element.id] != null;
        };
        Group.prototype.get = function (name) {
            var element;
            var result;
            for(var key in this._elements) {
                element = this._elements[key];
                if(element.name == name || element.alias == name) {
                    result = element;
                    break;
                }
            }
            return result;
        };
        Group.prototype.getByPrefix = function (prefix) {
            var element;
            var results = [];
            for(var key in this._elements) {
                element = this._elements[key];
                if((element.name && element.name.indexOf(prefix) != -1) || (element.alias && element.alias.indexOf(prefix) != -1)) {
                    results.push(element);
                }
            }
            return results;
        };
        Group.prototype.getByTag = function (tag) {
            var element;
            var results = [];
            for(var key in this._elements) {
                element = this._elements[key];
                if(element.tag == tag) {
                    results.push(element);
                }
            }
            return results;
        };
        Group.prototype.getByType = function (type) {
            var element;
            var results = [];
            for(var key in this._elements) {
                element = this._elements[key];
                if(element instanceof type) {
                    results.push(element);
                }
            }
            return results;
        };
        Group.prototype.getAll = function () {
            var element;
            var results = [];
            for(var key in this._elements) {
                element = this._elements[key];
                results.push(element);
            }
            return results;
        };
        Group.prototype.empty = function () {
            var element;
            var elements = this.getAll();
            for(var i = 0; i < elements.length; i++) {
                element = elements[i];
                if(!element.destroyed) {
                    element.destroy();
                }
            }
            for(var key in this._elements) {
                this._elements[key] = null;
                delete this._elements[key];
            }
        };
        Group.prototype.create = function (type) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var element;
            if(args && args.length > 0) {
                switch(args.length) {
                    case 1:
                        element = new type(args[0]);
                        break;
                    case 2:
                        element = new type(args[0], args[1]);
                        break;
                    case 3:
                        element = new type(args[0], args[1], args[2]);
                        break;
                    case 4:
                        element = new type(args[0], args[1], args[2], args[3]);
                        break;
                    case 5:
                        element = new type(args[0], args[1], args[2], args[3], args[4]);
                        break;
                    case 6:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;
                    case 7:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                        break;
                    case 8:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
                        break;
                    case 9:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
                        break;
                    case 10:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
                        break;
                }
            } else {
                element = new type();
            }
            if(LOGGING) {
                this._log.debug("Created: " + element.name);
            }
            if(this._context) {
                element.context = this._context;
            }
            element.group = this;
            element._onCreate();
            return element;
        };
        Group.prototype.destroy = function () {
            this.empty();
            _super.prototype.destroy.call(this);
            this._elements = null;
        };
        return Group;
    })(Avota.Element);
    Avota.Group = Group;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var EnvUtil = (function () {
        function EnvUtil() { }
        EnvUtil.isDesktop = false;
        EnvUtil.isMobile = false;
        EnvUtil.isiOS = false;
        EnvUtil.isAndroid = false;
        EnvUtil.isChromeOS = false;
        EnvUtil.isMacOS = false;
        EnvUtil.isLinux = false;
        EnvUtil.isWindows = false;
        EnvUtil.isiPhone = false;
        EnvUtil.isiPad = false;
        EnvUtil.isiPod = false;
        EnvUtil.isRetina = false;
        EnvUtil.isAndroidPhone = false;
        EnvUtil.isAndroidTablet = false;
        EnvUtil.isCocoonJS = false;
        EnvUtil.pixelRatio = 1;
        EnvUtil.colorDepth = -1;
        EnvUtil.screenWidth = -1;
        EnvUtil.screenHeight = -1;
        EnvUtil.isSafari = false;
        EnvUtil.isWebApp = false;
        EnvUtil.isChrome = false;
        EnvUtil.isFirefox = false;
        EnvUtil.isIE = false;
        EnvUtil.hasCookies = false;
        EnvUtil.hasCanvas = false;
        EnvUtil.hasFile = false;
        EnvUtil.hasFileSystem = false;
        EnvUtil.hasLocalStorage = false;
        EnvUtil.hasApplicationCache = false;
        EnvUtil.hasWebGL = false;
        EnvUtil.hasWorker = false;
        EnvUtil.hasWebSQL = false;
        EnvUtil.hasTouch = false;
        EnvUtil.hasCSS3D = false;
        EnvUtil.hasRequestAnimationFrame = false;
        EnvUtil.hasUserMedia = false;
        EnvUtil.hasDeviceMotion = false;
        EnvUtil.hasWebAudio = false;
        EnvUtil.hasAudioTag = false;
        EnvUtil.hasOGG = false;
        EnvUtil.hasMP3 = false;
        EnvUtil.hasWAV = false;
        EnvUtil.hasM4A = false;
        EnvUtil.hasVideoTag = false;
        EnvUtil.hasOGGVid = false;
        EnvUtil.hasH264 = false;
        EnvUtil.hasWEBM = false;
        Object.defineProperty(EnvUtil, "orientation", {
            get: function () {
                return window["orientation"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnvUtil, "isLandscape", {
            get: function () {
                return (EnvUtil.orientation == 90 || EnvUtil.orientation == -90);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnvUtil, "isPortrait", {
            get: function () {
                return (EnvUtil.orientation == 0 || EnvUtil.orientation == 180);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnvUtil, "windowWidth", {
            get: function () {
                return document.documentElement.clientWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnvUtil, "windowHeight", {
            get: function () {
                return document.documentElement.clientHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EnvUtil, "hash", {
            get: function () {
                return window.location.hash;
            },
            enumerable: true,
            configurable: true
        });
        EnvUtil.getURLParameterByName = function getURLParameterByName(name, escapeSpaces) {
            if (typeof escapeSpaces === "undefined") { escapeSpaces = true; }
            var match = new RegExp('[?&]' + name + '=([^&]*)').exec(EnvUtil.querystring);
            return (escapeSpaces) ? match && decodeURIComponent(match[1].replace(/\/+/g, '')) : match && decodeURIComponent(match[1]);
        };
        EnvUtil.getHashParameterByName = function getHashParameterByName(name, escapeSpaces) {
            if (typeof escapeSpaces === "undefined") { escapeSpaces = true; }
            var re = new RegExp("#.*[?&]" + name + "=([^&]+)(&|$)");
            var match = EnvUtil.url.match(re);
            return (match ? match[1] : "");
        };
        EnvUtil._init = false;
        EnvUtil.init = function init() {
            if(EnvUtil._init) {
                return;
            }
            EnvUtil._checkAudio();
            EnvUtil._checkVideo();
            EnvUtil._checkBrowser();
            EnvUtil._checkFeatures();
            EnvUtil._checkPlatform();
            EnvUtil._checkDevice();
            EnvUtil._init = true;
        };
        EnvUtil._checkDevice = function _checkDevice() {
            EnvUtil.pixelRatio = window['devicePixelRatio'] || 1;
            EnvUtil.screenWidth = window.screen.width * EnvUtil.pixelRatio;
            EnvUtil.screenHeight = window.screen.height * EnvUtil.pixelRatio;
            EnvUtil.colorDepth = window.screen.colorDepth;
            if(EnvUtil.isMobile) {
                EnvUtil.screenWidth = window.screen.height * EnvUtil.pixelRatio;
                EnvUtil.screenHeight = window.screen.width * EnvUtil.pixelRatio;
            }
            if(EnvUtil.pixelRatio == 2) {
                EnvUtil.isRetina = true;
            }
        };
        EnvUtil._checkBrowser = function _checkBrowser() {
            var ua = navigator.userAgent;
            EnvUtil.browserVersion = navigator.appVersion.toString();
            if(/Safari/.test(ua)) {
                EnvUtil.browserName = "Safari";
                EnvUtil.isSafari = true;
                EnvUtil.browserVersion = (ua.indexOf("Version") != -1) ? ua.substring(ua.indexOf("Version") + 8) : ua.substring(ua.indexOf("Safari") + 7);
            }
            if(/Mobile(.*)Safari/.test(ua)) {
                EnvUtil.browserName = "MobileSafari";
                EnvUtil.isSafari = true;
                EnvUtil.browserVersion = (ua.indexOf("Version") != -1) ? ua.substring(ua.indexOf("Version") + 8) : ua.substring(ua.indexOf("Safari") + 7);
            }
            if(/Chrome/.test(ua)) {
                EnvUtil.browserName = "Chrome";
                EnvUtil.isChrome = true;
                EnvUtil.isSafari = false;
                EnvUtil.browserVersion = ua.substring(ua.indexOf("Chrome") + 7);
            }
            if(/Firefox/.test(ua)) {
                EnvUtil.browserName = "Firefox";
                EnvUtil.isFirefox = true;
                EnvUtil.browserVersion = ua.substring(ua.indexOf("Firefox") + 8);
            }
            if(/MSIE (\d+\.\d+);/.test(ua)) {
                EnvUtil.browserName = "MSIE";
                EnvUtil.isIE = true;
                EnvUtil.browserVersion = ua.substring(ua.indexOf("MSIE") + 5);
            }
            if(navigator['standalone']) {
                EnvUtil.browserName = "WebApp";
                EnvUtil.isWebApp = true;
            }
            if(navigator['isCocoonJS']) {
                EnvUtil.browserName = "CocoonJS";
                EnvUtil.isCocoonJS = true;
            }
            var index;
            if((index = EnvUtil.browserVersion.indexOf(";")) != -1 || (index = EnvUtil.browserVersion.indexOf(" ")) != -1) {
                EnvUtil.browserVersion = EnvUtil.browserVersion.substring(0, index);
            }
            EnvUtil.browserDetails = {
                name: EnvUtil.browserName,
                version: EnvUtil.browserVersion
            };
            var details = EnvUtil.browserVersion.split(".");
            switch(details.length) {
                case 1:
                    EnvUtil.browserDetails.major = parseInt(details[0]);
                    break;
                case 2:
                    EnvUtil.browserDetails.major = parseInt(details[0]);
                    EnvUtil.browserDetails.minor = parseInt(details[1]);
                    break;
                case 3:
                    EnvUtil.browserDetails.major = parseInt(details[0]);
                    EnvUtil.browserDetails.minor = parseInt(details[1]);
                    EnvUtil.browserDetails.build = parseInt(details[2]);
                    break;
                case 4:
                    EnvUtil.browserDetails.major = parseInt(details[0]);
                    EnvUtil.browserDetails.minor = parseInt(details[1]);
                    EnvUtil.browserDetails.build = parseInt(details[2]);
                    EnvUtil.browserDetails.revision = parseInt(details[3]);
                    break;
            }
            EnvUtil.url = window.location.href;
            EnvUtil.querystring = window.location.search;
            EnvUtil.host = window.location.hostname;
            EnvUtil.path = window.location.pathname;
            EnvUtil.port = window.location.port;
        };
        EnvUtil._checkFeatures = function _checkFeatures() {
            this.hasCookies = ("cookie" in document && (document.cookie.length > 0 || (document.cookie = "__test").indexOf.call(document.cookie, "__test") > -1));
            this.hasCanvas = !!window['CanvasRenderingContext2D'] || EnvUtil.isCocoonJS;
            this.hasLocalStorage = !!window["Storage"];
            this.hasFile = !!window['File'] && !!window['FileReader'] && !!window['FileList'] && !!window['Blob'];
            this.hasFileSystem = !!window['requestFileSystem'];
            this.hasWebGL = !!window['WebGLRenderingContext'];
            this.hasWorker = !!window['Worker'];
            this.hasGeoLocation = 'geolocation' in navigator;
            this.hasWebSQL = !!window['openDatabase'];
            this.hasApplicationCache = !!window['applicationCache'];
            this.hasRequestAnimationFrame = !!window['requestAnimationFrame'];
            this.hasUserMedia = !!(navigator["getUserMedia"]);
            this.hasDeviceMotion = !!(window["DeviceMotionEvent"]);
            if('ontouchstart' in document.documentElement || window.navigator.msPointerEnabled) {
                this.hasTouch = true;
            }
        };
        EnvUtil._checkPlatform = function _checkPlatform() {
            var ua = navigator.userAgent;
            if(/Android/.test(ua)) {
                EnvUtil.platformName = "Android";
                EnvUtil.isAndroid = true;
            }
            if(/CrOS/.test(ua)) {
                EnvUtil.platformName = "ChromeOS";
                EnvUtil.isChromeOS = true;
            }
            if(/iP[ao]d|iPhone/i.test(ua)) {
                EnvUtil.platformName = "iOS";
                EnvUtil.isiOS = true;
            }
            if(/Linux/.test(ua) && !EnvUtil.isAndroid) {
                EnvUtil.platformName = "Linux";
                EnvUtil.isLinux = true;
            }
            if(/Mac OS/.test(ua) && !EnvUtil.isiOS) {
                EnvUtil.platformName = "Mac";
                EnvUtil.isMacOS = true;
            }
            if(/Windows/.test(ua)) {
                EnvUtil.platformName = "Windows";
                EnvUtil.isWindows = true;
            }
            if(/iPad/.test(ua)) {
                EnvUtil.platformName = "iPad";
                EnvUtil.isiPad = true;
            }
            if(/iPhone/.test(ua)) {
                EnvUtil.platformName = "iPhone";
                EnvUtil.isiPhone = true;
            }
            if(/iPod/.test(ua)) {
                EnvUtil.platformName = "iPod";
                EnvUtil.isiPod = true;
            }
            if(EnvUtil.isAndroid && /[.0-9]* Mobile/.test(ua)) {
                EnvUtil.platformName = "AndroidPhone";
                EnvUtil.isAndroidPhone = true;
            }
            if(EnvUtil.isAndroid && /[.0-9]* (?!Mobile)/.test(ua)) {
                EnvUtil.platformName = "AndroidTablet";
                EnvUtil.isAndroidTablet = true;
            }
            if(EnvUtil.isWindows || EnvUtil.isMacOS || EnvUtil.isLinux) {
                EnvUtil.isDesktop = true;
            }
            if(EnvUtil.isAndroid || EnvUtil.isiOS || EnvUtil.isWebApp) {
                EnvUtil.isMobile = true;
            }
        };
        EnvUtil._checkVideo = function _checkVideo() {
            var videoElement = document.createElement('video');
            try  {
                if(EnvUtil.hasVideoTag = !!videoElement.canPlayType) {
                    if(videoElement.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, '')) {
                        this.hasOGGVid = true;
                    }
                    if(videoElement.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, '')) {
                        this.hasH264 = true;
                    }
                    if(videoElement.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '')) {
                        this.hasWEBM = true;
                    }
                }
            } catch (e) {
            }
        };
        EnvUtil._checkAudio = function _checkAudio() {
            var audioElement = document.createElement('audio');
            try  {
                if(EnvUtil.hasAudioTag = !!audioElement.canPlayType) {
                    if(audioElement.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '')) {
                        this.hasOGG = true;
                    }
                    if(audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '')) {
                        this.hasMP3 = true;
                    }
                    if(audioElement.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '')) {
                        this.hasWAV = true;
                    }
                    if(audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) {
                        this.hasM4A = true;
                    }
                }
            } catch (e) {
            }
            if(!!window["AudioContext"]) {
                this.hasWebAudio = true;
            } else if(!!window["webkitAudioContext"]) {
                this.hasWebAudio = true;
            }
        };
        EnvUtil._checkCSS3D = function _checkCSS3D() {
            var el = document.createElement('p');
            var has3d;
            var transforms = {
                'webkitTransform': '-webkit-transform',
                'OTransform': '-o-transform',
                'msTransform': '-ms-transform',
                'MozTransform': '-moz-transform',
                'transform': 'transform'
            };
            document.body.insertBefore(el, null);
            for(var t in transforms) {
                if(el.style[t] !== undefined) {
                    el.style[t] = "translate3d(1px,1px,1px)";
                    has3d = window.getComputedStyle(el).getPropertyValue(transforms[t]);
                }
            }
            document.body.removeChild(el);
            this.hasCSS3D = (has3d !== undefined && has3d.length > 0 && has3d !== "none");
        };
        return EnvUtil;
    })();
    Avota.EnvUtil = EnvUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ObjectUtil = (function () {
        function ObjectUtil() { }
        ObjectUtil.isString = function isString(value) {
            return value !== null && (typeof value == "string" || (typeof value == "object" && value.constructor === String));
        };
        ObjectUtil.isNumber = function isNumber(value) {
            return value !== null && (typeof value == "number" || (typeof value == "object" && value.constructor === Number));
        };
        ObjectUtil.isArray = function isArray(value) {
            return value !== null && (Object.prototype.toString.call(value) === "[object Array]");
        };
        ObjectUtil.isBoolean = function isBoolean(value) {
            return value !== null && (typeof value == "boolean" || (typeof value == "object" && value.constructor === Boolean));
        };
        ObjectUtil.isType = function isType(value, type) {
            return value !== null && value instanceof type;
        };
        ObjectUtil.create = function create(type) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var element;
            if(args && args.length > 0) {
                switch(args.length) {
                    case 1:
                        element = new type(args[0]);
                        break;
                    case 2:
                        element = new type(args[0], args[1]);
                        break;
                    case 3:
                        element = new type(args[0], args[1], args[2]);
                        break;
                    case 4:
                        element = new type(args[0], args[1], args[2], args[3]);
                        break;
                    case 5:
                        element = new type(args[0], args[1], args[2], args[3], args[4]);
                        break;
                        567;
                    case 6:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;
                    case 7:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                        break;
                    case 8:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
                        break;
                    case 9:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
                        break;
                    case 10:
                        element = new type(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
                        break;
                }
            } else {
                element = new type();
            }
            return element;
        };
        return ObjectUtil;
    })();
    Avota.ObjectUtil = ObjectUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ConsoleTarget = (function () {
        function ConsoleTarget(level, filters) {
            this._timeStampOffset = 0;
            this.level = level || 0;
            this.filters = filters || [];
            this._startTime = new Date().getTime();
            if(typeof (console) === "undefined") {
                window["console"] = {
                    log: function () {
                    },
                    info: function () {
                    },
                    warn: function () {
                    },
                    error: function () {
                    }
                };
            }
        }
        ConsoleTarget.prototype.output = function (logMessage) {
            if(logMessage.level >= this.level) {
                if(this.filters.length > 0) {
                    var canOutput = false;
                    for(var i = 0; i < this.filters.length; i++) {
                        if(this.filters[i] == logMessage.category) {
                            canOutput = true;
                        }
                    }
                    if(!canOutput) {
                        return;
                    }
                }
                var output;
                var message = "%c";
                message += "(" + this.getTimeStamp() + ")";
                message += Avota.Log.resolveLevelName(logMessage.level) + " ";
                message += logMessage.category + ": ";
                if(Avota.ObjectUtil.isString(logMessage.message[0]) || Avota.ObjectUtil.isNumber(logMessage.message[0]) || Avota.ObjectUtil.isBoolean(logMessage.message[0])) {
                    message += logMessage.message;
                    output = [
                        message, 
                        "color: " + Avota.Log.getColor(logMessage.level)
                    ];
                } else {
                    output = [
                        logMessage.message[0]
                    ];
                }
                switch(logMessage.level) {
                    default:
                    case Avota.Log.TRACE:
                    case Avota.Log.DEBUG:
                    case Avota.Log.LOG:
                    case Avota.Log.PRINT:
                        if(output.length == 1) {
                            console.log.apply(console, [
                                message, 
                                "color: " + Avota.Log.getColor(logMessage.level)
                            ]);
                        }
                        console.log.apply(console, output);
                        break;
                    case Avota.Log.INFO:
                        if(output.length == 1) {
                            console.info.apply(console, [
                                message, 
                                "color: " + Avota.Log.getColor(logMessage.level)
                            ]);
                        }
                        console.info.apply(console, output);
                        break;
                    case Avota.Log.WARN:
                        if(output.length == 1) {
                            console.warn.apply(console, [
                                message, 
                                "color: " + Avota.Log.getColor(logMessage.level)
                            ]);
                        }
                        console.warn.apply(console, output);
                        break;
                    case Avota.Log.ERROR:
                    case Avota.Log.CRITICAL:
                    case Avota.Log.FATAL:
                        if(output.length == 1) {
                            console.error.apply(console, [
                                message, 
                                "color: " + Avota.Log.getColor(logMessage.level)
                            ]);
                        }
                        console.error.apply(console, output);
                        break;
                }
            }
        };
        ConsoleTarget.prototype.clear = function () {
            this._timeStampOffset = this.getTimer();
        };
        ConsoleTarget.prototype.getTimeStamp = function () {
            return this.getTimer() - this._timeStampOffset;
        };
        ConsoleTarget.prototype.getTimer = function () {
            return (new Date().getTime() - this._startTime);
        };
        ConsoleTarget.prototype.destroy = function () {
            this.filters = null;
        };
        return ConsoleTarget;
    })();
    Avota.ConsoleTarget = ConsoleTarget;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SignalBinding = (function () {
        function SignalBinding(signal, listener, isOnce, listenerContext, priority) {
            if (typeof priority === "undefined") { priority = 0; }
            this.active = true;
            this.params = null;
            this._listener = listener;
            this._isOnce = isOnce;
            this.context = listenerContext;
            this._signal = signal;
            this.priority = priority || 0;
        }
        SignalBinding.prototype.execute = function (paramsArr) {
            var handlerReturn;
            var params;
            if(this.active && !!this._listener) {
                params = this.params ? this.params.concat(paramsArr) : paramsArr;
                handlerReturn = this._listener.apply(this.context, params);
                if(this._isOnce) {
                    this.detach();
                }
            }
            return handlerReturn;
        };
        SignalBinding.prototype.detach = function () {
            return this.isBound() ? this._signal.remove(this._listener, this.context) : null;
        };
        SignalBinding.prototype.isBound = function () {
            return (!!this._signal && !!this._listener);
        };
        SignalBinding.prototype.isOnce = function () {
            return this._isOnce;
        };
        SignalBinding.prototype.getListener = function () {
            return this._listener;
        };
        SignalBinding.prototype.getSignal = function () {
            return this._signal;
        };
        SignalBinding.prototype._destroy = function () {
            delete this._signal;
            delete this._listener;
            delete this.context;
        };
        SignalBinding.prototype.toString = function () {
            return '[SignalBinding isOnce:' + this._isOnce + ', isBound:' + this.isBound() + ', active:' + this.active + ']';
        };
        return SignalBinding;
    })();
    Avota.SignalBinding = SignalBinding;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Signal = (function () {
        function Signal() {
            this._bindings = [];
            this._prevParams = null;
            this.memorize = false;
            this._shouldPropagate = true;
            this.active = true;
        }
        Signal.VERSION = '1.0.0';
        Signal.prototype.validateListener = function (listener, fnName) {
            if(typeof listener !== 'function') {
                throw new Error('listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName));
            }
        };
        Signal.prototype._registerListener = function (listener, isOnce, listenerContext, priority) {
            var prevIndex = this._indexOfListener(listener, listenerContext);
            var binding;
            if(prevIndex !== -1) {
                binding = this._bindings[prevIndex];
                if(binding.isOnce() !== isOnce) {
                    throw new Error('You cannot add' + (isOnce ? '' : 'Once') + '() then add' + (!isOnce ? '' : 'Once') + '() the same listener without removing the relationship first.');
                }
            } else {
                binding = new Avota.SignalBinding(this, listener, isOnce, listenerContext, priority);
                this._addBinding(binding);
            }
            if(this.memorize && this._prevParams) {
                binding.execute(this._prevParams);
            }
            return binding;
        };
        Signal.prototype._addBinding = function (binding) {
            var n = this._bindings.length;
            do {
                --n;
            }while(this._bindings[n] && binding.priority <= this._bindings[n].priority);
            this._bindings.splice(n + 1, 0, binding);
        };
        Signal.prototype._indexOfListener = function (listener, context) {
            var n = this._bindings.length;
            var cur;
            while(n--) {
                cur = this._bindings[n];
                if(cur.getListener() === listener && cur.context === context) {
                    return n;
                }
            }
            return -1;
        };
        Signal.prototype.has = function (listener, context) {
            if (typeof context === "undefined") { context = null; }
            return this._indexOfListener(listener, context) !== -1;
        };
        Signal.prototype.add = function (listener, listenerContext, priority) {
            if (typeof listenerContext === "undefined") { listenerContext = null; }
            if (typeof priority === "undefined") { priority = 0; }
            this.validateListener(listener, 'add');
            return this._registerListener(listener, false, listenerContext, priority);
        };
        Signal.prototype.addOnce = function (listener, listenerContext, priority) {
            if (typeof listenerContext === "undefined") { listenerContext = null; }
            if (typeof priority === "undefined") { priority = 0; }
            this.validateListener(listener, 'addOnce');
            return this._registerListener(listener, true, listenerContext, priority);
        };
        Signal.prototype.remove = function (listener, context) {
            if (typeof context === "undefined") { context = null; }
            this.validateListener(listener, 'remove');
            var i = this._indexOfListener(listener, context);
            if(i !== -1) {
                this._bindings[i]._destroy();
                this._bindings.splice(i, 1);
            }
            return listener;
        };
        Signal.prototype.removeAll = function () {
            var n = this._bindings.length;
            while(n--) {
                this._bindings[n]._destroy();
            }
            this._bindings.length = 0;
        };
        Signal.prototype.getNumListeners = function () {
            return this._bindings.length;
        };
        Signal.prototype.halt = function () {
            this._shouldPropagate = false;
        };
        Signal.prototype.dispatch = function () {
            var paramsArr = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                paramsArr[_i] = arguments[_i + 0];
            }
            if(!this.active) {
                return;
            }
            var n = this._bindings.length;
            var bindings;
            if(this.memorize) {
                this._prevParams = paramsArr;
            }
            if(!n) {
                return;
            }
            bindings = this._bindings.slice(0);
            this._shouldPropagate = true;
            do {
                n--;
            }while(bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
        };
        Signal.prototype.forget = function () {
            this._prevParams = null;
        };
        Signal.prototype.dispose = function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams;
        };
        Signal.prototype.toString = function () {
            return '[Signal active:' + this.active + ' numListeners:' + this.getNumListeners() + ']';
        };
        return Signal;
    })();
    Avota.Signal = Signal;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Context = (function (_super) {
        __extends(Context, _super);
        function Context(name) {
            var _this = this;
            Context.COUNT++;
                _super.call(this, name);
            if(!Avota.Log.getTargetByType(Avota.ConsoleTarget)) {
                Avota.Log.addTarget(new Avota.ConsoleTarget());
            }
            this.name = name || Avota.ClassUtil.getClassName(this) + "_" + Context.COUNT;
            this.DOMContentLoadedSignal = new Avota.Signal();
            this.loadedSignal = new Avota.Signal();
            this.hashChangedSignal = new Avota.Signal();
            this.resizeSignal = new Avota.Signal();
            this.scrollSignal = new Avota.Signal();
            this.activatedSignal = new Avota.Signal();
            this.deactivatedSignal = new Avota.Signal();
            this.beforeUnloadSignal = new Avota.Signal();
            this.unloadSignal = new Avota.Signal();
            this.orientationChangeSignal = new Avota.Signal();
            this.visibilityChangeSignal = new Avota.Signal();
            this.deviceMotionSignal = new Avota.Signal();
            this.deviceOrientationSignal = new Avota.Signal();
            this.enterLandscapeSignal = new Avota.Signal();
            this.enterPortraitSignal = new Avota.Signal();
            Context.registerContext(this, this.name);
            if(document.readyState === "complete" || document.readyState === "interactive") {
                setTimeout(function (event) {
                    return _this._onDOMContentLoaded(event);
                });
            } else {
                this._onDOMLoadedListener = this._onDOMContentLoaded.bind(this);
                document.addEventListener("DOMContentLoaded", this._onDOMLoadedListener, false);
            }
            this._onLoadListener = this._onLoaded.bind(this);
            this._onHashChangeListener = this._onHashChange.bind(this);
            this._onResizeListener = this._onResize.bind(this);
            this._onOrientationChangeListener = this._onOrientationChange.bind(this);
            this._onScrollListener = this._onScroll.bind(this);
            this._onFocusListener = this._onActivated.bind(this);
            this._onBlurListener = this._onDeactivated.bind(this);
            this._onPageShowListener = this._onActivated.bind(this);
            this._onPageHideListener = this._onDeactivated.bind(this);
            this._onBeforeUnloadListener = this._onBeforeUnload.bind(this);
            this._onUnloadListener = this._onUnload.bind(this);
            this._onVisibilityChangeListener = this._onVisibilityChange.bind(this);
            this._onDeviceMotionListener = this._onDeviceMotion.bind(this);
            this._onDeviceOrientationListener = this._onDeviceOrientation.bind(this);
            window.addEventListener("load", this._onLoadListener, false);
            window.addEventListener("hashchange", this._onHashChangeListener, false);
            window.addEventListener("resize", this._onResizeListener, false);
            window.addEventListener("orientationchange", this._onOrientationChangeListener, false);
            window.addEventListener("scroll", this._onScrollListener, false);
            window.addEventListener("focus", this._onFocusListener, false);
            window.addEventListener("blur", this._onBlurListener, false);
            window.addEventListener("pageshow", this._onPageShowListener, false);
            window.addEventListener("pagehide", this._onPageHideListener, false);
            window.addEventListener("beforeunload", this._onBeforeUnloadListener, false);
            window.addEventListener("unload", this._onUnloadListener, false);
            window.addEventListener("devicemotion", this._onDeviceMotionListener, false);
            window.addEventListener("deviceorientation", this._onDeviceOrientationListener, false);
            var vendors = [
                "", 
                "ms", 
                "moz", 
                "webkit", 
                "o"
            ];
            for(var i = 0; i < vendors.length; i++) {
                if((vendors[i] + "Hidden") in document) {
                    document.addEventListener(vendors[i] + "visibilitychange", this._onVisibilityChangeListener, false);
                    break;
                }
            }
        }
        Context.COUNT = 0;
        Context.NAME = "Context";
        Context.registerContext = function registerContext(context, name) {
            if(Context._contexts == undefined) {
                Context._contexts = {
                };
            }
            if(Context._contexts[name]) {
                throw new Error("Unable to register context, Context:" + name + " already exists.");
                return;
            }
            Context._contexts[name] = context;
            if(LOGGING) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.DEBUG, "[Context]", "Context Registered: " + name));
            }
        };
        Context.unregisterContext = function unregisterContext(name) {
            Context._contexts[name] = null;
            delete Context._contexts[name];
            if(LOGGING) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.DEBUG, "[Context]", "Context Unregistered: " + name));
            }
        };
        Context.getContext = function getContext(name) {
            return Context._contexts[name];
        };
        Context.getAllContexts = function getAllContexts() {
            var results = [];
            for(var key in Context._contexts) {
                results.push(Context._contexts[key]);
            }
            return results;
        };
        Context.destroy = function destroy() {
            for(var key in Context._contexts) {
                var context = Context._contexts[key];
                if(!context.destroyed) {
                    context.destroy();
                }
                Context._contexts[key] = null;
                delete Context._contexts[key];
            }
            Context._contexts = null;
            Context.COUNT = 0;
        };
        Context.prototype.create = function (type) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var element = _super.prototype.create.apply(this, [
                type
            ].concat(args));
            if(element.context != this) {
                element.context = this;
            }
            return element;
        };
        Context.prototype._onDOMContentLoaded = function (event) {
            document.removeEventListener("DOMContentLoaded", this._onDOMLoadedListener);
            if(LOGGING) {
                this._log.log("DOM Ready");
            }
            this.DOMContentLoadedSignal.dispatch(event);
        };
        Context.prototype._onLoaded = function (event) {
            if(LOGGING) {
                this._log.log("Loaded");
            }
            self.focus();
            this.loadedSignal.dispatch(event);
        };
        Context.prototype._onHashChange = function (event) {
            if(LOGGING) {
                this._log.log("Hash Changed");
            }
            this.hashChangedSignal.dispatch(event);
        };
        Context.prototype._onResize = function (event) {
            this.resizeSignal.dispatch(event);
        };
        Context.prototype._onOrientationChange = function (event) {
            if(LOGGING) {
                this._log.log("Orientation Changed: " + Avota.EnvUtil.orientation);
            }
            this.orientationChangeSignal.dispatch(Avota.EnvUtil.orientation);
            if(Avota.EnvUtil.isLandscape) {
                this.enterLandscapeSignal.dispatch();
            }
            if(Avota.EnvUtil.isPortrait) {
                this.enterPortraitSignal.dispatch();
            }
        };
        Context.prototype._onScroll = function (event) {
            this.scrollSignal.dispatch(event);
        };
        Context.prototype._onActivated = function (event) {
            if(LOGGING) {
                this._log.log("Activated");
            }
            this.activatedSignal.dispatch(event);
        };
        Context.prototype._onDeactivated = function (event) {
            if(LOGGING) {
                this._log.log("Deactivated");
            }
            this.deactivatedSignal.dispatch(event);
        };
        Context.prototype._onVisibilityChange = function (event) {
            var hidden = document["hidden"];
            var vendors = [
                "ms", 
                "moz", 
                "webkit", 
                "o"
            ];
            for(var i = 0; i < vendors.length; i++) {
                if(typeof document[vendors[i] + "Hidden"] != "undefined") {
                    hidden = document[vendors[i] + "Hidden"];
                }
            }
            if(LOGGING) {
                this._log.log("VisiblityChange: " + ((hidden) ? "Hidden" : "Visible"));
            }
            this.visibilityChangeSignal.dispatch(hidden);
        };
        Context.prototype._onDeviceMotion = function (event) {
            this.deviceMotionSignal.dispatch(event);
        };
        Context.prototype._onDeviceOrientation = function (event) {
            this.deviceOrientationSignal.dispatch(event);
        };
        Context.prototype._onBeforeUnload = function (event) {
            if(LOGGING) {
                this._log.log("Before Unload");
            }
            this.beforeUnloadSignal.dispatch(event);
        };
        Context.prototype._onUnload = function (event) {
            if(LOGGING) {
                this._log.log("Unload");
            }
            this.unloadSignal.dispatch(event);
        };
        Context.prototype.destroy = function () {
            window.removeEventListener("load", this._onLoadListener);
            window.removeEventListener("hashchange", this._onHashChangeListener);
            window.removeEventListener("resize", this._onResizeListener);
            window.removeEventListener("orientationchange", this._onOrientationChangeListener, false);
            window.removeEventListener("scroll", this._onScrollListener);
            window.removeEventListener("focus", this._onFocusListener);
            window.removeEventListener("blur", this._onBlurListener);
            window.removeEventListener("beforeunload", this._onBeforeUnloadListener);
            window.removeEventListener("unload", this._onUnloadListener);
            window.removeEventListener("devicemotion", this._onDeviceMotionListener);
            window.removeEventListener("deviceorientation", this._onDeviceOrientationListener);
            document.removeEventListener("DOMContentLoaded", this._onDOMLoadedListener);
            var vendors = [
                "ms", 
                "moz", 
                "webkit", 
                "o"
            ];
            for(var i = 0; i < vendors.length; i++) {
                document.removeEventListener(vendors[i] + "visibilitychange", this._onVisibilityChangeListener, false);
            }
            Context.unregisterContext(this.name);
            this.DOMContentLoadedSignal.removeAll();
            this.loadedSignal.removeAll();
            this.hashChangedSignal.removeAll();
            this.resizeSignal.removeAll();
            this.scrollSignal.removeAll();
            this.activatedSignal.removeAll();
            this.deactivatedSignal.removeAll();
            this.beforeUnloadSignal.removeAll();
            this.unloadSignal.removeAll();
            this.orientationChangeSignal.removeAll();
            this.visibilityChangeSignal.removeAll();
            this.deviceMotionSignal.removeAll();
            this.deviceOrientationSignal.removeAll();
            this.enterLandscapeSignal.removeAll();
            this.enterPortraitSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.DOMContentLoadedSignal = null;
            this.loadedSignal = null;
            this.hashChangedSignal = null;
            this.resizeSignal = null;
            this.scrollSignal = null;
            this.activatedSignal = null;
            this.deactivatedSignal = null;
            this.beforeUnloadSignal = null;
            this.unloadSignal = null;
            this.orientationChangeSignal = null;
            this.visibilityChangeSignal = null;
            this.enterLandscapeSignal = null;
            this.enterPortraitSignal = null;
            this.deviceMotionSignal = null;
            this.deviceOrientationSignal = null;
            this._onDOMLoadedListener = null;
            this._onLoadListener = null;
            this._onHashChangeListener = null;
            this._onResizeListener = null;
            this._onOrientationChangeListener = null;
            this._onScrollListener = null;
            this._onFocusListener = null;
            this._onBlurListener = null;
            this._onPageShowListener = null;
            this._onPageHideListener = null;
            this._onBeforeUnloadListener = null;
            this._onUnloadListener = null;
            this._onVisibilityChangeListener = null;
            this._onDeviceMotionListener = null;
            this._onDeviceOrientationListener = null;
            var count = 0;
            for(var key in Context._contexts) {
                count++;
            }
            if(count == 0) {
                Context.destroy();
            }
        };
        return Context;
    })(Avota.Group);
    Avota.Context = Context;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Component = (function (_super) {
        __extends(Component, _super);
        function Component() {
                _super.call(this);
        }
        Object.defineProperty(Component.prototype, "owner", {
            get: function () {
                return this._owner;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "isRegistered", {
            get: function () {
                return this._owner != undefined;
            },
            enumerable: true,
            configurable: true
        });
        Component.prototype.register = function (owner, name) {
            if(this.isRegistered) {
                if(LOGGING) {
                    this._log.error(name + " is already registered with " + this._owner.name);
                }
                return;
            }
            this._owner = owner;
            this.name = name;
            this._onRegister();
        };
        Component.prototype.unregister = function () {
            if(!this.isRegistered) {
                if(LOGGING) {
                    this._log.error(this.name + " is not registered");
                }
                return;
            }
            this._onUnregister();
            this._owner = null;
        };
        Component.prototype.reset = function () {
            this._onReset();
        };
        Component.prototype._onRegister = function () {
            if(LOGGING) {
                this._log.debug("Registered to " + this._owner.name + ", as " + this.name);
            }
        };
        Component.prototype._onUnregister = function () {
            if(LOGGING) {
                this._log.debug("Unregistered from " + this._owner.name);
            }
        };
        Component.prototype._onReset = function () {
            if(LOGGING) {
                this._log.trace("Reset");
            }
        };
        Component.prototype.destroy = function () {
            if(this.isRegistered) {
                this.unregister();
            }
            this._owner = null;
            _super.prototype.destroy.call(this);
        };
        return Component;
    })(Avota.Group);
    Avota.Component = Component;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Entity = (function (_super) {
        __extends(Entity, _super);
        function Entity(name) {
                _super.call(this, name);
            this._components = {
            };
        }
        Entity.prototype.addComponent = function (component, name) {
            if(component.owner || this._components[name]) {
                if(LOGGING) {
                    this._log.warn(name + " is already registered with " + component.owner.name);
                }
                return;
            }
            this._components[name] = component;
            component.register(this, name);
            this._resetComponents();
        };
        Entity.prototype.removeComponent = function (component) {
            if(!component || component.owner != this || !this._components[component.name]) {
                if(LOGGING) {
                    this._log.warn(component.name + " is not registered with this entity");
                }
                return;
            }
            this._components[component.name] = null;
            delete this._components[component.name];
            component.unregister();
            this._resetComponents();
        };
        Entity.prototype.removeComponentByName = function (name) {
            var component = this.getComponent(name);
            if(!component || component.owner != this || !this._components[component.name]) {
                if(LOGGING) {
                    this._log.warn(component.name + " is not registered with this entity");
                }
                return;
            }
            this._components[component.name] = null;
            delete this._components[component.name];
            component.unregister();
            this._resetComponents();
        };
        Entity.prototype.getComponent = function (name) {
            return this._components[name];
        };
        Entity.prototype.getComponentByType = function (type) {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(component instanceof type) {
                    return component;
                }
            }
            return null;
        };
        Entity.prototype.getComponentsByType = function (type) {
            var component;
            var results = [];
            for(var key in this._components) {
                component = this._components[key];
                if(component instanceof type) {
                    results.push(component);
                }
            }
            return results;
        };
        Entity.prototype.getComponents = function () {
            var results = [];
            for(var key in this._components) {
                results.push(this._components[key]);
            }
            return results;
        };
        Entity.prototype._registerComponents = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(!component.isRegistered) {
                    component.register(this, component.name);
                }
            }
            this._resetComponents();
        };
        Entity.prototype._resetComponents = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                component.reset();
            }
        };
        Entity.prototype.destroy = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(component && !component.destroyed) {
                    component.destroy();
                }
                this._components[key] = null;
                delete this._components[key];
            }
            this._components = null;
            _super.prototype.destroy.call(this);
        };
        return Entity;
    })(Avota.Group);
    Avota.Entity = Entity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var BitMaskManager = (function (_super) {
        __extends(BitMaskManager, _super);
        function BitMaskManager(name) {
            if (typeof name === "undefined") { name = BitMaskManager.NAME; }
                _super.call(this, name);
            this._typeCount = 0;
            this._typeList = {
            };
            this._bitList = [];
            this._bitMasks = {
            };
        }
        BitMaskManager.NAME = "BitMaskManager";
        BitMaskManager.NUM_TYPES = 64;
        Object.defineProperty(BitMaskManager.prototype, "typeCount", {
            get: function () {
                return this._typeCount;
            },
            enumerable: true,
            configurable: true
        });
        BitMaskManager.prototype.getBitMask = function (type) {
            var result;
            var bitType = (type) ? type.toString() : "default";
            if(this._bitMasks[bitType]) {
                result = this._bitMasks[bitType];
            } else {
                result = this.create(Avota.BitMask, this, type);
                result.name = "BitMask_" + bitType;
                this._bitMasks[bitType] = result;
            }
            return result;
        };
        BitMaskManager.prototype.getType = function (maskName) {
            if(this._typeList[maskName] == null) {
                if(this.typeCount < BitMaskManager.NUM_TYPES) {
                    this._typeList[maskName] = this._typeCount;
                    this._bitList[1 << this._typeCount] = maskName;
                    this._typeCount++;
                } else {
                    if(LOGGING) {
                        this._log.error("Only " + BitMaskManager.NUM_TYPES + " types can be created");
                    }
                }
            }
            return 1 << this._typeList[maskName];
        };
        BitMaskManager.prototype.getTypeName = function (value) {
            return this._bitList[value];
        };
        BitMaskManager.prototype.doesTypeMatch = function (type, name) {
            return type.bits == (1 << this._typeList[name]);
        };
        BitMaskManager.prototype.doesTypeOverlap = function (type, name) {
            return (type.bits & (1 << this._typeList[name])) != 0;
        };
        BitMaskManager.prototype.doTypesMatch = function (type1, type2) {
            return type1.bits == type2.bits;
        };
        BitMaskManager.prototype.doTypesOverlap = function (type1, type2) {
            return (type1.bits & type2.bits) != 0;
        };
        BitMaskManager.prototype.destroy = function () {
            var key;
            for(key in this._typeList) {
                this._typeList[key] = null;
                delete this._typeList[key];
            }
            for(key in this._bitMasks) {
                this._bitMasks[key] = null;
                delete this._bitMasks[key];
            }
            this._typeList = null;
            this._bitList = null;
            this._bitMasks = null;
            _super.prototype.destroy.call(this);
        };
        return BitMaskManager;
    })(Avota.Group);
    Avota.BitMaskManager = BitMaskManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var BitMask = (function (_super) {
        __extends(BitMask, _super);
        function BitMask(typeManager, type) {
                _super.call(this);
            this._typeManager = typeManager;
            if(Object.prototype.toString.call(type) === "[object String]") {
                this.typeName = type;
            }
            if(Object.prototype.toString.call(type) === "[object Array]") {
                this.typeNames = type;
            }
        }
        Object.defineProperty(BitMask.prototype, "typeManager", {
            get: function () {
                return this._typeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitMask.prototype, "bits", {
            get: function () {
                return this._bits;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitMask.prototype, "typeName", {
            get: function () {
                var name;
                for(var i = 0; i < this._typeManager.typeCount; i++) {
                    if(this._bits & (1 << i)) {
                        name = this._typeManager.getTypeName(1 << i);
                    }
                }
                return name;
            },
            set: function (value) {
                this._bits = this._typeManager.getType(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BitMask.prototype, "typeNames", {
            get: function () {
                var names = [];
                for(var i = 0; i < this._typeManager.typeCount; i++) {
                    if(this._bits & (1 << i)) {
                        names.push(this._typeManager.getTypeName(1 << i));
                    }
                }
                return names;
            },
            set: function (value) {
                this._bits = 0;
                for(var i = 0; i < value.length; i++) {
                    this._bits |= this._typeManager.getType(value[i]);
                }
            },
            enumerable: true,
            configurable: true
        });
        BitMask.prototype.destroy = function () {
            this._typeManager = null;
            _super.prototype.destroy.call(this);
        };
        return BitMask;
    })(Avota.Element);
    Avota.BitMask = BitMask;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SharedData = (function (_super) {
        __extends(SharedData, _super);
        function SharedData(name) {
            if (typeof name === "undefined") { name = SharedData.NAME; }
                _super.call(this, name);
            this._data = {
            };
        }
        SharedData.NAME = "SharedData";
        SharedData.prototype.write = function (name, value) {
            this._data[name] = value;
        };
        SharedData.prototype.read = function (name) {
            return this._data[name];
        };
        SharedData.prototype.destroy = function () {
            for(var prop in this._data) {
                this._data[prop] = null;
                delete this._data[prop];
            }
            this._data = null;
            _super.prototype.destroy.call(this);
        };
        return SharedData;
    })(Avota.Element);
    Avota.SharedData = SharedData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RenderCanvas = (function (_super) {
        __extends(RenderCanvas, _super);
        function RenderCanvas(parent, width, height, name) {
            if (typeof name === "undefined") { name = RenderCanvas.NAME; }
                _super.call(this, name);
            this.canvas = document.createElement((Avota.EnvUtil.isCocoonJS) ? 'screencanvas' : 'canvas');
            this.canvas.width = width;
            this.canvas.height = height;
            this.canvas.style["-webkit-transform"] = "translate3d(0,0,0)";
            this.canvas.style["-moz-transform"] = "translate3d(0,0,0)";
            this.canvas.style["-ms-transform"] = "translate3d(0,0,0)";
            this.canvas.style["-o-transform"] = "translate3d(0,0,0)";
            this.canvas.style["-transform"] = "translate3d(0,0,0)";
            this.canvas.oncontextmenu = function (event) {
                event.preventDefault();
            };
            if(document.getElementById(parent)) {
                document.getElementById(parent).innerHTML = "";
                document.getElementById(parent).appendChild(this.canvas);
                document.getElementById(parent).style.overflow = "hidden";
            } else {
                document.body.appendChild(this.canvas);
            }
            this.renderContext = this.canvas.getContext("2d");
            this.canvasScale = new Avota.Point(1, 1);
            this.offset = Avota.DOMUtil.getOffset(this.canvas);
            this.bounds = new Avota.Rectangle(this.offset.x, this.offset.y, width, height);
        }
        RenderCanvas.NAME = "RenderCanvas";
        Object.defineProperty(RenderCanvas.prototype, "x", {
            get: function () {
                return this.bounds.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "y", {
            get: function () {
                return this.bounds.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "width", {
            get: function () {
                return this.bounds.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "height", {
            get: function () {
                return this.bounds.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "centerX", {
            get: function () {
                return this.bounds.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "centerY", {
            get: function () {
                return this.bounds.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "alpha", {
            get: function () {
                return this.renderContext.globalAlpha;
            },
            set: function (value) {
                this.renderContext.globalAlpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "backgroundColor", {
            get: function () {
                return this._bgColor;
            },
            set: function (color) {
                this._bgColor = color;
                this.canvas.style.backgroundColor = this._bgColor;
            },
            enumerable: true,
            configurable: true
        });
        RenderCanvas.prototype.setSize = function (width, height) {
            this.clear();
            this.canvas.width = width;
            this.canvas.height = height;
        };
        RenderCanvas.prototype.translate = function (x, y) {
            this.renderContext.translate(x, y);
        };
        RenderCanvas.prototype.rotate = function (r) {
            this.renderContext.rotate(r);
        };
        RenderCanvas.prototype.scale = function (x, y) {
            this.renderContext.scale(x, y);
        };
        RenderCanvas.prototype.setTransform = function (a, b, c, d, tx, ty) {
            this.renderContext.setTransform(a, b, c, d, tx, ty);
        };
        RenderCanvas.prototype.drawImage = function (image, sx, sy, sw, sh, dx, dy, dw, dh) {
            this.renderContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
        };
        RenderCanvas.prototype.getImageData = function (x, y, width, height) {
            return this.renderContext.getImageData(x, y, width, height);
        };
        RenderCanvas.prototype.putImageData = function (imageData, x, y, dx, dy, dw, dh) {
            this.renderContext.putImageData(imageData, x, y, dx, dy, dw, dh);
        };
        RenderCanvas.prototype.createImageData = function (width, height) {
            return this.renderContext.createImageData(width, height);
        };
        Object.defineProperty(RenderCanvas.prototype, "globalCompositeOperation", {
            get: function () {
                return this.renderContext.globalCompositeOperation;
            },
            set: function (value) {
                this.renderContext.globalCompositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "fillStyle", {
            get: function () {
                return this.renderContext.fillStyle;
            },
            set: function (value) {
                this.renderContext.fillStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "strokeStyle", {
            get: function () {
                return this.renderContext.strokeStyle;
            },
            set: function (value) {
                this.renderContext.strokeStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "lineWidth", {
            get: function () {
                return this.renderContext.lineWidth;
            },
            set: function (value) {
                this.renderContext.lineWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderCanvas.prototype, "font", {
            get: function () {
                return this.renderContext.font;
            },
            set: function (value) {
                this.renderContext.font = value;
            },
            enumerable: true,
            configurable: true
        });
        RenderCanvas.prototype.clip = function () {
            this.renderContext.clip();
        };
        RenderCanvas.prototype.beginPath = function () {
            this.renderContext.beginPath();
        };
        RenderCanvas.prototype.closePath = function () {
            this.renderContext.closePath();
        };
        RenderCanvas.prototype.rect = function (x, y, width, height) {
            this.renderContext.rect(x, y, width, height);
        };
        RenderCanvas.prototype.arc = function (x, y, radius, startAngle, endAngle, antiClockwise) {
            this.renderContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
        };
        RenderCanvas.prototype.moveTo = function (x, y) {
            this.renderContext.moveTo(x, y);
        };
        RenderCanvas.prototype.lineTo = function (x, y) {
            this.renderContext.lineTo(x, y);
        };
        RenderCanvas.prototype.arcTo = function (x1, y1, x2, y2, radius) {
            this.renderContext.arcTo(x1, y1, x2, y2, radius);
        };
        RenderCanvas.prototype.fill = function () {
            this.renderContext.fill();
        };
        RenderCanvas.prototype.fillRect = function (x, y, width, height) {
            this.renderContext.fillRect(x, y, width, height);
        };
        RenderCanvas.prototype.fillText = function (text, x, y, maxWidth) {
            this.renderContext.fillText(text, x, y, maxWidth);
        };
        RenderCanvas.prototype.stroke = function () {
            this.renderContext.stroke();
        };
        RenderCanvas.prototype.strokeRect = function (x, y, width, height) {
            this.renderContext.strokeRect(x, y, width, height);
        };
        RenderCanvas.prototype.strokeText = function (text, x, y, maxWidth) {
            this.renderContext.strokeText(text, x, y, maxWidth);
        };
        RenderCanvas.prototype.clearRect = function (x, y, width, height) {
            this.renderContext.clearRect(x, y, width, height);
        };
        RenderCanvas.prototype.createLinearGradient = function (x1, y1, x2, y2) {
            this.renderContext.createLinearGradient(x1, y1, x2, y2);
        };
        RenderCanvas.prototype.createRadialGradient = function (x1, y1, r1, x2, y2, r2) {
            this.renderContext.createRadialGradient(x1, y1, r1, x2, y2, r2);
        };
        RenderCanvas.prototype.createPattern = function (image, repeat) {
            this.renderContext.createPattern(image, repeat);
        };
        RenderCanvas.prototype.clear = function () {
            this.renderContext.clearRect(0, 0, this.width, this.height);
        };
        RenderCanvas.prototype.save = function () {
            this.renderContext.save();
        };
        RenderCanvas.prototype.restore = function () {
            this.renderContext.restore();
        };
        RenderCanvas.prototype.destroy = function () {
            this.clear();
            this.canvas = null;
            this.renderContext = null;
            this.offset = null;
            this.bounds = null;
            _super.prototype.destroy.call(this);
        };
        return RenderCanvas;
    })(Avota.Element);
    Avota.RenderCanvas = RenderCanvas;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TimeManager = (function (_super) {
        __extends(TimeManager, _super);
        function TimeManager(tickRate, useInternalUpdate, name) {
            if (typeof tickRate === "undefined") { tickRate = TimeManager.DEFAULT_TICKRATE; }
            if (typeof useInternalUpdate === "undefined") { useInternalUpdate = true; }
            if (typeof name === "undefined") { name = TimeManager.NAME; }
                _super.call(this, name);
            this._tickRate = tickRate;
            this._useInternalUpdate = useInternalUpdate;
            this._deferredMethods = [];
            this._timeManagers = [];
            this._runningTimeManagers = [];
            this.startSignal = new Avota.Signal();
            this.stopSignal = new Avota.Signal();
            this.tick = new Avota.Signal();
            this.preTick = new Avota.Signal();
            this.postTick = new Avota.Signal();
            this.frame = new Avota.Signal();
            this.preFrame = new Avota.Signal();
            this.postFrame = new Avota.Signal();
            this._tickMS = 1000 / this._tickRate;
            this._tickCap = this._tickMS * 4;
            this._intervalScale = 1;
            this._virtualTime = 0;
            this._lastTime = -1;
            this._isRunning = false;
            if(DEBUG) {
                this._profiler = this.create(Avota.Profiler, name + "Profiler");
            }
        }
        TimeManager.NAME = "TimeManager";
        TimeManager.DEFAULT_TICKRATE = 60;
        Object.defineProperty(TimeManager.prototype, "platformTime", {
            get: function () {
                return this._currentTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeManager.prototype, "virtualTime", {
            get: function () {
                return this._virtualTime;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeManager.prototype, "isRunning", {
            get: function () {
                return this._isRunning;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeManager.prototype, "tickRate", {
            get: function () {
                return this._tickRate;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeManager.prototype, "tickMS", {
            get: function () {
                return this._tickMS;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimeManager.prototype, "intervalScale", {
            get: function () {
                return this._intervalScale;
            },
            set: function (value) {
                this._intervalScale = value;
                for(var i = 0; i < this._timeManagers.length; i++) {
                    this._timeManagers[i].intervalScale *= value;
                }
            },
            enumerable: true,
            configurable: true
        });
        TimeManager.prototype.start = function () {
            var _this = this;
            if(this._isRunning) {
                return;
            }
            if(this._useInternalUpdate) {
                this._timeoutID = window.requestAnimationFrame(function () {
                    return _this.onRequestAnimationFrame();
                });
            }
            if(this._runningTimeManagers.length > 0) {
                for(var i = 0; i < this._runningTimeManagers.length; i++) {
                    this._runningTimeManagers[i].start();
                }
                this._runningTimeManagers = [];
            } else {
                for(var i = 0; i < this._timeManagers.length; i++) {
                    this._timeManagers[i].start();
                }
            }
            if(DEBUG) {
                this._profiler.add("tick", "rgb(0,128,0)");
                this._profiler.add("frame", "rgb(128,0,0)");
                this._profiler.add("update", "rgb(0,128,0)");
                this._profiler.add("system", "rgb(128,128,0)");
            }
            this._isRunning = true;
            this._lastTime = -1;
            this._prevTime = window.performance.now();
            this.startSignal.dispatch();
            if(LOGGING) {
                this._log.log(this.name + " Started");
            }
        };
        TimeManager.prototype.stop = function () {
            if(!this._isRunning) {
                return;
            }
            if(this._useInternalUpdate) {
                window.cancelAnimationFrame(this._timeoutID);
            }
            for(var i = 0; i < this._timeManagers.length; i++) {
                if(this._timeManagers[i].isRunning) {
                    this._runningTimeManagers.push(this._timeManagers[i]);
                }
                this._timeManagers[i].stop();
            }
            this._isRunning = false;
            this.stopSignal.dispatch();
            if(LOGGING) {
                this._log.log(this.name + " Stopped");
            }
        };
        TimeManager.prototype.getTimeManager = function (name, priority, tickRate) {
            if (typeof name === "undefined") { name = null; }
            if (typeof priority === "undefined") { priority = 0; }
            if (typeof tickRate === "undefined") { tickRate = this.tickRate; }
            var timeManager;
            for(var i = 0; i < this._timeManagers.length; i++) {
                if(this._timeManagers[i].name == name) {
                    timeManager = this._timeManagers[i];
                    break;
                }
            }
            if(!timeManager) {
                timeManager = this.create(TimeManager, tickRate, false, name);
                timeManager.intervalScale *= this.intervalScale;
                this._timeManagers.push(timeManager);
            }
            this.addTickedObject(timeManager, priority);
            return timeManager;
        };
        TimeManager.prototype.releaseTimeManager = function (timeManager, destroy) {
            if (typeof destroy === "undefined") { destroy = true; }
            if(this._runningTimeManagers.indexOf(timeManager) != -1) {
                this._runningTimeManagers.splice(this._runningTimeManagers.indexOf(timeManager), 1);
            }
            this.removeTickedObject(timeManager);
            timeManager.reset();
            if(destroy) {
                if(this._timeManagers.indexOf(timeManager) != -1) {
                    this._timeManagers.splice(this._timeManagers.indexOf(timeManager), 1);
                }
                timeManager.destroy();
            }
        };
        TimeManager.prototype.addTickedObject = function (object, priority) {
            if (typeof priority === "undefined") { priority = 0; }
            this.tick.add(object.onTick, object, priority);
        };
        TimeManager.prototype.removeTickedObject = function (object) {
            this.tick.remove(object.onTick, object);
        };
        TimeManager.prototype.addAnimatedObject = function (object, priority) {
            if (typeof priority === "undefined") { priority = 0; }
            this.frame.add(object.onFrame, object, priority);
        };
        TimeManager.prototype.removeAnimatedObject = function (object) {
            this.frame.remove(object.onFrame, object);
        };
        TimeManager.prototype.callLater = function (method, delay) {
            if (typeof delay === "undefined") { delay = 1; }
            var id = DeferredMethod.COUNT++;
            this._deferredMethods.push(new DeferredMethod(id, method, this._virtualTime + delay));
            return id;
        };
        TimeManager.prototype.removeCallLater = function (id) {
            var deferredMethod;
            for(var i = 0; i < this._deferredMethods.length; i++) {
                deferredMethod = this._deferredMethods[i];
                if(!deferredMethod) {
                    continue;
                }
                if(deferredMethod.id == id) {
                    deferredMethod.method = null;
                    deferredMethod.args = null;
                    this._deferredMethods[i] = null;
                    this._deferredMethods.splice(i, 1);
                }
            }
        };
        TimeManager.prototype.removeAllCallLaters = function () {
            this._deferredMethods = [];
        };
        TimeManager.prototype.onTick = function (delta) {
            this._update();
        };
        TimeManager.prototype.onRequestAnimationFrame = function () {
            var _this = this;
            this._update();
            this._timeoutID = window.requestAnimationFrame(function () {
                return _this.onRequestAnimationFrame();
            });
        };
        TimeManager.prototype._update = function () {
            if(!this._isRunning) {
                return;
            }
            if(DEBUG) {
                this._profiler.end("system");
            }
            this._currentTime = window.performance.now();
            if(this._lastTime < 0) {
                this._lastTime = this._currentTime;
                return;
            }
            this._deltaTime = this._currentTime - this._prevTime;
            this._frameTime = this.clamp(this._currentTime - this._lastTime, this._tickMS, this._tickCap);
            if(this._deltaTime > this._tickMS) {
                if(this._isRunning) {
                    this._advance(this._frameTime * this._intervalScale);
                }
                this._prevTime = this._currentTime - (this._deltaTime % this._tickMS);
            }
            this._lastTime = this._currentTime;
            if(DEBUG && this._profiler) {
                this._profiler.begin("system", Math.max(this._tickMS - (window.performance.now() - this._currentTime), 0));
            }
        };
        TimeManager.prototype._advance = function (delta) {
            this._virtualTime += delta;
            for(var i = this._deferredMethods.length - 1; i >= 0; i--) {
                this._deferredMethod = this._deferredMethods[i];
                if(!this._deferredMethod || !this._deferredMethod.method) {
                    continue;
                }
                if(this._deferredMethod.due < this._virtualTime) {
                    this._deferredMethod.method.apply(null, this._deferredMethod.args);
                    if(!this._deferredMethod || !(this._deferredMethods.length > 0)) {
                        return;
                    }
                    this._deferredMethod.method = null;
                    this._deferredMethod.args = null;
                    this._deferredMethods[i] = null;
                    this._deferredMethods.splice(i, 1);
                }
                this._deferredMethod = null;
            }
            if(DEBUG) {
                this._profiler.begin("tick");
            }
            this.preTick.dispatch();
            this.tick.dispatch(delta / 1000);
            this.postTick.dispatch();
            if(DEBUG) {
                this._profiler.end("tick");
            }
            if(DEBUG) {
                this._profiler.begin("frame");
            }
            this.preFrame.dispatch();
            this.frame.dispatch(delta / 1000);
            this.postFrame.dispatch();
            if(DEBUG) {
                this._profiler.end("frame");
            }
            if(DEBUG) {
                this._profiler.end("update");
                this._profiler.begin("update");
            }
        };
        TimeManager.prototype.reset = function () {
            for(var i = this._timeManagers.length - 1; i >= 0; i--) {
                this.releaseTimeManager(this._timeManagers[i]);
            }
            this.stop();
            this.startSignal.removeAll();
            this.stopSignal.removeAll();
            this.tick.removeAll();
            this.preTick.removeAll();
            this.postTick.removeAll();
            this.frame.removeAll();
            this.preFrame.removeAll();
            this.postFrame.removeAll();
            this._deferredMethods = [];
        };
        TimeManager.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        TimeManager.prototype.destroy = function () {
            this.reset();
            _super.prototype.destroy.call(this);
            this._timeManagers = null;
            this._runningTimeManagers = null;
            this.startSignal = null;
            this.stopSignal = null;
            this.tick = null;
            this.preTick = null;
            this.postTick = null;
            this.frame = null;
            this.preFrame = null;
            this.postFrame = null;
            this._deferredMethods = null;
            this._deferredMethod = null;
            this._profiler = null;
        };
        return TimeManager;
    })(Avota.Group);
    Avota.TimeManager = TimeManager;    
    var DeferredMethod = (function () {
        function DeferredMethod(id, method, due, args) {
            if (typeof due === "undefined") { due = 1; }
            this.id = id;
            this.method = method;
            this.due = due;
            this.args = args;
        }
        DeferredMethod.COUNT = 0;
        return DeferredMethod;
    })();
    Avota.DeferredMethod = DeferredMethod;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AnimatedComponent = (function (_super) {
        __extends(AnimatedComponent, _super);
        function AnimatedComponent(timeManager) {
                _super.call(this);
            this._timeManager = timeManager;
            this.priority = 0;
        }
        AnimatedComponent.prototype.onFrame = function (delta) {
        };
        AnimatedComponent.prototype._onRegister = function () {
            this._timeManager.addAnimatedObject(this, this.priority);
            _super.prototype._onRegister.call(this);
        };
        AnimatedComponent.prototype._onUnregister = function () {
            this._timeManager.removeAnimatedObject(this);
            _super.prototype._onUnregister.call(this);
        };
        AnimatedComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._timeManager = null;
        };
        return AnimatedComponent;
    })(Avota.Component);
    Avota.AnimatedComponent = AnimatedComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RenderComponent = (function (_super) {
        __extends(RenderComponent, _super);
        function RenderComponent(timeManager, renderManager, view, spatialReference) {
            if (typeof spatialReference === "undefined") { spatialReference = Avota.EngineConstants.SPATIAL; }
                _super.call(this, timeManager);
            this._renderManager = renderManager;
            this._spatialReference = spatialReference;
            this._worldTransform = new Avota.Matrix();
            this._localTransform = new Avota.Matrix();
            this._position = new Avota.Point();
            this._registration = new Avota.Point();
            this._center = new Avota.Point();
            this._offset = new Avota.Point();
            this._extents = new Avota.Rectangle();
            this._localTransform.identity();
            this._worldTransform.identity();
            this._width = 1;
            this._height = 1;
            this._registrationX = 0;
            this._registrationY = 0;
            this._positionX = 0;
            this._positionY = 0;
            this._offsetX = 0;
            this._offsetY = 0;
            this._scaleX = 1;
            this._scaleY = 1;
            this._rotation = 0;
            this._layerIndex = 0;
            this._zIndex = 0;
            this._visible = true;
            this._alpha = 1;
            this._roundedPixels = false;
            this._transformDirty = true;
            this._layerIndexDirty = true;
            this._zIndexDirty = true;
            this.priority = -1;
            this._previousLayerIndex = -1;
            this._renderRect = new Avota.Rectangle();
            this._renderOffset = new Avota.Point();
            this._renderID = -1;
            this._isMask = false;
            this._isBlinking = false;
            this._isShaking = false;
            if(view) {
                this.view = view;
            }
        }
        RenderComponent.NAME = "RenderComponent";
        Object.defineProperty(RenderComponent.prototype, "isDirty", {
            get: function () {
                return this._transformDirty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "isBlinking", {
            get: function () {
                return this._isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "isShaking", {
            get: function () {
                return this._isShaking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "isFlashing", {
            get: function () {
                return this._isFlashing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "halfWidth", {
            get: function () {
                return (this._width * .5) * Math.abs(this._scaleX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "halfHeight", {
            get: function () {
                return (this._height * .5) * Math.abs(this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "width", {
            get: function () {
                return this._width * Math.abs(this._scaleX);
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "height", {
            get: function () {
                return this._height * Math.abs(this._scaleY);
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "top", {
            get: function () {
                return this._positionY + this._offsetY;
            },
            set: function (value) {
                this.y = value - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "left", {
            get: function () {
                return this._positionX + this._offsetX;
            },
            set: function (value) {
                this.x = value - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "right", {
            get: function () {
                return this._positionX + (this._width * this._scaleX) + this._offsetX;
            },
            set: function (value) {
                this.x = value - (this._width * this._scaleX) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "bottom", {
            get: function () {
                return this._positionY + (this._height * this._scaleY) + this._offsetY;
            },
            set: function (value) {
                this.y = value - (this._height * this._scaleY) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "centerX", {
            get: function () {
                return this._positionX + (this._width * .5) + this._offsetX;
            },
            set: function (value) {
                this.x = value - (this._width * .5) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "centerY", {
            get: function () {
                return this._positionY + (this._height * .5) + this._offsetY;
            },
            set: function (value) {
                this.y = value - (this._height * .5) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "tint", {
            get: function () {
                return this._tint;
            },
            set: function (value) {
                this._tint = value;
                if(this._tint == null && this._renderBuffer) {
                    this._renderContext.clearRect(0, 0, this._renderSource.width, this._renderSource.height);
                    this._renderContext.drawImage(this._renderSource, 0, 0, this._renderSource.width, this._renderSource.height);
                } else {
                    var colors = Avota.ColorUtil.hexToARGB(this._tint);
                    if(!this._renderBuffer) {
                        this._renderBuffer = document.createElement("canvas");
                        this._renderBuffer.width = this._renderSource.width;
                        this._renderBuffer.height = this._renderSource.height;
                        this._renderContext = this._renderBuffer.getContext("2d");
                        this._renderContext.drawImage(this._renderSource, 0, 0, this._renderSource.width, this._renderSource.height);
                        this._view = this._renderBuffer;
                    }
                    this._renderContext.fillStyle = "rgba(" + colors[1] + ", " + colors[2] + ", " + colors[3] + ", " + colors[0] / 255 + ")";
                    this._renderContext.fillRect(0, 0, this._renderSource.width, this._renderSource.height);
                    this._renderContext.globalCompositeOperation = "multiply";
                    this._renderContext.drawImage(this._renderSource, 0, 0, this._renderSource.width, this._renderSource.height);
                    this._renderContext.globalCompositeOperation = "destination-atop";
                    this._renderContext.drawImage(this._renderSource, 0, 0, this._renderSource.width, this._renderSource.height);
                    this._renderContext.globalCompositeOperation = "source-over";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "mask", {
            get: function () {
                return this._mask;
            },
            set: function (value) {
                if(this._isMask) {
                    return;
                }
                if(this._mask) {
                    this._mask._renderComponent._isMask = false;
                }
                this._mask = value;
                this._maskRenderComponent = this._mask._renderComponent;
                this._maskRenderComponent._isMask = true;
                this._mask.visible = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "view", {
            get: function () {
                return this._view;
            },
            set: function (value) {
                var inRenderManager = this._inRenderManager;
                if(inRenderManager) {
                    this._removeFromRenderManager();
                }
                this._renderSource = value;
                if(this._renderSource instanceof HTMLImageElement) {
                    this._view = document.createElement("canvas");
                    this._view.width = this._renderSource.width;
                    this._view.height = this._renderSource.height;
                    this._renderContext = this._view.getContext("2d");
                    this._renderContext.drawImage(this._renderSource, 0, 0, this._renderSource.width, this._renderSource.height);
                } else if(this._renderSource instanceof HTMLCanvasElement) {
                    this._view = this._renderSource;
                    this._renderContext = this._view.getContext("2d");
                } else {
                    this._view = this._renderSource;
                }
                this._width = (this._view) ? this._view.width : 0;
                this._height = (this._view) ? this._view.height : 0;
                this._renderOffset.x = 0;
                this._renderOffset.y = 0;
                this._renderRect.x = 0;
                this._renderRect.y = 0;
                this._renderRect.width = this._width;
                this._renderRect.height = this._height;
                this._registrationX = this.halfWidth;
                this._registrationY = this.halfHeight;
                if(inRenderManager) {
                    this._addToRenderManager();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "transform", {
            get: function () {
                return this._localTransform;
            },
            set: function (value) {
                if(this._localTransform == value) {
                    return;
                }
                var a = value.a;
                var b = value.b;
                var c = value.c;
                var d = value.d;
                this._positionX = value.tx;
                this._positionY = value.ty;
                this._scaleX = Math.sqrt(a * a + b * b);
                this._rotation = (this._scaleX != 0) ? Math.atan2(b, a) : 0;
                this._scaleY = d * Math.cos(this._rotation) - c * Math.sin(this._rotation);
                this._registrationX = 0;
                this._registrationY = 0;
                this._localTransform = value;
                this._transformDirty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "x", {
            get: function () {
                return this._positionX;
            },
            set: function (value) {
                if(this._positionX == value) {
                    return;
                }
                this._positionX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "y", {
            get: function () {
                return this._positionY;
            },
            set: function (value) {
                if(this._positionY == value) {
                    return;
                }
                this._positionY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "registrationX", {
            get: function () {
                return this._registrationX;
            },
            set: function (value) {
                if(this._registrationX == value) {
                    return;
                }
                this._registrationX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "registrationY", {
            get: function () {
                return this._registrationY;
            },
            set: function (value) {
                if(this._registrationY == value) {
                    return;
                }
                this._registrationY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                if(this._offsetX == value) {
                    return;
                }
                this._offsetX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                if(this._offsetY == value) {
                    return;
                }
                this._offsetY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "scale", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                if(this._scaleY == value) {
                    return;
                }
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "rotation", {
            get: function () {
                return this._rotation;
            },
            set: function (value) {
                if(this._rotation == value) {
                    return;
                }
                this._rotation = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                if(this._visible == value) {
                    return;
                }
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "alpha", {
            get: function () {
                return this._alpha;
            },
            set: function (value) {
                if(this._alpha == value) {
                    return;
                }
                this._alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "layerIndex", {
            get: function () {
                return this._layerIndex;
            },
            set: function (value) {
                if(this._layerIndex == value) {
                    return;
                }
                this._layerIndex = value;
                this._layerIndexDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "zIndex", {
            get: function () {
                return this._zIndex;
            },
            set: function (value) {
                if(this._zIndex == value) {
                    return;
                }
                this._zIndex = value;
                this._zIndexDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "roundedPixels", {
            get: function () {
                return this._roundedPixels;
            },
            set: function (value) {
                if(this._roundedPixels == value) {
                    return;
                }
                this._roundedPixels = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "position", {
            get: function () {
                return this._position.setTo(this._positionX, this._positionY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "registration", {
            get: function () {
                return this._registration.setTo(this._registrationX, this._registrationY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "center", {
            get: function () {
                return this._center.setTo(this._positionX + ((this._width * Math.abs(this._scaleX)) * .5) + this._offsetX, this._positionY + ((this._height * Math.abs(this._scaleY)) * .5) + this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "offset", {
            get: function () {
                return this._offset.setTo(this._offsetX, this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderComponent.prototype, "extents", {
            get: function () {
                var width = this._width;
                var height = this._height;
                var ax = 0;
                var ay = 0;
                var w0 = width * (1 - ax);
                var w1 = width * -ax;
                var h0 = height * (1 - ay);
                var h1 = height * -ay;
                var worldTransform = this._worldTransform;
                var a = worldTransform.a;
                var b = worldTransform.c;
                var c = worldTransform.b;
                var d = worldTransform.d;
                var tx = worldTransform.tx;
                var ty = worldTransform.ty;
                var x1 = a * w1 + c * h1 + tx;
                var y1 = d * h1 + b * w1 + ty;
                var x2 = a * w0 + c * h1 + tx;
                var y2 = d * h1 + b * w0 + ty;
                var x3 = a * w0 + c * h0 + tx;
                var y3 = d * h0 + b * w0 + ty;
                var x4 = a * w1 + c * h0 + tx;
                var y4 = d * h0 + b * w1 + ty;
                var maxX = -Infinity;
                var maxY = -Infinity;
                var minX = Infinity;
                var minY = Infinity;
                minX = x1 < minX ? x1 : minX;
                minX = x2 < minX ? x2 : minX;
                minX = x3 < minX ? x3 : minX;
                minX = x4 < minX ? x4 : minX;
                minY = y1 < minY ? y1 : minY;
                minY = y2 < minY ? y2 : minY;
                minY = y3 < minY ? y3 : minY;
                minY = y4 < minY ? y4 : minY;
                maxX = x1 > maxX ? x1 : maxX;
                maxX = x2 > maxX ? x2 : maxX;
                maxX = x3 > maxX ? x3 : maxX;
                maxX = x4 > maxX ? x4 : maxX;
                maxY = y1 > maxY ? y1 : maxY;
                maxY = y2 > maxY ? y2 : maxY;
                maxY = y3 > maxY ? y3 : maxY;
                maxY = y4 > maxY ? y4 : maxY;
                return this._extents.setTo(minX, minY, maxX - minX, maxY - minY);
            },
            enumerable: true,
            configurable: true
        });
        RenderComponent.prototype._onRegister = function () {
            var _this = this;
            _super.prototype._onRegister.call(this);
            this._timeManager.callLater(function () {
                return _this._addToRenderManager();
            });
        };
        RenderComponent.prototype._onReset = function () {
            _super.prototype._onReset.call(this);
            if(this._owner.getComponent(this._spatialReference)) {
                this._spatialComponent = this._owner.getComponent(this._spatialReference);
            }
            this._parent = (this._owner)._parent;
            this._children = (this._owner)._children;
        };
        RenderComponent.prototype._onUnregister = function () {
            _super.prototype._onUnregister.call(this);
            this._spatialComponent = null;
            this._parent = null;
            this._children = null;
            this._removeFromRenderManager();
        };
        RenderComponent.prototype._addToRenderManager = function () {
            if(!this._inRenderManager && this._renderManager) {
                this._renderManager.addRenderer(this);
                this._inRenderManager = true;
                this._previousLayerIndex = this._layerIndex;
                this._layerIndexDirty = this._zIndexDirty = false;
                this.updateNode(true);
            }
        };
        RenderComponent.prototype._removeFromRenderManager = function () {
            if(this._inRenderManager && this._renderManager) {
                this._renderManager.removeRenderer(this);
                this._inRenderManager = false;
            }
        };
        RenderComponent.prototype.globalToLocal = function (position) {
            return this._worldTransform.transformPointInverse(position);
        };
        RenderComponent.prototype.localToGlobal = function (position) {
            return this._worldTransform.transformPoint(position);
        };
        RenderComponent.prototype.onFrame = function (delta) {
            if(!this.owner) {
                return;
            }
            this.updateReferences();
            this.updateNode();
            _super.prototype.onFrame.call(this, delta);
        };
        RenderComponent.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            if(this._isBlinking && !forceOverride) {
                return;
            }
            if(!this._blinkTimer) {
                this._blinkTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._blinkTimer.timerSignal.add(this._onBlink, this);
                this._blinkTimer.completeSignal.add(this._onBlinkComplete, this);
            }
            if(forceOverride && this._currentAlpha) {
                this._alpha = this._currentAlpha;
            }
            this._currentAlpha = this._alpha;
            this._blinkAlpha = alpha;
            this._blinkTimer.reset();
            this._blinkTimer.repeatCount = repeat;
            this._blinkTimer.delay = duration / repeat;
            this._blinkTimer.start();
            this._isBlinking = true;
        };
        RenderComponent.prototype.stopBlink = function () {
            if(!this._isBlinking) {
                return;
            }
            this._onBlinkComplete();
        };
        RenderComponent.prototype._onBlink = function () {
            this._alpha = (this._alpha == this._currentAlpha) ? this._blinkAlpha : this._currentAlpha;
        };
        RenderComponent.prototype._onBlinkComplete = function () {
            this._alpha = this._currentAlpha;
            this._isBlinking = false;
            this._blinkTimer.reset();
        };
        RenderComponent.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            if(this._isShaking) {
                return;
            }
            if(!this._shakeTimer) {
                this._shakeTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._shakeTimer.timerSignal.add(this._onShake, this);
                this._shakeTimer.completeSignal.add(this._onShakeComplete, this);
            }
            this._currentOffsetX = this.offsetX;
            this._currentOffsetY = this.offsetY;
            this._shakeStrength = strength;
            this._shakeTimer.reset();
            this._shakeTimer.repeatCount = repeat;
            this._shakeTimer.delay = duration / repeat;
            this._shakeTimer.start();
            this._isShaking = true;
        };
        RenderComponent.prototype.stopShake = function () {
            if(!this._isShaking) {
                return;
            }
            this._onShakeComplete();
        };
        RenderComponent.prototype._onShake = function () {
            this.offsetX = this._currentOffsetX + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
            this.offsetY = this._currentOffsetY + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
        };
        RenderComponent.prototype._onShakeComplete = function () {
            this.offsetX = this._currentOffsetX;
            this.offsetY = this._currentOffsetY;
            this._isShaking = false;
            this._shakeTimer.reset();
        };
        RenderComponent.prototype.flash = function (repeat, duration, color) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if(!this._flashTimer) {
                this._flashTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._flashTimer.timerSignal.add(this._onFlash, this);
                this._flashTimer.completeSignal.add(this._onFlashComplete, this);
            }
            this._flashTimer.reset();
            this._flashTimer.repeatCount = repeat;
            this._flashTimer.delay = duration / repeat;
            this._flashColor = color;
            this.tint = this._flashColor;
            this._flashTimer.start();
            this._isFlashing = true;
        };
        RenderComponent.prototype.stopFlash = function () {
            if(!this._isFlashing) {
                return;
            }
            this._onFlashComplete();
        };
        RenderComponent.prototype._onFlash = function () {
            if(this.tint != null) {
                this.tint = null;
            } else {
                this.tint = this._flashColor;
            }
        };
        RenderComponent.prototype._onFlashComplete = function () {
            this._isFlashing = false;
            this.tint = null;
            if(this._flashTimer) {
                this._flashTimer.reset();
            }
        };
        RenderComponent.prototype.render = function (renderCanvas, renderMatrix, renderAlpha) {
            if(this._isMask) {
                return;
            }
            if(this._parent && !this._parent.destroyed) {
                renderAlpha *= this._parent.alpha;
                if(!this._parent.visible || renderAlpha == 0 || this._parent.scaleX == 0 || this._parent.scaleY == 0) {
                    return;
                }
            }
            renderAlpha *= this._alpha;
            if(!this._visible || renderAlpha == 0 || this._scaleX == 0 || this._scaleY == 0) {
                return;
            }
            if(renderAlpha != 1) {
                this._globalAlpha = renderCanvas.alpha;
                renderCanvas.alpha = renderAlpha;
            }
            this._renderMatrix = this._worldTransform.clone();
            this._renderMatrix.multiply(renderMatrix);
            if(this._roundedPixels) {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, (this._renderMatrix.tx + .5) | 0, (this._renderMatrix.ty + .5) | 0);
            } else {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, this._renderMatrix.tx, this._renderMatrix.ty);
            }
            renderCanvas.drawImage(this._view, this._renderRect.x, this._renderRect.y, this._renderRect.width, this._renderRect.height, this._renderOffset.x, this._renderOffset.y, this._renderRect.width, this._renderRect.height);
            if(renderAlpha != 1) {
                renderCanvas.alpha = this._globalAlpha;
            }
            this._renderManager._draws++;
        };
        RenderComponent.prototype.updateReferences = function () {
            if(this._spatialComponent) {
                this.x = this._spatialComponent.x;
                this.y = this._spatialComponent.y;
                this.rotation = this._spatialComponent.rotation;
            }
            if(this._zIndexDirty && this._renderManager) {
                this._renderManager.getLayer(this._layerIndex, true).markDirty();
                this._zIndexDirty = false;
            }
            if(this._layerIndexDirty && this._renderManager) {
                var currentLayerIndex = this._layerIndex;
                this._layerIndex = this._previousLayerIndex;
                if(this._previousLayerIndex != -1) {
                    this._removeFromRenderManager();
                }
                this._layerIndex = currentLayerIndex;
                this._addToRenderManager();
                this._previousLayerIndex = this._layerIndex;
                this._layerIndexDirty = false;
            }
        };
        RenderComponent.prototype.updateTransform = function (markDirty, updateRefs) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if (typeof updateRefs === "undefined") { updateRefs = false; }
            if(!this._transformDirty && !markDirty) {
                return;
            }
            if(updateRefs) {
                this.updateReferences();
            }
            this._localTransform.identity();
            this._localTransform.translate(this._positionX + this._registrationX, this._positionY + this._registrationY);
            this._localTransform.scale(this._scaleX, this._scaleY);
            this._localTransform.rotate(this._rotation * (Math.PI / 180));
            this._localTransform.translate(-this._registrationX + this._offsetX, -this._registrationY + this._offsetY);
            this._transformDirty = false;
        };
        RenderComponent.prototype.updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._updateChildrenTransform = parentTransformDirty;
            if(this._transformDirty) {
                this.updateTransform();
                this._updateChildrenTransform = true;
            }
            if(this._updateChildrenTransform || parentTransformDirty) {
                this._worldTransform.identity();
                this._worldTransform.multiply(this._localTransform);
                this._parent = (this._owner)._parent;
                if(this._parent && !this._parent.destroyed) {
                    this._worldTransform.multiply(this._parent._worldTransform);
                }
            }
            if(this._children == null) {
                return;
            }
            for(var i = 0; i < this._children.length; i++) {
                this._children[i]._updateNode(this._updateChildrenTransform);
            }
        };
        RenderComponent.prototype._applyMask = function () {
        };
        RenderComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._position = null;
            this._registration = null;
            this._center = null;
            this._offset = null;
            this._extents = null;
            this._localTransform = null;
            this._worldTransform = null;
            this._blinkTimer = null;
            this._shakeTimer = null;
            this._renderSource = null;
            this._renderContext = null;
            this._renderManager = null;
            this._maskRenderComponent = null;
            this._renderMatrix = null;
            this._view = null;
        };
        return RenderComponent;
    })(Avota.AnimatedComponent);
    Avota.RenderComponent = RenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TickedComponent = (function (_super) {
        __extends(TickedComponent, _super);
        function TickedComponent(timeManager) {
                _super.call(this);
            this._timeManager = timeManager;
            this.priority = 0;
        }
        TickedComponent.prototype.onTick = function (delta) {
        };
        TickedComponent.prototype._onRegister = function () {
            this._timeManager.addTickedObject(this, this.priority);
            _super.prototype._onRegister.call(this);
        };
        TickedComponent.prototype._onUnregister = function () {
            this._timeManager.removeTickedObject(this);
            _super.prototype._onUnregister.call(this);
        };
        TickedComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._timeManager = null;
        };
        return TickedComponent;
    })(Avota.Component);
    Avota.TickedComponent = TickedComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpriteSheetRenderComponent = (function (_super) {
        __extends(SpriteSheetRenderComponent, _super);
        function SpriteSheetRenderComponent(timeManager, renderManager, spriteSheet, defaultFrame) {
            if (typeof defaultFrame === "undefined") { defaultFrame = 0; }
                _super.call(this, timeManager, renderManager);
            this._spriteSheets = {
            };
            this._defaultFrame = defaultFrame;
            if(spriteSheet) {
                this.addSpriteSheet(spriteSheet, true);
            }
        }
        Object.defineProperty(SpriteSheetRenderComponent.prototype, "spriteSheet", {
            get: function () {
                return this._currentSpriteSheet;
            },
            set: function (value) {
                this._currentSpriteSheet = value;
                if(!this._view) {
                    this.view = this._currentSpriteSheet.image;
                } else {
                    this._view = this._currentSpriteSheet.image;
                }
                if(!this.frameData) {
                    this.setFrame(this._defaultFrame);
                }
                this.updateFrame(true);
            },
            enumerable: true,
            configurable: true
        });
        SpriteSheetRenderComponent.prototype.setFrame = function (frame) {
            if(!this._currentSpriteSheet) {
                return;
            }
            if(Avota.ObjectUtil.isString(frame)) {
                this.frameData = this._currentSpriteSheet.getFrame(frame);
            }
            if(Avota.ObjectUtil.isNumber(frame)) {
                this.frameData = this._currentSpriteSheet.getFrame(this._currentSpriteSheet.data.frames[frame].filename);
            }
            if(this.frameData) {
                this._width = this.frameData.offset.width;
                this._height = this.frameData.offset.height;
                this.registrationX = (this.frameData.offset.width * .5) + this.offsetX;
                this.registrationY = (this.frameData.offset.height * .5) + this.offsetY;
            }
        };
        SpriteSheetRenderComponent.prototype.setSpriteSheet = function (name) {
            if(this._currentSpriteSheet && this._currentSpriteSheet.name == name) {
                return;
            }
            this.spriteSheet = this._spriteSheets[name];
        };
        SpriteSheetRenderComponent.prototype.addSpriteSheet = function (spriteSheet, switchToSpriteSheet) {
            if (typeof switchToSpriteSheet === "undefined") { switchToSpriteSheet = true; }
            this._spriteSheets[spriteSheet.name] = spriteSheet;
            if(switchToSpriteSheet) {
                this.setSpriteSheet(spriteSheet.name);
            }
        };
        SpriteSheetRenderComponent.prototype.getSpriteSheet = function (name) {
            if (typeof name === "undefined") { name = Avota.SpriteSheet.NAME; }
            return this._spriteSheets[name];
        };
        SpriteSheetRenderComponent.prototype.removeSpriteSheet = function (name) {
            this._spriteSheets[name] = null;
            delete this._spriteSheets[name];
        };
        SpriteSheetRenderComponent.prototype.onFrame = function (delta) {
            if(!this.view || !this.owner) {
                return;
            }
            if(this.visible || this._isMask) {
                this.updateFrame();
            }
            _super.prototype.onFrame.call(this, delta);
        };
        SpriteSheetRenderComponent.prototype.updateFrame = function (updateRegistration) {
            if (typeof updateRegistration === "undefined") { updateRegistration = false; }
            if(this.frameData) {
                this._renderRect = this.frameData.region;
                this._renderOffset.x = this.frameData.offset.x;
                this._renderOffset.y = this.frameData.offset.y;
                this._width = this.frameData.offset.width;
                this._height = this.frameData.offset.height;
                this.registrationX = (this._width * .5) + this.offsetX;
                this.registrationY = (this._height * .5) + this.offsetY;
            }
        };
        SpriteSheetRenderComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for(var key in this._spriteSheets) {
                this._spriteSheets[key] = null;
                delete this._spriteSheets[key];
            }
            this._spriteSheets = null;
            this._currentSpriteSheet = null;
            this.frameData = null;
        };
        return SpriteSheetRenderComponent;
    })(Avota.RenderComponent);
    Avota.SpriteSheetRenderComponent = SpriteSheetRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Point = (function () {
        function Point(x, y) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            this.setTo(x, y);
        }
        Object.defineProperty(Point.prototype, "length", {
            get: function () {
                return Math.sqrt(this.x * this.x + this.y * this.y);
            },
            enumerable: true,
            configurable: true
        });
        Point.prototype.add = function (toAdd, output) {
            if (typeof output === "undefined") { output = new Point(); }
            return output.setTo(this.x + toAdd.x, this.y + toAdd.y);
        };
        Point.prototype.addTo = function (x, y) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            return this.setTo(this.x + x, this.y + y);
        };
        Point.prototype.subtractFrom = function (x, y) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            return this.setTo(this.x - x, this.y - y);
        };
        Point.prototype.invert = function () {
            return this.setTo(this.y, this.x);
        };
        Point.prototype.clamp = function (min, max) {
            this.clampX(min, max);
            this.clampY(min, max);
            return this;
        };
        Point.prototype.clampX = function (min, max) {
            this.x = Math.max(Math.min(this.x, max), min);
            return this;
        };
        Point.prototype.clampY = function (min, max) {
            this.x = Math.max(Math.min(this.x, max), min);
            this.y = Math.max(Math.min(this.y, max), min);
            return this;
        };
        Point.prototype.clone = function (output) {
            if (typeof output === "undefined") { output = new Point(); }
            return output.setTo(this.x, this.y);
        };
        Point.prototype.copyFrom = function (source) {
            return this.setTo(source.x, source.y);
        };
        Point.prototype.copyTo = function (target) {
            return target.setTo(this.x, this.y);
        };
        Point.prototype.distanceTo = function (target, round) {
            if (typeof round === "undefined") { round = false; }
            var dx = this.x - target.x;
            var dy = this.y - target.y;
            if(round === true) {
                return Math.round(Math.sqrt(dx * dx + dy * dy));
            } else {
                return Math.sqrt(dx * dx + dy * dy);
            }
        };
        Point.distanceBetween = function distanceBetween(pointA, pointB, round) {
            if (typeof round === "undefined") { round = false; }
            var dx = pointA.x - pointB.x;
            var dy = pointA.y - pointB.y;
            if(round === true) {
                return Math.round(Math.sqrt(dx * dx + dy * dy));
            } else {
                return Math.sqrt(dx * dx + dy * dy);
            }
        };
        Point.prototype.distanceCompare = function (target, distance) {
            if(this.distanceTo(target) >= distance) {
                return true;
            } else {
                return false;
            }
        };
        Point.prototype.equals = function (toCompare) {
            if(this.x === toCompare.x && this.y === toCompare.y) {
                return true;
            } else {
                return false;
            }
        };
        Point.interpolate = function interpolate(pointA, pointB, f) {
            return new Point(f * pointA.x + (1 - f) * pointB.x, f * pointA.y + (1 - f) * pointB.y);
        };
        Point.prototype.offset = function (dx, dy) {
            this.x += dx;
            this.y += dy;
            return this;
        };
        Point.polar = function polar(length, angle) {
            return new Point(length * Math.cos(angle), length * Math.sin(angle));
        };
        Point.prototype.setTo = function (x, y) {
            this.x = x;
            this.y = y;
            return this;
        };
        Point.prototype.subtract = function (point, output) {
            if (typeof output === "undefined") { output = new Point(); }
            return output.setTo(this.x - point.x, this.y - point.y);
        };
        Point.prototype.normalize = function (length) {
            var l = this.length;
            if(l > 0) {
                var factor = length / l;
                this.x *= factor;
                this.y *= factor;
            }
        };
        Point.prototype.toString = function () {
            return '[{Point (x=' + this.x + ' y=' + this.y + ')}]';
        };
        return Point;
    })();
    Avota.Point = Point;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Rectangle = (function () {
        function Rectangle(x, y, width, height) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            if (typeof width === "undefined") { width = 0; }
            if (typeof height === "undefined") { height = 0; }
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            this.setTo(x, y, width, height);
        }
        Object.defineProperty(Rectangle.prototype, "halfWidth", {
            get: function () {
                return Math.round(this.width / 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "halfHeight", {
            get: function () {
                return Math.round(this.height / 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "bottom", {
            get: function () {
                return this.y + this.height;
            },
            set: function (value) {
                if(value < this.y) {
                    this.height = 0;
                } else {
                    this.height = this.y + value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "bottomRight", {
            get: function () {
                return new Avota.Point(this.right, this.bottom);
            },
            set: function (value) {
                this.right = value.x;
                this.bottom = value.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "left", {
            get: function () {
                return this.x;
            },
            set: function (value) {
                var diff = this.x - value;
                if(this.width + diff < 0) {
                    this.width = 0;
                    this.x = value;
                } else {
                    this.width += diff;
                    this.x = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "right", {
            get: function () {
                return this.x + this.width;
            },
            set: function (value) {
                if(value < this.x) {
                    this.width = 0;
                } else {
                    this.width = (value - this.x);
                }
            },
            enumerable: true,
            configurable: true
        });
        Rectangle.prototype.size = function (output) {
            if (typeof output === "undefined") { output = new Avota.Point(); }
            return output.setTo(this.width, this.height);
        };
        Object.defineProperty(Rectangle.prototype, "volume", {
            get: function () {
                return this.width * this.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "perimeter", {
            get: function () {
                return (this.width * 2) + (this.height * 2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "top", {
            get: function () {
                return this.y;
            },
            set: function (value) {
                var diff = this.y - value;
                if(this.height + diff < 0) {
                    this.height = 0;
                    this.y = value;
                } else {
                    this.height += diff;
                    this.y = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "topLeft", {
            get: function () {
                return new Avota.Point(this.x, this.y);
            },
            set: function (value) {
                this.x = value.x;
                this.y = value.y;
            },
            enumerable: true,
            configurable: true
        });
        Rectangle.prototype.clone = function (output) {
            if (typeof output === "undefined") { output = new Rectangle(); }
            return output.setTo(this.x, this.y, this.width, this.height);
        };
        Rectangle.prototype.contains = function (x, y) {
            if(x >= this.x && x <= this.right && y >= this.y && y <= this.bottom) {
                return true;
            }
            return false;
        };
        Rectangle.prototype.containsPoint = function (point) {
            return this.contains(point.x, point.y);
        };
        Rectangle.prototype.containsRect = function (rect) {
            if(rect.volume > this.volume) {
                return false;
            }
            if(rect.x >= this.x && rect.y >= this.y && rect.right <= this.right && rect.bottom <= this.bottom) {
                return true;
            }
            return false;
        };
        Rectangle.prototype.copyFrom = function (source) {
            return this.setTo(source.x, source.y, source.width, source.height);
        };
        Rectangle.prototype.copyTo = function (target) {
            return target.copyFrom(this);
        };
        Rectangle.prototype.equals = function (toCompare) {
            if(this.x === toCompare.x && this.y === toCompare.y && this.width === toCompare.width && this.height === toCompare.height) {
                return true;
            }
            return false;
        };
        Rectangle.prototype.inflate = function (dx, dy) {
            if(!isNaN(dx) && !isNaN(dy)) {
                this.x -= dx;
                this.width += 2 * dx;
                this.y -= dy;
                this.height += 2 * dy;
            }
            return this;
        };
        Rectangle.prototype.inflatePoint = function (point) {
            return this.inflate(point.x, point.y);
        };
        Rectangle.prototype.intersection = function (toIntersect, output) {
            if (typeof output === "undefined") { output = new Rectangle(); }
            if(this.intersects(toIntersect) === true) {
                output.x = Math.max(toIntersect.x, this.x);
                output.y = Math.max(toIntersect.y, this.y);
                output.width = Math.min(toIntersect.right, this.right) - output.x;
                output.height = Math.min(toIntersect.bottom, this.bottom) - output.y;
            }
            return output;
        };
        Rectangle.prototype.intersects = function (toIntersect) {
            if(toIntersect.x >= this.right) {
                return false;
            }
            if(toIntersect.right <= this.x) {
                return false;
            }
            if(toIntersect.bottom <= this.y) {
                return false;
            }
            if(toIntersect.y >= this.bottom) {
                return false;
            }
            return true;
        };
        Rectangle.prototype.overlap = function (rect) {
            return (rect.x + rect.width > this.x) && (rect.x < this.x + this.width) && (rect.y + rect.height > this.y) && (rect.y < this.y + this.height);
        };
        Object.defineProperty(Rectangle.prototype, "isEmpty", {
            get: function () {
                if(this.width < 1 || this.height < 1) {
                    return true;
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Rectangle.prototype.offset = function (dx, dy) {
            if(!isNaN(dx) && !isNaN(dy)) {
                this.x += dx;
                this.y += dy;
            }
            return this;
        };
        Rectangle.prototype.offsetPoint = function (point) {
            return this.offset(point.x, point.y);
        };
        Rectangle.prototype.setEmpty = function () {
            return this.setTo(0, 0, 0, 0);
        };
        Rectangle.prototype.setTo = function (x, y, width, height) {
            if(!isNaN(x) && !isNaN(y) && !isNaN(width) && !isNaN(height)) {
                this.x = x;
                this.y = y;
                if(width > 0) {
                    this.width = width;
                }
                if(height > 0) {
                    this.height = height;
                }
            }
            return this;
        };
        Rectangle.prototype.union = function (toUnion, output) {
            if (typeof output === "undefined") { output = new Rectangle(); }
            return output.setTo(Math.min(toUnion.x, this.x), Math.min(toUnion.y, this.y), Math.max(toUnion.right, this.right), Math.max(toUnion.bottom, this.bottom));
        };
        Rectangle.prototype.toString = function () {
            return "[{Rectangle (x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + " empty=" + this.isEmpty + ")}]";
        };
        return Rectangle;
    })();
    Avota.Rectangle = Rectangle;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpriteSheet = (function (_super) {
        __extends(SpriteSheet, _super);
        function SpriteSheet(image, data, name, format) {
            if (typeof name === "undefined") { name = SpriteSheet.NAME; }
            if (typeof format === "undefined") { format = SpriteSheetFormat.JSON; }
                _super.call(this, name);
            this._image = image;
            this._data = data;
            this.parseData(format);
        }
        SpriteSheet.NAME = "SpriteSheet";
        Object.defineProperty(SpriteSheet.prototype, "image", {
            get: function () {
                return this._image;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheet.prototype, "data", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        SpriteSheet.prototype.parseData = function (format) {
            this._regions = {
            };
            this._frames = {
            };
            var name;
            var x;
            var y;
            var width;
            var height;
            var frameX;
            var frameY;
            var frameWidth;
            var frameHeight;
            var region;
            var offset;
            switch(format) {
                case SpriteSheetFormat.JSON:
                    var info;
                    if(this._data) {
                        for(var i = 0; i < this._data.frames.length; i++) {
                            info = this._data.frames[i];
                            name = info.filename;
                            x = info.frame.x;
                            y = info.frame.y;
                            width = info.frame.w;
                            height = info.frame.h;
                            frameX = info.spriteSourceSize.x;
                            frameY = info.spriteSourceSize.y;
                            frameWidth = info.sourceSize.w;
                            frameHeight = info.sourceSize.h;
                            region = new Avota.Rectangle(x, y, width, height);
                            offset = new Avota.Rectangle(frameX, frameY, frameWidth, frameHeight);
                            this.addFrame(name, region, offset);
                        }
                    } else {
                        this._data = {
                            frames: [
                                {
                                    filename: this.name
                                }
                            ]
                        };
                        this.addFrame(this.name, new Avota.Rectangle(0, 0, this._image.width, this._image.height), new Avota.Rectangle(0, 0, this._image.width, this._image.height));
                    }
                    break;
                case SpriteSheetFormat.STARLING:
                    break;
            }
        };
        SpriteSheet.prototype.getRegion = function (name) {
            return this._regions[name];
        };
        SpriteSheet.prototype.getOffset = function (name) {
            return this._frames[name];
        };
        SpriteSheet.prototype.getFrame = function (name) {
            return this._frames[name];
        };
        SpriteSheet.prototype.getFrames = function (prefix) {
            if (typeof prefix === "undefined") { prefix = ""; }
            var result = [];
            var names = [];
            for(var name in this._regions) {
                if(name.indexOf(prefix) == 0) {
                    names.push(name);
                }
            }
            names.sort(this.sortCaseInsensitive);
            for(var i = 0, n = names.length; i < n; i++) {
                result.push(this.getFrame(names[i]));
            }
            return result;
        };
        SpriteSheet.prototype.addFrame = function (name, region, offset) {
            this._regions[name] = region;
            this._frames[name] = new FrameData(region, offset);
        };
        SpriteSheet.prototype.removeFrame = function (name) {
            this._frames[name].destroy();
            delete this._frames[name];
        };
        SpriteSheet.prototype.destroy = function () {
            var key;
            for(key in this._regions) {
                this._regions[key] = null;
                delete this._regions[key];
            }
            var frameData;
            for(key in this._frames) {
                frameData = this._frames[key];
                frameData.destroy();
                this._frames[key] = null;
                delete this._frames[key];
            }
            frameData = null;
            this._data = null;
            this._image = null;
            this._frames = null;
            this._regions = null;
            _super.prototype.destroy.call(this);
        };
        SpriteSheet.prototype.sortCaseInsensitive = function (a, b) {
            if(a.toLowerCase() < b.toLowerCase()) {
                return -1;
            }
            if(a.toLowerCase() > b.toLowerCase()) {
                return 1;
            }
            return 0;
        };
        return SpriteSheet;
    })(Avota.Element);
    Avota.SpriteSheet = SpriteSheet;    
    var SpriteSheetFormat = (function () {
        function SpriteSheetFormat() { }
        SpriteSheetFormat.JSON = "JSON";
        SpriteSheetFormat.STARLING = "starling";
        return SpriteSheetFormat;
    })();
    Avota.SpriteSheetFormat = SpriteSheetFormat;    
    var FrameData = (function () {
        function FrameData(region, offset) {
            this.region = region;
            this.offset = offset;
            this.destroyed = false;
        }
        FrameData.prototype.destroy = function () {
            this.region = null;
            this.offset = null;
            this.destroyed = true;
        };
        return FrameData;
    })();
    Avota.FrameData = FrameData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpriteSheetAnimation = (function (_super) {
        __extends(SpriteSheetAnimation, _super);
        function SpriteSheetAnimation(name, frames, duration, repeatCount) {
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof repeatCount === "undefined") { repeatCount = SpriteSheetAnimation.PLAY_ONCE; }
                _super.call(this, name);
            this._frames = frames;
            this._duration = duration;
            this._defaultRepeatCount = repeatCount;
            this._currentRepeatCount = this._defaultRepeatCount;
            this.completeSignal = new Avota.Signal();
            this.repeatSignal = new Avota.Signal();
            this._elapsed = 0;
            this._frameIndex = 0;
            this._isAnimating = false;
            this._totalFrames = this._frames.length;
            this._frameDuration = (this._duration / this._totalFrames) / 1000;
        }
        SpriteSheetAnimation.NAME = "SpriteSheetAnimation";
        SpriteSheetAnimation.FRAME_CURRENT = "current";
        SpriteSheetAnimation.FRAME_RANDOM = "random";
        SpriteSheetAnimation.LOOP = -1;
        SpriteSheetAnimation.PLAY_ONCE = 0;
        Object.defineProperty(SpriteSheetAnimation.prototype, "isAnimating", {
            get: function () {
                return this._isAnimating;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "frames", {
            get: function () {
                return this._frames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "currentFrame", {
            get: function () {
                return this._frames[this._frameIndex];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "totalFrames", {
            get: function () {
                return this._totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "repeatCount", {
            get: function () {
                return this._currentRepeatCount;
            },
            set: function (value) {
                this._defaultRepeatCount = value;
                this._currentRepeatCount = this._defaultRepeatCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (value) {
                this._duration = value;
                this._frameDuration = (Math.abs(this._duration) / this._totalFrames) / 1000;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimation.prototype, "frameIndex", {
            get: function () {
                return this._frameIndex;
            },
            set: function (value) {
                this._frameIndex = value % this._totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        SpriteSheetAnimation.prototype.play = function (repeatCount, startFrame, onComplete, onRepeat) {
            if (typeof repeatCount === "undefined") { repeatCount = Number.MIN_VALUE; }
            if (typeof startFrame === "undefined") { startFrame = 0; }
            if(repeatCount != Number.MIN_VALUE) {
                this._currentRepeatCount = repeatCount;
            }
            this.completeSignal.removeAll();
            this.repeatSignal.removeAll();
            if(onComplete != undefined) {
                this.completeSignal.addOnce(onComplete);
            }
            if(onRepeat != undefined) {
                this.repeatSignal.add(onRepeat);
            }
            this._frameIndex = startFrame % this._totalFrames;
            this._isAnimating = true;
        };
        SpriteSheetAnimation.prototype.stop = function () {
            this._isAnimating = false;
            this._frameIndex = 0;
            this._currentRepeatCount = this._defaultRepeatCount;
        };
        SpriteSheetAnimation.prototype.finish = function () {
            this._isAnimating = false;
            this._frameIndex = this._totalFrames - 1;
            this._currentRepeatCount = this._defaultRepeatCount;
            this.repeatSignal.removeAll();
            this.completeSignal.dispatch();
        };
        SpriteSheetAnimation.prototype.restart = function () {
            this.stop();
            this.play();
        };
        SpriteSheetAnimation.prototype.animate = function (delta) {
            if(!this._isAnimating) {
                return;
            }
            this._elapsed += delta;
            this._repeat = false;
            if(this._elapsed >= this._frameDuration) {
                this._count = Math.floor(this._elapsed / this._frameDuration);
                if((this._frameIndex + this._count) >= this._totalFrames) {
                    this._repeat = true;
                }
                this._frameIndex = (this._frameIndex + this._count) % this._totalFrames;
                this._elapsed = 0;
            }
            if(this._repeat) {
                if(this._currentRepeatCount == 0) {
                    this.finish();
                    return;
                }
                if(this._currentRepeatCount > 0) {
                    this._currentRepeatCount--;
                }
                this.repeatSignal.dispatch(this._currentRepeatCount);
            }
        };
        SpriteSheetAnimation.prototype.destroy = function () {
            this.completeSignal.removeAll();
            this.repeatSignal.removeAll();
            this._frames.length = 0;
            this._frames = null;
            this.completeSignal = null;
            this.repeatSignal = null;
            _super.prototype.destroy.call(this);
        };
        return SpriteSheetAnimation;
    })(Avota.Element);
    Avota.SpriteSheetAnimation = SpriteSheetAnimation;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpriteSheetAnimationComponent = (function (_super) {
        __extends(SpriteSheetAnimationComponent, _super);
        function SpriteSheetAnimationComponent(timeManager, renderComponent) {
                _super.call(this, timeManager);
            this._renderComponent = renderComponent;
            this._animations = {
            };
            this._totalAnimations = 0;
            this._isPaused = false;
        }
        SpriteSheetAnimationComponent.NAME = "SpriteSheetAnimationComponent";
        Object.defineProperty(SpriteSheetAnimationComponent.prototype, "currentAnimation", {
            get: function () {
                return this._currentAnimation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimationComponent.prototype, "animations", {
            get: function () {
                return this._animations;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpriteSheetAnimationComponent.prototype, "totalAnimations", {
            get: function () {
                return this._totalAnimations;
            },
            enumerable: true,
            configurable: true
        });
        SpriteSheetAnimationComponent.prototype.addAnimation = function (name, frames, duration, repeatCount) {
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof repeatCount === "undefined") { repeatCount = 0; }
            this._animations[name] = this.create(Avota.SpriteSheetAnimation, name, frames, duration, repeatCount);
            this._totalAnimations++;
        };
        SpriteSheetAnimationComponent.prototype.getAnimation = function (name) {
            return this._animations[name];
        };
        SpriteSheetAnimationComponent.prototype.removeAnimation = function (name) {
            this._animations[name].destroy();
            this._animations[name] = null;
            delete this._animations[name];
            this._totalAnimations--;
        };
        SpriteSheetAnimationComponent.prototype.play = function (name, repeatCount, startFrame, onComplete, onRepeat) {
            if (typeof repeatCount === "undefined") { repeatCount = Number.MIN_VALUE; }
            if (typeof startFrame === "undefined") { startFrame = 0; }
            var animation = this._animations[name];
            if(this._renderComponent && animation) {
                this._currentAnimation = animation;
                this._currentAnimation.frameIndex = startFrame;
                this._renderComponent.frameData = this._currentAnimation.currentFrame;
                this._currentAnimation.play(repeatCount, startFrame, onComplete, onRepeat);
            }
            if(LOGGING) {
                if(!animation) {
                    this._log.warn("Unable to find animation: " + name);
                }
            }
        };
        SpriteSheetAnimationComponent.prototype.pause = function () {
            this._isPaused = !this._isPaused;
        };
        SpriteSheetAnimationComponent.prototype.suspend = function () {
            this._isPaused = true;
        };
        SpriteSheetAnimationComponent.prototype.resume = function () {
            this._isPaused = false;
        };
        SpriteSheetAnimationComponent.prototype.restart = function () {
            if(this._currentAnimation) {
                this._currentAnimation.restart();
            }
        };
        SpriteSheetAnimationComponent.prototype.stop = function () {
            if(this._currentAnimation) {
                this._currentAnimation.stop();
            }
        };
        SpriteSheetAnimationComponent.prototype.onTick = function (delta) {
            if(this._currentAnimation && !this._isPaused) {
                this._currentAnimation.animate(delta);
                this._renderComponent.frameData = this._currentAnimation.currentFrame;
            }
        };
        SpriteSheetAnimationComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for(var key in this._animations) {
                this._animations[key] = null;
                delete this._animations[key];
            }
            this._currentAnimation = null;
            this._animations = null;
            this._renderComponent = null;
        };
        return SpriteSheetAnimationComponent;
    })(Avota.TickedComponent);
    Avota.SpriteSheetAnimationComponent = SpriteSheetAnimationComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RayResult = (function () {
        function RayResult(element, position, time) {
            if (typeof time === "undefined") { time = -1; }
            this.element = element;
            this.position = position;
            this.time = time;
        }
        RayResult.prototype.clear = function () {
            this.element = null;
            this.position = null;
            this.time = -1;
        };
        RayResult.prototype.destroy = function () {
            this.clear();
        };
        return RayResult;
    })();
    Avota.RayResult = RayResult;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpatialComponent = (function (_super) {
        __extends(SpatialComponent, _super);
        function SpatialComponent(timeManager, spatialManager) {
                _super.call(this, timeManager);
            this._spatialManager = spatialManager;
            this.active = false;
            this.width = 1;
            this.height = 1;
            this._x = 0;
            this._y = 0;
            this.velocityX = 0;
            this.velocityY = 0;
            this.rotation = 0;
            this.angularVelocity = 0;
            this.collisionOffsetX = 0;
            this.collisionOffsetY = 0;
            this._center = new Avota.Point();
            this._position = new Avota.Point();
            this._velocity = new Avota.Point();
            this._extents = new Avota.Rectangle();
        }
        SpatialComponent.NAME = "SpatialComponent";
        Object.defineProperty(SpatialComponent.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "halfWidth", {
            get: function () {
                return this.width * .5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "halfHeight", {
            get: function () {
                return this.height * .5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "top", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "left", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "right", {
            get: function () {
                return this._x + this.width;
            },
            set: function (value) {
                this._x = value - this.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "bottom", {
            get: function () {
                return this._y + this.height;
            },
            set: function (value) {
                this._y = value - this.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "centerX", {
            get: function () {
                return this._x + (this.width * .5);
            },
            set: function (value) {
                this._x = value - (this.width * .5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "centerY", {
            get: function () {
                return this._y + (this.height * .5);
            },
            set: function (value) {
                this._y = value - (this.height * .5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "center", {
            get: function () {
                this._center.x = this._x + (this.width * .5);
                this._center.y = this._y + (this.height * .5);
                return this._center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "position", {
            get: function () {
                this._position.x = this._x;
                this._position.y = this._y;
                return this._position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "velocity", {
            get: function () {
                this._velocity.x = this.velocityX;
                this._velocity.y = this.velocityY;
                return this._velocity;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialComponent.prototype, "extents", {
            get: function () {
                this._extents.x = this._x;
                this._extents.y = this._y;
                this._extents.width = this.width;
                this._extents.height = this.height;
                return this._extents;
            },
            enumerable: true,
            configurable: true
        });
        SpatialComponent.prototype._onRegister = function () {
            _super.prototype._onRegister.call(this);
            this.active = true;
            this._spatialManager.addSpatialComponent(this);
        };
        SpatialComponent.prototype._onUnregister = function () {
            _super.prototype._onUnregister.call(this);
            this.active = false;
            this._spatialManager.removeSpatialComponent(this);
        };
        SpatialComponent.prototype.onTick = function (delta) {
            if(this.active) {
                this._x += this.velocityX * delta;
                this._y += this.velocityY * delta;
                this.rotation += this.angularVelocity * delta;
            }
        };
        SpatialComponent.prototype.setType = function (maskType) {
            this.type = this._spatialManager.typeManager.getBitMask(maskType);
        };
        SpatialComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._spatialManager = null;
            this._center = null;
            this._position = null;
            this._velocity = null;
            this._extents = null;
            this.type = null;
        };
        return SpatialComponent;
    })(Avota.TickedComponent);
    Avota.SpatialComponent = SpatialComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DebugRenderComponent = (function (_super) {
        __extends(DebugRenderComponent, _super);
        function DebugRenderComponent(timeManager, renderManager, spatialManager, inputManager) {
                _super.call(this, timeManager, renderManager);
            this._spatialManager = spatialManager;
            this._inputManager = inputManager;
            this._camera = this._renderManager.camera;
            this._entities = [];
            this.priority = -100;
            this.layerIndex = 100;
            this._lineBuffer = 7;
            this._pt = new Avota.Point();
            this._result = new Avota.Point();
            this._draws = 0;
            this._renderManager.getLayer(this.layerIndex, true).cameraTransformOptions = Avota.TransformOptions.SCALE;
            this._profiler = this.create(Avota.Profiler, name + "Profiler");
            this._profiler.add("debug", "rgb(255,255,255)");
        }
        DebugRenderComponent.prototype._onRegister = function () {
            this.addEntities(this._owner);
            _super.prototype._onRegister.call(this);
        };
        DebugRenderComponent.prototype._onUnregister = function () {
            this.removeEntities();
            _super.prototype._onUnregister.call(this);
        };
        DebugRenderComponent.prototype.addEntity = function (entity) {
            if(!this.hasEntity(entity)) {
                var renderComponent = entity.getComponent(Avota.EngineConstants.RENDER);
                var spatialComponent = entity.getComponent(Avota.EngineConstants.SPATIAL);
                if(renderComponent || spatialComponent) {
                    this._entities.push(entity);
                }
            }
        };
        DebugRenderComponent.prototype.hasEntity = function (entity) {
            return this._entities.indexOf(entity) != -1;
        };
        DebugRenderComponent.prototype.addEntities = function (group) {
            var entity;
            var entities = group.getByType(Avota.Entity);
            if(group instanceof Avota.GameEntity) {
                this.addEntity(group);
            }
            for(var i = 0; i < entities.length; i++) {
                entity = entities[i];
                if(entity) {
                    if(entity instanceof Avota.Group) {
                        this.addEntities(entity);
                    }
                } else {
                    if(entity instanceof Avota.GameEntity) {
                        this.addEntity(entity);
                    }
                }
            }
        };
        DebugRenderComponent.prototype.removeEntity = function (name) {
            for(var i = 0; i < this._entities.length; i++) {
                if(this._entities[i].name == name) {
                    this._entities.splice(i, 1);
                    return;
                }
            }
        };
        DebugRenderComponent.prototype.removeEntities = function (prefix) {
            for(var i = this._entities.length - 1; i >= 0; i--) {
                if((prefix && this._entities[i].name.indexOf(prefix) != -1) || !prefix) {
                    this._entities.splice(i, 1);
                }
            }
        };
        DebugRenderComponent.prototype.onFrame = function (delta) {
            this._profiler.begin("debug");
            var i;
            var n;
            this._draws = 0;
            this._renderContext.font = "6px Monaco";
            if(this._inputManager._inputPointers.length != Avota.InputManager.NUM_POINTERS) {
                this._renderContext.fillStyle = "rgba(255,255,153,0.25)";
                this._renderContext.beginPath();
                for(var key in this._inputManager._activeInputPointers) {
                    this._pointer = this._inputManager._activeInputPointers[key];
                    if(this._pointer.isDown) {
                        continue;
                    }
                    this._renderContext.moveTo(this._pointer.x, this._pointer.y);
                    this._renderContext.arc(this._pointer.x, this._pointer.y, (this._pointer.id == 0) ? 18 : 32, 0, Math.PI * 2);
                }
                this._renderContext.closePath();
                this._renderContext.fill();
                this._draws++;
                this._renderContext.fillStyle = "rgba(255,255,153,.75)";
                this._renderContext.beginPath();
                for(var key in this._inputManager._activeInputPointers) {
                    this._pointer = this._inputManager._activeInputPointers[key];
                    if(!this._pointer.isDown) {
                        continue;
                    }
                    this._renderContext.moveTo(this._pointer.x, this._pointer.y);
                    this._renderContext.arc(this._pointer.x, this._pointer.y, (this._pointer.id == 0) ? 18 : 32, 0, Math.PI * 2);
                }
                this._renderContext.closePath();
                this._renderContext.fill();
                this._draws++;
                this._log.log("INPUT");
            }
            for(i = 0; i < this._entities.length; i++) {
                this._entity = this._entities[i];
                if(this._entity.destroyed || this._entity.visible == false || this._entity._debugInfo == Avota.DebugInfo.NONE) {
                    continue;
                }
                this._renderComponents = this._entity.getComponentsByType(Avota.RenderComponent);
                if(this._renderComponents) {
                    this._renderContext.lineWidth = .5;
                    this._renderContext.strokeStyle = "rgb(255,0,0)";
                    this._renderContext.fillStyle = "rgba(255,0,0,0.25)";
                    this._renderContext.beginPath();
                    for(n = 0; n < this._renderComponents.length; n++) {
                        if((this._entity._debugInfo & Avota.DebugInfo.RENDER_BOUNDS) != Avota.DebugInfo.RENDER_BOUNDS) {
                            continue;
                        }
                        this._renderComponent = this._renderComponents[n];
                        if(!this._renderComponent.visible) {
                            continue;
                        }
                        this._renderLayer = this._renderManager.getLayer(this._renderComponent.layerIndex, true);
                        this._position = (this._renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) ? this._renderComponent.position : this._camera.globalToLocal(this._renderComponent.position);
                        this._center = (this._renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) ? this._renderComponent.center : this._camera.globalToLocal(this._renderComponent.center);
                        this._renderContext.moveTo(this._position.x, this._position.y);
                        this._renderContext.arc(this._position.x, this._position.y, 2, 0, Math.PI * 2);
                        this._renderContext.moveTo(this._position.x + this._renderComponent.registrationX, this._position.y + this._renderComponent.registrationY);
                        this._renderContext.arc(this._position.x + this._renderComponent.registrationX, this._position.y + this._renderComponent.registrationY, 2, 0, Math.PI * 2);
                        this._renderContext.moveTo(this._center.x, this._center.y);
                        this._renderContext.arc(this._center.x, this._center.y, 2, 0, Math.PI * 2);
                        if(this._renderComponent instanceof Avota.TileRenderComponent) {
                            this._tileRenderComponent = this._renderComponent;
                            this._topRow = this.clamp(Math.floor((this._camera.top - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                            this._bottomRow = this.clamp(Math.ceil((this._camera.bottom - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                            this._leftCol = this.clamp(Math.floor((this._camera.left - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                            this._rightCol = this.clamp(Math.ceil((this._camera.right - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                            for(var r = this._topRow; r < this._bottomRow; r++) {
                                for(var c = this._leftCol; c < this._rightCol; c++) {
                                    this._tile = this._tileRenderComponent.tiles[(r * this._tileRenderComponent.cols) + c];
                                    if(!this._tile) {
                                        continue;
                                    }
                                    if(this._tile.type) {
                                        this._renderContext.rect(this._position.x + (c * this._tile.width), this._position.y + (r * this._tile.height), this._tile.width, this._tile.height);
                                    }
                                }
                            }
                        } else {
                            if(this._renderComponent.rotation != 0) {
                                this._pt.x = this._position.x + this._renderComponent.offsetX;
                                this._pt.y = this._position.y + this._renderComponent.offsetY;
                                this._pt = this.rotatePoint(this._pt, this._center, this._renderComponent.rotation);
                                this._renderContext.moveTo(this._pt.x, this._pt.y);
                                this._pt.x = this._position.x + this._renderComponent.offsetX + this._renderComponent.width;
                                this._pt.y = this._position.y + this._renderComponent.offsetY;
                                this._pt = this.rotatePoint(this._pt, this._center, this._renderComponent.rotation);
                                this._renderContext.lineTo(this._pt.x, this._pt.y);
                                this._pt.x = this._position.x + this._renderComponent.offsetX + this._renderComponent.width;
                                this._pt.y = this._position.y + this._renderComponent.offsetY + this._renderComponent.height;
                                this._pt = this.rotatePoint(this._pt, this._center, this._renderComponent.rotation);
                                this._renderContext.lineTo(this._pt.x, this._pt.y);
                                this._pt.x = this._position.x + this._renderComponent.offsetX;
                                this._pt.y = this._position.y + this._renderComponent.offsetY + this._renderComponent.height;
                                this._pt = this.rotatePoint(this._pt, this._center, this._renderComponent.rotation);
                                this._renderContext.lineTo(this._pt.x, this._pt.y);
                                this._pt.x = this._position.x + this._renderComponent.offsetX;
                                this._pt.y = this._position.y + this._renderComponent.offsetY;
                                this._pt = this.rotatePoint(this._pt, this._center, this._renderComponent.rotation);
                                this._renderContext.lineTo(this._pt.x, this._pt.y);
                            } else {
                                this._renderContext.moveTo(this._position.x + this._renderComponent.offsetX, this._position.y + this._renderComponent.offsetY);
                                this._renderContext.rect(this._position.x + this._renderComponent.offsetX, this._position.y + this._renderComponent.offsetY, this._renderComponent.width, this._renderComponent.height);
                            }
                        }
                    }
                    this._renderContext.closePath();
                    this._renderContext.fill();
                    this._renderContext.stroke();
                    this._draws += 2;
                }
                this._spatialComponents = this._entity.getComponentsByType(Avota.SpatialComponent);
                if(this._spatialComponents) {
                    this._renderContext.strokeStyle = "rgb(0,0,255)";
                    this._renderContext.fillStyle = "rgba(0,0,255,0.25)";
                    this._renderContext.beginPath();
                    for(n = 0; n < this._spatialComponents.length; n++) {
                        if((this._entity._debugInfo & Avota.DebugInfo.SPATIAL_BOUNDS) != Avota.DebugInfo.SPATIAL_BOUNDS) {
                            continue;
                        }
                        this._spatialComponent = this._spatialComponents[n];
                        if(!this._spatialComponent.active) {
                            continue;
                        }
                        this._position = this._camera.globalToLocal(this._spatialComponent.position);
                        this._center = this._camera.globalToLocal(this._spatialComponent.center);
                        this._renderContext.moveTo(this._position.x, this._position.y);
                        this._renderContext.arc(this._position.x, this._position.y, 2, 0, Math.PI * 2);
                        this._renderContext.moveTo(this._center.x, this._center.y);
                        this._renderContext.arc(this._center.x, this._center.y, 2, 0, Math.PI * 2);
                        this._renderContext.moveTo(this._position.x, this._position.y);
                        this._renderContext.rect(this._position.x, this._position.y, this._spatialComponent.width, this._spatialComponent.height);
                    }
                    this._renderContext.closePath();
                    this._renderContext.fill();
                    this._renderContext.stroke();
                    this._draws += 2;
                    this._renderContext.lineWidth = 1;
                    this._renderContext.strokeStyle = "rgb(0,255,0)";
                    this._renderContext.beginPath();
                    for(n = 0; n < this._spatialComponents.length; n++) {
                        if((this._entity._debugInfo & Avota.DebugInfo.VELOCITY) != Avota.DebugInfo.VELOCITY) {
                            continue;
                        }
                        this._spatialComponent = this._spatialComponents[n];
                        if(!this._spatialComponent.active) {
                            continue;
                        }
                        this._center = this._camera.globalToLocal(this._spatialComponent.center);
                        this._renderContext.moveTo(this._center.x, this._center.y);
                        this._renderContext.lineTo(this._center.x + (this._spatialComponent.velocityX / 10), this._center.y + (this._spatialComponent.velocityY / 10));
                    }
                    this._renderContext.closePath();
                    this._renderContext.stroke();
                    this._draws++;
                }
                this._spatialComponent = null;
                this._renderComponent = null;
                this._animationComponent = this._entity.getComponent(Avota.EngineConstants.ANIMATION);
                if(this._renderComponents && this._renderComponents.length > 0) {
                    this._renderComponent = this._renderComponents[0];
                    this._renderLayer = this._renderManager.getLayer(this._renderComponent.layerIndex, true);
                    this._position = (this._renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) ? this._renderComponent.position : this._camera.globalToLocal(this._renderComponent.position);
                    this._center = (this._renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) ? this._renderComponent.center : this._camera.globalToLocal(this._renderComponent.center);
                    this._linePos = this._renderComponent.height;
                }
                if(this._spatialComponents && this._spatialComponents.length > 0) {
                    this._spatialComponent = this._spatialComponents[0];
                    this._position = this._camera.globalToLocal(this._spatialComponent.position);
                    this._center = this._camera.globalToLocal(this._spatialComponent.center);
                    this._linePos = this._spatialComponent.height;
                }
                this._renderContext.fillStyle = "rgb(255,255,255)";
                if(this._renderComponent instanceof Avota.TileRenderComponent && (this._entity._debugInfo & Avota.DebugInfo.TYPE) == Avota.DebugInfo.TYPE) {
                    this._tileRenderComponent = this._renderComponent;
                    this._topRow = this.clamp(Math.floor((this._camera.top - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                    this._bottomRow = this.clamp(Math.ceil((this._camera.bottom - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                    this._leftCol = this.clamp(Math.floor((this._camera.left - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                    this._rightCol = this.clamp(Math.ceil((this._camera.right - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                    for(var r = this._topRow; r < this._bottomRow; r++) {
                        for(var c = this._leftCol; c < this._rightCol; c++) {
                            this._tile = this._tileRenderComponent.tiles[(r * this._tileRenderComponent.cols) + c];
                            if(!this._tile || !this._tile.type) {
                                continue;
                            }
                            this._renderContext.fillText(this._tile.type.typeNames.toString(), this._position.x + (c * this._tile.width), this._position.y + this._tile.height + (r * this._tile.height) - 3);
                            this._draws++;
                        }
                    }
                }
                this._info = "";
                this._lineHeight = 5;
                if((this._entity._debugInfo & Avota.DebugInfo.NAME) == Avota.DebugInfo.NAME) {
                    this._info += this._entity.name + " ";
                }
                if(this._renderComponent && (this._entity._debugInfo & Avota.DebugInfo.Z_INFO) == Avota.DebugInfo.Z_INFO) {
                    this._info += this._renderComponent.layerIndex + "|" + this._renderComponent.zIndex + "|" + this._renderComponent._renderID;
                }
                this._renderContext.fillText(this._info, this._position.x, this._position.y + this._lineHeight);
                this._draws++;
                if(this._spatialComponent) {
                    this._info = "";
                    if((this._entity._debugInfo & Avota.DebugInfo.POSITION) == Avota.DebugInfo.POSITION) {
                        this._info += (this._spatialComponent.x + .5 | 0) + "," + (this._spatialComponent.y + .5 | 0) + " ";
                    }
                    if((this._entity._debugInfo & Avota.DebugInfo.CENTER) == Avota.DebugInfo.CENTER) {
                        this._info += "{" + (this._spatialComponent.centerX + .5 | 0) + "," + (this._spatialComponent.centerY + .5 | 0) + "} ";
                    }
                    if((this._entity._debugInfo & Avota.DebugInfo.VELOCITY) == Avota.DebugInfo.VELOCITY) {
                        this._info += "[" + (this._spatialComponent.velocityX + .5 | 0) + "," + (this._spatialComponent.velocityY + .5 | 0) + "]";
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                    this._info = "";
                    this._lineHeight += this._lineBuffer;
                    if((this._entity._debugInfo & Avota.DebugInfo.DIMENSIONS) == Avota.DebugInfo.DIMENSIONS) {
                        this._info += this._spatialComponent.width + "x" + this._spatialComponent.height + " ";
                    }
                    if((this._entity._debugInfo & Avota.DebugInfo.TYPE) == Avota.DebugInfo.TYPE) {
                        if(this._spatialComponent.type) {
                            this._info += "[" + this._spatialComponent.type.typeNames.toString() + "]";
                        }
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                } else if(this._renderComponent) {
                    this._info = "";
                    if((this._entity._debugInfo & Avota.DebugInfo.POSITION) == Avota.DebugInfo.POSITION) {
                        this._info += (this._renderComponent.x + .5 | 0) + "," + (this._renderComponent.y + .5 | 0) + " ";
                    }
                    if((this._entity._debugInfo & Avota.DebugInfo.CENTER) == Avota.DebugInfo.CENTER) {
                        this._info += "{" + (this._renderComponent.centerX + .5 | 0) + "," + (this._renderComponent.centerY + .5 | 0) + "}";
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                    this._info = "";
                    this._lineHeight += this._lineBuffer;
                    if((this._entity._debugInfo & Avota.DebugInfo.DIMENSIONS) == Avota.DebugInfo.DIMENSIONS) {
                        this._info += this._renderComponent.width + "x" + this._renderComponent.height;
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                }
                if(this._animationComponent && this._animationComponent.currentAnimation && (this._entity._debugInfo & Avota.DebugInfo.ANIMATION) == Avota.DebugInfo.ANIMATION) {
                    this._lineHeight += this._lineBuffer;
                    this._info = "[" + this._animationComponent.totalAnimations + "]";
                    this._info += " " + this._animationComponent.currentAnimation.name;
                    this._info += " " + (this._animationComponent.currentAnimation.frameIndex + 1) + "/" + this._animationComponent.currentAnimation.totalFrames;
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                }
            }
            this._profiler.end("debug");
            _super.prototype.onFrame.call(this, delta);
        };
        DebugRenderComponent.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        DebugRenderComponent.prototype.rotatePoint = function (point, anchor, rotation) {
            if(rotation == 0) {
                return point;
            }
            var r = rotation * (Math.PI / 180);
            var dx = point.x - anchor.x;
            var dy = point.y - anchor.y;
            var cos = Math.cos(r);
            var sin = Math.sin(r);
            this._result.x = anchor.x + dx * cos - dy * sin | 0;
            this._result.y = anchor.y + dy * cos + dx * sin | 0;
            return this._result;
        };
        return DebugRenderComponent;
    })(Avota.RenderComponent);
    Avota.DebugRenderComponent = DebugRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameEntity = (function (_super) {
        __extends(GameEntity, _super);
        function GameEntity(timeManager, name) {
            if (typeof name === "undefined") { name = GameEntity.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._receivesOnTick = false;
            this._children = [];
            this.data = {
            };
            this._debugInfo = Avota.DebugInfo.ALL;
        }
        GameEntity.NAME = "GameEntity";
        GameEntity.prototype.set = function (params) {
            for(var key in params) {
                this[key] = params[key];
            }
        };
        GameEntity.prototype.enableOnTick = function (priority) {
            if (typeof priority === "undefined") { priority = 0; }
            this._timeManager.addTickedObject(this, priority);
            this._receivesOnTick = true;
        };
        GameEntity.prototype.disableOnTick = function () {
            this._timeManager.removeTickedObject(this);
            this._receivesOnTick = false;
        };
        GameEntity.prototype.enable = function () {
        };
        GameEntity.prototype.disable = function () {
        };
        GameEntity.prototype.reset = function () {
        };
        GameEntity.prototype.onTick = function (delta) {
        };
        GameEntity.prototype.addChild = function (child) {
            return this.addChildAt(child, this._children.length);
        };
        GameEntity.prototype.addChildAt = function (child, index) {
            if(child._parent) {
                child._parent.removeChild(child);
            }
            var existingIndex = this.getChildIndex(child);
            if(existingIndex != -1) {
                this.removeChildAt(existingIndex);
            }
            child._parent = this;
            this._updateNode(true);
            child._updateNode(true);
            this._children.splice(index, 0, child);
            return child;
        };
        GameEntity.prototype.removeChild = function (child) {
            var index = this._children.indexOf(child);
            if(index >= 0) {
                this.removeChildAt(index);
            }
        };
        GameEntity.prototype.removeChildAt = function (index) {
            if(index < this._children.length) {
                this._children[index]._parent = null;
                this._children.splice(index, 1);
                this._updateNode(true);
            }
        };
        GameEntity.prototype.getChildAt = function (index) {
            if(index < this._children.length) {
                return this._children[index];
            }
            return null;
        };
        GameEntity.prototype.getChildIndex = function (child) {
            return this._children.indexOf(child);
        };
        GameEntity.prototype.swapChildren = function (child1, child2) {
            var index1 = this.getChildIndex(child1);
            var index2 = this.getChildIndex(child2);
            this._children[index1] = child2;
            this._children[index2] = child1;
        };
        GameEntity.prototype.removeAllChildren = function () {
            while(this._children.length > 0) {
                this.removeChildAt(0);
            }
        };
        GameEntity.prototype.globalToLocal = function (position) {
            return null;
        };
        GameEntity.prototype.localToGlobal = function (position) {
            return null;
        };
        GameEntity.prototype._updateNode = function (parentTransformDirty) {
        };
        GameEntity.prototype.destroy = function () {
            if(this._receivesOnTick) {
                this.disableOnTick();
            }
            if(this._parent) {
                this._parent.removeChild(this);
            }
            this.removeAllChildren();
            _super.prototype.destroy.call(this);
            this.data = null;
            this._parent = null;
            this._children = null;
            this._timeManager = null;
        };
        return GameEntity;
    })(Avota.Entity);
    Avota.GameEntity = GameEntity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CanvasGraphic = (function (_super) {
        __extends(CanvasGraphic, _super);
        function CanvasGraphic(timeManager, renderManager, width, height, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof name === "undefined") { name = CanvasGraphic.NAME; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._canvas = document.createElement('canvas');
            this._renderContext = this._canvas.getContext('2d');
            this._canvas.width = width;
            this._canvas.height = height;
            if(this._timeManager && this._renderManager) {
                this._createRenderComponent();
            }
        }
        CanvasGraphic.NAME = "CanvasGraphic";
        Object.defineProperty(CanvasGraphic.prototype, "renderContext", {
            get: function () {
                return this._renderContext;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "isShaking", {
            get: function () {
                return this._renderComponent.isShaking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "isFlashing", {
            get: function () {
                return this._renderComponent.isFlashing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "tint", {
            get: function () {
                return this._renderComponent.tint;
            },
            set: function (value) {
                this._renderComponent.tint = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "mask", {
            get: function () {
                return this._renderComponent.mask;
            },
            set: function (value) {
                this._renderComponent.mask = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "view", {
            get: function () {
                return this._renderComponent.view;
            },
            set: function (value) {
                this._renderComponent.view = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "blendMode", {
            get: function () {
                return this._renderComponent.compositeOperation;
            },
            set: function (value) {
                this._renderComponent.compositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "x", {
            get: function () {
                return this._renderComponent.x;
            },
            set: function (value) {
                this._renderComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "y", {
            get: function () {
                return this._renderComponent.y;
            },
            set: function (value) {
                this._renderComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "rotation", {
            get: function () {
                return this._renderComponent.rotation;
            },
            set: function (value) {
                this._renderComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "centerX", {
            get: function () {
                return this._renderComponent.centerX;
            },
            set: function (value) {
                this._renderComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "centerY", {
            get: function () {
                return this._renderComponent.centerY;
            },
            set: function (value) {
                this._renderComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "top", {
            get: function () {
                return this._renderComponent.top;
            },
            set: function (value) {
                this._renderComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "left", {
            get: function () {
                return this._renderComponent.left;
            },
            set: function (value) {
                this._renderComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "right", {
            get: function () {
                return this._renderComponent.right;
            },
            set: function (value) {
                this._renderComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "bottom", {
            get: function () {
                return this._renderComponent.bottom;
            },
            set: function (value) {
                this._renderComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "halfWidth", {
            get: function () {
                return this._renderComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "halfHeight", {
            get: function () {
                return this._renderComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "center", {
            get: function () {
                return this._renderComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "position", {
            get: function () {
                return this._renderComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "extents", {
            get: function () {
                return this._renderComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "_worldTransform", {
            get: function () {
                return this._renderComponent._worldTransform;
            },
            enumerable: true,
            configurable: true
        });
        CanvasGraphic.prototype._createRenderComponent = function () {
            this._renderComponent = this.create(Avota.RenderComponent, this._timeManager, this._renderManager, this._canvas);
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
        };
        CanvasGraphic.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        CanvasGraphic.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        CanvasGraphic.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        CanvasGraphic.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        CanvasGraphic.prototype.flash = function (repeat, duration, color) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            this._renderComponent.flash(repeat, duration, color);
        };
        CanvasGraphic.prototype.stopFlash = function () {
            this._renderComponent.stopFlash();
        };
        CanvasGraphic.prototype.setSize = function (width, height) {
            this._canvas.width = width;
            this._canvas.height = height;
        };
        CanvasGraphic.prototype.translateContext = function (x, y) {
            this._renderContext.translate(x, y);
        };
        CanvasGraphic.prototype.rotateContext = function (r) {
            this._renderContext.rotate(r);
        };
        CanvasGraphic.prototype.scaleContext = function (x, y) {
            this._renderContext.scale(x, y);
        };
        CanvasGraphic.prototype.setTransform = function (a, b, c, d, tx, ty) {
            this._renderContext.setTransform(a, b, c, d, tx, ty);
        };
        CanvasGraphic.prototype.drawImage = function (image, sx, sy, sw, sh, dx, dy, dw, dh) {
            if(!dx) {
                dx = sx;
            }
            if(!dy) {
                dy = sy;
            }
            if(!dw) {
                dw = sw;
            }
            if(!dh) {
                dh = sh;
            }
            this._renderContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.getImageData = function (x, y, width, height) {
            return this._renderContext.getImageData(x, y, width, height);
        };
        CanvasGraphic.prototype.putImageData = function (imageData, x, y, dx, dy, dw, dh) {
            this._renderContext.putImageData(imageData, x, y, dx, dy, dw, dh);
        };
        CanvasGraphic.prototype.createImageData = function (width, height) {
            return this._renderContext.createImageData(width, height);
        };
        Object.defineProperty(CanvasGraphic.prototype, "globalCompositeOperation", {
            set: function (value) {
                this._renderContext.globalCompositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "fillStyle", {
            set: function (value) {
                this._renderContext.fillStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "strokeStyle", {
            set: function (value) {
                this._renderContext.strokeStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "lineWidth", {
            set: function (value) {
                this._renderContext.lineWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "lineJoin", {
            set: function (value) {
                this._renderContext.lineJoin = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "lineCap", {
            set: function (value) {
                this._renderContext.lineCap = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "shadowOffsetX", {
            set: function (value) {
                this._renderContext.shadowOffsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "shadowOffsetY", {
            set: function (value) {
                this._renderContext.shadowOffsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "shadowBlur", {
            set: function (value) {
                this._renderContext.shadowBlur = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "shadowColor", {
            set: function (value) {
                this._renderContext.shadowColor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasGraphic.prototype, "font", {
            set: function (value) {
                this._renderContext.font = value;
            },
            enumerable: true,
            configurable: true
        });
        CanvasGraphic.prototype.clip = function () {
            this._renderContext.clip();
        };
        CanvasGraphic.prototype.beginPath = function () {
            this._renderContext.beginPath();
        };
        CanvasGraphic.prototype.closePath = function () {
            this._renderContext.closePath();
        };
        CanvasGraphic.prototype.rect = function (x, y, width, height) {
            this._renderContext.rect(x, y, width, height);
        };
        CanvasGraphic.prototype.arc = function (x, y, radius, startAngle, endAngle, antiClockwise) {
            this._renderContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
        };
        CanvasGraphic.prototype.moveTo = function (x, y) {
            this._renderContext.moveTo(x, y);
        };
        CanvasGraphic.prototype.lineTo = function (x, y) {
            this._renderContext.lineTo(x, y);
        };
        CanvasGraphic.prototype.arcTo = function (x1, y1, x2, y2, radius) {
            this._renderContext.arcTo(x1, y1, x2, y2, radius);
        };
        CanvasGraphic.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {
            this._renderContext.quadraticCurveTo(x1, y1, x2, y2);
        };
        CanvasGraphic.prototype.fill = function () {
            this._renderContext.fill();
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.fillRect = function (x, y, width, height) {
            this._renderContext.fillRect(x, y, width, height);
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.fillText = function (text, x, y, maxWidth) {
            this._renderContext.fillText(text, x, y, maxWidth);
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.stroke = function () {
            this._renderContext.stroke();
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.strokeRect = function (x, y, width, height) {
            this._renderContext.strokeRect(x, y, width, height);
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.strokeText = function (text, x, y, maxWidth) {
            this._renderContext.strokeText(text, x, y, maxWidth);
            this._renderManager._draws++;
        };
        CanvasGraphic.prototype.clearRect = function (x, y, width, height) {
            this._renderContext.clearRect(x, y, width, height);
        };
        CanvasGraphic.prototype.createLinearGradient = function (x1, y1, x2, y2) {
            return this._renderContext.createLinearGradient(x1, y1, x2, y2);
        };
        CanvasGraphic.prototype.createRadialGradient = function (x1, y1, r1, x2, y2, r2) {
            return this._renderContext.createRadialGradient(x1, y1, r1, x2, y2, r2);
        };
        CanvasGraphic.prototype.createPattern = function (image, repeat) {
            return this._renderContext.createPattern(image, repeat);
        };
        CanvasGraphic.prototype.clear = function () {
            this._renderContext.clearRect(0, 0, this.width, this.height);
        };
        CanvasGraphic.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        CanvasGraphic.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        CanvasGraphic.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        CanvasGraphic.prototype.destroy = function () {
            this.clear();
            _super.prototype.destroy.call(this);
            this._canvas = null;
            this._renderContext = null;
            this._renderComponent = null;
            this._renderManager = null;
        };
        return CanvasGraphic;
    })(Avota.GameEntity);
    Avota.CanvasGraphic = CanvasGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DebugInfo = (function () {
        function DebugInfo() { }
        DebugInfo.NONE = 1 << 0;
        DebugInfo.RENDER_BOUNDS = 1 << 1;
        DebugInfo.SPATIAL_BOUNDS = 1 << 2;
        DebugInfo.NAME = 1 << 3;
        DebugInfo.Z_INFO = 1 << 4;
        DebugInfo.POSITION = 1 << 5;
        DebugInfo.CENTER = 1 << 6;
        DebugInfo.VELOCITY = 1 << 7;
        DebugInfo.DIMENSIONS = 1 << 8;
        DebugInfo.TYPE = 1 << 9;
        DebugInfo.ANIMATION = 1 << 10;
        DebugInfo.ALL = DebugInfo.RENDER_BOUNDS | DebugInfo.SPATIAL_BOUNDS | DebugInfo.NAME | DebugInfo.Z_INFO | DebugInfo.POSITION | DebugInfo.VELOCITY | DebugInfo.DIMENSIONS | DebugInfo.TYPE | DebugInfo.ANIMATION;
        return DebugInfo;
    })();
    Avota.DebugInfo = DebugInfo;    
    var DebugRenderGraphic = (function (_super) {
        __extends(DebugRenderGraphic, _super);
        function DebugRenderGraphic(game) {
                _super.call(this, game.timeManager, game.renderManager, game.width, game.height, DebugRenderGraphic.NAME);
            this._game = game;
            this._spatialManager = this._game.spatialManager;
            this._inputManager = this._game.inputManager;
            this._camera = this._renderManager.camera;
            this._entities = [];
            this.layerIndex = Avota.EngineConstants.LAYERINDEX_DEBUG;
            this._lineBuffer = 7;
            this._pt = new Avota.Point();
            this._result = new Avota.Point();
            this._draws = 0;
            this._renderManager.getLayer(this.layerIndex, true).cameraTransformOptions = Avota.TransformOptions.NONE;
            this._profiler = this.create(Avota.Profiler, name + "Profiler");
            this._profiler.add("debug", "rgb(255,255,255)");
            this._timeManager.preFrame.add(this.onFrame, this);
        }
        DebugRenderGraphic.NAME = "DebugRenderGraphic";
        DebugRenderGraphic.prototype.addEntity = function (entity) {
            if(!this.hasEntity(entity)) {
                var renderComponent = entity.getComponent(Avota.EngineConstants.RENDER);
                var spatialComponent = entity.getComponent(Avota.EngineConstants.SPATIAL);
                if(renderComponent || spatialComponent) {
                    this._entities.push(entity);
                }
            }
        };
        DebugRenderGraphic.prototype.hasEntity = function (entity) {
            return this._entities.indexOf(entity) != -1;
        };
        DebugRenderGraphic.prototype.addEntities = function (group) {
            var entity;
            var entities = group.getByType(Avota.Entity);
            if(group instanceof Avota.GameEntity) {
                this.addEntity(group);
            }
            for(var i = 0; i < entities.length; i++) {
                entity = entities[i];
                if(entity) {
                    if(entity instanceof Avota.Group) {
                        this.addEntities(entity);
                    }
                } else {
                    if(entity instanceof Avota.GameEntity) {
                        this.addEntity(entity);
                    }
                }
            }
        };
        DebugRenderGraphic.prototype.removeEntity = function (name) {
            for(var i = 0; i < this._entities.length; i++) {
                if(this._entities[i].name == name) {
                    this._entities.splice(i, 1);
                    return;
                }
            }
        };
        DebugRenderGraphic.prototype.removeEntities = function (prefix) {
            for(var i = this._entities.length - 1; i >= 0; i--) {
                if((prefix && this._entities[i].name.indexOf(prefix) != -1) || !prefix) {
                    this._entities.splice(i, 1);
                }
            }
        };
        DebugRenderGraphic.prototype.removeAllEntities = function () {
            for(var i = this._entities.length - 1; i >= 0; i--) {
                this._entities.splice(i, 1);
            }
            this._entities = [];
        };
        DebugRenderGraphic.prototype.onFrame = function () {
            this._profiler.begin("debug");
            var i;
            var n;
            this._draws = 0;
            this._renderContext.font = "8px Monaco";
            this._renderContext.clearRect(0, 0, this.width, this.height);
            if(this._inputManager._inputPointers.length != Avota.InputManager.NUM_POINTERS) {
                this._renderContext.fillStyle = "rgba(255,255,153,0.25)";
                this._renderContext.beginPath();
                for(var key in this._inputManager._activeInputPointers) {
                    this._pointer = this._inputManager._activeInputPointers[key];
                    if(this._pointer.isDown) {
                        continue;
                    }
                    this._renderContext.moveTo(this._pointer.x, this._pointer.y);
                    this._renderContext.arc(this._pointer.x, this._pointer.y, (this._pointer.id == 0) ? 18 : 32, 0, Math.PI * 2);
                }
                this._renderContext.closePath();
                this._renderContext.fill();
                this._draws++;
                this._renderContext.fillStyle = "rgba(255,255,153,.75)";
                this._renderContext.beginPath();
                for(var key in this._inputManager._activeInputPointers) {
                    this._pointer = this._inputManager._activeInputPointers[key];
                    if(!this._pointer.isDown) {
                        continue;
                    }
                    this._renderContext.moveTo(this._pointer.x, this._pointer.y);
                    this._renderContext.arc(this._pointer.x, this._pointer.y, (this._pointer.id == 0) ? 18 : 32, 0, Math.PI * 2);
                }
                this._renderContext.closePath();
                this._renderContext.fill();
                this._draws++;
            }
            for(i = 0; i < this._entities.length; i++) {
                this._entity = this._entities[i];
                if(this._entity.destroyed || this._entity.visible == false || this._entity._debugInfo == DebugInfo.NONE || this._entity === this) {
                    continue;
                }
                this._renderComponents = this._entity.getComponentsByType(Avota.RenderComponent);
                if(this._renderComponents) {
                    this._renderContext.lineWidth = .5;
                    this._renderContext.strokeStyle = "rgb(255,0,0)";
                    this._renderContext.fillStyle = "rgba(255,0,0,0.25)";
                    this._renderContext.beginPath();
                    for(n = 0; n < this._renderComponents.length; n++) {
                        if((this._entity._debugInfo & DebugInfo.RENDER_BOUNDS) != DebugInfo.RENDER_BOUNDS) {
                            continue;
                        }
                        this._debugRenderComponent = this._renderComponents[n];
                        if(!this._debugRenderComponent.visible) {
                            continue;
                        }
                        this._renderLayer = this._renderManager.getLayer(this._debugRenderComponent.layerIndex, true);
                        this._extents = this._debugRenderComponent.extents;
                        this._position = (this._renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) ? this._extents.topLeft : this._camera.globalToLocal(this._extents.topLeft);
                        this._renderContext.moveTo(this._position.x, this._position.y);
                        this._renderContext.arc(this._position.x, this._position.y, 2, 0, Math.PI * 2);
                        this._renderContext.moveTo(this._debugRenderComponent.x + this._debugRenderComponent.registrationX, this._debugRenderComponent.y + this._debugRenderComponent.registrationY);
                        this._renderContext.arc(this._debugRenderComponent.x + this._debugRenderComponent.registrationX, this._debugRenderComponent.y + this._debugRenderComponent.registrationY, 2, 0, Math.PI * 2);
                        if(this._debugRenderComponent instanceof Avota.TileRenderComponent) {
                            this._tileRenderComponent = this._debugRenderComponent;
                            this._topRow = this.clamp(Math.floor((this._camera.top - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                            this._bottomRow = this.clamp(Math.ceil((this._camera.bottom - this._tileRenderComponent.y) / this._tileRenderComponent.tileHeight), 0, this._tileRenderComponent.rows);
                            this._leftCol = this.clamp(Math.floor((this._camera.left - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                            this._rightCol = this.clamp(Math.ceil((this._camera.right - this._tileRenderComponent.x) / this._tileRenderComponent.tileWidth), 0, this._tileRenderComponent.cols);
                            for(var r = this._topRow; r < this._bottomRow; r++) {
                                for(var c = this._leftCol; c < this._rightCol; c++) {
                                    this._tile = this._tileRenderComponent.tiles[(r * this._tileRenderComponent.cols) + c];
                                    if(!this._tile) {
                                        continue;
                                    }
                                    if(this._tile.type) {
                                        this._renderContext.rect(this._position.x + (c * this._tile.width), this._position.y + (r * this._tile.height), this._tile.width, this._tile.height);
                                    }
                                }
                            }
                        } else {
 {
                                this._renderContext.moveTo(this._position.x + this._debugRenderComponent.offsetX, this._position.y + this._debugRenderComponent.offsetY);
                                this._renderContext.rect(this._position.x + this._debugRenderComponent.offsetX, this._position.y + this._debugRenderComponent.offsetY, this._extents.width, this._extents.height);
                            }
                        }
                    }
                    this._renderContext.closePath();
                    this._renderContext.fill();
                    this._renderContext.stroke();
                    this._draws += 2;
                }
                this._renderContext.fillStyle = "rgb(255,255,255)";
                this._info = "";
                this._lineHeight = 5;
                if((this._entity._debugInfo & DebugInfo.NAME) == DebugInfo.NAME) {
                    this._info += this._entity.name + " ";
                }
                if(this._debugRenderComponent && (this._entity._debugInfo & DebugInfo.Z_INFO) == DebugInfo.Z_INFO) {
                    this._info += this._debugRenderComponent.layerIndex + "|" + this._debugRenderComponent.zIndex + "|" + this._debugRenderComponent._renderID;
                }
                this._renderContext.fillText(this._info, this._position.x, this._position.y + this._lineHeight);
                this._draws++;
                if(this._debugSpatialComponent) {
                    this._info = "";
                    if((this._entity._debugInfo & DebugInfo.POSITION) == DebugInfo.POSITION) {
                        this._info += (this._debugSpatialComponent.x + .5 | 0) + "," + (this._debugSpatialComponent.y + .5 | 0) + " ";
                    }
                    if((this._entity._debugInfo & DebugInfo.CENTER) == DebugInfo.CENTER) {
                        this._info += "{" + (this._debugSpatialComponent.centerX + .5 | 0) + "," + (this._debugSpatialComponent.centerY + .5 | 0) + "} ";
                    }
                    if((this._entity._debugInfo & DebugInfo.VELOCITY) == DebugInfo.VELOCITY) {
                        this._info += "[" + (this._debugSpatialComponent.velocityX + .5 | 0) + "," + (this._debugSpatialComponent.velocityY + .5 | 0) + "]";
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                    this._info = "";
                    this._lineHeight += this._lineBuffer;
                    if((this._entity._debugInfo & DebugInfo.DIMENSIONS) == DebugInfo.DIMENSIONS) {
                        this._info += this._debugSpatialComponent.width + "x" + this._debugSpatialComponent.height + " ";
                    }
                    if((this._entity._debugInfo & DebugInfo.TYPE) == DebugInfo.TYPE) {
                        if(this._debugSpatialComponent.type) {
                            this._info += "[" + this._debugSpatialComponent.type.typeNames.toString() + "]";
                        }
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                } else if(this._debugRenderComponent) {
                    this._info = "";
                    if((this._entity._debugInfo & DebugInfo.POSITION) == DebugInfo.POSITION) {
                        this._info += (this._debugRenderComponent.x + .5 | 0) + "," + (this._debugRenderComponent.y + .5 | 0) + " ";
                    }
                    if((this._entity._debugInfo & DebugInfo.CENTER) == DebugInfo.CENTER) {
                        this._info += "{" + (this._debugRenderComponent.centerX + .5 | 0) + "," + (this._debugRenderComponent.centerY + .5 | 0) + "}";
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                    this._info = "";
                    this._lineHeight += this._lineBuffer;
                    if((this._entity._debugInfo & DebugInfo.DIMENSIONS) == DebugInfo.DIMENSIONS) {
                        this._info += (this._debugRenderComponent.width + .5 | 0) + "x" + (this._debugRenderComponent.height + .5 | 0);
                    }
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                }
                if(this._debugAnimationComponent && this._debugAnimationComponent.currentAnimation && (this._entity._debugInfo & DebugInfo.ANIMATION) == DebugInfo.ANIMATION) {
                    this._lineHeight += this._lineBuffer;
                    this._info = "[" + this._debugAnimationComponent.totalAnimations + "]";
                    this._info += " " + this._debugAnimationComponent.currentAnimation.name;
                    this._info += " " + (this._debugAnimationComponent.currentAnimation.frameIndex + 1) + "/" + this._debugAnimationComponent.currentAnimation.totalFrames;
                    this._renderContext.fillText(this._info, this._position.x, this._position.y + this._linePos + this._lineHeight);
                    this._draws++;
                }
            }
            this._profiler.end("debug");
        };
        DebugRenderGraphic.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        DebugRenderGraphic.prototype.rotatePoint = function (point, anchor, rotation) {
            if(rotation == 0) {
                return point;
            }
            var r = rotation * (Math.PI / 180);
            var dx = point.x - anchor.x;
            var dy = point.y - anchor.y;
            var cos = Math.cos(r);
            var sin = Math.sin(r);
            this._result.x = anchor.x + dx * cos - dy * sin | 0;
            this._result.y = anchor.y + dy * cos + dx * sin | 0;
            return this._result;
        };
        return DebugRenderGraphic;
    })(Avota.CanvasGraphic);
    Avota.DebugRenderGraphic = DebugRenderGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Stats = (function (_super) {
        __extends(Stats, _super);
        function Stats(game) {
                _super.call(this, game.timeManager, game.renderManager, game.width, 64, Stats.NAME);
            this._game = game;
            this._timeManager = this._game.timeManager;
            this._spatialManager = this._game.spatialManager;
            this._fontSize = 10;
            this._graphHeight = 32;
            this._ms = 20;
            this._msHeight = this._graphHeight / this._ms;
            this._marks = [];
            this._clocks = {
            };
            this._watch = {
            };
            this._drawX = 0;
            this._drawY = 0;
            this._textX = 0;
            this._textY = 0;
            this._frames = 0;
            this._count = 0;
            this._16ms = Math.round(this._graphHeight - this._msHeight * 16);
            this._graph = document.createElement('canvas');
            this._graphContext = this._graph.getContext("2d");
            this._graph.width = this._game.width;
            this._graph.height = this._graphHeight;
            this._graphContext.fillStyle = "rgb(80,80,80)";
            this._graphContext.fillRect(0, this._16ms, this._graph.width, 1);
            this.layerIndex = Avota.EngineConstants.LAYERINDEX_STATS;
            this._renderManager.getLayer(this.layerIndex, true).cameraTransformOptions = Avota.TransformOptions.NONE;
            this._renderManager.getLayer(this.layerIndex, true).preventAutoReset = true;
            this._renderFunction = this.renderFull;
            this._type = Stats.FULL;
            this._timeManager.postFrame.add(this.onFrame, this);
        }
        Stats.NAME = "Stats";
        Stats.FULL = "full";
        Stats.MINIMAL = "minimal";
        Stats.prototype.onDown = function (sprite, x, y, id) {
            switch(this._type) {
                case Stats.FULL:
                    this.setType(Stats.MINIMAL);
                    break;
                case Stats.MINIMAL:
                    this.setType(Stats.FULL);
                    break;
            }
        };
        Stats.prototype.setType = function (type) {
            this._type = type;
            switch(this._type) {
                case Stats.FULL:
                    this.width = this._game.width;
                    this.height = 64;
                    this._renderFunction = this.renderFull;
                    break;
                case Stats.MINIMAL:
                    this.width = 150;
                    this.height = 14;
                    this._renderFunction = this.renderMinimal;
                    break;
            }
            switch(this._game.settings.statsPosition) {
                case 1:
                    this.top = 0;
                    this.left = 0;
                    break;
                case 2:
                    this.centerX = this._game.width / 2;
                    break;
                case 3:
                    this.right = this._game.width;
                    break;
                case 4:
                    this.centerY = this._game.height / 2;
                    break;
                case 5:
                    this.centerX = this._game.width / 2;
                    this.centerY = this._game.height / 2;
                    break;
                case 6:
                    this.right = this._game.width;
                    this.centerY = this._game.height / 2;
                    break;
                case 7:
                    this.bottom = this._game.height;
                    break;
                case 8:
                    this.centerX = this._game.width / 2;
                    this.bottom = this._game.height;
                    break;
                case 9:
                    this.right = this._game.width;
                    this.bottom = this._game.height;
                    break;
            }
        };
        Stats.prototype.addWatch = function (name, element, prop) {
            this._watch[name] = {
                element: element,
                prop: prop
            };
        };
        Stats.prototype.addMark = function (message, color) {
            if (typeof color === "undefined") { color = "rgba(255,255,255,.5)"; }
            this._marks.push({
                message: message,
                color: color
            });
        };
        Stats.prototype.addClock = function (name, clock) {
            this._clocks[name] = clock;
        };
        Stats.prototype.onFrame = function () {
            this._tileMaps = this._game.getByType(Avota.TileMap);
            this._spatialQueries = this._spatialManager._checks;
            for(var i = 0; i < this._tileMaps.length; i++) {
                this._spatialQueries += this._tileMaps[i]._checks;
            }
            this._renderContext.clearRect(0, 0, this._game.width, this._game.height);
            this._renderContext.fillStyle = "rgb(32,32,32)";
            this._renderContext.fillRect(0, 0, this.width, this.height);
            this._sec = Math.floor((window.performance.now() / 1000) + .5);
            this._min = Math.floor(this._sec / 60);
            this._hr = Math.floor(this._min / 60);
            this._frames++;
            this._textX = 8;
            this._drawX = this._graph.width - 1;
            this._drawY = this._graphHeight;
            this._graphContext.drawImage(this._graph, -1, 0);
            this._graphContext.fillStyle = "rgb(32,32,32)";
            this._graphContext.fillRect(this._drawX, 0, 1, this._graphHeight);
            for(var key in this._clocks) {
                this._clock = this._clocks[key];
                if(!this._clock) {
                    continue;
                }
                this._drawY -= this._clock.ms * this._msHeight;
                this._graphContext.fillStyle = this._clock.color;
                this._graphContext.fillRect(this._drawX, this._drawY, 1, this._clock.ms * this._msHeight);
            }
            if(this._frames == 30) {
                this._graphContext.fillStyle = "rgb(255,255,255)";
                this._graphContext.fillRect(this._drawX, this._graphHeight - 4, 1, 4);
            }
            if(this._frames == 60) {
                this._graphContext.font = "7px Monaco";
                this._graphContext.fillStyle = "rgb(255,255,255)";
                this._graphContext.textAlign = "right";
                this._graphContext.textBaseline = "top";
                this._graphContext.fillText(Avota.NumberUtil.addLeadingZeros(this._sec, 2), this._drawX - 1, this._graphHeight - 7);
                this._graphContext.fillRect(this._drawX, this._graphHeight - 6, 1, 6);
                this._frames = 0;
            }
            this._graphContext.fillStyle = "rgba(255,255,255,.25)";
            this._graphContext.fillRect(this._drawX, this._16ms, 1, 1);
            this._graphContext.font = "8px Monaco";
            this._graphContext.textAlign = "right";
            this._graphContext.textBaseline = "top";
            var mark;
            for(var i = 0; i < this._marks.length; i++) {
                mark = this._marks[i];
                this._graphContext.fillStyle = mark.color;
                this._graphContext.fillRect(this._drawX, 0, 1, this._graphHeight);
                this._graphContext.fillText(mark.message, this._drawX - 1, this._textY);
                this._textY = (this._textY + 8) % 24;
            }
            this._marks = [];
            this._renderFunction.apply(this);
        };
        Stats.prototype.renderFull = function () {
            this._renderContext.drawImage(this._graph, 0, this._graphHeight - 16);
            this._renderContext.font = "8px Monaco";
            this._renderContext.fillStyle = "rgba(255,255,255,.5)";
            this._renderContext.fillText("16ms", 10, this._graphHeight + this._16ms - 16);
            this._renderContext.font = this._fontSize + "px Monaco";
            this._renderContext.fillStyle = "rgb(255,255,255)";
            this._info = "";
            this._info += "L:" + this._renderManager.layerCount + " | ";
            this._info += "E:" + this.getEntityCount(this._game) + " | ";
            this._info += "DC:" + this._renderManager._draws.toString() + " | ";
            this._info += "GS:" + this._spatialManager.gridSize + " | ";
            this._info += "SQ:" + this._spatialQueries;
            this._renderContext.fillText(this._info, this.width - (this._renderContext.measureText(this._info).width + 10), this._fontSize + 4);
            this._info = "";
            for(var key in this._clocks) {
                this._clock = this._clocks[key];
                if(!this._clock) {
                    continue;
                }
                this._renderContext.fillStyle = this._clock.color;
                this._renderContext.fillRect(this._textX, this.height - 13, 8, 8);
                this._info = key + ":" + this._clock.msAvg.toFixed(2);
                this._renderContext.fillStyle = "rgb(255,255,255)";
                this._renderContext.fillText(this._info, this._textX + 12, this.height - (this._fontSize - 4));
                this._textX += 25 + this._renderContext.measureText(this._info).width;
            }
            this._hr %= 24;
            this._min %= 60;
            this._sec %= 60;
            this._info = "";
            this._info += this._timeManager._profiler.clocks["update"].fps + " | ";
            this._info += this._timeManager._profiler.clocks["update"].msAvg.toFixed(2) + " | ";
            this._info += Avota.NumberUtil.addLeadingZeros(this._hr, 2) + ":" + Avota.NumberUtil.addLeadingZeros(this._min, 2) + ":" + Avota.NumberUtil.addLeadingZeros(this._sec, 2);
            this._renderContext.fillText(this._info, this.width - (this._renderContext.measureText(this._info).width + 10), this.height - 4);
            this._info = "";
            var info;
            var data;
            for(var key in this._watch) {
                info = this._watch[key];
                data = info.element[info.prop];
                if(this.isNumber(data)) {
                    data = parseInt(data);
                }
                this._info += key + ":" + data + " ";
            }
            if(this._info != "") {
                this._renderContext.fillText(this._info, 10, this._fontSize + 4);
            }
        };
        Stats.prototype.renderMinimal = function () {
            this._hr %= 24;
            this._min %= 60;
            this._sec %= 60;
            this._info = "";
            this._info += this._timeManager._profiler.clocks["update"].fps + " | ";
            this._info += this._timeManager._profiler.clocks["update"].msAvg.toFixed(2) + " | ";
            this._info += Avota.NumberUtil.addLeadingZeros(this._hr, 2) + ":" + Avota.NumberUtil.addLeadingZeros(this._min, 2) + ":" + Avota.NumberUtil.addLeadingZeros(this._sec, 2);
            this._renderContext.font = this._fontSize + "px Monaco";
            this._renderContext.fillStyle = "rgb(255,255,255)";
            this._renderContext.fillText(this._info, this.width - (this._renderContext.measureText(this._info).width + 10), this.height - 4);
        };
        Stats.prototype.getEntityCount = function (group) {
            var count = 0;
            var entity;
            var entities = group.getByType(Avota.Entity);
            if(group instanceof Avota.Entity) {
                count++;
            }
            for(var i = 0; i < entities.length; i++) {
                entity = entities[i];
                if(entity) {
                    if(entity instanceof Avota.Group) {
                        count += this.getEntityCount(entity);
                    }
                } else {
                    if(entity instanceof Avota.Entity) {
                        count++;
                    }
                }
            }
            return count;
        };
        Stats.prototype.isNumber = function (n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        };
        Stats.prototype.destroy = function () {
            this._timeManager.postFrame.remove(this.onFrame, this);
            _super.prototype.destroy.call(this);
            this._marks = [];
            this._game = null;
            this._timeManager = null;
            this._spatialManager = null;
            this._graph = null;
            this._graphContext = null;
            this._clocks = null;
            this._watch = null;
            this._clock = null;
            this._tileMaps = null;
            this._renderFunction = null;
            this._inputComponent = null;
        };
        return Stats;
    })(Avota.CanvasGraphic);
    Avota.Stats = Stats;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StatsTarget = (function () {
        function StatsTarget(stats) {
            this._timeStampOffset = 0;
            this.stats = stats;
        }
        StatsTarget.prototype.output = function (logMessage) {
            if(logMessage.level == Avota.Log.MARK) {
                this.stats.addMark(logMessage.message);
            }
        };
        StatsTarget.prototype.clear = function () {
            this._timeStampOffset = this.getTimer();
        };
        StatsTarget.prototype.getTimeStamp = function () {
            return this.getTimer() - this._timeStampOffset;
        };
        StatsTarget.prototype.getTimer = function () {
            return (new Date().getTime() - this._startTime);
        };
        StatsTarget.prototype.destroy = function () {
            this.filters = null;
        };
        return StatsTarget;
    })();
    Avota.StatsTarget = StatsTarget;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Profiler = (function (_super) {
        __extends(Profiler, _super);
        function Profiler(name) {
            if (typeof name === "undefined") { name = Profiler.NAME; }
                _super.call(this, name);
            this.clocks = {
            };
        }
        Profiler.NAME = "Profiler";
        Profiler.prototype.add = function (name, color) {
            this.clocks[name] = new Clock(name, color);
        };
        Profiler.prototype.begin = function (name, offset) {
            if (typeof offset === "undefined") { offset = 0; }
            this.clocks[name].begin(offset);
        };
        Profiler.prototype.end = function (name) {
            this.clocks[name].end();
        };
        return Profiler;
    })(Avota.Element);
    Avota.Profiler = Profiler;    
    var Clock = (function () {
        function Clock(name, color) {
            this.name = name;
            this.color = color;
            this.startTime = window.performance.now();
            this.prevTime = this.startTime;
            this.frames = 0;
            this.ms = 0;
            this.msMin = Infinity;
            this.msMax = 0;
            this.msAvg = 0;
            this.fps = 0;
            this.fpsMin = Infinity;
            this.fpsMax = 0;
            this.fpsAvg = 0;
        }
        Clock.prototype.begin = function (offset) {
            if (typeof offset === "undefined") { offset = 0; }
            this.startTime = window.performance.now() + offset;
        };
        Clock.prototype.end = function () {
            var time = window.performance.now();
            this.ms = time - this.startTime;
            this.msMin = Math.min(this.msMin, this.ms);
            this.msMax = Math.max(this.msMax, this.ms);
            this.msAvg = this.msAvg * .8 + this.ms * .2;
            this.frames++;
            if(time > this.prevTime + 1000) {
                this.fps = Math.round((this.frames * 1000) / (time - this.prevTime));
                this.fpsMin = Math.min(this.fpsMin, this.fps);
                this.fpsMax = Math.max(this.fpsMax, this.fps);
                this.fpsAvg = this.fpsAvg * .8 + this.fps * .2;
                this.prevTime = time;
                this.frames = 0;
            }
        };
        return Clock;
    })();
    Avota.Clock = Clock;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Linear = (function () {
        function Linear() { }
        Linear.easeNone = function easeNone(t, b, c, d) {
            return c * t / d + b;
        };
        Linear.easeIn = function easeIn(t, b, c, d) {
            return c * t / d + b;
        };
        Linear.easeOut = function easeOut(t, b, c, d) {
            return c * t / d + b;
        };
        Linear.easeInOut = function easeInOut(t, b, c, d) {
            return c * t / d + b;
        };
        return Linear;
    })();
    Avota.Linear = Linear;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Quadratic = (function () {
        function Quadratic() { }
        Quadratic.easeIn = function easeIn(t, b, c, d) {
            return c * (t /= d) * t + b;
        };
        Quadratic.easeOut = function easeOut(t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
        };
        Quadratic.easeInOut = function easeInOut(t, b, c, d) {
            if((t /= d / 2) < 1) {
                return c / 2 * t * t + b;
            }
            return -c / 2 * ((--t) * (t - 2) - 1) + b;
        };
        return Quadratic;
    })();
    Avota.Quadratic = Quadratic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var BoundsComponent = (function (_super) {
        __extends(BoundsComponent, _super);
        function BoundsComponent(timeManager, bounds) {
            if (typeof bounds === "undefined") { bounds = null; }
                _super.call(this, timeManager);
            this.bounds = bounds;
            this.active = true;
            this._spatialComponents = [];
            this._boundsInfo = [];
            this.boundsSignal = new Avota.Signal();
            this.reboundFactor = 1;
            this.priority = 1;
        }
        BoundsComponent.NAME = "BoundsComponent";
        BoundsComponent.NONE = 0;
        BoundsComponent.SOLID = 1;
        BoundsComponent.WRAP = 2;
        BoundsComponent.BOUNCE = 4;
        BoundsComponent.LEFT = "left";
        BoundsComponent.RIGHT = "right";
        BoundsComponent.TOP = "top";
        BoundsComponent.BOTTOM = "bottom";
        BoundsComponent.prototype._onRegister = function () {
            this._level = this._owner;
            if(!this.bounds && this._level) {
                this.bounds = new Avota.Rectangle(0, 0, this._level.screenWidth, this._level.screenHeight);
            }
            _super.prototype._onRegister.call(this);
        };
        BoundsComponent.prototype.addSprites = function (sprites, boundsInfo, componentReference) {
            if (typeof boundsInfo === "undefined") { boundsInfo = "none"; }
            if (typeof componentReference === "undefined") { componentReference = Avota.EngineConstants.SPATIAL; }
            var entity;
            var spatialComponent;
            var info = new BoundsInfo();
            if(Avota.ObjectUtil.isNumber(boundsInfo)) {
                info.left = boundsInfo;
                info.right = boundsInfo;
                info.top = boundsInfo;
                info.bottom = boundsInfo;
            }
            if(Avota.ObjectUtil.isString(boundsInfo)) {
                switch(boundsInfo.toLowerCase()) {
                    default:
                    case "none":
                        info.left = BoundsComponent.NONE;
                        info.right = BoundsComponent.NONE;
                        info.top = BoundsComponent.NONE;
                        info.bottom = BoundsComponent.NONE;
                        break;
                    case "solid":
                        info.left = BoundsComponent.SOLID;
                        info.right = BoundsComponent.SOLID;
                        info.top = BoundsComponent.SOLID;
                        info.bottom = BoundsComponent.SOLID;
                        break;
                    case "wrap":
                        info.left = BoundsComponent.WRAP;
                        info.right = BoundsComponent.WRAP;
                        info.top = BoundsComponent.WRAP;
                        info.bottom = BoundsComponent.WRAP;
                        break;
                    case "bounce":
                        info.left = BoundsComponent.BOUNCE;
                        info.right = BoundsComponent.BOUNCE;
                        info.top = BoundsComponent.BOUNCE;
                        info.bottom = BoundsComponent.BOUNCE;
                        break;
                }
            }
            if(boundsInfo.hasOwnProperty("left") && boundsInfo.hasOwnProperty("right") && boundsInfo.hasOwnProperty("top") && boundsInfo.hasOwnProperty("bottom")) {
                if(Avota.ObjectUtil.isNumber(boundsInfo.left)) {
                    info.left = boundsInfo.left;
                }
                if(Avota.ObjectUtil.isNumber(boundsInfo.right)) {
                    info.right = boundsInfo.right;
                }
                if(Avota.ObjectUtil.isNumber(boundsInfo.top)) {
                    info.top = boundsInfo.top;
                }
                if(Avota.ObjectUtil.isNumber(boundsInfo.bottom)) {
                    info.bottom = boundsInfo.bottom;
                }
                if(Avota.ObjectUtil.isString(boundsInfo.left)) {
                    switch(boundsInfo.left.toLowerCase()) {
                        case "none":
                            info.left = BoundsComponent.NONE;
                            break;
                        case "solid":
                            info.left = BoundsComponent.SOLID;
                            break;
                        case "wrap":
                            info.left = BoundsComponent.WRAP;
                            break;
                        case "bounce":
                            info.left = BoundsComponent.BOUNCE;
                            break;
                    }
                }
                if(Avota.ObjectUtil.isString(boundsInfo.right)) {
                    switch(boundsInfo.right.toLowerCase()) {
                        case "none":
                            info.right = BoundsComponent.NONE;
                            break;
                        case "solid":
                            info.right = BoundsComponent.SOLID;
                            break;
                        case "wrap":
                            info.right = BoundsComponent.WRAP;
                            break;
                        case "bounce":
                            info.right = BoundsComponent.BOUNCE;
                            break;
                    }
                }
                if(Avota.ObjectUtil.isString(boundsInfo.top)) {
                    switch(boundsInfo.top.toLowerCase()) {
                        case "none":
                            info.top = BoundsComponent.NONE;
                            break;
                        case "solid":
                            info.top = BoundsComponent.SOLID;
                            break;
                        case "wrap":
                            info.top = BoundsComponent.WRAP;
                            break;
                        case "bounce":
                            info.top = BoundsComponent.BOUNCE;
                            break;
                    }
                }
                if(Avota.ObjectUtil.isString(boundsInfo.bottom)) {
                    switch(boundsInfo.bottom.toLowerCase()) {
                        case "none":
                            info.bottom = BoundsComponent.NONE;
                            break;
                        case "solid":
                            info.bottom = BoundsComponent.SOLID;
                            break;
                        case "wrap":
                            info.bottom = BoundsComponent.WRAP;
                            break;
                        case "bounce":
                            info.bottom = BoundsComponent.BOUNCE;
                            break;
                    }
                }
            }
            if(Avota.ObjectUtil.isString(sprites) && this._level) {
                entity = this._level.get(sprites);
                if(entity) {
                    spatialComponent = entity.getComponent(componentReference);
                    if(spatialComponent) {
                        if(this._spatialComponents.indexOf(spatialComponent) != -1) {
                            return;
                        }
                        this._spatialComponents.push(spatialComponent);
                        this._boundsInfo.push(info);
                    }
                }
            }
            if(sprites instanceof Avota.GameEntity) {
                entity = sprites;
                spatialComponent = entity.getComponent(componentReference);
                if(spatialComponent) {
                    if(this._spatialComponents.indexOf(spatialComponent) != -1) {
                        return;
                    }
                    this._spatialComponents.push(spatialComponent);
                    this._boundsInfo.push(info);
                }
            }
            if(Avota.ObjectUtil.isArray(sprites)) {
                for(var i = 0; i < sprites.length; i++) {
                    if(sprites[i] instanceof Avota.GameEntity) {
                        entity = sprites[i];
                    }
                    if(Avota.ObjectUtil.isString(sprites[i]) && this._level) {
                        entity = this._level.get(sprites[i]);
                    }
                    spatialComponent = entity.getComponent(componentReference);
                    if(spatialComponent) {
                        if(this._spatialComponents.indexOf(spatialComponent) != -1) {
                            return;
                        }
                        this._spatialComponents.push(spatialComponent);
                        this._boundsInfo.push(info);
                    }
                }
            }
        };
        BoundsComponent.prototype.removeSprites = function (sprites, componentReference) {
            if (typeof componentReference === "undefined") { componentReference = Avota.EngineConstants.SPATIAL; }
            var entity;
            var spatialComponent;
            if(Avota.ObjectUtil.isString(sprites) && this._level) {
                entity = this._level.get(sprites);
                if(entity) {
                    spatialComponent = entity.getComponent(componentReference);
                    if(spatialComponent) {
                        var index = this._spatialComponents.indexOf(spatialComponent);
                        if(index != -1) {
                            this._spatialComponents.splice(index, 1);
                            this._boundsInfo.splice(index, 1);
                        }
                    }
                }
            }
            if(sprites instanceof Avota.GameEntity) {
                entity = sprites;
                spatialComponent = entity.getComponent(componentReference);
                if(spatialComponent) {
                    var index = this._spatialComponents.indexOf(spatialComponent);
                    if(index != -1) {
                        this._spatialComponents.splice(index, 1);
                        this._boundsInfo.splice(index, 1);
                    }
                }
            }
            if(Avota.ObjectUtil.isArray(sprites)) {
                for(var i = 0; i < sprites.length; i++) {
                    if(sprites[i] instanceof Avota.GameEntity) {
                        entity = sprites[i];
                    }
                    if(Avota.ObjectUtil.isString(sprites[i]) && this._level) {
                        entity = this._level.get(sprites[i]);
                    }
                    spatialComponent = entity.getComponent(componentReference);
                    if(spatialComponent) {
                        var index = this._spatialComponents.indexOf(spatialComponent);
                        if(index != -1) {
                            this._spatialComponents.splice(index, 1);
                            this._boundsInfo.splice(index, 1);
                        }
                    }
                }
            }
        };
        BoundsComponent.prototype.onTick = function (delta) {
            if(!this.active || !this.bounds) {
                return;
            }
            for(var i = this._spatialComponents.length - 1; i >= 0; i--) {
                this._spatialComponent = this._spatialComponents[i];
                this._info = this._boundsInfo[i];
                if(!this._spatialComponent.active) {
                    continue;
                }
                if(this._spatialComponent.left <= this.bounds.left) {
                    if(this._info.left == BoundsComponent.WRAP && this._spatialComponent.right < this.bounds.left) {
                        this._spatialComponent.left = this.bounds.right;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.LEFT, this._info.left);
                    }
                    if(this._info.left == BoundsComponent.SOLID) {
                        this._spatialComponent.left = this.bounds.left + 1;
                        this._spatialComponent.velocityX = 0;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.LEFT, this._info.left);
                    }
                    if(this._info.left == BoundsComponent.BOUNCE) {
                        this._spatialComponent.left = this.bounds.left + 1;
                        this._spatialComponent.velocityX *= -this.reboundFactor;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.LEFT, this._info.left);
                    }
                }
                if(this._spatialComponent.right >= this.bounds.right) {
                    if(this._info.right == BoundsComponent.WRAP && this._spatialComponent.left > this.bounds.right) {
                        this._spatialComponent.right = this.bounds.left;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.RIGHT, this._info.right);
                    }
                    if(this._info.right == BoundsComponent.SOLID) {
                        this._spatialComponent.right = this.bounds.right - 1;
                        this._spatialComponent.velocityX = 0;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.RIGHT, this._info.right);
                    }
                    if(this._info.right == BoundsComponent.BOUNCE) {
                        this._spatialComponent.right = this.bounds.right - 1;
                        this._spatialComponent.velocityX *= -this.reboundFactor;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.RIGHT, this._info.right);
                    }
                }
                if(this._spatialComponent.top <= this.bounds.top) {
                    if(this._info.top == BoundsComponent.WRAP && this._spatialComponent.bottom < this.bounds.top) {
                        this._spatialComponent.top = this.bounds.bottom;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.BOTTOM, this._info.bottom);
                    }
                    if(this._info.top == BoundsComponent.SOLID) {
                        this._spatialComponent.top = this.bounds.top + 1;
                        this._spatialComponent.velocityY = 0;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.BOTTOM, this._info.bottom);
                    }
                    if(this._info.top == BoundsComponent.BOUNCE) {
                        this._spatialComponent.top = this.bounds.top + 1;
                        this._spatialComponent.velocityY *= -this.reboundFactor;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.BOTTOM, this._info.bottom);
                    }
                }
                if(this._spatialComponent.bottom >= this.bounds.bottom) {
                    if(this._info.bottom == BoundsComponent.WRAP && this._spatialComponent.top > this.bounds.bottom) {
                        this._spatialComponent.bottom = this.bounds.top;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.TOP, this._info.top);
                    }
                    if(this._info.bottom == BoundsComponent.SOLID) {
                        this._spatialComponent.bottom = this.bounds.bottom - 1;
                        this._spatialComponent.velocityY = 0;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.TOP, this._info.top);
                    }
                    if(this._info.bottom == BoundsComponent.BOUNCE) {
                        this._spatialComponent.bottom = this.bounds.bottom;
                        this._spatialComponent.velocityY *= -this.reboundFactor;
                        this.boundsSignal.dispatch(this._spatialComponent.owner, BoundsComponent.TOP, this._info.top);
                    }
                }
            }
            _super.prototype.onTick.call(this, delta);
        };
        BoundsComponent.prototype.destroy = function () {
            this.boundsSignal.removeAll();
            this.boundsSignal = null;
            this.bounds = null;
            this._level = null;
            this._spatialComponent = null;
            this._info = null;
            this._spatialComponents = null;
            this._boundsInfo = null;
            _super.prototype.destroy.call(this);
        };
        return BoundsComponent;
    })(Avota.TickedComponent);
    Avota.BoundsComponent = BoundsComponent;    
    var BoundsInfo = (function () {
        function BoundsInfo() {
            this.left = BoundsComponent.SOLID;
            this.right = BoundsComponent.SOLID;
            this.top = BoundsComponent.SOLID;
            this.bottom = BoundsComponent.SOLID;
        }
        return BoundsInfo;
    })();
    Avota.BoundsInfo = BoundsInfo;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CanvasScrollerComponent = (function (_super) {
        __extends(CanvasScrollerComponent, _super);
        function CanvasScrollerComponent(timeManager) {
                _super.call(this, timeManager);
            this.posX = 0;
            this.posY = 0;
            this.speedX = 0;
            this.speedY = 0;
            this.scrollXFactor = 1;
            this.scrollYFactor = 1;
            this.mode = CanvasScrollerComponent.MODE_SPEED;
        }
        CanvasScrollerComponent.NAME = "CanvasScrollerComponent";
        CanvasScrollerComponent.MODE_POSITION = "position";
        CanvasScrollerComponent.MODE_SPEED = "speed";
        CanvasScrollerComponent.prototype._onRegister = function () {
            var renderComponent = this._owner.getComponent(Avota.EngineConstants.RENDER);
            var renderView = renderComponent.view;
            this._renderContext = renderComponent._renderContext;
            this._renderSource = document.createElement("canvas");
            this._renderSource.width = renderView.width;
            this._renderSource.height = renderView.height;
            this._renderSource.getContext("2d").drawImage(renderView, 0, 0, renderView.width, renderView.height);
            _super.prototype._onRegister.call(this);
        };
        CanvasScrollerComponent.prototype.onFrame = function (delta) {
            if(this.mode = CanvasScrollerComponent.MODE_POSITION) {
            }
            if(this.mode = CanvasScrollerComponent.MODE_SPEED) {
                this.posX -= this.speedX * delta;
                if(Math.abs(this.posX) > this._renderSource.width) {
                    this.posX = 0;
                }
                this._renderContext.clearRect(0, 0, this._renderSource.width, this._renderSource.height);
                this._renderContext.drawImage(this._renderSource, this.posX, 0);
                this._renderContext.drawImage(this._renderSource, this._renderSource.width - Math.abs(this.posX) - 1, 0);
            }
            _super.prototype.onFrame.call(this, delta);
        };
        return CanvasScrollerComponent;
    })(Avota.AnimatedComponent);
    Avota.CanvasScrollerComponent = CanvasScrollerComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CollisionComponent = (function (_super) {
        __extends(CollisionComponent, _super);
        function CollisionComponent(timeManager, spatialManager, componentReference) {
                _super.call(this, timeManager);
            this._spatialManager = spatialManager;
            this._typeManager = this._spatialManager.typeManager;
            this._componentReference = componentReference;
            this.collisionSignal = new Avota.Signal();
            this._collisionOffsets = [];
            this.priority = 1;
            this.offsetX = 0;
            this.offsetY = 0;
            this.active = true;
            this._collisionFunc = this.checkRectCollision;
        }
        CollisionComponent.TOP = 1;
        CollisionComponent.BOTTOM = 2;
        CollisionComponent.LEFT = 4;
        CollisionComponent.RIGHT = 8;
        CollisionComponent.RECTANGLE = 0;
        CollisionComponent.CIRCLE = 1;
        Object.defineProperty(CollisionComponent.prototype, "spatialComponent", {
            get: function () {
                return this._spatialComponent;
            },
            set: function (value) {
                this._spatialComponent = value;
            },
            enumerable: true,
            configurable: true
        });
        CollisionComponent.prototype._onRegister = function () {
            this._spatialComponent = (this._componentReference) ? this._owner.getComponent(this._componentReference) : this._owner.getComponentByType(Avota.SpatialComponent);
            _super.prototype._onRegister.call(this);
        };
        CollisionComponent.prototype._onReset = function () {
            this._spatialComponent = (this._componentReference) ? this._owner.getComponent(this._componentReference) : this._owner.getComponentByType(Avota.SpatialComponent);
            _super.prototype._onReset.call(this);
        };
        CollisionComponent.prototype.addCollisionType = function (maskType) {
            if(!this._collisionsMask) {
                this._collisionsMask = this.create(Avota.BitMask, this._typeManager, "default");
                this._collisionsMask.name = "BitMask_CollisionsMask";
            }
            if(!this._collisionNames) {
                this._collisionTypes = [];
                this._collisionNames = [];
            }
            if(Object.prototype.toString.call(maskType) === "[object String]") {
                this._collisionNames.push(maskType);
            }
            if(Object.prototype.toString.call(maskType) === "[object Array]") {
                this._collisionNames.concat(maskType);
            }
            this._collisionTypes.push(this._typeManager.getBitMask(maskType));
            this._collisionsMask.typeNames = this._collisionNames;
        };
        CollisionComponent.prototype.removeCollisionType = function (maskType) {
            if(!this._collisionsMask || !this._collisionNames) {
                return;
            }
            if(Object.prototype.toString.call(maskType) === "[object String]" && this._collisionNames.indexOf(maskType) != -1) {
                this._collisionNames.splice(this._collisionNames.indexOf(maskType), 1);
            }
            if(this._collisionTypes.indexOf(this._typeManager.getBitMask(maskType)) != -1) {
                this._collisionTypes.splice(this._collisionTypes.indexOf(this._typeManager.getBitMask(maskType)), 1);
            }
            this._collisionsMask.typeNames = this._collisionNames;
        };
        CollisionComponent.prototype.setDetectionType = function (value) {
            switch(value) {
                case CollisionComponent.RECTANGLE:
                    this._collisionFunc = this.checkRectCollision;
                    break;
                case CollisionComponent.CIRCLE:
                    this._collisionFunc = this.checkCircCollision;
                    break;
            }
        };
        CollisionComponent.prototype.onTick = function (delta) {
            if(!this.active || !this._spatialComponent) {
                return;
            }
            this._collisionFunc();
            _super.prototype.onTick.call(this, delta);
        };
        CollisionComponent.prototype.checkRectCollision = function () {
            this._queryRect = this._spatialComponent.extents;
            this._queryRect.x += this.offsetX;
            this._queryRect.y += this.offsetY;
            this._collisions = this._spatialManager.queryRectangle(this._queryRect, this._collisionsMask);
            for(var i = this._collisions.length - 1; i >= 0; i--) {
                this._collider = this._collisions[i];
                if(this._collider === this._spatialComponent) {
                    continue;
                }
                this._topOffset = this._spatialComponent.top - this._collider.bottom;
                this._bottomOffset = this._spatialComponent.bottom - this._collider.top;
                this._leftOffset = this._spatialComponent.left - this._collider.right;
                this._rightOffset = this._spatialComponent.right - this._collider.left;
                this._topOffset = (this._topOffset < 0) ? -this._topOffset : this._topOffset;
                this._bottomOffset = (this._bottomOffset < 0) ? -this._bottomOffset : this._bottomOffset;
                this._leftOffset = (this._leftOffset < 0) ? -this._leftOffset : this._leftOffset;
                this._rightOffset = (this._rightOffset < 0) ? -this._rightOffset : this._rightOffset;
                this._collisionOffsets[0] = this._topOffset;
                this._collisionOffsets[1] = this._bottomOffset;
                this._collisionOffsets[2] = this._leftOffset;
                this._collisionOffsets[3] = this._rightOffset;
                this._collisionOffsets.sort(this.sortOffsets);
                this._collisionOffset = this._collisionOffsets[0];
                if(this._collisionOffset == this._topOffset) {
                    this._loc = CollisionComponent.TOP;
                }
                if(this._collisionOffset == this._bottomOffset) {
                    this._loc = CollisionComponent.BOTTOM;
                }
                if(this._collisionOffset == this._leftOffset) {
                    this._loc = CollisionComponent.LEFT;
                }
                if(this._collisionOffset == this._rightOffset) {
                    this._loc = CollisionComponent.RIGHT;
                }
                if(!this._collisionTypes) {
                    this.collisionSignal.dispatch(this._spatialComponent, this._collider, this._loc, this._collisionOffset);
                } else {
                    for(var n = this._collisionTypes.length - 1; n >= 0; n--) {
                        if(!this._collider.type || !this._collisionTypes[n]) {
                            continue;
                        }
                        if(this._typeManager.doTypesOverlap(this._collider.type, this._collisionTypes[n])) {
                            this.collisionSignal.dispatch(this._spatialComponent, this._collider, this._loc, this._collisionOffset, this._collisionNames[n]);
                        }
                    }
                }
            }
        };
        CollisionComponent.prototype.checkCircCollision = function () {
            this._queryPoint = this._spatialComponent.center;
            this._queryPoint.x += this.offsetX;
            this._queryPoint.y += this.offsetY;
            this._collisions = this._spatialManager.queryCircle(this._queryPoint, this._spatialComponent.halfWidth - 5, this._collisionsMask);
            for(var i = this._collisions.length - 1; i >= 0; i--) {
                this._collider = this._collisions[i];
                if(this._collider === this._spatialComponent) {
                    continue;
                }
                if(!this._collisionTypes) {
                    this.collisionSignal.dispatch(this._spatialComponent, this._collider);
                } else {
                    for(var n = this._collisionTypes.length - 1; n >= 0; n--) {
                        if(!this._collider.type || !this._collisionTypes[n]) {
                            continue;
                        }
                        if(this._typeManager.doTypesOverlap(this._collider.type, this._collisionTypes[n])) {
                            this.collisionSignal.dispatch(this._spatialComponent, this._collider, this._collisionNames[n]);
                        }
                    }
                }
            }
        };
        CollisionComponent.prototype.sortOffsets = function (offset1, offset2) {
            return (offset1 >= offset2) ? 1 : -1;
        };
        CollisionComponent.prototype.destroy = function () {
            this.collisionSignal.removeAll();
            this.active = false;
            this.collisionSignal = null;
            this._spatialComponent = null;
            this._collider = null;
            this._collisions = null;
            this._collisionOffsets = null;
            this._collisionTypes = null;
            this._collisionNames = null;
            this._collisionsMask = null;
            this._spatialManager = null;
            this._typeManager = null;
            this._queryRect = null;
            this._collisionFunc = null;
            _super.prototype.destroy.call(this);
        };
        return CollisionComponent;
    })(Avota.TickedComponent);
    Avota.CollisionComponent = CollisionComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DirectionComponent = (function (_super) {
        __extends(DirectionComponent, _super);
        function DirectionComponent(inputMap) {
                _super.call(this);
            this._inputMap = inputMap;
            this.upSignal = new Avota.Signal();
            this.downSignal = new Avota.Signal();
            this.leftSignal = new Avota.Signal();
            this.rightSignal = new Avota.Signal();
            this._mappings = [];
            this._right = 0;
            this._left = 0;
            this._up = 0;
            this._down = 0;
            this._direction = 0;
        }
        DirectionComponent.NAME = "DirectionComponent";
        Object.defineProperty(DirectionComponent.prototype, "direction", {
            get: function () {
                return this._direction;
            },
            set: function (value) {
                this._direction = value;
            },
            enumerable: true,
            configurable: true
        });
        DirectionComponent.prototype._onRegister = function () {
            this.active = true;
            _super.prototype._onRegister.call(this);
        };
        DirectionComponent.prototype._onUnregister = function () {
            this.active = false;
            _super.prototype._onUnregister.call(this);
        };
        DirectionComponent.prototype.registerControls = function (params) {
            if(params.hasOwnProperty("up")) {
                this.registerControl(params.up, Avota.Direction.UP);
            }
            if(params.hasOwnProperty("down")) {
                this.registerControl(params.down, Avota.Direction.DOWN);
            }
            if(params.hasOwnProperty("left")) {
                this.registerControl(params.left, Avota.Direction.LEFT);
            }
            if(params.hasOwnProperty("right")) {
                this.registerControl(params.right, Avota.Direction.RIGHT);
            }
        };
        DirectionComponent.prototype.registerControl = function (action, direction) {
            var _this = this;
            switch(direction) {
                case Avota.Direction.UP:
                    this._inputMap.mapActionToHandler(action, function (value) {
                        return _this._onUp(value);
                    });
                    break;
                case Avota.Direction.DOWN:
                    this._inputMap.mapActionToHandler(action, function (value) {
                        return _this._onDown(value);
                    });
                    break;
                case Avota.Direction.LEFT:
                    this._inputMap.mapActionToHandler(action, function (value) {
                        return _this._onLeft(value);
                    });
                    break;
                case Avota.Direction.RIGHT:
                    this._inputMap.mapActionToHandler(action, function (value) {
                        return _this._onRight(value);
                    });
                    break;
            }
            this._mappings.push(action);
        };
        DirectionComponent.prototype.unregisterControls = function () {
            for(var i = 0; i < this._mappings.length; i++) {
                this._inputMap.unmapAction(this._mappings[i]);
            }
            this._mappings = [];
        };
        DirectionComponent.prototype._onLeft = function (value) {
            if(this._left != value) {
                this._direction += (value == 1) ? Avota.Direction.LEFT : -Avota.Direction.LEFT;
            }
            this._left = value;
            if(this.active) {
                this.leftSignal.dispatch(this._left);
            }
        };
        DirectionComponent.prototype._onRight = function (value) {
            if(this._right != value) {
                this._direction += (value == 1) ? Avota.Direction.RIGHT : -Avota.Direction.RIGHT;
            }
            this._right = value;
            if(this.active) {
                this.rightSignal.dispatch(this._right);
            }
        };
        DirectionComponent.prototype._onUp = function (value) {
            if(this._up != value) {
                this._direction += (value == 1) ? Avota.Direction.UP : -Avota.Direction.UP;
            }
            this._up = value;
            if(this.active) {
                this.upSignal.dispatch(this._up);
            }
        };
        DirectionComponent.prototype._onDown = function (value) {
            if(this._down != value) {
                this._direction += (value == 1) ? Avota.Direction.DOWN : -Avota.Direction.DOWN;
            }
            this._down = value;
            if(this.active) {
                this.downSignal.dispatch(this._down);
            }
        };
        DirectionComponent.prototype.destroy = function () {
            this.upSignal.removeAll();
            this.downSignal.removeAll();
            this.leftSignal.removeAll();
            this.rightSignal.removeAll();
            for(var i = 0; i < this._mappings.length; i++) {
                this._inputMap.unmapAction(this._mappings[i]);
            }
            _super.prototype.destroy.call(this);
            this._inputMap = null;
            this._mappings = null;
            this.upSignal = null;
            this.downSignal = null;
            this.leftSignal = null;
            this.rightSignal = null;
        };
        return DirectionComponent;
    })(Avota.Component);
    Avota.DirectionComponent = DirectionComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ControlComponent = (function (_super) {
        __extends(ControlComponent, _super);
        function ControlComponent(timeManager, inputMap) {
                _super.call(this, inputMap);
            this._timeManager = timeManager;
            this.speedX = 1;
            this.speedY = 1;
            this.dragX = 1;
            this.dragY = 1;
            this.priority = -1;
            this._speedDirty = true;
        }
        ControlComponent.NAME = "ControlComponent";
        Object.defineProperty(ControlComponent.prototype, "speedX", {
            get: function () {
                return this._speedX;
            },
            set: function (value) {
                if(this._speedX == value) {
                    return;
                }
                this._speedX = value;
                this._speedDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlComponent.prototype, "speedY", {
            get: function () {
                return this._speedY;
            },
            set: function (value) {
                if(this._speedY == value) {
                    return;
                }
                this._speedY = value;
                this._speedDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlComponent.prototype, "speed", {
            get: function () {
                return this._speedX;
            },
            set: function (value) {
                if(this._speedX == value) {
                    return;
                }
                this._speedX = value;
                this._speedY = value;
                this._speedDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlComponent.prototype, "drag", {
            get: function () {
                return this.dragX;
            },
            set: function (value) {
                this.dragX = value;
                this.dragY = value;
            },
            enumerable: true,
            configurable: true
        });
        ControlComponent.prototype._onRegister = function () {
            this._timeManager.addTickedObject(this, this.priority);
            this._sprite = this._owner;
            _super.prototype._onRegister.call(this);
        };
        ControlComponent.prototype._onUnregister = function () {
            this._timeManager.removeTickedObject(this);
            this._sprite = null;
            _super.prototype._onUnregister.call(this);
        };
        ControlComponent.prototype.onTick = function (delta) {
            if(this._speedDirty) {
                this._speed = Math.sqrt(this._speedX * this._speedX + this._speedY * this._speedY) * this.drag;
                this._speedDirty = false;
            }
            if(this.active && this._sprite && this._sprite.active) {
                this._sprite.velocityX *= Math.exp(-this.dragX * delta);
                this._sprite.velocityY *= Math.exp(-this.dragY * delta);
                this._sprite.velocityX += ((this._right - this._left) * this._speed) * delta;
                this._sprite.velocityY += ((this._down - this._up) * this._speed) * delta;
            }
        };
        ControlComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._sprite = null;
            this._timeManager = null;
        };
        return ControlComponent;
    })(Avota.DirectionComponent);
    Avota.ControlComponent = ControlComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var OffsetSpatialComponent = (function (_super) {
        __extends(OffsetSpatialComponent, _super);
        function OffsetSpatialComponent(timeManager, spatialManager, typeMask) {
            if (typeof typeMask === "undefined") { typeMask = null; }
                _super.call(this, timeManager, spatialManager);
            this._offsetX = 0;
            this._offsetY = 0;
            if(typeMask) {
                this.setType(typeMask);
            }
        }
        OffsetSpatialComponent.NAME = "OffsetSpatialComponent";
        Object.defineProperty(OffsetSpatialComponent.prototype, "x", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                this._offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OffsetSpatialComponent.prototype, "y", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                this._offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        OffsetSpatialComponent.prototype._onRegister = function () {
            this._parent = this._owner.getComponent(Avota.EngineConstants.SPATIAL);
            _super.prototype._onRegister.call(this);
        };
        OffsetSpatialComponent.prototype.onTick = function (delta) {
            if(!this._parent) {
                return;
            }
            if(this.active) {
                this._x = this._parent.x + this._offsetX;
                this._y = this._parent.y + this._offsetY;
                this.rotation = this._parent.rotation;
            }
        };
        OffsetSpatialComponent.prototype.destroy = function () {
            this._parent = null;
            _super.prototype.destroy.call(this);
        };
        return OffsetSpatialComponent;
    })(Avota.SpatialComponent);
    Avota.OffsetSpatialComponent = OffsetSpatialComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var PositionalAudioComponent = (function (_super) {
        __extends(PositionalAudioComponent, _super);
        function PositionalAudioComponent(timeManager, soundManager, camera) {
                _super.call(this, timeManager);
            this._soundManager = soundManager;
            this._camera = camera;
            if(this._soundManager._support == Avota.SoundSupport.WEBAUDIO) {
                this._listener = this._soundManager._audioContext.listener;
            }
            this._sounds = {
            };
        }
        PositionalAudioComponent.NAME = "PositionalAudioComponent";
        PositionalAudioComponent.prototype._onRegister = function () {
            this._entity = this._owner;
            _super.prototype._onRegister.call(this);
        };
        PositionalAudioComponent.prototype.registerSound = function (name, params) {
            this._sounds[name] = params;
        };
        PositionalAudioComponent.prototype.onTick = function (delta) {
            var soundParams;
            var sound;
            for(var key in this._sounds) {
                if(this._soundManager.isSoundPlaying(key)) {
                    sound = this._soundManager.getSound(key);
                    soundParams = this._sounds[key];
                    if(soundParams.distance) {
                        sound.volume = Avota.MathUtil.clamp(Avota.MathUtil.map(Avota.GeomUtil.getDistance(this._entity.centerX, this._entity.centerY, this._camera.centerX, this._camera.centerY), 0, soundParams.distance, sound._defaultVolume * 100, 0) * (soundParams.distanceMultiplier || 1), 0, sound._defaultVolume * 100);
                    }
                }
            }
            _super.prototype.onTick.call(this, delta);
        };
        PositionalAudioComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._soundManager = null;
            this._camera = null;
            this._entity = null;
            this._sounds = null;
        };
        return PositionalAudioComponent;
    })(Avota.TickedComponent);
    Avota.PositionalAudioComponent = PositionalAudioComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Node2DComponent = (function (_super) {
        __extends(Node2DComponent, _super);
        function Node2DComponent() {
                _super.call(this);
            this._children = [];
            this._localTransform = new Avota.Matrix();
            this._worldTransform = new Avota.Matrix();
            this._registration = new Avota.Point();
            this._position = new Avota.Point();
            this._center = new Avota.Point();
            this._offset = new Avota.Point();
            this._extents = new Avota.Rectangle();
            this._width = 1;
            this._height = 1;
            this._registrationX = 0;
            this._registrationY = 0;
            this._positionX = 0;
            this._positionY = 0;
            this._offsetX = 0;
            this._offsetY = 0;
            this._scaleX = 1;
            this._scaleY = 1;
            this._rotation = 0;
            this._transformDirty = true;
        }
        Node2DComponent.NAME = "Node2DComponent";
        Object.defineProperty(Node2DComponent.prototype, "halfWidth", {
            get: function () {
                return (this._width * .5) * ((this._scaleX < 0) ? -this._scaleX : this._scaleX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "halfHeight", {
            get: function () {
                return (this._height * .5) * ((this._scaleY < 0) ? -this._scaleY : this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "top", {
            get: function () {
                return this._positionY + this._offsetY;
            },
            set: function (value) {
                this.y = value - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "left", {
            get: function () {
                return this._positionX + this._offsetX;
            },
            set: function (value) {
                this.x = value - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "right", {
            get: function () {
                return this._positionX + (this._width * this._scaleX) + this._offsetX;
            },
            set: function (value) {
                this.x = value - (this._width * this._scaleX) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "bottom", {
            get: function () {
                return this._positionY + (this._height * this._scaleY) + this._offsetY;
            },
            set: function (value) {
                this.y = value - (this._height * this._scaleY) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "centerX", {
            get: function () {
                return this._positionX + ((this._width * ((this._scaleX < 0) ? -this._scaleX : this._scaleX)) * .5) + this._offsetX;
            },
            set: function (value) {
                this.x = value - ((this._width * ((this._scaleX < 0) ? -this._scaleX : this._scaleX)) * .5) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "centerY", {
            get: function () {
                return this._positionY + ((this._height * ((this._scaleY < 0) ? -this._scaleY : this._scaleY)) * .5) + this._offsetY;
            },
            set: function (value) {
                this.y = value - ((this._height * ((this._scaleY < 0) ? -this._scaleY : this._scaleY)) * .5) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "transform", {
            get: function () {
                return this._localTransform;
            },
            set: function (value) {
                if(this._localTransform == value) {
                    return;
                }
                var a = value.a;
                var b = value.b;
                var c = value.c;
                var d = value.d;
                this._positionX = value.tx;
                this._positionY = value.ty;
                this._scaleX = Math.sqrt(a * a + b * b);
                this._rotation = (this._scaleX != 0) ? Math.atan2(b, a) : 0;
                this._scaleY = d * Math.cos(this._rotation) - c * Math.sin(this._rotation);
                this._registrationX = 0;
                this._registrationY = 0;
                this._localTransform = value;
                this._transformDirty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "width", {
            get: function () {
                return this._width * ((this._scaleX < 0) ? -this._scaleX : this._scaleX);
            },
            set: function (value) {
                this._scaleX = value / this._width;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "height", {
            get: function () {
                return this._height * ((this._scaleY < 0) ? -this._scaleY : this._scaleY);
            },
            set: function (value) {
                this._scaleY = value / this._height;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "x", {
            get: function () {
                return this._positionX;
            },
            set: function (value) {
                if(this._positionX == value) {
                    return;
                }
                this._positionX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "y", {
            get: function () {
                return this._positionY;
            },
            set: function (value) {
                if(this._positionY == value) {
                    return;
                }
                this._positionY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "registrationX", {
            get: function () {
                return this._registrationX;
            },
            set: function (value) {
                if(this._registrationX == value) {
                    return;
                }
                this._registrationX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "registrationY", {
            get: function () {
                return this._registrationY;
            },
            set: function (value) {
                if(this._registrationY == value) {
                    return;
                }
                this._registrationY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                if(this._offsetX == value) {
                    return;
                }
                this._offsetX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                if(this._offsetY == value) {
                    return;
                }
                this._offsetY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "scale", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                if(this._scaleY == value) {
                    return;
                }
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "rotation", {
            get: function () {
                return this._rotation;
            },
            set: function (value) {
                if(this._rotation == value) {
                    return;
                }
                this._rotation = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "position", {
            get: function () {
                return this._position.setTo(this._positionX, this._positionY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "registration", {
            get: function () {
                return this._registration.setTo(this._registrationX, this._registrationY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "center", {
            get: function () {
                return this._center.setTo(this._positionX + ((this._width * ((this._scaleX < 0) ? -this._scaleX : this._scaleX)) * .5) + this._offsetX, this._positionY + ((this._height * ((this._scaleY < 0) ? -this._scaleY : this._scaleY)) * .5) + this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "offset", {
            get: function () {
                return this._offset.setTo(this._offsetX, this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "extents", {
            get: function () {
                return this._extents.setTo(this._positionX, this._positionY, this._width * this._scaleX, this._height * this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Node2DComponent.prototype, "numChildren", {
            get: function () {
                return this._children.length;
            },
            enumerable: true,
            configurable: true
        });
        Node2DComponent.prototype.updateTransform = function (markDirty) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if(!this._transformDirty && !markDirty) {
                return;
            }
            this._localTransform.identity();
            this._localTransform.translate(this._positionX + this._registrationX, this._positionY + this._registrationY);
            this._localTransform.scale(this._scaleX, this._scaleY);
            this._localTransform.rotate(this._rotation * (Math.PI / 180));
            this._localTransform.translate(-this._registrationX + this._offsetX, -this._registrationY + this._offsetY);
            this._transformDirty = false;
        };
        Node2DComponent.prototype.updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._updateChildrenTransform = false;
            if(this._transformDirty) {
                this.updateTransform();
                this._updateChildrenTransform = true;
            }
            if(this._updateChildrenTransform || parentTransformDirty) {
                this._worldTransform.identity();
                this._worldTransform.multiply(this._localTransform);
                if(this._parent) {
                    this._worldTransform.multiply(this._parent._worldTransform);
                }
            }
            for(var i = 0; i < this._children.length; i++) {
                this._children[i].updateNode(this._updateChildrenTransform);
            }
        };
        Node2DComponent.prototype.addChild = function (child) {
            return this.addChildAt(child, this._children.length);
        };
        Node2DComponent.prototype.addChildAt = function (child, index) {
            var existingIndex = this.getChildIndex(child);
            if(existingIndex != -1) {
                this.removeChildAt(existingIndex);
            }
            child._parent = this;
            this._children.splice(index, 0, child);
            return child;
        };
        Node2DComponent.prototype.removeChild = function (child) {
            var index = this._children.indexOf(child);
            if(index >= 0) {
                this.removeChildAt(index);
            }
        };
        Node2DComponent.prototype.removeChildAt = function (index) {
            if(index < this._children.length) {
                this._children[index]._parent = null;
                this._children.splice(index, 1);
            }
        };
        Node2DComponent.prototype.getChildAt = function (index) {
            if(index < this._children.length) {
                return this._children[index];
            }
            return null;
        };
        Node2DComponent.prototype.getChildIndex = function (child) {
            return this._children.indexOf(child);
        };
        Node2DComponent.prototype.swapChildren = function (child1, child2) {
            var index1 = this.getChildIndex(child1);
            var index2 = this.getChildIndex(child2);
            this._children[index1] = child2;
            this._children[index2] = child1;
        };
        Node2DComponent.prototype.removeAllChildren = function () {
            while(this._children.length > 0) {
                this.removeChildAt(0);
            }
        };
        Node2DComponent.prototype.globalToLocal = function (position) {
            var matrix = this._localTransform.clone();
            matrix.invert();
            return matrix.transformPoint(position);
        };
        Node2DComponent.prototype.localToGlobal = function (position) {
            return this._localTransform.transformPoint(position);
        };
        Node2DComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._parent = null;
            this._children = null;
            this._position = null;
            this._registration = null;
            this._center = null;
            this._offset = null;
            this._extents = null;
            this._localTransform = null;
            this._worldTransform = null;
        };
        return Node2DComponent;
    })(Avota.Component);
    Avota.Node2DComponent = Node2DComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var EngineConstants = (function () {
        function EngineConstants() { }
        EngineConstants.RENDER = "Render";
        EngineConstants.SPATIAL = "Spatial";
        EngineConstants.ANIMATION = "Animation";
        EngineConstants.INPUT = "Input";
        EngineConstants.LAYERINDEX_GAMEUI_UNDERLAY = 90;
        EngineConstants.LAYERINDEX_GAMEUI = 91;
        EngineConstants.LAYERINDEX_GAMEUI_OVERLAY = 92;
        EngineConstants.LAYERINDEX_TRANSITION = 950;
        EngineConstants.LAYERINDEX_DEBUG = 999;
        EngineConstants.LAYERINDEX_STATS = 1000;
        return EngineConstants;
    })();
    Avota.EngineConstants = EngineConstants;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var BlendMode = (function () {
        function BlendMode() { }
        BlendMode.NORMAL = "source-over";
        BlendMode.ADD = "lighter";
        BlendMode.MULTIPLY = "multiply";
        BlendMode.SCREEN = "screen";
        BlendMode.OVERLAY = "overlay";
        BlendMode.DARKEN = "darken";
        BlendMode.LIGHTEN = "lighten";
        BlendMode.COLOR_DODGE = "color-dodge";
        BlendMode.COLOR_BURN = "color-burn";
        BlendMode.HARD_LIGHT = "hard-light";
        BlendMode.SOFT_LIGHT = "soft-light";
        BlendMode.DIFFERENCE = "difference";
        BlendMode.EXCLUSION = "exclusion";
        BlendMode.HUE = "hue";
        BlendMode.SATURATION = "saturation";
        BlendMode.COLOR = "color";
        BlendMode.LUMINOSITY = "luminosity";
        return BlendMode;
    })();
    Avota.BlendMode = BlendMode;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Camera = (function (_super) {
        __extends(Camera, _super);
        function Camera(timeManager, renderManager, viewPort, name) {
            if (typeof name === "undefined") { name = Camera.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._renderManager = renderManager;
            this._viewPort = viewPort;
            this._transform = new Avota.Matrix();
            this._position = new Avota.Point();
            this._registration = new Avota.Point();
            this._center = new Avota.Point();
            this._offset = new Avota.Point();
            this._extents = new Avota.Rectangle();
            this._relativeTrackedPosition = new Avota.Point();
            this.trackOffset = new Avota.Point();
            this.trackLead = new Avota.Point(0, 0);
            this._isShaking = false;
            this._isFlashing = false;
            this.reset();
            this._timeManager.addTickedObject(this, -1);
        }
        Camera.NAME = "Camera";
        Object.defineProperty(Camera.prototype, "isShaking", {
            get: function () {
                return this._isShaking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "isFlashing", {
            get: function () {
                return this._isFlashing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "halfWidth", {
            get: function () {
                return (this._width * .5) / this.abs(this._scaleX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "halfHeight", {
            get: function () {
                return (this._height * .5) / this.abs(this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "width", {
            get: function () {
                return this._width / this.abs(this._scaleX);
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "height", {
            get: function () {
                return this._height / this.abs(this._scaleY);
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "top", {
            get: function () {
                return ((this._positionY / this._scaleY + this._registrationY) - this._registrationY / this._scaleY);
            },
            set: function (value) {
                this.y = this._scaleY * (value - this._registrationY + this._registrationY / this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "left", {
            get: function () {
                return ((this._positionX / this._scaleX + this._registrationX) - this._registrationX / this._scaleX);
            },
            set: function (value) {
                this.x = this._scaleX * (value - this._registrationX + this._registrationX / this._scaleX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "right", {
            get: function () {
                return this.left + (this._width / this.abs(this._scaleX)) + this._offsetX;
            },
            set: function (value) {
                this.x = value - (this._width / this.abs(this._scaleX)) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "bottom", {
            get: function () {
                return this._positionY + (this._height / this.abs(this._scaleY)) + this._offsetY;
            },
            set: function (value) {
                this.y = value - (this._height / this.abs(this._scaleY)) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "centerX", {
            get: function () {
                return this._positionX + ((this._width / this.abs(this._scaleX)) * .5) + this._offsetX;
            },
            set: function (value) {
                this._positionX = value - ((this._width / this.abs(this._scaleX)) * .5) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "centerY", {
            get: function () {
                return this._positionY + ((this._height / this.abs(this._scaleY)) * .5) + this._offsetY;
            },
            set: function (value) {
                this._positionY = value - ((this._height / this.abs(this._scaleY)) * .5) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "pan", {
            get: function () {
                return this._positionX;
            },
            set: function (value) {
                this._positionX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "tilt", {
            get: function () {
                return this._positionY;
            },
            set: function (value) {
                this._positionY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "zoom", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "transform", {
            get: function () {
                return this._transform;
            },
            set: function (value) {
                if(this._transform == value) {
                    return;
                }
                var a = value.a;
                var b = value.b;
                var c = value.c;
                var d = value.d;
                this._positionX = value.tx;
                this._positionY = value.ty;
                this._scaleX = Math.sqrt(a * a + b * b);
                this._rotation = (this._scaleX != 0) ? Math.atan2(b, a) : 0;
                this._scaleY = d * Math.cos(this._rotation) - c * Math.sin(this._rotation);
                this._registrationX = 0;
                this._registrationY = 0;
                this._transform = value;
                this._transformDirty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "x", {
            get: function () {
                return this._positionX;
            },
            set: function (value) {
                if(this._positionX == value) {
                    return;
                }
                this._positionX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "y", {
            get: function () {
                return this._positionY;
            },
            set: function (value) {
                if(this._positionY == value) {
                    return;
                }
                this._positionY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "registrationX", {
            get: function () {
                return this._registrationX;
            },
            set: function (value) {
                if(this._registrationX == value) {
                    return;
                }
                this._registrationX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "registrationY", {
            get: function () {
                return this._registrationY;
            },
            set: function (value) {
                if(this._registrationY == value) {
                    return;
                }
                this._registrationY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                if(this._offsetX == value) {
                    return;
                }
                this._offsetX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                if(this._offsetY == value) {
                    return;
                }
                this._offsetY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "scale", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                if(this._scaleY == value) {
                    return;
                }
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "rotation", {
            get: function () {
                return this._rotation;
            },
            set: function (value) {
                if(this._rotation == value) {
                    return;
                }
                this._rotation = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "alpha", {
            get: function () {
                return this._alpha;
            },
            set: function (value) {
                if(this._alpha == value) {
                    return;
                }
                this._alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "position", {
            get: function () {
                return this._position.setTo(this._positionX, this._positionY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "registration", {
            get: function () {
                return this._registration.setTo(this._registrationX, this._registrationY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "center", {
            get: function () {
                return this._center.setTo(this._positionX + ((this._width * this.abs(this._scaleX)) * .5) + this._offsetX, this._positionY + ((this._height * this.abs(this._scaleY)) * .5) + this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "offset", {
            get: function () {
                return this._offset.setTo(this._offsetX, this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "extents", {
            get: function () {
                return this._extents.setTo(this.left, this.top, this._width / this._scaleX, this._height / this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Camera.prototype.initialize = function (params) {
            for(var key in params) {
                this[key] = params[key];
            }
        };
        Camera.prototype.globalToLocal = function (position) {
            this.updateTransform();
            return this._transform.transformPoint(position);
        };
        Camera.prototype.localToGlobal = function (position) {
            this.updateTransform();
            return this._transform.transformPointInverse(position);
        };
        Camera.prototype.inView = function (renderComponent, renderLayer) {
            if(renderLayer.cameraTransformOptions == Avota.TransformOptions.NONE) {
                return true;
            }
            return true;
        };
        Camera.prototype.onTick = function (delta) {
            this._zoomOffsetX = this._registrationX - (this._registrationX * this._scaleX);
            this._zoomOffsetY = this._registrationY - (this._registrationY * this._scaleY);
            if(this.trackEntity && !this.trackEntity.destroyed) {
                if(this.trackThreshold) {
                    this._relativeTrackedPosition.setTo(this.trackEntity.centerX, this.trackEntity.centerY);
                    this._relativeTrackedPosition = this._transform.transformPoint(this._relativeTrackedPosition);
                    if(this._relativeTrackedPosition.x < this.trackThreshold.left) {
                        this._positionX += this._relativeTrackedPosition.x - this.trackThreshold.left;
                    }
                    if(this._relativeTrackedPosition.x > this.trackThreshold.right) {
                        this._positionX += this._relativeTrackedPosition.x - this.trackThreshold.right;
                    }
                    if(this._relativeTrackedPosition.y < this.trackThreshold.top) {
                        this._positionY += this._relativeTrackedPosition.y - this.trackThreshold.top;
                    }
                    if(this._relativeTrackedPosition.y > this.trackThreshold.bottom) {
                        this._positionY += this._relativeTrackedPosition.y - this.trackThreshold.bottom;
                    }
                } else {
                    if(this.rotation == 0) {
                        this._positionX = this.trackEntity.centerX - this.trackOffset.x;
                        this._positionY = this.trackEntity.centerY - this.trackOffset.y;
                    } else {
                        var px = (this.trackEntity.x + this.trackEntity.halfWidth) - this.trackOffset.x;
                        var py = (this.trackEntity.y + this.trackEntity.halfHeight) - this.trackOffset.y;
                        var cos = Math.cos(this.rotation * (180 / Math.PI));
                        var sin = Math.sin(this.rotation * (180 / Math.PI));
                        this._positionX = (px * cos) - (py * sin);
                        this._positionY = (py * cos) + (px * sin);
                    }
                    this._positionX *= this._scaleX;
                    this._positionY *= this._scaleY;
                }
                this._transformDirty = true;
            }
            if(this.trackBounds) {
                this._positionX = this.clamp(this._positionX, this.trackBounds.x + this._zoomOffsetX, ((this.trackBounds.width - this._width) * this._scaleX) - this._zoomOffsetX) + this._offsetX;
                this._positionY = this.clamp(this._positionY, this.trackBounds.y + this._zoomOffsetY, ((this.trackBounds.height - this._height) * this._scaleY) - this._zoomOffsetY) + this._offsetY;
                this._transformDirty = true;
            }
            this.updateTransform();
        };
        Camera.prototype.flash = function (repeat, duration, color, alpha, useFade) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof color === "undefined") { color = ""; }
            if (typeof alpha === "undefined") { alpha = .5; }
            if (typeof useFade === "undefined") { useFade = true; }
            var _this = this;
            if(!this._flashMask) {
                this._flashMask = this.create(Avota.RectGraphic, this._timeManager, this._renderManager, this.width, this.height, color, "FlashMask");
                this._flashMask.layerIndex = Avota.EngineConstants.LAYERINDEX_GAMEUI_UNDERLAY;
                this._flashMask.zIndex = -99;
            }
            this._flashAlpha = alpha;
            this._flashFade = useFade;
            this._flashMask.color = color;
            this._flashMask.alpha = alpha;
            this._flashMask.visible = true;
            if(!useFade) {
                if(!this._flashTimer) {
                    this._flashTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                    this._flashTimer.timerSignal.add(this._onFlash, this);
                    this._flashTimer.completeSignal.add(this._onFlashComplete, this);
                }
                this._flashTimer.reset();
                this._flashTimer.repeatCount = repeat;
                this._flashTimer.delay = duration / repeat;
                this._flashTimer.start();
            } else {
                TweenMax.from(this._flashMask, (duration / 1000) / repeat, {
                    alpha: 0,
                    repeat: repeat,
                    yoyo: true,
                    onComplete: function () {
                        return _this._onFlashComplete();
                    }
                });
            }
            this._isFlashing = true;
        };
        Camera.prototype.stopFlash = function () {
            if(!this._isFlashing) {
                return;
            }
            this._onFlashComplete();
        };
        Camera.prototype._onFlash = function () {
            this._flashMask.visible = !this._flashMask.visible;
        };
        Camera.prototype._onFlashComplete = function () {
            TweenMax.killTweensOf(this._flashMask);
            this._isFlashing = false;
            this._flashMask.visible = false;
            if(this._flashTimer) {
                this._flashTimer.reset();
            }
        };
        Camera.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 4; }
            if(!this._shakeTimer) {
                this._shakeTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._shakeTimer.timerSignal.add(this._onShake, this);
                this._shakeTimer.completeSignal.add(this._onShakeComplete, this);
            }
            this._currentOffsetX = (this.trackEntity) ? this.trackOffset.x : this.offsetX;
            this._currentOffsetY = (this.trackEntity) ? this.trackOffset.y : this.offsetY;
            this._shakeStrength = strength;
            this._shakeTimer.reset();
            this._shakeTimer.repeatCount = repeat;
            this._shakeTimer.delay = duration / repeat;
            this._shakeTimer.start();
            this._isShaking = true;
        };
        Camera.prototype.stopShake = function () {
            if(!this._isShaking) {
                return;
            }
            this._onShakeComplete();
        };
        Camera.prototype._onShake = function () {
            if(this.trackEntity) {
                this.trackOffset.x = this._currentOffsetX + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
                this.trackOffset.y = this._currentOffsetY + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
            } else {
                this.offsetX = this._currentOffsetX + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
                this.offsetY = this._currentOffsetY + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
            }
        };
        Camera.prototype._onShakeComplete = function () {
            if(this.trackEntity) {
                this.trackOffset.x = this._currentOffsetX;
                this.trackOffset.y = this._currentOffsetY;
            } else {
                this.offsetX = this._currentOffsetX;
                this.offsetY = this._currentOffsetY;
            }
            this._isShaking = false;
            this._shakeTimer.reset();
        };
        Camera.prototype.updateTransform = function (markDirty) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if(!this._transformDirty && !markDirty) {
                return;
            }
            this._transform.identity();
            this._transform.translate(-this._positionX + this._registrationX, -this._positionY + this._registrationY);
            this._transform.scale(this._scaleX, this._scaleY);
            this._transform.rotate(this._rotation * (Math.PI / 180));
            this._transform.translate(-this._registrationX + this._offsetX, -this._registrationY + this._offsetY);
            this._transformDirty = false;
        };
        Camera.prototype.reset = function () {
            this._transform.identity();
            this._positionX = this._viewPort.x;
            this._positionY = this._viewPort.y;
            this._width = this._viewPort.width;
            this._height = this._viewPort.height;
            this._offsetX = 0;
            this._offsetY = 0;
            this._scaleX = 1;
            this._scaleY = 1;
            this._rotation = 0;
            this._alpha = 1;
            this._registrationX = this.halfWidth;
            this._registrationY = this.halfHeight;
            this.trackOffset.x = this.halfWidth;
            this.trackOffset.y = this.halfHeight;
            this.trackEntity = null;
            this.trackThreshold = null;
            this.trackBounds = null;
            this._transformDirty = true;
        };
        Camera.prototype.destroy = function () {
            this._timeManager.removeTickedObject(this);
            this.trackEntity = null;
            this.trackBounds = null;
            this.trackThreshold = null;
            this.trackOffset = null;
            this._relativeTrackedPosition = null;
            this._position = null;
            this._registration = null;
            this._center = null;
            this._offset = null;
            this._extents = null;
            this._shakeTimer = null;
            this._flashTimer = null;
            this._flashMask = null;
            this._transform = null;
            this._timeManager = null;
            this._renderManager = null;
            this._viewPort = null;
            this._renderExtents = null;
            _super.prototype.destroy.call(this);
        };
        Camera.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        Camera.prototype.abs = function (value) {
            return Math.abs(value);
        };
        return Camera;
    })(Avota.Entity);
    Avota.Camera = Camera;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DOMRenderComponent = (function (_super) {
        __extends(DOMRenderComponent, _super);
        function DOMRenderComponent(timeManager, renderManager, view, absolutePositioning, useGamePosition) {
            if (typeof absolutePositioning === "undefined") { absolutePositioning = true; }
            if (typeof useGamePosition === "undefined") { useGamePosition = true; }
                _super.call(this, timeManager, renderManager);
            this._absolutePositioning = absolutePositioning;
            this._useGamePosition = useGamePosition;
            if(view) {
                this.view = view;
            }
        }
        DOMRenderComponent.NAME = "DOMRenderComponent";
        Object.defineProperty(DOMRenderComponent.prototype, "style", {
            get: function () {
                return this._style;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DOMRenderComponent.prototype, "htmlElement", {
            get: function () {
                return this._htmlElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DOMRenderComponent.prototype, "absolutePositioning", {
            get: function () {
                return this._absolutePositioning;
            },
            set: function (value) {
                this._absolutePositioning = value;
                this._style.left = (this._absolutePositioning) ? "0px" : this._origX + "px";
                this._style.top = (this._absolutePositioning) ? "0px" : this._origY + "px";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DOMRenderComponent.prototype, "width", {
            get: function () {
                return this._width * this.abs(this._scaleX);
            },
            set: function (value) {
                this._width = value;
                this._styleDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DOMRenderComponent.prototype, "height", {
            get: function () {
                return this._height * this.abs(this._scaleY);
            },
            set: function (value) {
                this._height = value;
                this._styleDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DOMRenderComponent.prototype, "view", {
            get: function () {
                return this._view;
            },
            set: function (value) {
                this._view = (Avota.ObjectUtil.isString(value)) ? document.getElementById(value) : value;
                this._style = this._view.style;
                this._style.position = "absolute";
                this._width = parseInt(this._view.offsetWidth);
                this._height = parseInt(this._view.offsetHeight);
                this._origX = parseInt(this._view.offsetLeft);
                this._origY = parseInt(this._view.offsetTop);
                if(this._absolutePositioning) {
                    this._style.left = "0px";
                    this._style.top = "0px";
                }
                this._renderManager.renderCanvas.offset = Avota.DOMUtil.getOffset(this._renderManager.renderCanvas.canvas);
                this._style.transformOrigin = this._style.WebkitTransformOrigin = this._style.msTransformOrigin = this._style.MozTransformOrigin = this._style.OTransformOrigin = "0% 0%";
                this._registrationX = this.halfWidth;
                this._registrationY = this.halfHeight;
                this._htmlElement = this._view;
                this._styleDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        DOMRenderComponent.prototype.render = function (renderCanvas, renderMatrix, renderAlpha) {
            this._style.visibility = (!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) ? "hidden" : "visible";
            if(!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) {
                return;
            }
            this._renderMatrix = this._localTransform.clone();
            this._renderMatrix.tx /= renderCanvas.canvasScale.x;
            this._renderMatrix.ty /= renderCanvas.canvasScale.y;
            if(this._useGamePosition) {
                this._renderMatrix.translate(renderCanvas.offset.x, renderCanvas.offset.y);
            }
            this._renderMatrix.multiply(renderMatrix);
            this._style.opacity = this.alpha;
            this._transformValue = "matrix(" + this._renderMatrix.a + "," + this._renderMatrix.b + "," + this._renderMatrix.c + "," + this._renderMatrix.d + "," + ((this._renderMatrix.tx + .5) | 0);
            this._style.transform = this._style.WebkitTransform = this._style.OTransform = this._style.msTransform = this._transformValue + "," + ((this._renderMatrix.ty + .5) | 0) + ")";
            this._style.MozTransform = this._transformValue + "px," + ((this._renderMatrix.ty + .5) | 0) + "px)";
        };
        DOMRenderComponent.prototype.updateReferences = function () {
            if(this._spatialComponent) {
                this.x = this._spatialComponent.x;
                this.y = this._spatialComponent.y;
                this.rotation = this._spatialComponent.rotation;
            }
            if(this._styleDirty) {
                this._style.width = this._width + "px";
                this._style.height = this._height + "px";
                this._styleDirty = false;
            }
        };
        DOMRenderComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._htmlElement = null;
            this._style = null;
        };
        DOMRenderComponent.prototype.abs = function (value) {
            return (value ^ (value >> 31)) - (value >> 31);
        };
        return DOMRenderComponent;
    })(Avota.RenderComponent);
    Avota.DOMRenderComponent = DOMRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SimpleDOMRenderComponent = (function (_super) {
        __extends(SimpleDOMRenderComponent, _super);
        function SimpleDOMRenderComponent(timeManager, renderManager, view, absolutePositioning, useGamePosition) {
            if (typeof absolutePositioning === "undefined") { absolutePositioning = true; }
            if (typeof useGamePosition === "undefined") { useGamePosition = true; }
                _super.call(this, timeManager, renderManager, view, absolutePositioning, useGamePosition);
        }
        SimpleDOMRenderComponent.NAME = "SimpleDOMRenderComponent";
        SimpleDOMRenderComponent.prototype.render = function (renderCanvas, renderMatrix, renderAlpha) {
            this._style.visibility = (!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) ? "hidden" : "visible";
            if(!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) {
                return;
            }
            this._renderMatrix = this._worldTransform.clone();
            if(this._useGamePosition) {
                this._renderMatrix.translate(renderCanvas.offset.x, renderCanvas.offset.y);
            }
            this._renderMatrix.multiply(renderMatrix);
            this._style.opacity = this.alpha;
            this._style.left = ((this._renderMatrix.tx + .5) | 0) + "px";
            this._style.top = ((this._renderMatrix.ty + .5) | 0) + "px";
        };
        return SimpleDOMRenderComponent;
    })(Avota.DOMRenderComponent);
    Avota.SimpleDOMRenderComponent = SimpleDOMRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ParticleRenderComponent = (function (_super) {
        __extends(ParticleRenderComponent, _super);
        function ParticleRenderComponent(timeManager, renderManager) {
                _super.call(this, timeManager, renderManager);
            this._emitters = [];
            this._particles = [];
        }
        ParticleRenderComponent.NAME = "ParticleRenderComponent";
        Object.defineProperty(ParticleRenderComponent.prototype, "emitters", {
            get: function () {
                return this._emitters;
            },
            set: function (value) {
                var emitter;
                for(var i = this._emitters.length - 1; i >= 0; i--) {
                    this.removeEmitter(this._emitters[i]);
                }
                for(var i = value.length - 1; i >= 0; i--) {
                    this.addEmitter(value[i]);
                }
            },
            enumerable: true,
            configurable: true
        });
        ParticleRenderComponent.prototype.addEmitter = function (emitter) {
            this._emitters.push(emitter);
            emitter.particleCreated.add(this.particleAdded, this);
            emitter.particleAdded.add(this.particleAdded, this);
            emitter.particleDead.add(this.particleRemoved, this);
            emitter.particleRemoved.add(this.particleRemoved, this);
            for(var i = 0; i < emitter.particles.length; i++) {
                this._addParticle(emitter.particles[i]);
            }
        };
        ParticleRenderComponent.prototype.removeEmitter = function (emitter) {
            for(var i = 0; i < this._emitters.length; ++i) {
                if(this._emitters[i] == emitter) {
                    this._emitters.splice(i, 1);
                    emitter.particleCreated.remove(this.particleAdded, this);
                    emitter.particleAdded.remove(this.particleAdded, this);
                    emitter.particleDead.remove(this.particleRemoved, this);
                    emitter.particleRemoved.remove(this.particleRemoved, this);
                    for(var n = 0; n < emitter.particles.length; n++) {
                        this._removeParticle(emitter.particles[n]);
                    }
                    return;
                }
            }
        };
        ParticleRenderComponent.prototype.particleAdded = function (particle) {
            this._addParticle(particle);
        };
        ParticleRenderComponent.prototype.particleRemoved = function (particle) {
            this._removeParticle(particle);
        };
        ParticleRenderComponent.prototype._addParticle = function (particle) {
            this._particles.push(particle);
        };
        ParticleRenderComponent.prototype._removeParticle = function (particle) {
            var index = this._particles.indexOf(particle);
            if(index != -1) {
                this._particles.splice(index, 1);
            }
        };
        ParticleRenderComponent.prototype.destroy = function () {
            this._emitters = null;
            this._particles = null;
            _super.prototype.destroy.call(this);
        };
        return ParticleRenderComponent;
    })(Avota.RenderComponent);
    Avota.ParticleRenderComponent = ParticleRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CanvasParticleRenderComponent = (function (_super) {
        __extends(CanvasParticleRenderComponent, _super);
        function CanvasParticleRenderComponent(timeManager, renderManager, width, height) {
                _super.call(this, timeManager, renderManager);
            this._width = width;
            this._height = height;
            this._canvas = document.createElement("canvas");
            this._renderContext = this._canvas.getContext("2d");
            this._canvas.width = Math.ceil(this._width);
            this._canvas.height = Math.ceil(this._height);
            this.clearBetweenFrames = true;
            this.clearAlpha = 1;
            this.view = this._canvas;
        }
        CanvasParticleRenderComponent.NAME = "CanvasParticleRenderComponent";
        CanvasParticleRenderComponent.prototype.onFrame = function (delta) {
            if(!this.owner) {
                return;
            }
            this._renderContext.setTransform(1, 0, 0, 1, 0, 0);
            if(this.clearBetweenFrames) {
                if(this.clearAlpha == 1) {
                    this._renderContext.clearRect(0, 0, this._width, this._height);
                } else {
                    if(this.compositeOperation) {
                        this._renderContext.globalCompositeOperation = "destination-out";
                    }
                    this._renderContext.fillStyle = "rgba(0, 0, 0, " + this.clearAlpha + ")";
                    this._renderContext.fillRect(0, 0, this._width, this._height);
                }
            }
            this._len = this._particles.length;
            if(this._len) {
                this._renderContext.save();
                if(this.compositeOperation) {
                    this._renderContext.globalCompositeOperation = this.compositeOperation;
                }
                for(var i = this._len; i--; ) {
                    this._drawParticle(this._particles[i]);
                }
                this._renderContext.restore();
            }
            _super.prototype.onFrame.call(this, delta);
        };
        CanvasParticleRenderComponent.prototype._drawParticle = function (particle) {
            if(!particle.image) {
                return;
            }
            this._matrix = particle.matrixTransform;
            this._matrix.translate(-this._positionX, -this._positionY);
            if(particle.alpha != 1) {
                this._prevAlpha = this._renderContext.globalAlpha;
                this._renderContext.globalAlpha = particle.alpha;
            }
            this._renderContext.setTransform(this._matrix.a, this._matrix.b, this._matrix.c, this._matrix.d, (this._matrix.tx + .5) | 0, (this._matrix.ty + .5) | 0);
            this._renderContext.drawImage(particle.image, 0, 0, particle.image.width, particle.image.height, 0, 0, particle.image.width, particle.image.height);
            if(particle.alpha != 1) {
                this._renderContext.globalAlpha = this._prevAlpha;
            }
        };
        CanvasParticleRenderComponent.prototype.destroy = function () {
            this._matrix = null;
            this._canvas = null;
            this._renderContext = null;
            _super.prototype.destroy.call(this);
        };
        return CanvasParticleRenderComponent;
    })(Avota.ParticleRenderComponent);
    Avota.CanvasParticleRenderComponent = CanvasParticleRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameEntityParticleRenderComponent = (function (_super) {
        __extends(GameEntityParticleRenderComponent, _super);
        function GameEntityParticleRenderComponent(timeManager, renderManager) {
                _super.call(this, timeManager, renderManager);
        }
        GameEntityParticleRenderComponent.NAME = "GameEntityParticleRenderComponent";
        GameEntityParticleRenderComponent.prototype._addParticle = function (particle) {
            _super.prototype._addParticle.call(this, particle);
            this._gameEntity = particle.image;
            this._gameEntity.active = true;
            this._gameEntity.visible = true;
            this._gameEntity.centerX = particle.x;
            this._gameEntity.centerY = particle.y;
            this._gameEntity.scale = particle.scale;
            this._gameEntity.rotation = particle.rotation;
            this._gameEntity.alpha = particle.alpha;
        };
        GameEntityParticleRenderComponent.prototype._removeParticle = function (particle) {
            this._gameEntity = particle.image;
            this._gameEntity.active = false;
            this._gameEntity.visible = false;
            _super.prototype._removeParticle.call(this, particle);
        };
        GameEntityParticleRenderComponent.prototype.onFrame = function (delta) {
            if(!this.owner) {
                return;
            }
            for(var i = 0, n = this._particles.length; i < n; i++) {
                this._particle = this._particles[i];
                this._gameEntity.centerX = this._particle.x;
                this._gameEntity.centerY = this._particle.y;
                this._gameEntity.scale = this._particle.scale;
                this._gameEntity.rotation = this._particle.rotation;
                this._gameEntity.alpha = this._particle.alpha;
            }
            _super.prototype.onFrame.call(this, delta);
        };
        GameEntityParticleRenderComponent.prototype.destroy = function () {
            this._gameEntity = null;
            this._particle = null;
            _super.prototype.destroy.call(this);
        };
        return GameEntityParticleRenderComponent;
    })(Avota.ParticleRenderComponent);
    Avota.GameEntityParticleRenderComponent = GameEntityParticleRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var PixelParticleRenderComponent = (function (_super) {
        __extends(PixelParticleRenderComponent, _super);
        function PixelParticleRenderComponent(timeManager, renderManager, width, height) {
                _super.call(this, timeManager, renderManager);
            this._width = width;
            this._height = height;
            this._canvas = document.createElement("canvas");
            this._renderContext = this._canvas.getContext("2d");
            this._canvas.width = Math.ceil(this._width);
            this._canvas.height = Math.ceil(this._height);
            this.clearBetweenFrames = true;
            this.clearAlpha = 1;
            this.pixelSize = 1;
            this.view = this._canvas;
        }
        PixelParticleRenderComponent.NAME = "PixelParticleRenderComponent";
        PixelParticleRenderComponent.prototype.onFrame = function (delta) {
            if(!this.owner) {
                return;
            }
            if(this.clearBetweenFrames) {
                if(this.clearAlpha == 1) {
                    this._renderContext.clearRect(0, 0, this._width, this._height);
                } else {
                    if(this.compositeOperation) {
                        this._renderContext.globalCompositeOperation = "destination-out";
                    }
                    this._renderContext.fillStyle = "rgba(0, 0, 0, " + this.clearAlpha + ")";
                    this._renderContext.fillRect(0, 0, this._width, this._height);
                }
            }
            this._len = this._particles.length;
            if(this._len) {
                this._renderContext.save();
                if(this.compositeOperation) {
                    this._renderContext.globalCompositeOperation = this.compositeOperation;
                }
                for(var i = this._len; i--; ) {
                    this._drawParticle(this._particles[i]);
                }
                this._renderContext.restore();
            }
            _super.prototype.onFrame.call(this, delta);
        };
        PixelParticleRenderComponent.prototype._drawParticle = function (particle) {
            if(!particle) {
                return;
            }
            this._colors = Avota.ColorUtil.hexToARGB(particle.color);
            this._renderContext.fillStyle = "rgba(" + this._colors[1] + ", " + this._colors[2] + ", " + this._colors[3] + ", " + particle.alpha + ")";
            this._renderContext.fillRect(particle.x, particle.y, this.pixelSize, this.pixelSize);
        };
        PixelParticleRenderComponent.prototype.sortByColor = function (a, b) {
            return a.color - b.color;
        };
        PixelParticleRenderComponent.prototype.destroy = function () {
            this._colors = null;
            this._canvas = null;
            this._renderContext = null;
            _super.prototype.destroy.call(this);
        };
        return PixelParticleRenderComponent;
    })(Avota.ParticleRenderComponent);
    Avota.PixelParticleRenderComponent = PixelParticleRenderComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RenderLayer = (function (_super) {
        __extends(RenderLayer, _super);
        function RenderLayer(timeManager, index, width, height, name) {
            if (typeof index === "undefined") { index = -1; }
            if (typeof width === "undefined") { width = -1; }
            if (typeof height === "undefined") { height = -1; }
            if (typeof name === "undefined") { name = RenderLayer.NAME; }
                _super.call(this, name + index);
            this._timeManager = timeManager;
            this._index = index;
            this._width = width;
            this._height = height;
            this._transform = new Avota.Matrix();
            this._position = new Avota.Point();
            this._registration = new Avota.Point();
            this._center = new Avota.Point();
            this._offset = new Avota.Point();
            this._extents = new Avota.Rectangle();
            this._renderComponents = [];
            this.sortFunction = this._defaultSortFunction;
            this._isBlinking = false;
            this._isShaking = false;
            this.preventAutoReset = false;
            this.reset();
            this._timeManager.addAnimatedObject(this, -1);
        }
        RenderLayer.NAME = "RenderLayer";
        Object.defineProperty(RenderLayer.prototype, "isBlinking", {
            get: function () {
                return this._isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "isShaking", {
            get: function () {
                return this._isShaking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "index", {
            get: function () {
                return this._index;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "isDirty", {
            get: function () {
                return this._indexDirty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "halfWidth", {
            get: function () {
                return (this._width * .5) * this.abs(this._scaleX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "halfHeight", {
            get: function () {
                return (this._height * .5) * this.abs(this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "width", {
            get: function () {
                return this._width * this._scaleX;
            },
            set: function (value) {
                this._width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "height", {
            get: function () {
                return this._height * this._scaleY;
            },
            set: function (value) {
                this._height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "top", {
            get: function () {
                return this._positionY + this._offsetY;
            },
            set: function (value) {
                this.y = value - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "left", {
            get: function () {
                return this._positionX + this._offsetX;
            },
            set: function (value) {
                this.x = value - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "right", {
            get: function () {
                return this._positionX + (this._width * this._scaleX) + this._offsetX;
            },
            set: function (value) {
                this.x = value - (this._width * this._scaleX) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "bottom", {
            get: function () {
                return this._positionY + (this._height * this._scaleY) + this._offsetY;
            },
            set: function (value) {
                this.y = value - (this._height * this._scaleY) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "centerX", {
            get: function () {
                return this._positionX + ((this._width * this.abs(this._scaleX)) * .5) + this._offsetX;
            },
            set: function (value) {
                this._positionX = value - ((this._width * this.abs(this._scaleX)) * .5) - this._offsetX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "centerY", {
            get: function () {
                return this._positionY + ((this._height * this.abs(this._scaleY)) * .5) + this._offsetY;
            },
            set: function (value) {
                this._positionY = value - ((this._height * this.abs(this._scaleY)) * .5) - this._offsetY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "transform", {
            get: function () {
                return this._transform;
            },
            set: function (value) {
                if(this._transform == value) {
                    return;
                }
                var a = value.a;
                var b = value.b;
                var c = value.c;
                var d = value.d;
                this._positionX = value.tx;
                this._positionY = value.ty;
                this._scaleX = Math.sqrt(a * a + b * b);
                this._rotation = (this._scaleX != 0) ? Math.atan2(b, a) : 0;
                this._scaleY = d * Math.cos(this._rotation) - c * Math.sin(this._rotation);
                this._registrationX = 0;
                this._registrationY = 0;
                this._transform = value;
                this._transformDirty = false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "x", {
            get: function () {
                return this._positionX;
            },
            set: function (value) {
                if(this._positionX == value) {
                    return;
                }
                this._positionX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "y", {
            get: function () {
                return this._positionY;
            },
            set: function (value) {
                if(this._positionY == value) {
                    return;
                }
                this._positionY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "registrationX", {
            get: function () {
                return this._registrationX;
            },
            set: function (value) {
                if(this._registrationX == value) {
                    return;
                }
                this._registrationX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "registrationY", {
            get: function () {
                return this._registrationY;
            },
            set: function (value) {
                if(this._registrationY == value) {
                    return;
                }
                this._registrationY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                if(this._offsetX == value) {
                    return;
                }
                this._offsetX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                if(this._offsetY == value) {
                    return;
                }
                this._offsetY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "scale", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                if(this._scaleX == value) {
                    return;
                }
                this._scaleX = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                if(this._scaleY == value) {
                    return;
                }
                this._scaleY = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "rotation", {
            get: function () {
                return this._rotation;
            },
            set: function (value) {
                if(this._rotation == value) {
                    return;
                }
                this._rotation = value;
                this._transformDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                if(this._visible == value) {
                    return;
                }
                this._visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "alpha", {
            get: function () {
                return this._alpha;
            },
            set: function (value) {
                if(this._alpha == value) {
                    return;
                }
                this._alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "position", {
            get: function () {
                return this._position.setTo(this._positionX, this._positionY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "registration", {
            get: function () {
                return this._registration.setTo(this._registrationX, this._registrationY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "center", {
            get: function () {
                return this._center.setTo(this._positionX + ((this._width * this.abs(this._scaleX)) * .5) + this._offsetX, this._positionY + ((this._height * this.abs(this._scaleY)) * .5) + this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "offset", {
            get: function () {
                return this._offset.setTo(this._offsetX, this._offsetY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderLayer.prototype, "extents", {
            get: function () {
                return this._extents.setTo(this._positionX, this._positionY, this._width * this._scaleX, this._height * this._scaleY);
            },
            enumerable: true,
            configurable: true
        });
        RenderLayer.prototype.addRenderer = function (renderer) {
            if(this._renderComponents.indexOf(renderer) == -1) {
                this._renderComponents.push(renderer);
                this._indexDirty = true;
            }
        };
        RenderLayer.prototype.removeRenderer = function (renderer) {
            var index = this._renderComponents.indexOf(renderer);
            if(index != -1) {
                this._renderComponents.splice(index, 1);
                this._indexDirty = true;
            }
        };
        RenderLayer.prototype.getRenderers = function () {
            return this._renderComponents;
        };
        RenderLayer.prototype.onFrame = function (delta) {
            this.updateTransform();
            this.sortRenderers();
        };
        RenderLayer.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            if(this._isBlinking && !forceOverride) {
                return;
            }
            if(!this._blinkTimer) {
                this._blinkTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._blinkTimer.timerSignal.add(this._onBlink, this);
                this._blinkTimer.completeSignal.add(this._onBlinkComplete, this);
            }
            if(forceOverride && this._currentAlpha) {
                this._alpha = this._currentAlpha;
            }
            this._currentAlpha = this._alpha;
            this._blinkAlpha = alpha;
            this._blinkTimer.reset();
            this._blinkTimer.repeatCount = repeat;
            this._blinkTimer.delay = duration / repeat;
            this._blinkTimer.start();
            this._isBlinking = true;
        };
        RenderLayer.prototype.stopBlink = function () {
            if(!this._isBlinking) {
                return;
            }
            this._onBlinkComplete();
        };
        RenderLayer.prototype._onBlink = function () {
            this._alpha = (this._alpha == this._currentAlpha) ? this._blinkAlpha : this._currentAlpha;
        };
        RenderLayer.prototype._onBlinkComplete = function () {
            this._alpha = this._currentAlpha;
            this._isBlinking = false;
            this._blinkTimer.reset();
        };
        RenderLayer.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            if(!this._shakeTimer) {
                this._shakeTimer = this.create(Avota.Timer, this._timeManager, duration, repeat);
                this._shakeTimer.timerSignal.add(this._onShake, this);
                this._shakeTimer.completeSignal.add(this._onShakeComplete, this);
            }
            this._currentOffsetX = this.offsetX;
            this._currentOffsetY = this.offsetY;
            this._shakeStrength = strength;
            this._shakeTimer.reset();
            this._shakeTimer.repeatCount = repeat;
            this._shakeTimer.delay = duration / repeat;
            this._shakeTimer.start();
            this._isShaking = true;
        };
        RenderLayer.prototype.stopShake = function () {
            if(!this._isShaking) {
                return;
            }
            this._onShakeComplete();
        };
        RenderLayer.prototype._onShake = function () {
            this.offsetX = this._currentOffsetX + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
            this.offsetY = this._currentOffsetY + Avota.Random.integer(-this._shakeStrength, this._shakeStrength);
        };
        RenderLayer.prototype._onShakeComplete = function () {
            this.offsetX = this._currentOffsetX;
            this.offsetY = this._currentOffsetY;
            this._isShaking = false;
            this._shakeTimer.reset();
        };
        RenderLayer.prototype.updateTransform = function (markDirty) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if(!this._transformDirty && !markDirty) {
                return;
            }
            this._transform.identity();
            this._transform.translate(this._positionX + this._registrationX, this._positionY + this._registrationY);
            this._transform.scale(this._scaleX, this._scaleY);
            this._transform.rotate(this._rotation * (Math.PI / 180));
            this._transform.translate(-this._registrationX + this._offsetX, -this._registrationY + this._offsetY);
            this._transformDirty = false;
        };
        RenderLayer.prototype.reset = function () {
            this._transform.identity();
            this._renderComponents.length = 0;
            this._width = 1;
            this._height = 1;
            this._registrationX = 0;
            this._registrationY = 0;
            this._positionX = 0;
            this._positionY = 0;
            this._offsetX = 0;
            this._offsetY = 0;
            this._scaleX = 1;
            this._scaleY = 1;
            this._rotation = 0;
            this._visible = true;
            this._alpha = 1;
            this._transformDirty = true;
            this._indexDirty = true;
            this.cameraTransformOptions = Avota.TransformOptions.ALL;
            this.cameraPanXFactor = 1;
            this.cameraPanYFactor = 1;
        };
        RenderLayer.prototype.sortRenderers = function (markDirty) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if(!this._indexDirty && !markDirty) {
                return;
            }
            this._renderComponents.sort(this.sortFunction);
            this._firstRenderer = null;
            this._lastRenderer = null;
            for(var i = 0, n = this._renderComponents.length; i < n; i++) {
                if(this._firstRenderer == null) {
                    this._firstRenderer = this._renderComponents[i];
                    this._lastRenderer = this._renderComponents[i];
                } else {
                    this._lastRenderer._next = this._renderComponents[i];
                    this._lastRenderer = this._renderComponents[i];
                }
            }
            this._indexDirty = false;
        };
        RenderLayer.prototype.markDirty = function () {
            this._indexDirty = true;
        };
        RenderLayer.prototype._defaultSortFunction = function (a, b) {
            return a.zIndex - b.zIndex;
        };
        RenderLayer.prototype.destroy = function () {
            this._timeManager.removeAnimatedObject(this);
            this._renderComponents.length = 0;
            this._position = null;
            this._registration = null;
            this._center = null;
            this._offset = null;
            this._extents = null;
            this._blinkTimer = null;
            this._shakeTimer = null;
            this._renderComponents = null;
            this._transform = null;
            this.sortFunction = null;
            _super.prototype.destroy.call(this);
        };
        RenderLayer.prototype.abs = function (value) {
            return (value ^ (value >> 31)) - (value >> 31);
        };
        return RenderLayer;
    })(Avota.Group);
    Avota.RenderLayer = RenderLayer;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RenderManager = (function (_super) {
        __extends(RenderManager, _super);
        function RenderManager(timeManager, viewPort, canvas, name) {
            if (typeof name === "undefined") { name = RenderManager.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._renderCanvas = canvas;
            this._camera = this.create(Avota.Camera, this._timeManager, this, viewPort, Avota.Camera.NAME);
            this._renderLayers = [];
            this.sortFunction = this._defaultSortFunction;
            this._timeManager.addAnimatedObject(this, -10);
            if(DEBUG) {
                this._profiler = this.create(Avota.Profiler, name + "Profiler");
                this._profiler.add("render", "rgb(128,0,0)");
            }
        }
        RenderManager.NAME = "RenderManager";
        Object.defineProperty(RenderManager.prototype, "renderCanvas", {
            get: function () {
                return this._renderCanvas;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderManager.prototype, "camera", {
            get: function () {
                return this._camera;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderManager.prototype, "layerCount", {
            get: function () {
                return this._renderLayers.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RenderManager.prototype, "isDirty", {
            get: function () {
                return this._sortDirty;
            },
            enumerable: true,
            configurable: true
        });
        RenderManager.prototype.addRenderer = function (renderer) {
            this.getLayer(renderer.layerIndex, true).addRenderer(renderer);
            this._sortDirty = true;
        };
        RenderManager.prototype.removeRenderer = function (renderer) {
            this.getLayer(renderer.layerIndex).removeRenderer(renderer);
            this._sortDirty = true;
        };
        RenderManager.prototype.getRenderers = function (layerIndex) {
            return this.getLayer(layerIndex).getRenderers();
        };
        RenderManager.prototype.getLayer = function (index, autoCreate) {
            if (typeof autoCreate === "undefined") { autoCreate = false; }
            var layer;
            for(var i = 0, n = this._renderLayers.length; i < n; i++) {
                layer = this._renderLayers[i];
                if(layer.index == index) {
                    return layer;
                    break;
                }
            }
            if(autoCreate) {
                layer = this.create(Avota.RenderLayer, this._timeManager, index);
                layer.registrationX = this._camera.halfWidth;
                layer.registrationY = this._camera.halfHeight;
                this._renderLayers.push(layer);
                this.sortLayers(true);
            }
            if(LOGGING) {
                if(index > this._renderLayers.length && !autoCreate) {
                    this._log.warn("Layer index out of range");
                }
            }
            return layer;
        };
        RenderManager.prototype.getLayers = function () {
            return this._renderLayers;
        };
        RenderManager.prototype.removeAllLayers = function () {
            for(var i = 0; i < this._renderLayers.length; i++) {
                this._renderLayers[i].destroy();
                this._renderLayers[i] = null;
            }
            this._renderLayers = [];
        };
        RenderManager.prototype.reset = function () {
            this._camera.reset();
            for(var i = 0; i < this._renderLayers.length; i++) {
                if(!this._renderLayers[i].preventAutoReset) {
                    this._renderLayers[i].reset();
                }
            }
        };
        RenderManager.prototype.onFrame = function (delta) {
            if(DEBUG) {
                this._profiler.begin("render");
            }
            this.sortLayers();
            this._renderCanvas.clear();
            this._renderCanvas.save();
            this._renderID = 0;
            this._draws = 0;
            this._layer = this._firstLayer;
            while(this._layer) {
                if(!this._layer.visible) {
                    this._layer = this._layer._next;
                    continue;
                }
                this._renderMatrix = this._layer.transform.clone();
                if(this._layer.cameraTransformOptions == Avota.TransformOptions.ALL) {
                    this._cameraMatrix = this._camera.transform.clone();
                    this._cameraMatrix.tx *= this._layer.cameraPanXFactor;
                    this._cameraMatrix.ty *= this._layer.cameraPanYFactor;
                    this._renderMatrix.multiply(this._cameraMatrix);
                } else if(this._layer.cameraTransformOptions != Avota.TransformOptions.NONE) {
                    this._renderMatrix.translate(-this._camera.registrationX, -this._camera.registrationY);
                    if(this._layer.cameraTransformOptions & Avota.TransformOptions.SCALE) {
                        this._renderMatrix.scale(this._camera.scaleX, this._camera.scaleY);
                    }
                    if(this._layer.cameraTransformOptions & Avota.TransformOptions.ROTATE) {
                        this._renderMatrix.rotate(this._camera.rotation * (Math.PI / 180));
                    }
                    if(this._layer.cameraTransformOptions & Avota.TransformOptions.TRANSLATE) {
                        this._renderMatrix.translate((this._camera.x * this._layer.cameraPanXFactor) + this._camera.offsetX, (this._camera.y * this._layer.cameraPanYFactor) + this._camera.offsetY);
                    }
                    this._renderMatrix.translate(this._camera.registrationX, this._camera.registrationY);
                }
                this._renderAlpha = this._layer.alpha * this._camera.alpha;
                this._renderComponent = this._layer._firstRenderer;
                while(this._renderComponent) {
                    if(this._renderComponent.view && this._camera.inView(this._renderComponent, this._layer)) {
                        this._renderComponent._renderID = this._renderID++;
                        this._renderComponent.render(this._renderCanvas, this._renderMatrix, this._renderAlpha);
                    }
                    if(this._renderComponent == this._layer._lastRenderer) {
                        break;
                    }
                    this._renderComponent = this._renderComponent._next;
                }
                if(this._layer == this._lastLayer) {
                    break;
                }
                this._layer = this._layer._next;
            }
            this._renderCanvas.restore();
            if(DEBUG) {
                this._profiler.end("render");
            }
        };
        RenderManager.prototype.clear = function () {
            this._renderCanvas.clear();
        };
        RenderManager.prototype.sortLayers = function (markDirty) {
            if (typeof markDirty === "undefined") { markDirty = false; }
            if(!this._sortDirty && !markDirty) {
                return;
            }
            this._renderLayers.sort(this.sortFunction);
            this._firstLayer = null;
            this._lastLayer = null;
            for(var i = 0, n = this._renderLayers.length; i < n; i++) {
                if(this._firstLayer == null) {
                    this._firstLayer = this._renderLayers[i];
                    this._lastLayer = this._renderLayers[i];
                } else {
                    this._lastLayer._next = this._renderLayers[i];
                    this._lastLayer = this._renderLayers[i];
                }
            }
            this._sortDirty = false;
        };
        RenderManager.prototype.markDirty = function () {
            this._sortDirty = true;
        };
        RenderManager.prototype._defaultSortFunction = function (a, b) {
            return a.index - b.index;
        };
        RenderManager.prototype.destroy = function () {
            this._timeManager.removeAnimatedObject(this);
            _super.prototype.destroy.call(this);
            this._timeManager = null;
            this._renderCanvas = null;
            this._renderLayers = null;
            this._camera = null;
            this._layer = null;
            this.sortFunction = null;
            this._profiler = null;
        };
        return RenderManager;
    })(Avota.Group);
    Avota.RenderManager = RenderManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RenderSession = (function () {
        function RenderSession() { }
        return RenderSession;
    })();
    Avota.RenderSession = RenderSession;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Tile = (function (_super) {
        __extends(Tile, _super);
        function Tile(frames, index, width, height, name) {
            if (typeof index === "undefined") { index = -1; }
            if (typeof width === "undefined") { width = 1; }
            if (typeof height === "undefined") { height = 1; }
            if (typeof name === "undefined") { name = (Tile.NAME + Tile.COUNT++); }
                _super.call(this, name);
            this.index = index;
            this.width = width;
            this.height = height;
            this.row = -1;
            this.col = -1;
            this._frames = frames;
            this._duration = 1000;
            this._defaultRepeatCount = -1;
            this._currentRepeatCount = this._defaultRepeatCount;
            this._totalFrames = this._frames.length;
            this._frameDuration = (this._duration / this._totalFrames) / 1000;
            this._frameIndex = 0;
            this._elapsed = 0;
        }
        Tile.NAME = "Tile";
        Tile.COUNT = 0;
        Object.defineProperty(Tile.prototype, "isAnimated", {
            get: function () {
                return this._frames.length > 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "frames", {
            get: function () {
                return this._frames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "currentFrame", {
            get: function () {
                return this._frames[this._frameIndex];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "totalFrames", {
            get: function () {
                return this._totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "repeatCount", {
            get: function () {
                return this._currentRepeatCount;
            },
            set: function (value) {
                this._defaultRepeatCount = value;
                this._currentRepeatCount = this._defaultRepeatCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (value) {
                this._duration = value;
                this._frameDuration = (Math.abs(this._duration) / this._totalFrames) / 1000;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tile.prototype, "frameIndex", {
            get: function () {
                return this._frameIndex;
            },
            set: function (value) {
                this._frameIndex = value % this._totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        Tile.prototype.animate = function (delta) {
            if(!this.isAnimated) {
                return;
            }
            this._elapsed += delta;
            this._repeat = false;
            if(this._elapsed >= this._frameDuration) {
                this._count = Math.floor(this._elapsed / this._frameDuration);
                if((this._frameIndex + this._count) >= this._totalFrames) {
                    this._repeat = true;
                }
                this._frameIndex = (this._frameIndex + this._count) % this._totalFrames;
                this._elapsed = 0;
            }
            if(this._repeat) {
                if(this._currentRepeatCount > 0) {
                    this._currentRepeatCount--;
                }
                if(this._currentRepeatCount == 0) {
                    this._frameIndex = this._totalFrames - 1;
                    this._currentRepeatCount = this._defaultRepeatCount;
                }
            }
        };
        Tile.prototype.setType = function (typeManager, maskType) {
            this.type = typeManager.getBitMask(maskType);
        };
        Tile.prototype.clone = function (parent) {
            var tile = parent.create(Tile, this._frames, this.index, this.width, this.height, (this.name + Tile.COUNT++));
            tile.duration = this.duration;
            tile.repeatCount = this.repeatCount;
            tile.frameIndex = this.frameIndex;
            if(this.type) {
                tile.type = this.type;
            }
            return tile;
        };
        Tile.prototype.destroy = function () {
            this._frames = null;
            this.type = null;
            this.data = null;
            _super.prototype.destroy.call(this);
        };
        return Tile;
    })(Avota.Element);
    Avota.Tile = Tile;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TileRenderComponent = (function (_super) {
        __extends(TileRenderComponent, _super);
        function TileRenderComponent(timeManager, renderManager, tileSet, tiles, rows, cols) {
                _super.call(this, timeManager, renderManager);
            this.showDebug = false;
            this._camera = this._renderManager.camera;
            this._tileSet = tileSet;
            this._tileSheet = this._tileSet.tileSheet;
            this._tileWidth = this._tileSet.tileWidth;
            this._tileHeight = this._tileSet.tileHeight;
            this._tiles = tiles;
            this._rows = rows;
            this._cols = cols;
            this._width = this._cols * this._tileWidth;
            this._height = this._rows * this._tileHeight;
            this._view = document.createElement('canvas');
            this._isPrerendered = false;
            this._renderMethod = this.renderTiles;
        }
        Object.defineProperty(TileRenderComponent.prototype, "tileSet", {
            get: function () {
                return this._tileSet;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileRenderComponent.prototype, "tiles", {
            get: function () {
                return this._tiles;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileRenderComponent.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileRenderComponent.prototype, "cols", {
            get: function () {
                return this._cols;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileRenderComponent.prototype, "tileWidth", {
            get: function () {
                return this._tileWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileRenderComponent.prototype, "tileHeight", {
            get: function () {
                return this._tileHeight;
            },
            enumerable: true,
            configurable: true
        });
        TileRenderComponent.prototype.setTile = function (row, col, reference) {
        };
        TileRenderComponent.prototype.onFrame = function (delta) {
            return;
            _super.prototype.onFrame.call(this, delta);
            if(this._isPrerendered) {
                return;
            }
            for(var r = 0; r < this._rows; r++) {
                for(var c = 0; c < this._cols; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if(!this._tile) {
                        continue;
                    }
                    this._tile.animate(delta);
                }
            }
        };
        TileRenderComponent.prototype.prerender = function (chunkWidth, chunkHeight, tileSet, tiles, rows, cols) {
            if (typeof tileSet === "undefined") { tileSet = this._tileSet; }
            if (typeof tiles === "undefined") { tiles = this._tiles; }
            if (typeof rows === "undefined") { rows = this._rows; }
            if (typeof cols === "undefined") { cols = this._cols; }
            if(!this._tileChunks) {
                this._tileChunks = [];
            }
            this._chunkWidth = tileSet.tileWidth * chunkWidth;
            this._chunkHeight = tileSet.tileHeight * chunkHeight;
            this._chunkRows = rows / chunkHeight;
            this._chunkCols = cols / chunkWidth;
            var tileChunk;
            for(var cr = 0; cr < rows; cr += chunkHeight) {
                for(var cc = 0; cc < cols; cc += chunkWidth) {
                    tileChunk = this._tileChunks[((cr / chunkHeight) * this._chunkCols) + (cc / chunkWidth)];
                    if(!tileChunk) {
                        tileChunk = this.create(TileChunk, this._chunkWidth, this._chunkHeight);
                    }
                    for(var r = 0; r < rows; r++) {
                        for(var c = 0; c < cols; c++) {
                            this._tile = tiles[((cr + r) * cols) + (cc + c)];
                            if(!this._tile || !this._tile.currentFrame) {
                                continue;
                            }
                            this._region = this._tile.currentFrame.region;
                            this._offset = this._tile.currentFrame.offset;
                            tileChunk._renderContext.drawImage(tileSet.tileSheet.image, this._region.x, this._region.y, this._region.width, this._region.height, (c * this._tileWidth) + this._offset.x, (r * this._tileHeight) + this._offset.y, this._region.width, this._region.height);
                        }
                    }
                    this._tileChunks[((cr / chunkHeight) * this._chunkCols) + (cc / chunkWidth)] = tileChunk;
                }
            }
            this._isPrerendered = true;
            this._renderMethod = this.renderChunks;
        };
        TileRenderComponent.prototype.render = function (renderCanvas, renderMatrix, renderAlpha) {
            this._renderMethod(renderCanvas, renderMatrix, renderAlpha);
        };
        TileRenderComponent.prototype.renderChunks = function (renderCanvas, renderMatrix, renderAlpha) {
            if(this._parent) {
                renderAlpha *= this._parent.alpha;
                if(!this._parent.visible || renderAlpha == 0 || this._parent.scaleX == 0 || this._parent.scaleY == 0) {
                    return;
                }
            }
            renderAlpha *= this._alpha;
            if(!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) {
                return;
            }
            if(renderAlpha != 1) {
                this._globalAlpha = renderCanvas.alpha;
                renderCanvas.alpha = renderAlpha;
            }
            this._renderMatrix = this._worldTransform.clone();
            this._renderMatrix.multiply(renderMatrix);
            if(this._roundedPixels) {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, (this._renderMatrix.tx + .5) | 0, (this._renderMatrix.ty + .5) | 0);
            } else {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, this._renderMatrix.tx, this._renderMatrix.ty);
            }
            this._topRow = this.clamp(Math.floor((this._camera.top - this._camera.offsetY - this.y) / this._chunkHeight), 0, this._chunkRows);
            this._bottomRow = this.clamp(Math.ceil(((this._camera.bottom / this._camera.scaleY) - this._camera.offsetY - this.y) / this._chunkHeight), 0, this._chunkRows);
            this._leftCol = this.clamp(Math.floor((this._camera.left - this._camera.offsetX - this.x) / this._chunkWidth), 0, this._chunkCols);
            this._rightCol = this.clamp(Math.ceil(((this._camera.right / this._camera.scaleX) - this._camera.offsetX - this.x) / this._chunkWidth), 0, this._chunkCols);
            for(var r = this._topRow; r < this._bottomRow; r++) {
                for(var c = this._leftCol; c < this._rightCol; c++) {
                    this._chunk = this._tileChunks[(r * this._chunkCols) + c];
                    if(!this._chunk) {
                        continue;
                    }
                    renderCanvas.drawImage(this._chunk._canvas, 0, 0, this._chunk.width, this._chunk.height, (c * this._chunk.width), (r * this._chunk.height), this._chunk.width, this._chunk.height);
                    this._renderManager._draws++;
                }
            }
            if(renderAlpha != 1) {
                renderCanvas.alpha = this._globalAlpha;
            }
        };
        TileRenderComponent.prototype.renderTiles = function (renderCanvas, renderMatrix, renderAlpha) {
            if(this._parent) {
                renderAlpha *= this._parent.alpha;
                if(!this._parent.visible || renderAlpha == 0 || this._parent.scaleX == 0 || this._parent.scaleY == 0) {
                    return;
                }
            }
            renderAlpha *= this._alpha;
            if(!this._visible || this._alpha == 0 || this._scaleX == 0 || this._scaleY == 0) {
                return;
            }
            if(renderAlpha != 1) {
                this._globalAlpha = renderCanvas.alpha;
                renderCanvas.alpha = renderAlpha;
            }
            this._renderMatrix = this._worldTransform.clone();
            this._renderMatrix.multiply(renderMatrix);
            if(this._roundedPixels) {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, (this._renderMatrix.tx + .5) | 0, (this._renderMatrix.ty + .5) | 0);
            } else {
                renderCanvas.setTransform(this._renderMatrix.a, this._renderMatrix.b, this._renderMatrix.c, this._renderMatrix.d, this._renderMatrix.tx, this._renderMatrix.ty);
            }
            this._topRow = this.clamp(Math.floor((this._camera.top - this._camera.offsetY - this.y) / this._tileHeight), 0, this._rows);
            this._bottomRow = this.clamp(Math.ceil(((this._camera.bottom / this._camera.scaleY) - this._camera.offsetY - this.y) / this._tileHeight), 0, this._rows);
            this._leftCol = this.clamp(Math.floor((this._camera.left - this._camera.offsetX - this.x) / this._tileWidth), 0, this._cols);
            this._rightCol = this.clamp(Math.ceil(((this._camera.right / this._camera.scaleX) - this._camera.offsetX - this.x) / this._tileWidth), 0, this._cols);
            for(var r = this._topRow; r < this._bottomRow; r++) {
                for(var c = this._leftCol; c < this._rightCol; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if(!this._tile || !this._tile.currentFrame) {
                        continue;
                    }
                    this._region = this._tile.currentFrame.region;
                    this._offset = this._tile.currentFrame.offset;
                    renderCanvas.drawImage(this._tileSheet.image, this._region.x, this._region.y, this._region.width, this._region.height, (c * this._tileWidth) + this._offset.x, (r * this._tileHeight) + this._offset.y, this._region.width, this._region.height);
                    this._renderManager._draws++;
                }
            }
            if(renderAlpha != 1) {
                renderCanvas.alpha = this._globalAlpha;
            }
        };
        TileRenderComponent.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        TileRenderComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._renderContext = null;
            this._camera = null;
            this._tileSet = null;
            this._tileSheet = null;
            this._tiles = null;
            this._tileChunks = null;
            this._chunk = null;
            this._tile = null;
            this._rect = null;
            this._region = null;
            this._offset = null;
            this._renderMethod = null;
        };
        return TileRenderComponent;
    })(Avota.RenderComponent);
    Avota.TileRenderComponent = TileRenderComponent;    
    var TileChunk = (function (_super) {
        __extends(TileChunk, _super);
        function TileChunk(width, height, name) {
            if (typeof name === "undefined") { name = (TileChunk.NAME + TileChunk.COUNT++); }
                _super.call(this, name);
            this._canvas = document.createElement('canvas');
            this._renderContext = this._canvas.getContext('2d');
            this.width = width;
            this.height = height;
            this._canvas.width = this.width;
            this._canvas.height = this.height;
        }
        TileChunk.NAME = "TileChunk";
        TileChunk.COUNT = 0;
        TileChunk.prototype.destroy = function () {
            this._canvas = null;
            this._renderContext = null;
            _super.prototype.destroy.call(this);
        };
        return TileChunk;
    })(Avota.Element);
    Avota.TileChunk = TileChunk;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TileSet = (function (_super) {
        __extends(TileSet, _super);
        function TileSet(typeManager, tileSheet, data, name) {
            if (typeof name === "undefined") { name = (TileSet.NAME + TileSet.COUNT++); }
                _super.call(this, (data.hasOwnProperty("name")) ? data.name : name);
            this._typeManager = typeManager;
            this._tileSheet = tileSheet;
            this._data = data;
            this.tiles = [];
            if(this._data.hasOwnProperty("tileWidth")) {
                this._tileWidth = this._data.tileWidth;
            }
            if(this._data.hasOwnProperty("tileHeight")) {
                this._tileHeight = this._data.tileHeight;
            }
            if(this._data.hasOwnProperty("tileSize")) {
                this._tileWidth = this._data.tileSize;
                this._tileHeight = this._data.tileSize;
            }
            if(this._data.hasOwnProperty("tiles")) {
                var tile;
                var key;
                var info;
                var name;
                var width;
                var height;
                var index = 0;
                for(key in this._data.tiles) {
                    info = this._data.tiles[key];
                    if(!info.hasOwnProperty("frames")) {
                        info.frames = "*";
                    }
                    tile = this.create(Avota.Tile, this._tileSheet.getFrames(info.frames), index++, this._tileWidth, this._tileHeight, info.name);
                    if(info.hasOwnProperty("frameIndex")) {
                        tile.frameIndex = info.frameIndex;
                    }
                    if(info.hasOwnProperty("repeatCount")) {
                        tile.repeatCount = info.repeatCount;
                    }
                    if(info.hasOwnProperty("duration")) {
                        tile.duration = parseInt(info.duration);
                    }
                    if(info.hasOwnProperty("type")) {
                        tile.setType(this._typeManager, info.type.replace(/\s/g, "").split(","));
                    }
                    this.tiles.push(tile);
                }
            }
        }
        TileSet.NAME = "TileSet";
        TileSet.COUNT = 0;
        Object.defineProperty(TileSet.prototype, "tileSheet", {
            get: function () {
                return this._tileSheet;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileSet.prototype, "tileWidth", {
            get: function () {
                return this._tileWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileSet.prototype, "tileHeight", {
            get: function () {
                return this._tileHeight;
            },
            enumerable: true,
            configurable: true
        });
        TileSet.prototype.getTile = function (index) {
            return this.tiles[index - 1];
        };
        TileSet.prototype.getTileByName = function (name) {
            for(var i = 0, n = this.tiles.length; i < n; i++) {
                if(this.tiles[i].name == name) {
                    return this.tiles[i];
                }
            }
            return null;
        };
        TileSet.prototype.destroy = function () {
            this.tiles = null;
            this._data = null;
            this._tileSheet = null;
            this._typeManager = null;
            _super.prototype.destroy.call(this);
        };
        return TileSet;
    })(Avota.Group);
    Avota.TileSet = TileSet;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TileSheet = (function (_super) {
        __extends(TileSheet, _super);
        function TileSheet(image, data, name, format) {
            if (typeof name === "undefined") { name = TileSheet.NAME; }
            if (typeof format === "undefined") { format = TileSheetFormat.JSON; }
                _super.call(this, name);
            this._image = image;
            this._data = data;
            this.parseData(format);
        }
        TileSheet.NAME = "TileSheet";
        Object.defineProperty(TileSheet.prototype, "image", {
            get: function () {
                return this._image;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileSheet.prototype, "data", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        TileSheet.prototype.parseData = function (format) {
            this._regions = {
            };
            this._frames = {
            };
            var name;
            var x;
            var y;
            var width;
            var height;
            var frameX;
            var frameY;
            var frameWidth;
            var frameHeight;
            var region;
            var offset;
            switch(format) {
                case Avota.SpriteSheetFormat.JSON:
                    var info;
                    for(var i = 0; i < this._data.frames.length; i++) {
                        info = this._data.frames[i];
                        name = info.filename;
                        x = info.frame.x;
                        y = info.frame.y;
                        width = info.frame.w;
                        height = info.frame.h;
                        frameX = info.spriteSourceSize.x;
                        frameY = info.spriteSourceSize.y;
                        frameWidth = info.sourceSize.w;
                        frameHeight = info.sourceSize.h;
                        region = new Avota.Rectangle(x, y, width, height);
                        offset = new Avota.Rectangle(frameX, frameY, frameWidth, frameHeight);
                        this.addFrame(name, region, offset);
                    }
                    break;
                case Avota.SpriteSheetFormat.STARLING:
                    break;
            }
        };
        TileSheet.prototype.getRegion = function (name) {
            return this._regions[name];
        };
        TileSheet.prototype.getOffset = function (name) {
            return this._frames[name];
        };
        TileSheet.prototype.getFrame = function (name) {
            return this._frames[name];
        };
        TileSheet.prototype.getFrames = function (prefix) {
            if (typeof prefix === "undefined") { prefix = ""; }
            var result = [];
            var names = [];
            for(var name in this._regions) {
                if(name.indexOf(prefix) == 0) {
                    names.push(name);
                }
            }
            names.sort(this.sortCaseInsensitive);
            for(var i = 0, n = names.length; i < n; i++) {
                result.push(this.getFrame(names[i]));
            }
            return result;
        };
        TileSheet.prototype.addFrame = function (name, region, offset) {
            this._regions[name] = region;
            this._frames[name] = new TileData(region, offset);
        };
        TileSheet.prototype.removeFrame = function (name) {
            this._frames[name].destroy();
            delete this._frames[name];
        };
        TileSheet.prototype.destroy = function () {
            var key;
            for(key in this._regions) {
                this._regions[key] = null;
                delete this._regions[key];
            }
            var tileData;
            for(key in this._frames) {
                tileData = this._frames[key];
                tileData.destroy();
                this._frames[key] = null;
                delete this._frames[key];
            }
            tileData = null;
            this._data = null;
            this._image = null;
            this._frames = null;
            this._regions = null;
            _super.prototype.destroy.call(this);
        };
        TileSheet.prototype.sortCaseInsensitive = function (a, b) {
            if(a.toLowerCase() < b.toLowerCase()) {
                return -1;
            }
            if(a.toLowerCase() > b.toLowerCase()) {
                return 1;
            }
            return 0;
        };
        return TileSheet;
    })(Avota.Element);
    Avota.TileSheet = TileSheet;    
    var TileSheetFormat = (function () {
        function TileSheetFormat() { }
        TileSheetFormat.JSON = "JSON";
        return TileSheetFormat;
    })();
    Avota.TileSheetFormat = TileSheetFormat;    
    var TileData = (function () {
        function TileData(region, offset) {
            this.region = region;
            this.offset = offset;
            this.destroyed = false;
        }
        TileData.prototype.destroy = function () {
            this.region = null;
            this.offset = null;
            this.destroyed = true;
        };
        return TileData;
    })();
    Avota.TileData = TileData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpatialGrid = (function (_super) {
        __extends(SpatialGrid, _super);
        function SpatialGrid(gridSize) {
            if (typeof gridSize === "undefined") { gridSize = 32; }
                _super.call(this, SpatialGrid.NAME);
            this.gridSize = gridSize;
            this._spatialComponents = [];
            this._grid = [];
            this._cache = [];
            this._positions = [];
        }
        SpatialGrid.NAME = "SpatialGrid";
        Object.defineProperty(SpatialGrid.prototype, "gridSize", {
            get: function () {
                return this._gridSize;
            },
            set: function (value) {
                this._gridSize = value;
                this._offset = this._gridSize * 1024;
            },
            enumerable: true,
            configurable: true
        });
        SpatialGrid.prototype.addSpatialComponent = function (spatial) {
            if(this._spatialComponents.indexOf(spatial) == -1) {
                this._spatialComponents.push(spatial);
            }
        };
        SpatialGrid.prototype.removeSpatialComponent = function (spatial) {
            this._spatialComponents.splice(this._spatialComponents.indexOf(spatial), 1);
        };
        SpatialGrid.prototype.hasSpatialComponent = function (spatial) {
            return this._spatialComponents.indexOf(spatial) != -1;
        };
        SpatialGrid.prototype.queryRectangle = function (rect) {
            return this.query((((rect.x + (rect.width * .5)) + this._offset) / this._gridSize) << 11 | (((rect.y + (rect.height * .5)) + this._offset) / this._gridSize));
        };
        SpatialGrid.prototype.queryPoint = function (position) {
            return this.query(((position.x + this._offset) / this._gridSize) << 11 | ((position.y + this._offset) / this._gridSize));
        };
        SpatialGrid.prototype.queryPosition = function (x, y) {
            return this.query(((x + this._offset) / this._gridSize) << 11 | ((y + this._offset) / this._gridSize));
        };
        SpatialGrid.prototype.query = function (index) {
            if(this._cache[index]) {
                return this._cache[index];
            }
            var results = this._grid[index];
            if(results == null) {
                results = [];
            }
            if(this._grid[index - 2048 - 1]) {
                results = results.concat(this._grid[index - 2048 - 1]);
            }
            if(this._grid[index - 1]) {
                results = results.concat(this._grid[index - 1]);
            }
            if(this._grid[index + 2048 - 1]) {
                results = results.concat(this._grid[index + 2048 - 1]);
            }
            if(this._grid[index - 2048]) {
                results = results.concat(this._grid[index - 2048]);
            }
            if(this._grid[index + 2048]) {
                results = results.concat(this._grid[index + 2048]);
            }
            if(this._grid[index - 2048 + 1]) {
                results = results.concat(this._grid[index - 2048 + 1]);
            }
            if(this._grid[index + 1]) {
                results = results.concat(this._grid[index + 1]);
            }
            if(this._grid[index + 2048 + 1]) {
                results = results.concat(this._grid[index + 2048 + 1]);
            }
            this._cache[index] = results;
            return results;
        };
        SpatialGrid.prototype.refresh = function () {
            this._positions = [];
            for(var i = 0, length = this._spatialComponents.length; i < length; i++) {
                this._spatialComponent = this._spatialComponents[i];
                this._index = ((this._spatialComponent.centerX + this._spatialComponent.collisionOffsetX + this._offset) / this._gridSize) << 11 | ((this._spatialComponent.centerY + this._spatialComponent.collisionOffsetY + this._offset) / this._gridSize);
                if(!this._positions[this._index]) {
                    this._positions[this._index] = [
                        this._spatialComponent
                    ];
                    continue;
                }
                this._positions[this._index].push(this._spatialComponent);
            }
            this._cache = [];
            this._grid = this._positions;
            this._spatialComponent = null;
        };
        SpatialGrid.prototype.calculateGridSize = function () {
            var maxSize = 0;
            var largestSprite;
            var spatialComponent = this._firstSpatial;
            for(var i = 0; i < this._spatialComponents.length; i++) {
                spatialComponent = this._spatialComponents[i];
                if(spatialComponent.width > maxSize) {
                    maxSize = spatialComponent.width;
                    largestSprite = spatialComponent.owner.name;
                }
                if(spatialComponent.height > maxSize) {
                    maxSize = spatialComponent.height;
                    largestSprite = spatialComponent.owner.name;
                }
            }
            this.gridSize = maxSize;
            if(LOGGING) {
                this._log.log("Spatial Grid Size: " + this.gridSize + " (" + largestSprite + ")");
            }
        };
        SpatialGrid.prototype.reset = function () {
            this._spatialComponents = [];
            this._positions = [];
            this._grid = [];
            this._cache = [];
            this.gridSize = 0;
        };
        SpatialGrid.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._spatialComponents = null;
            this._spatialComponent = null;
            this._grid = null;
            this._cache = null;
            this._positions = null;
        };
        return SpatialGrid;
    })(Avota.Element);
    Avota.SpatialGrid = SpatialGrid;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpatialManager = (function (_super) {
        __extends(SpatialManager, _super);
        function SpatialManager(timeManager, typeManager, gridSize, name) {
            if (typeof gridSize === "undefined") { gridSize = SpatialManager.DEFAULT_GRIDSIZE; }
            if (typeof name === "undefined") { name = SpatialManager.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._typeManager = typeManager;
            this._gridSize = gridSize;
            this._spatialGrid = this.create(Avota.SpatialGrid, this._gridSize);
            this._timeManager.addTickedObject(this, 0);
        }
        SpatialManager.NAME = "SpatialManager";
        SpatialManager.DEFAULT_GRIDSIZE = 128;
        Object.defineProperty(SpatialManager.prototype, "typeManager", {
            get: function () {
                return this._typeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpatialManager.prototype, "gridSize", {
            get: function () {
                return this._spatialGrid.gridSize;
            },
            set: function (value) {
                this._spatialGrid.gridSize = value;
            },
            enumerable: true,
            configurable: true
        });
        SpatialManager.prototype.addSpatialComponent = function (spatialComponent) {
            this._spatialGrid.addSpatialComponent(spatialComponent);
        };
        SpatialManager.prototype.removeSpatialComponent = function (spatialComponent) {
            this._spatialGrid.removeSpatialComponent(spatialComponent);
        };
        SpatialManager.prototype.calculateGridSize = function () {
            this._spatialGrid.calculateGridSize();
        };
        SpatialManager.prototype.refreshGrid = function () {
            this._spatialGrid.refresh();
        };
        SpatialManager.prototype.onTick = function (delta) {
            this._spatialGrid.refresh();
            if(DEBUG) {
                this._checks = 0;
            }
        };
        SpatialManager.prototype.queryRectangle = function (rect, mask) {
            var results = [];
            var gridResults = this._spatialGrid.queryRectangle(rect);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || rect.equals(this._spatialComponent.extents) || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                if(this._spatialComponent.left + this._spatialComponent.collisionOffsetX < rect.right && rect.left < this._spatialComponent.right + this._spatialComponent.collisionOffsetX && this._spatialComponent.top + this._spatialComponent.collisionOffsetY < rect.bottom && rect.top < this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryOffsetRectangle = function (rect, offsetX, offsetY, mask) {
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            var results = [];
            var gridResults = this._spatialGrid.queryRectangle(rect);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || rect === this._spatialComponent.extents || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                if(this._spatialComponent.left + this._spatialComponent.collisionOffsetX < rect.right + offsetX && rect.left + offsetX < this._spatialComponent.right + this._spatialComponent.collisionOffsetX && this._spatialComponent.top + this._spatialComponent.collisionOffsetY < rect.bottom + offsetY && rect.top + offsetY < this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryCircle = function (position, radius, mask) {
            var results = [];
            var gridResults = this._spatialGrid.queryPoint(position);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                this._px = position.x - this.clamp(position.x, this._spatialComponent.left + this._spatialComponent.collisionOffsetX, this._spatialComponent.right + this._spatialComponent.collisionOffsetX);
                this._py = position.y - this.clamp(position.y, this._spatialComponent.top + this._spatialComponent.collisionOffsetY, this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY);
                if((this._px * this._px) + (this._py * this._py) < (radius * radius)) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryCirclePosition = function (x, y, radius, mask) {
            var results = [];
            var gridResults = this._spatialGrid.queryPosition(x, y);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                this._px = x - this.clamp(x, this._spatialComponent.left + this._spatialComponent.collisionOffsetX, this._spatialComponent.right + this._spatialComponent.collisionOffsetX);
                this._py = y - this.clamp(y, this._spatialComponent.top + this._spatialComponent.collisionOffsetY, this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY);
                if((this._px * this._px) + (this._py * this._py) < (radius * radius)) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryPoint = function (position, mask) {
            var results = [];
            var gridResults = this._spatialGrid.queryPoint(position);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                this._px = position.x;
                this._py = position.y;
                if(this._px > this._spatialComponent.left + this._spatialComponent.collisionOffsetX && this._px < this._spatialComponent.right + this._spatialComponent.collisionOffsetX && this._py > this._spatialComponent.top + this._spatialComponent.collisionOffsetY && this._py < this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryPosition = function (x, y, mask) {
            var px;
            var py;
            var results = [];
            var gridResults = this._spatialGrid.queryPosition(x, y);
            for(var i = 0, length = gridResults.length; i < length; i++) {
                this._spatialComponent = gridResults[i];
                if(!this._spatialComponent.active || (mask && !this._spatialComponent.type) || ((mask && this._spatialComponent.type) && !this._typeManager.doTypesOverlap(this._spatialComponent.type, mask))) {
                    continue;
                }
                px = x;
                py = y;
                if(px > this._spatialComponent.left + this._spatialComponent.collisionOffsetX && px < this._spatialComponent.right + this._spatialComponent.collisionOffsetX && py > this._spatialComponent.top + this._spatialComponent.collisionOffsetY && py < this._spatialComponent.bottom + this._spatialComponent.collisionOffsetY) {
                    results.push(this._spatialComponent);
                }
            }
            this._spatialComponent = null;
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.queryLine = function (start, end, mask) {
            var pt = new Avota.Point();
            var results = [];
            var rayResults;
            var yLonger = false;
            var shortLen = end.y - start.y;
            var longLen = end.x - start.x;
            if((shortLen ^ (shortLen >> 31)) - (shortLen >> 31) > (longLen ^ (longLen >> 31)) - (longLen >> 31)) {
                shortLen ^= longLen;
                longLen ^= shortLen;
                shortLen ^= longLen;
                yLonger = true;
            }
            var i;
            var inc = (longLen < 0) ? -1 : 1;
            var multDiff = (longLen == 0) ? shortLen : shortLen / longLen;
            if(yLonger) {
                for(i = 0; i != longLen; i += inc) {
                    pt.x = start.x + i * multDiff;
                    pt.y = start.y + i;
                    rayResults = this.queryPoint(pt, mask);
                    if(rayResults.length > 0) {
                        results.push(new Avota.RayResult(rayResults[i], pt, i / longLen));
                    }
                }
            } else {
                for(i = 0; i != longLen; i += inc) {
                    pt.x = start.x + i;
                    pt.y = start.y + i * multDiff;
                    rayResults = this.queryPoint(pt, mask);
                    if(rayResults.length > 0) {
                        results.push(new Avota.RayResult(rayResults[i], pt, i / longLen));
                    }
                }
            }
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        SpatialManager.prototype.castRay = function (start, end, mask) {
            var pt = new Avota.Point();
            var rayResult = new Avota.RayResult();
            var rayResults;
            var yLonger = false;
            var shortLen = end.y - start.y;
            var longLen = end.x - start.x;
            var length = Math.floor(longLen);
            if((shortLen ^ (shortLen >> 31)) - (shortLen >> 31) > (longLen ^ (longLen >> 31)) - (longLen >> 31)) {
                shortLen ^= longLen;
                longLen ^= shortLen;
                shortLen ^= longLen;
                yLonger = true;
            }
            var i;
            var inc = (longLen < 0) ? -1 : 1;
            var multDiff = (longLen == 0) ? shortLen : shortLen / longLen;
            if(yLonger) {
                for(i = 0; i != length; i += inc) {
                    pt.x = start.x + i * multDiff;
                    pt.y = start.y + i;
                    rayResults = this.queryPoint(pt, mask);
                    if(rayResults.length > 0) {
                        rayResult.element = rayResults[0];
                        rayResult.position = pt;
                        rayResult.time = i / longLen;
                        break;
                    }
                }
            } else {
                for(i = 0; i != length; i += inc) {
                    pt.x = start.x + i;
                    pt.y = start.y + i * multDiff;
                    rayResults = this.queryPoint(pt, mask);
                    if(rayResults.length > 0) {
                        rayResult.element = rayResults[0];
                        rayResult.position = pt;
                        rayResult.time = i / longLen;
                        break;
                    }
                }
            }
            if(DEBUG) {
                this._checks++;
            }
            return rayResult;
        };
        SpatialManager.prototype.reset = function () {
            this._spatialGrid.reset();
        };
        SpatialManager.prototype.destroy = function () {
            this._timeManager.removeTickedObject(this);
            this._spatialComponent = null;
            this._spatialGrid = null;
            this._typeManager = null;
            this._timeManager = null;
            _super.prototype.destroy.call(this);
        };
        SpatialManager.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        return SpatialManager;
    })(Avota.Group);
    Avota.SpatialManager = SpatialManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game(name, params) {
            this.bootstrap();
                _super.call(this, name);
            this.bootSignal = new Avota.Signal();
            this.initSignal = new Avota.Signal();
            this.startupSignal = new Avota.Signal();
            this.shutdownSignal = new Avota.Signal();
            this.pauseSignal = new Avota.Signal();
            this.suspendSignal = new Avota.Signal();
            this.resumeSignal = new Avota.Signal();
            this._booted = false;
            this._wasMuted = false;
            this._configure(params);
        }
        Object.defineProperty(Game.prototype, "settings", {
            get: function () {
                return this._settings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "config", {
            get: function () {
                return this._settings.config;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "strings", {
            get: function () {
                return this._settings.strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "width", {
            get: function () {
                return this._settings.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "height", {
            get: function () {
                return this._settings.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "sceneManager", {
            get: function () {
                return this._settings.getSceneManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "resourceManager", {
            get: function () {
                return this._settings.getResourceManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "soundManager", {
            get: function () {
                return this._settings.getSoundManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "inputManager", {
            get: function () {
                return this._settings.getInputManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "inputMap", {
            get: function () {
                return this._settings.getInputMap();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "timeManager", {
            get: function () {
                return this._settings.getTimeManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "typeManager", {
            get: function () {
                return this._settings.getTypeManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "spatialManager", {
            get: function () {
                return this._settings.getSpatialManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "renderManager", {
            get: function () {
                return this._settings.getRenderManager();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "objectPool", {
            get: function () {
                return this._settings.getObjectPool();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "sharedData", {
            get: function () {
                return this._settings.getSharedData();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Game.prototype, "intervalScale", {
            get: function () {
                return this.timeManager.intervalScale;
            },
            set: function (value) {
                this.timeManager.intervalScale = value;
                TweenMax.globalTimeScale(value);
            },
            enumerable: true,
            configurable: true
        });
        Game.prototype.bootstrap = function () {
            if(!Avota.Log.getTargetByType(Avota.ConsoleTarget)) {
                Avota.Log.addTarget(new Avota.ConsoleTarget());
            }
            var lastTime = 0;
            var nowOffset = Date.now();
            var vendors = [
                "ms", 
                "moz", 
                "webkit", 
                "o"
            ];
            for(var i = 0; i < vendors.length && !window.requestAnimationFrame; i++) {
                window.requestAnimationFrame = window[vendors[i] + "RequestAnimationFrame"];
                window.cancelAnimationFrame = window[vendors[i] + "CancelAnimationFrame"] || window[vendors[i] + "CancelRequestAnimationFrame"];
            }
            if(!window.requestAnimationFrame) {
                window["requestAnimationFrame"] = function (callback, element) {
                    var currTime = Date.now();
                    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                    var id = window.setTimeout(function () {
                        callback(currTime + timeToCall);
                    }, timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };
            }
            if(!window.cancelAnimationFrame) {
                window.cancelAnimationFrame = function (id) {
                    clearTimeout(id);
                };
            }
            if(!window.performance) {
                window.performance = {
                };
                for(var i = 0; i < vendors.length && !window.performance.now; i++) {
                    window.performance.now = window.performance[vendors[i] + "Now"];
                }
            }
            if(!window.performance.now) {
                window.performance.now = function now() {
                    return Date.now() - nowOffset;
                };
            }
            if(!navigator["getUserMedia"]) {
                for(var i = 0; i < vendors.length && !navigator["getUserMedia"]; i++) {
                    navigator["getUserMedia"] = navigator[vendors[i] + "GetUserMedia"];
                }
            }
            if(!window["URL"]) {
                for(var i = 0; i < vendors.length && !window["URL"]; i++) {
                    window["URL"] = navigator[vendors[i] + "URL"];
                }
            }
            Avota.EnvUtil.init();
            if(GamePerformance.CAPABILITY == -1) {
                if(Avota.EnvUtil.isDesktop) {
                    if(Avota.EnvUtil.screenWidth < 1024) {
                        GamePerformance.CAPABILITY = GamePerformance.BASIC;
                    }
                    if(Avota.EnvUtil.screenWidth == 1024) {
                        GamePerformance.CAPABILITY = GamePerformance.LOW;
                    }
                    if(Avota.EnvUtil.screenWidth > 1024 && Avota.EnvUtil.screenWidth < 1440) {
                        GamePerformance.CAPABILITY = GamePerformance.MEDIUM;
                    }
                    if(Avota.EnvUtil.screenWidth >= 1440) {
                        GamePerformance.CAPABILITY = GamePerformance.HIGH;
                    }
                }
                if(Avota.EnvUtil.isMobile) {
                    if(Avota.EnvUtil.isiPhone) {
                        if(Avota.EnvUtil.screenWidth == 480) {
                            GamePerformance.CAPABILITY = GamePerformance.BASIC;
                        }
                        if(Avota.EnvUtil.screenWidth == 960) {
                            GamePerformance.CAPABILITY = GamePerformance.LOW;
                        }
                        if(Avota.EnvUtil.screenWidth >= 1136) {
                            GamePerformance.CAPABILITY = GamePerformance.HIGH;
                        }
                    }
                    if(Avota.EnvUtil.isiPad) {
                        if(Avota.EnvUtil.screenWidth == 1024) {
                            GamePerformance.CAPABILITY = GamePerformance.LOW;
                        }
                        if(Avota.EnvUtil.screenWidth >= 2048) {
                            GamePerformance.CAPABILITY = GamePerformance.MEDIUM;
                        }
                    }
                    if(Avota.EnvUtil.isAndroidPhone) {
                        if(Avota.EnvUtil.screenWidth >= 1080) {
                            GamePerformance.CAPABILITY = GamePerformance.MEDIUM;
                        }
                    }
                    if(Avota.EnvUtil.isAndroidTablet) {
                        if(navigator.userAgent.match("Nexus 7")) {
                            if(Avota.EnvUtil.screenWidth == 1200) {
                                GamePerformance.CAPABILITY = GamePerformance.MEDIUM;
                            }
                        }
                    }
                }
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "################################{ JMG Avota }###############################"));
            this.printRuntimeEnvironment();
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "############################################################################"));
        };
        Game.prototype.printRuntimeEnvironment = function () {
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Version:	" + Avota.VERSION));
            if(Avota.EnvUtil.isDesktop) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Environment:	Desktop"));
            }
            if(Avota.EnvUtil.isMobile) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Environment:	Mobile"));
            }
            if(Avota.EnvUtil.isiOS) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS: 	iOS"));
            }
            if(Avota.EnvUtil.isAndroid) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS:	Android"));
            }
            if(Avota.EnvUtil.isChromeOS) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS:	ChromeOS"));
            }
            if(Avota.EnvUtil.isMacOS) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS:	MacOS"));
            }
            if(Avota.EnvUtil.isLinux) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS:	Linux"));
            }
            if(Avota.EnvUtil.isWindows) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "OS:	Windows"));
            }
            if(Avota.EnvUtil.isiPhone) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	iPhone"));
            }
            if(Avota.EnvUtil.isiPad) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	iPad"));
            }
            if(Avota.EnvUtil.isiPod) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	iPod"));
            }
            if(Avota.EnvUtil.isAndroidPhone) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	Android Phone"));
            }
            if(Avota.EnvUtil.isAndroidTablet) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	Android Tablet"));
            }
            if(Avota.EnvUtil.pixelRatio == 2 && (Avota.EnvUtil.isiPhone || Avota.EnvUtil.isiPad || Avota.EnvUtil.isiPod)) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	Retina Enabled"));
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Device:	Resolution: " + Avota.EnvUtil.screenWidth + "x" + Avota.EnvUtil.screenHeight));
            if(Avota.EnvUtil.isLandscape) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Orientation:	Landscape"));
            }
            if(Avota.EnvUtil.isPortrait) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Orientation:	Portrait"));
            }
            if(Avota.EnvUtil.isSafari && !Avota.EnvUtil.isMobile) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	Safari"));
            }
            if(Avota.EnvUtil.isSafari && Avota.EnvUtil.isMobile) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	Mobile Safari"));
            }
            if(Avota.EnvUtil.isChrome) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	Chrome"));
            }
            if(Avota.EnvUtil.isFirefox) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	Firefox"));
            }
            if(Avota.EnvUtil.isIE) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	IE"));
            }
            if(Avota.EnvUtil.isWebApp) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser:	WebApp Mode"));
            }
            if(Avota.EnvUtil.isCocoonJS) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser: CocoonJS"));
            }
            if(Avota.EnvUtil.isSafari || Avota.EnvUtil.isChrome || Avota.EnvUtil.isFirefox || Avota.EnvUtil.isIE) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Browser Version:	" + Avota.EnvUtil.browserVersion));
            }
            switch(GamePerformance.CAPABILITY) {
                case GamePerformance.BASIC:
                    Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Performance:		Basic"));
                    break;
                case GamePerformance.LOW:
                    Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Performance:		Low"));
                    break;
                case GamePerformance.MEDIUM:
                    Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Performance:		Medium"));
                    break;
                case GamePerformance.HIGH:
                    Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Performance:		High"));
                    break;
                case GamePerformance.EXTREME:
                    Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Performance:		Extreme"));
                    break;
            }
            if(Avota.EnvUtil.hasWebAudio) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Audio:		WebAudio"));
            } else if(Avota.EnvUtil.hasAudioTag) {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "Audio:		AudioTag"));
            } else {
                Avota.Log.log(new Avota.LogMessage(Avota.Log.WARN, "", "Audio:		N/A"));
            }
            Avota.Log.log(new Avota.LogMessage(Avota.Log.PRINT, "", "URL:" + Avota.EnvUtil.url));
        };
        Game.prototype._configure = function (params) {
            if(LOGGING) {
                this._log.log("Configuring");
            }
            if(Avota.EnvUtil.isMobile) {
                params.tickRate = 30;
            }
            this._settings = new Avota.GameSettings(this, params);
            Avota.Log.setLevel(this._settings.logLevel);
            Avota.Log.setFilters(this._settings.logFilters);
        };
        Game.prototype._onLoaded = function (event) {
            _super.prototype._onLoaded.call(this, event);
            if(this._settings.autoStartup) {
                this.startup();
            }
        };
        Game.prototype._onUnload = function (event) {
            _super.prototype._onUnload.call(this, event);
            if(this._settings.autoShutdown) {
                this.shutdown();
            }
        };
        Game.prototype._boot = function () {
            if(LOGGING) {
                this._log.log("Booting");
            }
            if(!this._settings) {
                throw new Error("Application must be configured before booting.");
                return;
            }
            this.resourceManager.loadedSignal.add(this._onBootResourceLoaded, this);
            this.resourceManager.failedSignal.add(this._onBootResourceFailed, this);
            if(this._settings.resourcePath) {
                this.resourceManager.resourcePath = this._settings.resourcePath;
            }
            if(this._settings.config && !this._settings.configPath) {
                this._setConfig(this._settings.config);
            }
            if(this._settings.strings && !this._settings.stringsPath) {
                this._setStrings(this._settings.strings);
            }
            if(this._settings.gamePerformance === -1) {
                this._settings.gamePerformance = GamePerformance.CAPABILITY;
            }
            this._checkBootResources();
        };
        Game.prototype._checkBootResources = function () {
            if(this._settings.configPath && !this._settings.config && !this.resourceManager.isLoaded(this._settings.configPath) && !this.resourceManager.isLoading(this._settings.configPath)) {
                this.resourceManager.load(this._settings.configPath, "ConfigResource");
            }
            if(this._settings.stringsPath && !this._settings.strings && !this.resourceManager.isLoaded(this._settings.stringsPath) && !this.resourceManager.isLoading(this._settings.stringsPath)) {
                this.resourceManager.load(this._settings.stringsPath, "StringsResource");
            }
            if(this.config && this.config.hasOwnProperty("external")) {
                var info;
                for(var i = 0; i < this.config.external.length; i++) {
                    info = this.config.external[i];
                    if(!this.resourceManager.isLoaded(info.path) && !this.resourceManager.isLoading(info.path)) {
                        this.resourceManager.load(info.path, info.name);
                    }
                }
            }
            this._checkBootProgress();
        };
        Game.prototype._onBootResourceLoaded = function (resource) {
            switch(resource.path) {
                case this._settings.configPath:
                    if(LOGGING) {
                        this._log.log("Config Loaded");
                    }
                    this._setConfig(resource.data);
                    break;
                case this._settings.stringsPath:
                    if(LOGGING) {
                        this._log.log("Strings Loaded");
                    }
                    this._setStrings(resource.data);
                    break;
                default:
                    if(LOGGING) {
                        this._log.log("Boot Resource Loaded: " + resource.name);
                    }
                    break;
            }
            this._checkBootResources();
        };
        Game.prototype._onBootResourceFailed = function () {
            if(this.resourceManager.loadingCount == 0) {
                this._onBootComplete();
            }
        };
        Game.prototype._checkBootProgress = function () {
            if(this.resourceManager.loadingCount == 0) {
                this._onBootComplete();
            }
        };
        Game.prototype._onBootComplete = function () {
            if(LOGGING) {
                this._log.log("Booted");
            }
            this.resourceManager.loadedSignal.remove(this._onBootResourceLoaded, this);
            this.resourceManager.failedSignal.remove(this._onBootResourceFailed, this);
            this._booted = true;
            this.bootSignal.dispatch();
            this.init();
        };
        Game.prototype.init = function () {
            if(LOGGING) {
                this._log.log("Initialized");
            }
            if(this.config) {
                if(this.config.hasOwnProperty("config")) {
                    this._settings.setParams(this.config.config);
                }
                if(this.config.hasOwnProperty("browserSupport")) {
                    this._settings.browserSupport = this.config.browserSupport;
                }
                if(this.config.hasOwnProperty("minPerformance")) {
                    this._settings.minPerformance = this.config.minPerformance;
                }
                if(this.config.hasOwnProperty("gamePerformance")) {
                    this._settings.gamePerformance = this.config.gamePerformance;
                }
                if(this._settings.gamePerformance !== GamePerformance.CAPABILITY) {
                    GamePerformance.CAPABILITY = this._settings.gamePerformance;
                    switch(GamePerformance.CAPABILITY) {
                        case GamePerformance.BASIC:
                            if(LOGGING) {
                                this._log.warn("Performance Override: BASIC");
                            }
                            break;
                        case GamePerformance.LOW:
                            if(LOGGING) {
                                this._log.warn("Performance Override: LOW");
                            }
                            break;
                        case GamePerformance.MEDIUM:
                            if(LOGGING) {
                                this._log.warn("Performance Override: MEDIUM");
                            }
                            break;
                        case GamePerformance.HIGH:
                            if(LOGGING) {
                                this._log.warn("Performance Override: HIGH");
                            }
                            break;
                        case GamePerformance.EXTREME:
                            if(LOGGING) {
                                this._log.warn("Performance Override: EXTREME");
                            }
                            break;
                    }
                }
            }
            if(this._settings.unsupportedCookiesImagePath != "" && !Avota.EnvUtil.hasCookies) {
                var image = new Image();
                image.id = "unsupported";
                image.src = this._settings.unsupportedCookiesImagePath;
                document.getElementById(this._settings.parent).innerHTML = "";
                document.getElementById(this._settings.parent).appendChild(image);
                this.destroy();
                return;
            }
            if(this._settings.browserSupport) {
                var minBrowserInfo;
                for(var i = 0; i < this._settings.browserSupport.length; i++) {
                    minBrowserInfo = this._settings.browserSupport[i];
                    if((!minBrowserInfo.type || Avota.EnvUtil.browserName == minBrowserInfo.type) && (!minBrowserInfo.platform || Avota.EnvUtil.platformName == minBrowserInfo.platform)) {
                        if(minBrowserInfo.minVersion < 0 || parseFloat(Avota.EnvUtil.browserVersion) < minBrowserInfo.minVersion) {
                            this._onUnsupportedBrowser();
                            return;
                        }
                    }
                }
            }
            if(GamePerformance.CAPABILITY < this._settings.minPerformance) {
                this._onUnsupportedDevice();
                return;
            }
            if(this._settings.unsupportedOrientationImagePath) {
                this._settings.orientationImage = new Image();
                this._settings.orientationImage.src = this._settings.unsupportedOrientationImagePath;
            }
            if(this._settings.bgColor) {
                this._setBackgroundColor(this._settings.bgColor);
            }
            if(this._settings.basePath) {
                this.resourceManager.resourcePath = this._settings.basePath;
            }
            this.updateCanvas();
            if(this._settings.debug) {
                if(LOGGING) {
                    this._log.print("[############[DEBUG ENABLED]############]");
                }
            } else if(!LOGGING) {
                Avota.Log.removeAllTargets();
            }
            if(DEBUG) {
                this._stats = this.create(Avota.Stats, this);
                this._stats.alpha = this._settings.statsAlpha;
                this._stats.setType(this._settings.statsType);
                if(LOGGING) {
                    Avota.Log.addTarget(new Avota.StatsTarget(this._stats));
                }
            }
            Avota.Log.setLevel(this._settings.logLevel);
            Avota.Log.setFilters(this._settings.logFilters);
            if(Avota.EnvUtil.isiOS && !Avota.EnvUtil.isCocoonJS) {
                this.inputManager.inputDown.addOnce(this.soundManager.createEmptyBuffer, this.soundManager);
            }
            this.timeManager.start();
            this.orientationChangeSignal.add(this._onChangeOrientation, this);
            this.visibilityChangeSignal.add(this._onChangeVisibility, this);
            this.initSignal.addOnce(this._checkResources, this);
            if(this._settings.autoInit) {
                this.initSignal.dispatch();
            }
            if(Avota.EnvUtil.isPortrait) {
                this._onChangeOrientation(Avota.EnvUtil.orientation);
            }
        };
        Game.prototype._checkResources = function () {
            if(LOGGING) {
                this._log.log("Checking Resources");
            }
            if(this.config && this.config.hasOwnProperty("resources") && this.config.resources.length > 0) {
                var resourceInfo;
                if(this.config.hasOwnProperty("loader") && this.config.loader.length > 0) {
                    this.resourceManager.failedSignal.addOnce(this._onLoaderFailed, this);
                    this.resourceManager.loadedSignal.add(this._onLoaderLoaded, this);
                    for(var i = 0; i < this.config.loader.length; i++) {
                        resourceInfo = this.config.loader[i];
                        this.resourceManager.load(resourceInfo.path, resourceInfo.name);
                    }
                    return;
                }
                this._loadResources();
            }
            if(this.resourceManager.loadingCount == 0) {
                this._onLoadingComplete();
            }
        };
        Game.prototype._onLoaderLoaded = function (resource) {
            if(this.resourceManager.loadingCount == 0) {
                this._onLoaderComplete();
            }
        };
        Game.prototype._onLoaderFailed = function () {
            this.resourceManager.failedSignal.remove(this._onLoaderFailed, this);
            this.resourceManager.loadedSignal.remove(this._onLoaderLoaded, this);
            this._loadResources();
        };
        Game.prototype._onLoaderComplete = function () {
            this.resourceManager.failedSignal.remove(this._onLoaderFailed, this);
            this.resourceManager.loadedSignal.remove(this._onLoaderLoaded, this);
            this._loadResources();
        };
        Game.prototype._loadResources = function () {
            this._loader = this.create(this.settings.gameLoader, this);
            this._loader.loadCompleteSignal.addOnce(this._onLoadingComplete, this);
            this._loader.loadFailedSignal.addOnce(this._onLoadingFailed, this);
            this._loader.loadResources(this.config.resources);
        };
        Game.prototype._onLoadingFailed = function () {
            if(this.resourceManager.loadingCount == 0) {
                this._onLoadingComplete();
            }
        };
        Game.prototype._onLoadingComplete = function () {
            if(this._loader) {
                this._loader.loadCompleteSignal.remove(this._onLoadingComplete, this);
                this._loader.loadFailedSignal.remove(this._onLoadingFailed, this);
                var resourceInfo;
                if(this.config.hasOwnProperty("loader")) {
                    for(var i = 0; i < this.config.loader.length; i++) {
                        resourceInfo = this.config.loader[i];
                        this.resourceManager.unload(this.resourceManager.getResource(resourceInfo.path));
                    }
                }
                this._loader.destroy();
            }
            this._setup();
        };
        Game.prototype._setup = function () {
            if(this.config) {
                if(this.config.hasOwnProperty("controls")) {
                    this.registerControls(this.config.controls);
                }
                if(this.config.hasOwnProperty("assets")) {
                    this.registerAssets(this.config.assets);
                }
            }
            this.startup();
        };
        Game.prototype._setBackgroundColor = function (bgColor) {
            this._settings.getCanvas().backgroundColor = bgColor;
        };
        Game.prototype._setConfig = function (config) {
            this._settings.config = config;
            if(config.strings && config.strings.path) {
                this._settings.stringsPath = config.strings.path;
            }
            if(LOGGING) {
                this._log.debug("Config Set");
            }
        };
        Game.prototype._setStrings = function (strings) {
            this._settings.strings = strings;
            if(LOGGING) {
                this._log.debug("Strings Set");
            }
        };
        Game.prototype.registerControls = function (controls) {
            if(controls.length == 0) {
                return;
            }
            if(LOGGING) {
                this._log.log("Registering Controls");
            }
            var key;
            var value;
            for(var i = 0; i < controls.length; i++) {
                key = controls[i].input;
                value = controls[i].value;
                this.inputMap.mapKeyToAction(Avota.InputKey[key], value);
                if(LOGGING) {
                    this._log.log("[Key] " + key + " -> [Action] " + value);
                }
            }
        };
        Game.prototype.registerAssets = function (assets) {
            if(assets.length == 0) {
                return;
            }
            if(LOGGING) {
                this._log.log("Registering Assets");
            }
            var info;
            var loop;
            var volume;
            var category;
            var node;
            var isLoaded;
            for(var i = 0; i < assets.length; i++) {
                info = assets[i];
                isLoaded = false;
                for(var n = 0; n < this.config.resources.length; n++) {
                    node = this.config.resources[n];
                    if(node.name === info.name || node.name === info.source) {
                        isLoaded = this.resourceManager.isLoaded(node.path);
                        break;
                    }
                }
                if(!isLoaded) {
                    continue;
                }
                if(info.hasOwnProperty("type") && info.type.toLowerCase() === "audio" && !this.soundManager.hasSound(info.name)) {
                    loop = (info.hasOwnProperty("loop") && info.loop == true) ? true : false;
                    volume = (info.hasOwnProperty("volume")) ? info.volume : 100;
                    category = (info.hasOwnProperty("category")) ? info.category : null;
                    this.soundManager.addSound(info.name, this.getAsset(info.name), category, loop, volume);
                }
                if(info.hasOwnProperty("type") && info.type.toLowerCase() === "audiosprite" && this.soundManager.hasSound(info.source)) {
                    loop = (info.hasOwnProperty("loop") && info.loop == true) ? true : false;
                    volume = (info.hasOwnProperty("volume")) ? info.volume : this.soundManager.getSound(info.source).volume;
                    category = (info.hasOwnProperty("category")) ? info.category : this.soundManager.getSound(info.source).category.name;
                    this.soundManager.addSoundCuePoint(info.source, info.name, info.start, info.duration, loop, volume, category);
                }
            }
            for(var i = 0; i < assets.length; i++) {
                info = assets[i];
                isLoaded = false;
                for(var n = 0; n < this.config.resources.length; n++) {
                    node = this.config.resources[n];
                    if(node.name === info.name || node.name === info.source) {
                        isLoaded = this.resourceManager.isLoaded(node.path);
                        break;
                    }
                }
                if(!isLoaded) {
                    continue;
                }
                if(this.soundManager._support == Avota.SoundSupport.WEBAUDIO && info.hasOwnProperty("type") && info.type.toLowerCase() === "audio") {
                    this.resourceManager.unload(this.resourceManager.getResource(node.path));
                }
            }
        };
        Game.prototype.startup = function () {
            var _this = this;
            if(!this._booted) {
                this._boot();
                return;
            }
            if(LOGGING) {
                this._log.info("Startup [" + this.name + "]");
            }
            this.inputMap.mapActionToHandler("mute", function (value) {
                return _this.mute(value);
            });
            if(DEBUG) {
                this._stats.addClock("R", this.timeManager._profiler.clocks["frame"]);
                this._stats.addClock("U", this.timeManager._profiler.clocks["tick"]);
            }
            this.updateCanvas();
            this.startupSignal.dispatch();
        };
        Game.prototype.shutdown = function () {
            if(LOGGING) {
                this._log.info("Shutdown [" + this.name + "]");
            }
            this.inputMap.unmapAction("mute");
            this.shutdownSignal.dispatch();
            if(this._settings.autoDestroy) {
                this.destroy();
            }
        };
        Game.prototype.setScene = function (scene) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            this.sceneManager.setState.apply(this.sceneManager, [
                scene
            ].concat(args));
        };
        Game.prototype.getAsset = function (assetName, node) {
            if (typeof node === "undefined") { node = this.config.resources; }
            var resource;
            for(var i = 0; i < node.length; i++) {
                if(node[i].name == assetName) {
                    resource = this.resourceManager.getResource(node[i].path);
                    break;
                }
            }
            if(resource instanceof Avota.ImageResource) {
                return (resource).image;
            }
            if(resource instanceof Avota.JSONResource) {
                return (resource).json;
            }
            if(resource instanceof Avota.JSResource) {
                return (resource).js;
            }
            if(resource instanceof Avota.CSSResource) {
                return (resource).css;
            }
            if(resource instanceof Avota.XMLResource) {
                return (resource).xml;
            }
            if(resource instanceof Avota.SoundResource) {
                return (resource).soundData;
            }
            if(resource) {
                return resource;
            }
            if(LOGGING) {
                this._log.error("Unable to find asset: " + assetName);
            }
        };
        Game.prototype.unloadResources = function (resourceList, node) {
            if (typeof node === "undefined") { node = this.config.resources; }
            var resource;
            var resourceInfo;
            for(var i = 0; i < resourceList.length; i++) {
                for(var n = 0; n < node.length; n++) {
                    if(node[n].name === resourceList[i]) {
                        resourceInfo = node[n];
                        break;
                    }
                }
                if(resourceInfo) {
                    resource = this.resourceManager.getResource(resourceInfo.path);
                    if(this.soundManager.hasSound(resourceInfo.name)) {
                        this.soundManager.removeSound(resourceInfo.name);
                    }
                    this.resourceManager.unload(resource);
                }
            }
        };
        Game.prototype.pause = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1) {
                if(this.timeManager.isRunning) {
                    this.timeManager.stop();
                    TweenMax.pauseAll();
                    this.suspendSignal.dispatch();
                    this.pauseSignal.dispatch(true);
                } else {
                    this.timeManager.start();
                    TweenMax.resumeAll();
                    this.resumeSignal.dispatch();
                    this.pauseSignal.dispatch(false);
                }
                if(LOGGING) {
                    this._log.info("Pause");
                }
            }
        };
        Game.prototype.resume = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1 && !this.timeManager.isRunning) {
                this.timeManager.start();
                TweenMax.resumeAll();
                this.resumeSignal.dispatch();
                this.pauseSignal.dispatch(false);
                if(LOGGING) {
                    this._log.info("Resume");
                }
            }
        };
        Game.prototype.suspend = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1 && this.timeManager.isRunning) {
                this.timeManager.stop();
                TweenMax.pauseAll();
                this.suspendSignal.dispatch();
                this.pauseSignal.dispatch(true);
                if(LOGGING) {
                    this._log.info("Suspend");
                }
            }
        };
        Game.prototype.mute = function (value) {
            if(value == 1) {
                this.soundManager.mute();
            }
        };
        Game.prototype._onResize = function (event) {
            this.updateCanvas();
            _super.prototype._onResize.call(this, event);
        };
        Game.prototype._onOrientationChange = function (event) {
            this.updateCanvas();
            _super.prototype._onOrientationChange.call(this, event);
        };
        Game.prototype._onChangeVisibility = function (hidden) {
            if(hidden) {
                this._wasMuted = this.soundManager.isMuted;
                if(!this._wasMuted) {
                    this.soundManager.mute();
                }
            } else {
                if(!this._wasMuted) {
                    this.soundManager.mute();
                }
            }
        };
        Game.prototype._onChangeOrientation = function (orientation) {
            if(!this._settings.orientationImage) {
                return;
            }
            if(Avota.EnvUtil.isLandscape) {
                (document.getElementsByTagName("canvas")[0]).style.display = "inline";
                if(this._settings.orientationImage.parentNode) {
                    document.getElementById(this._settings.parent).removeChild(this._settings.orientationImage);
                }
            }
            if(Avota.EnvUtil.isPortrait) {
                (document.getElementsByTagName("canvas")[0]).style.display = "none";
                document.getElementById(this._settings.parent).appendChild(this._settings.orientationImage);
                var optimalRatio = Math.min(window.innerWidth / this._settings.width, window.innerHeight / this._settings.height);
                var gameWidth = this._settings.width * optimalRatio;
                var gameHeight = this._settings.height * optimalRatio;
                if(gameWidth < this._settings.width) {
                    this._settings.orientationImage.style.width = gameWidth + "px";
                }
                if(gameHeight < this._settings.height) {
                    this._settings.orientationImage.style.height = gameHeight + "px";
                }
            }
            this.updateCanvas();
        };
        Game.prototype._onUnsupportedBrowser = function () {
            if(LOGGING) {
                this._log.fatal("Unsupported Browser.");
            }
            if(this._settings.unsupportedBrowserImagePath != "") {
                var image = new Image();
                image.id = "unsupported";
                image.src = this._settings.unsupportedBrowserImagePath;
                document.getElementById(this._settings.parent).innerHTML = "";
                document.getElementById(this._settings.parent).appendChild(image);
            }
            this.destroy();
        };
        Game.prototype._onUnsupportedDevice = function () {
            if(LOGGING) {
                this._log.fatal("Unsupported Device.");
            }
            if(this._settings.unsupportedDeviceImagePath != "") {
                var image = new Image();
                image.id = "unsupported";
                image.src = this._settings.unsupportedDeviceImagePath;
                document.getElementById(this._settings.parent).innerHTML = "";
                document.getElementById(this._settings.parent).appendChild(image);
            }
            this.destroy();
        };
        Game.prototype.updateCanvas = function () {
            if(!this._booted) {
                return;
            }
            if(Avota.EnvUtil.isMobile && (Avota.EnvUtil.isiPhone || Avota.EnvUtil.isiPod) && Avota.EnvUtil.isLandscape && Avota.EnvUtil.browserVersion.charAt(0) == "6") {
                if(document.documentElement.scrollHeight < window.outerHeight / window["devicePixelRatio"]) {
                    document.documentElement.style.height = (window.outerHeight / window["devicePixelRatio"]) + "px";
                }
                setTimeout(function () {
                    window.scrollTo(1, 1);
                }, 0);
                if(navigator.userAgent.match(/Android|iPhone/gi)) {
                    window.scrollTo(0, 1);
                }
            }
            var gameWidth;
            var gameHeight;
            var optimalRatio = Math.min(((this._settings.displayWidth != -1) ? this._settings.displayWidth : window.innerWidth) / this._settings.width, ((this._settings.displayHeight != -1) ? this._settings.displayHeight : window.innerHeight) / this._settings.height);
            switch(this._settings.scaleMode) {
                case Avota.ScaleMode.EXACT_FIT:
                    gameWidth = (this._settings.displayWidth != -1) ? this._settings.displayWidth : window.innerWidth;
                    gameHeight = (this._settings.displayHeight != -1) ? this._settings.displayHeight : window.innerHeight;
                    this.renderManager.renderCanvas.canvas.style.width = gameWidth + "px";
                    this.renderManager.renderCanvas.canvasScale.x = this._settings.width / gameWidth;
                    this.inputManager._canvasScale.x = this.renderManager.renderCanvas.canvasScale.x;
                    this.renderManager.renderCanvas.canvas.style.height = gameHeight + "px";
                    this.renderManager.renderCanvas.canvasScale.y = this._settings.height / gameHeight;
                    this.inputManager._canvasScale.y = this.renderManager.renderCanvas.canvasScale.y;
                    break;
                case Avota.ScaleMode.SHOW_ALL:
                    gameWidth = this._settings.width * optimalRatio;
                    gameHeight = this._settings.height * optimalRatio;
                    if(Avota.EnvUtil.isMobile || this._settings.displayWidth != -1 || this._settings.displayHeight != -1) {
                        this.renderManager.renderCanvas.canvas.style.width = gameWidth + "px";
                        this.renderManager.renderCanvas.canvasScale.x = this._settings.width / gameWidth;
                        this.inputManager._canvasScale.x = this.renderManager.renderCanvas.canvasScale.x;
                        this.renderManager.renderCanvas.canvas.style.height = gameHeight + "px";
                        this.renderManager.renderCanvas.canvasScale.y = this._settings.height / gameHeight;
                        this.inputManager._canvasScale.y = this.renderManager.renderCanvas.canvasScale.y;
                    } else if(Avota.EnvUtil.isDesktop) {
                        if(gameWidth < this._settings.width) {
                            this.renderManager.renderCanvas.canvas.style.width = gameWidth + "px";
                            this.renderManager.renderCanvas.canvasScale.x = this._settings.width / gameWidth;
                            this.inputManager._canvasScale.x = this.renderManager.renderCanvas.canvasScale.x;
                        }
                        if(gameHeight < this._settings.height) {
                            this.renderManager.renderCanvas.canvas.style.height = gameHeight + "px";
                            this.renderManager.renderCanvas.canvasScale.y = this._settings.height / gameHeight;
                            this.inputManager._canvasScale.y = this.renderManager.renderCanvas.canvasScale.y;
                        }
                    }
                    break;
                case Avota.ScaleMode.SHOW_ALL_MAX:
                    gameWidth = this._settings.width * optimalRatio;
                    gameHeight = this._settings.height * optimalRatio;
                    this.renderManager.renderCanvas.canvas.style.width = gameWidth + "px";
                    this.renderManager.renderCanvas.canvasScale.x = this._settings.width / gameWidth;
                    this.inputManager._canvasScale.x = this.renderManager.renderCanvas.canvasScale.x;
                    this.renderManager.renderCanvas.canvas.style.height = gameHeight + "px";
                    this.renderManager.renderCanvas.canvasScale.y = this._settings.height / gameHeight;
                    this.inputManager._canvasScale.y = this.renderManager.renderCanvas.canvasScale.y;
                    break;
            }
            this.renderManager.renderCanvas.offset = Avota.DOMUtil.getOffset(this.renderManager.renderCanvas.canvas);
        };
        Game.prototype.destroy = function () {
            this.timeManager.stop();
            this.bootSignal.removeAll();
            this.initSignal.removeAll();
            this.startupSignal.removeAll();
            this.shutdownSignal.removeAll();
            this.pauseSignal.removeAll();
            this.resumeSignal.removeAll();
            this.suspendSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.bootSignal = null;
            this.initSignal = null;
            this.startupSignal = null;
            this.shutdownSignal = null;
            this.pauseSignal = null;
            this.resumeSignal = null;
            this.suspendSignal = null;
            this._settings = null;
        };
        return Game;
    })(Avota.Context);
    Avota.Game = Game;    
    var GamePerformance = (function () {
        function GamePerformance() { }
        GamePerformance.CAPABILITY = -1;
        GamePerformance.BASIC = 1;
        GamePerformance.LOW = 2;
        GamePerformance.MEDIUM = 3;
        GamePerformance.HIGH = 4;
        GamePerformance.EXTREME = 5;
        return GamePerformance;
    })();
    Avota.GamePerformance = GamePerformance;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameLoader = (function (_super) {
        __extends(GameLoader, _super);
        function GameLoader(game, strings, name) {
            if (typeof name === "undefined") { name = GameLoader.NAME; }
                _super.call(this, name);
            this._game = game;
            this._strings = (strings) ? JSON.parse(JSON.stringify(strings)) : null;
            this.loadCompleteSignal = new Avota.Signal();
            this.loadFailedSignal = new Avota.Signal();
        }
        GameLoader.NAME = "GameLoader";
        GameLoader.prototype._onCreate = function () {
            _super.prototype._onCreate.call(this);
            if(this._game.settings.showLoader) {
                this._createLoader();
                if(this._progressBar) {
                    this._progressBar.scaleX = 0;
                }
            }
        };
        GameLoader.prototype.loadResources = function (resourceList) {
            this._game.resourceManager.progressSignal.add(this._onProgressUpdate, this);
            this._game.resourceManager.failedSignal.add(this._onLoadingFailed, this);
            this._game.resourceManager.completeSignal.addOnce(this._onLoadingComplete, this);
            var resourceInfo;
            for(var i = 0; i < resourceList.length; i++) {
                resourceInfo = resourceList[i];
                if(resourceInfo.autoload) {
                    (resourceInfo.hasOwnProperty("options")) ? this._game.resourceManager.load(resourceInfo.path, resourceInfo.name, resourceInfo.options) : this._game.resourceManager.load(resourceInfo.path, resourceInfo.name);
                }
            }
            if(this._game.resourceManager.loadingCount == 0) {
                this._onLoadingComplete();
            }
        };
        GameLoader.prototype._onProgressUpdate = function (itemsLoaded, itemsTotal) {
            if(this._progressBar) {
                this._progressBar.scaleX = (itemsLoaded / itemsTotal);
            }
        };
        GameLoader.prototype._onLoadingFailed = function () {
            this.loadFailedSignal.dispatch();
        };
        GameLoader.prototype._onLoadingComplete = function () {
            this._game.resourceManager.progressSignal.remove(this._onProgressUpdate, this);
            this._game.resourceManager.failedSignal.remove(this._onLoadingFailed, this);
            this._game.resourceManager.completeSignal.remove(this._onLoadingComplete, this);
            this.loadCompleteSignal.dispatch();
        };
        GameLoader.prototype._createLoader = function () {
            var backgroundGraphic = this.create(Avota.RectGraphic, this._game.timeManager, this._game.renderManager, this._game.settings.width, this._game.settings.height, "#999999");
            var titleText = this.create(Avota.TextGraphic, this._game.timeManager, this._game.renderManager, {
            }, "TitleText");
            backgroundGraphic.layerIndex = Avota.EngineConstants.LAYERINDEX_GAMEUI;
            titleText.layerIndex = Avota.EngineConstants.LAYERINDEX_GAMEUI;
            titleText.zIndex = 1;
            titleText.centerX = this._game.width / 2;
            titleText.centerY = (this._game.height / 2) - 40;
            var progressBarBG = this.create(Avota.RectGraphic, this._game.timeManager, this._game.renderManager, 310, 35, "#000000");
            progressBarBG.layerIndex = Avota.EngineConstants.LAYERINDEX_GAMEUI;
            progressBarBG.zIndex = 1;
            progressBarBG.centerX = this._game.width / 2;
            progressBarBG.centerY = (this._game.height / 2) + 40;
            this._progressBar = this.create(Avota.RectGraphic, this._game.timeManager, this._game.renderManager, 300, 25, "#FFFFFF");
            this._progressBar.layerIndex = Avota.EngineConstants.LAYERINDEX_GAMEUI;
            this._progressBar.zIndex = 2;
            this._progressBar.registrationX = 0;
            this._progressBar.centerX = this._game.width / 2;
            this._progressBar.centerY = (this._game.height / 2) + 40;
            this._progressBar.scaleX = 0;
            this.localize();
        };
        GameLoader.prototype.localize = function () {
            if(this._strings) {
                var textGraphics = this.getByType(Avota.TextGraphic);
                for(var i = 0; i < textGraphics.length; i++) {
                    for(var n = 0; n < this._strings.length; n++) {
                        if(textGraphics[i].name == this._strings[n].name) {
                            textGraphics[i].text = this._strings[n].value;
                            if(this._strings[n].style) {
                                textGraphics[i].setStyle(this._strings[n].style);
                            }
                        }
                    }
                }
            }
        };
        GameLoader.prototype.destroy = function () {
            this.loadCompleteSignal.removeAll();
            this.loadFailedSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.loadCompleteSignal = null;
            this.loadFailedSignal = null;
            this._game = null;
            this._strings = null;
        };
        return GameLoader;
    })(Avota.Group);
    Avota.GameLoader = GameLoader;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StateElement = (function (_super) {
        __extends(StateElement, _super);
        function StateElement(name, destroyOnExit) {
            if (typeof destroyOnExit === "undefined") { destroyOnExit = true; }
                _super.call(this, name);
            this._destroyOnExit = destroyOnExit;
            this.enteredSignal = new Avota.Signal();
            this.exitedSignal = new Avota.Signal();
        }
        StateElement.prototype.enter = function () {
            if(LOGGING) {
                this._log.log("Entered");
            }
            this.active = true;
            this.enteredSignal.dispatch();
        };
        StateElement.prototype.exit = function () {
            this.active = false;
            this.exitedSignal.dispatch();
            if(LOGGING) {
                this._log.log("Exited");
            }
            if(this._destroyOnExit) {
                this.destroy();
            }
        };
        StateElement.prototype.destroy = function () {
            this._destroyOnExit = false;
            if(this.active) {
                this.exit();
            }
            this.enteredSignal.removeAll();
            this.exitedSignal.removeAll();
            this.enteredSignal = null;
            this.exitedSignal = null;
            this.stateManager = null;
            _super.prototype.destroy.call(this);
        };
        return StateElement;
    })(Avota.Group);
    Avota.StateElement = StateElement;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StateManager = (function (_super) {
        __extends(StateManager, _super);
        function StateManager(name) {
            if (typeof name === "undefined") { name = StateManager.NAME; }
                _super.call(this, name);
            this.stateChangedSignal = new Avota.Signal();
        }
        StateManager.NAME = "StateManager";
        StateManager.prototype.setState = function (state) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var oldState = this._state;
            if(oldState != null) {
                oldState.exit();
            }
            if(state instanceof Function) {
                switch(args.length) {
                    case 0:
                        this._state = new state();
                        break;
                    case 1:
                        this._state = new state(args[0]);
                        break;
                    case 2:
                        this._state = new state(args[0], args[1]);
                        break;
                    case 3:
                        this._state = new state(args[0], args[1], args[2]);
                        break;
                    case 4:
                        this._state = new state(args[0], args[1], args[2], args[3]);
                        break;
                    case 5:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4]);
                        break;
                    case 6:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4], args[5]);
                        break;
                    case 7:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                        break;
                    case 8:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
                        break;
                    case 9:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
                        break;
                    case 10:
                        this._state = new state(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
                        break;
                }
            } else if(state instanceof Avota.StateElement) {
                this._state = state;
            } else {
                if(LOGGING) {
                    this._log.warn("Invalid object passed to setState");
                }
                return;
            }
            if(this.context) {
                this._state.context = this.context;
            }
            if(this.group) {
                this._state.group = this.group;
            }
            this._state.stateManager = this;
            this._state._onCreate();
            this.stateChangedSignal.dispatch(oldState, this._state);
            this._state.enter();
        };
        return StateManager;
    })(Avota.Element);
    Avota.StateManager = StateManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ResourceManager = (function (_super) {
        __extends(ResourceManager, _super);
        function ResourceManager(name) {
            if (typeof name === "undefined") { name = ResourceManager.NAME; }
                _super.call(this, name);
            this._resources = {
            };
            this._loadingResources = {
            };
            this._loadingCount = 0;
            this.resourcePath = "";
            this.completeSignal = new Avota.Signal();
            this.loadedSignal = new Avota.Signal();
            this.failedSignal = new Avota.Signal();
            this.progressSignal = new Avota.Signal();
        }
        ResourceManager.NAME = "ResourceManager";
        Object.defineProperty(ResourceManager.prototype, "loadingCount", {
            get: function () {
                return this._loadingCount;
            },
            enumerable: true,
            configurable: true
        });
        ResourceManager.prototype.loadItems = function (items, name, options) {
            if (typeof name === "undefined") { name = null; }
            if (typeof options === "undefined") { options = null; }
            for(var i = 0; i < items.length; i++) {
                this.load(items[i], name + i, options);
            }
        };
        ResourceManager.prototype.load = function (path, name, options) {
            if (typeof name === "undefined") { name = null; }
            if (typeof options === "undefined") { options = null; }
            if(LOGGING) {
                this._log.log("Load resource: " + path);
            }
            var resourceType;
            var resource;
            if(!this._resources[path]) {
                if(!this._loadingResources[this.resourcePath + path]) {
                    var type = path.substr(path.lastIndexOf(".") + 1, 4);
                    switch(type) {
                        case "jpg":
                        case "png":
                            resourceType = Avota.ImageResource;
                            break;
                        case "xml":
                            resourceType = Avota.XMLResource;
                            break;
                        case "css":
                            resourceType = Avota.CSSResource;
                            break;
                        case "json":
                            resourceType = Avota.JSONResource;
                            break;
                        case "js":
                            resourceType = Avota.JSResource;
                            break;
                        case "swf":
                            resourceType = Avota.SWFResource;
                            break;
                        case "mp3":
                        case "wav":
                        case "ogg":
                        case "aac":
                            resourceType = Avota.SoundResource;
                            break;
                        case "woff":
                        case "eot":
                        case "ttf":
                            resourceType = Avota.FontResource;
                            break;
                    }
                    resource = this.create(resourceType, this, name, options);
                    resource.loadCompleteSignal.addOnce(this.onLoad, this);
                    resource.loadErrorSignal.addOnce(this.onLoadError, this);
                    this._loadingResources[this.resourcePath + path] = resource;
                    this._loadingCount++;
                    resource.load(this.resourcePath + path);
                } else {
                    if(LOGGING) {
                        this._log.log("Resource still loading: " + path);
                    }
                    return;
                }
            } else {
                if(LOGGING) {
                    this._log.log("Resource already loaded: " + path);
                }
                resource = this._resources[path];
                this.loadedSignal.dispatch(resource);
            }
        };
        ResourceManager.prototype.isLoaded = function (path) {
            return this._resources[path] != null;
        };
        ResourceManager.prototype.isLoading = function (path) {
            return this._loadingResources[this.resourcePath + path] != null;
        };
        ResourceManager.prototype.getResource = function (path) {
            var resource;
            if(this.isLoaded(path)) {
                resource = this._resources[path];
            }
            return resource;
        };
        ResourceManager.prototype.unload = function (resource, destroy) {
            if (typeof destroy === "undefined") { destroy = true; }
            if(!resource) {
                return;
            }
            if(LOGGING) {
                this._log.log("Unload resource: " + (this.resourcePath + resource.path));
            }
            if(destroy) {
                resource.destroy();
            }
            this._resources[resource.path] = null;
            delete this._resources[resource.path];
        };
        ResourceManager.prototype.onLoad = function (resource) {
            var path = (resource.path.indexOf(this.resourcePath) == -1) ? resource.path : resource.path.substring(resource.path.indexOf(this.resourcePath) + this.resourcePath.length, resource.path.length);
            var count = 0;
            for(var key in this._loadingResources) {
                count++;
            }
            resource.loadCompleteSignal.remove(this.onLoad, this);
            resource.loadErrorSignal.remove(this.onLoadError, this);
            resource.path = path;
            this._resources[path] = resource;
            this._loadingCount--;
            this.progressSignal.dispatch(count - this._loadingCount, count);
            if(this._loadingCount == 0) {
                for(var key in this._loadingResources) {
                    this._loadingResources[key] = null;
                    delete this._loadingResources[key];
                }
                this.completeSignal.dispatch(resource);
            }
            this.loadedSignal.dispatch(resource);
        };
        ResourceManager.prototype.onLoadError = function (resource) {
            this._loadingCount--;
            this.failedSignal.dispatch();
        };
        ResourceManager.prototype.destroy = function () {
            var key;
            var resource;
            for(key in this._loadingResources) {
                resource = this._loadingResources[key];
                this.unload(resource);
                this._loadingResources[key] = null;
                delete this._loadingResources[key];
            }
            for(key in this._resources) {
                resource = this._resources[key];
                this.unload(resource);
                this._resources[key] = null;
                delete this._resources[key];
            }
            this.completeSignal.removeAll();
            this.loadedSignal.removeAll();
            this.progressSignal.removeAll();
            this.failedSignal.removeAll();
            this.completeSignal = null;
            this.loadedSignal = null;
            this.progressSignal = null;
            this.failedSignal = null;
            this._resources = null;
            this._loadingResources = null;
            _super.prototype.destroy.call(this);
        };
        return ResourceManager;
    })(Avota.Group);
    Avota.ResourceManager = ResourceManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InputManager = (function (_super) {
        __extends(InputManager, _super);
        function InputManager(timeManager, renderManager, name) {
            if (typeof name === "undefined") { name = InputManager.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._renderManager = renderManager;
            this._camera = this._renderManager.camera;
            this._keyState = [];
            this._previousKeyState = [];
            this._keysJustPressed = [];
            this._keysJustReleased = [];
            this._inputObjects = [];
            this.keyDown = new Avota.Signal();
            this.keyUp = new Avota.Signal();
            this.inputOver = new Avota.Signal();
            this.inputOut = new Avota.Signal();
            this.inputDown = new Avota.Signal();
            this.inputUp = new Avota.Signal();
            this.inputMove = new Avota.Signal();
            this._inputPointers = [];
            this._activeInputPointers = {
            };
            this._inputPosition = new Avota.Point();
            for(var i = 0; i < InputManager.NUM_POINTERS; i++) {
                this._inputPointers[i] = this.create(Avota.InputPointer, this);
            }
            this._preventPropagation = true;
            this._initialized = false;
            this._canvasScale = new Avota.Point(1, 1);
            this._pt = new Avota.Point();
            this.initialize(renderManager.renderCanvas.canvas);
        }
        InputManager.NAME = "InputManager";
        InputManager.NUM_POINTERS = 11;
        Object.defineProperty(InputManager.prototype, "inputX", {
            get: function () {
                return (this._primaryInputPointer) ? this._primaryInputPointer.x : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputManager.prototype, "inputY", {
            get: function () {
                return (this._primaryInputPointer) ? this._primaryInputPointer.y : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputManager.prototype, "inputPrevX", {
            get: function () {
                return (this._primaryInputPointer) ? this._primaryInputPointer.prevX : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputManager.prototype, "inputPrevY", {
            get: function () {
                return (this._primaryInputPointer) ? this._primaryInputPointer.prevY : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputManager.prototype, "isInputDown", {
            get: function () {
                return (this._primaryInputPointer) ? this._primaryInputPointer.isDown : false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputManager.prototype, "inputPosition", {
            get: function () {
                this._inputPosition.x = this.inputX;
                this._inputPosition.y = this.inputY;
                return this._inputPosition;
            },
            enumerable: true,
            configurable: true
        });
        InputManager.prototype.initialize = function (canvas) {
            if(this._initialized) {
                return;
            }
            this._canvas = canvas;
            this._onMouseDownListener = this.onMouseDown.bind(this);
            this._onMouseMoveListener = this.onMouseMove.bind(this);
            this._onMouseUpListener = this.onMouseUp.bind(this);
            this._onTouchStartListener = this.onTouchStart.bind(this);
            this._onTouchMoveListener = this.onTouchMove.bind(this);
            this._onTouchEndListener = this.onTouchEnd.bind(this);
            this._onTouchCancelListener = this.onTouchEnd.bind(this);
            this._onKeyDownListener = this.onKeyDown.bind(this);
            this._onKeyUpListener = this.onKeyUp.bind(this);
            this._canvas.addEventListener("mousedown", this._onMouseDownListener, false);
            this._canvas.addEventListener("mousemove", this._onMouseMoveListener, false);
            this._canvas.addEventListener("mouseup", this._onMouseUpListener, false);
            this._canvas.addEventListener("touchstart", this._onTouchStartListener, false);
            this._canvas.addEventListener("touchmove", this._onTouchMoveListener, false);
            this._canvas.addEventListener("touchend", this._onTouchEndListener, false);
            this._canvas.addEventListener("touchcancel", this._onTouchEndListener, false);
            this._canvas.addEventListener("MSPointerDown", this._onTouchStartListener, false);
            this._canvas.addEventListener("MSPointerMove", this._onTouchMoveListener, false);
            this._canvas.addEventListener("MSPointerUp", this._onTouchEndListener, false);
            this._canvas.addEventListener("MSPointerCancel", this._onTouchEndListener, false);
            window.addEventListener("keydown", this._onKeyDownListener, false);
            window.addEventListener("keyup", this._onKeyUpListener, false);
            this._timeManager.addTickedObject(this, 10);
            this._initialized = true;
        };
        InputManager.prototype.onTick = function (delta) {
            for(var i = 0, n = this._keyState.length; i < n; i++) {
                if(this._keyState[i] && !this._previousKeyState[i]) {
                    this._keysJustPressed[i] = true;
                } else {
                    this._keysJustPressed[i] = false;
                }
                if(!this._keyState[i] && this._previousKeyState[i]) {
                    this._keysJustReleased[i] = true;
                } else {
                    this._keysJustReleased[i] = false;
                }
                this._previousKeyState[i] = this._keyState[i];
            }
            if(this._primaryInputPointer && this._primaryInputPointer.id != 0) {
                if(!this._primaryInputPointer.isDown && this._primaryInputPointer.x == this._primaryInputPointer.prevX && this._primaryInputPointer.y == this._primaryInputPointer.prevY) {
                    delete this._activeInputPointers[this._primaryInputPointer.id];
                    this._inputPointers.push(this._primaryInputPointer);
                }
            }
        };
        InputManager.prototype.addInputObject = function (inputObject) {
            this._inputObjects.push(inputObject);
        };
        InputManager.prototype.removeInputObject = function (inputObject) {
            this._inputObjects.splice(this._inputObjects.indexOf(inputObject), 1);
        };
        InputManager.prototype.wasKeyJustPressed = function (keyCode) {
            return this._keysJustPressed[keyCode];
        };
        InputManager.prototype.wasKeyJustReleased = function (keyCode) {
            return this._keysJustReleased[keyCode];
        };
        InputManager.prototype.isKeyDown = function (keyCode) {
            return this._keyState[keyCode];
        };
        InputManager.prototype.isAnyKeyDown = function () {
            for(var i = 0, n = this._keyState.length - 1; i < n; i++) {
                if(this._keyState[i]) {
                    return true;
                }
            }
            return false;
        };
        InputManager.prototype.getObjectsUnderPointer = function (id) {
            if (typeof id === "undefined") { id = -1; }
            if(id === -1 && this._primaryInputPointer) {
                id = this._primaryInputPointer.id;
            }
            return this._activeInputPointers[id].getObjectsUnderPointer();
        };
        InputManager.prototype.onKeyDown = function (event) {
            this.keyDown.dispatch(event.keyCode);
            this._keyState[event.keyCode] = true;
            if(event.keyCode == Avota.InputKey.SPACE || event.keyCode == Avota.InputKey.UP || event.keyCode == Avota.InputKey.DOWN || event.keyCode == Avota.InputKey.LEFT || event.keyCode == Avota.InputKey.RIGHT) {
                this.preventDefault(event);
            }
        };
        InputManager.prototype.onKeyUp = function (event) {
            this.keyUp.dispatch(event.keyCode);
            this._keyState[event.keyCode] = false;
            if(event.keyCode == Avota.InputKey.SPACE || event.keyCode == Avota.InputKey.UP || event.keyCode == Avota.InputKey.DOWN || event.keyCode == Avota.InputKey.LEFT || event.keyCode == Avota.InputKey.RIGHT) {
                this.preventDefault(event);
            }
        };
        InputManager.prototype.onMouseDown = function (event) {
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            this.onInputDown((event.pageX - this._canvasOffset.x) * this._canvasScale.x, (event.pageY - this._canvasOffset.y) * this._canvasScale.y, event.button || 0);
        };
        InputManager.prototype.onMouseUp = function (event) {
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            this.onInputUp((event.pageX - this._canvasOffset.x) * this._canvasScale.x, (event.pageY - this._canvasOffset.y) * this._canvasScale.y, event.button || 0);
        };
        InputManager.prototype.onMouseMove = function (event) {
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            this.onInputMove((event.pageX - this._canvasOffset.x) * this._canvasScale.x, (event.pageY - this._canvasOffset.y) * this._canvasScale.y, event.button || 0);
        };
        InputManager.prototype.onTouchStart = function (event) {
            this._changedTouches = event.changedTouches || [
                event
            ];
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            for(var i = 0, n = this._changedTouches.length; i < n; i++) {
                this.onInputDown((this._changedTouches[i].pageX - this._canvasOffset.x) * this._canvasScale.x, (this._changedTouches[i].pageY - this._canvasOffset.y) * this._canvasScale.y, this._changedTouches[i].identifier);
            }
            if(this._preventPropagation) {
                this.preventDefault(event);
            }
        };
        InputManager.prototype.onTouchMove = function (event) {
            this._changedTouches = event.changedTouches || [
                event
            ];
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            for(var i = 0, n = this._changedTouches.length; i < n; i++) {
                this.onInputMove((this._changedTouches[i].pageX - this._canvasOffset.x) * this._canvasScale.x, (this._changedTouches[i].pageY - this._canvasOffset.y) * this._canvasScale.y, this._changedTouches[i].identifier);
            }
            if(this._preventPropagation) {
                this.preventDefault(event);
            }
        };
        InputManager.prototype.onTouchEnd = function (event) {
            this._changedTouches = event.changedTouches || [
                event
            ];
            this._canvasOffset = this._renderManager.renderCanvas.offset;
            for(var i = 0, n = this._changedTouches.length; i < n; i++) {
                this.onInputUp((this._changedTouches[i].pageX - this._canvasOffset.x) * this._canvasScale.x, (this._changedTouches[i].pageY - this._canvasOffset.y) * this._canvasScale.y, this._changedTouches[i].identifier);
            }
            if(this._preventPropagation) {
                this.preventDefault(event);
            }
        };
        InputManager.prototype.onInputDown = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this._pt.x = x;
            this._pt.y = y;
            var currentPointer = (this._activeInputPointers[id]) ? this._activeInputPointers[id] : this._inputPointers.pop();
            if(this._inputPointers.length == InputManager.NUM_POINTERS - 1) {
                this._primaryInputPointer = currentPointer;
            }
            currentPointer.start(this._pt.x, this._pt.y, id);
            this.inputDown.dispatch(this._pt.x, this._pt.y, id);
            this._activeInputPointers[id] = currentPointer;
        };
        InputManager.prototype.onInputUp = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this._pt.x = x;
            this._pt.y = y;
            var currentPointer = this._activeInputPointers[id];
            currentPointer.end(this._pt.x, this._pt.y, id);
            this.inputUp.dispatch(this._pt.x, this._pt.y, id);
            this._inputPointers.push(currentPointer);
            delete this._activeInputPointers[id];
        };
        InputManager.prototype.onInputMove = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this._pt.x = x;
            this._pt.y = y;
            var currentPointer = (this._activeInputPointers[id]) ? this._activeInputPointers[id] : this._inputPointers.pop();
            if(this._inputPointers.length == InputManager.NUM_POINTERS - 1) {
                this._primaryInputPointer = currentPointer;
            }
            currentPointer.move(this._pt.x, this._pt.y, id);
            this.inputMove.dispatch(this._pt.x, this._pt.y, id);
            this._activeInputPointers[id] = currentPointer;
        };
        InputManager.prototype.preventDefault = function (event) {
            if(event.preventDefault) {
                event.preventDefault();
            }
            if(event.stopPropagation) {
                event.stopPropagation();
            }
        };
        InputManager.prototype.destroy = function () {
            if(this._initialized) {
                this._canvas.removeEventListener("mousedown", this._onMouseDownListener, false);
                this._canvas.removeEventListener("mousemove", this._onMouseMoveListener, false);
                this._canvas.removeEventListener("mouseup", this._onMouseUpListener, false);
                this._canvas.removeEventListener("touchstart", this._onTouchStartListener, false);
                this._canvas.removeEventListener("touchmove", this._onTouchMoveListener, false);
                this._canvas.removeEventListener("touchend", this._onTouchEndListener, false);
                this._canvas.removeEventListener("MSPointerDown", this._onTouchStartListener, false);
                this._canvas.removeEventListener("MSPointerMove", this._onTouchMoveListener, false);
                this._canvas.removeEventListener("MSPointerUp", this._onTouchEndListener, false);
                window.removeEventListener("keydown", this._onKeyDownListener, false);
                window.removeEventListener("keyup", this._onKeyUpListener, false);
                this._timeManager.removeTickedObject(this);
            }
            this.keyDown.removeAll();
            this.keyUp.removeAll();
            this.inputOver.removeAll();
            this.inputOut.removeAll();
            this.inputDown.removeAll();
            this.inputUp.removeAll();
            this.inputMove.removeAll();
            this._inputObjects.length = 0;
            this._inputPointers.length = 0;
            this._activeInputPointers = null;
            this._primaryInputPointer = null;
            this._inputPointers = null;
            this.keyDown = null;
            this.keyUp = null;
            this.inputOver = null;
            this.inputOut = null;
            this.inputDown = null;
            this.inputUp = null;
            this.inputMove = null;
            this._inputObjects = null;
            this._keyState = null;
            this._previousKeyState = null;
            this._keysJustPressed = null;
            this._keysJustReleased = null;
            this._canvasOffset = null;
            this._pt = null;
            this._timeManager = null;
            this._renderManager = null;
            this._camera = null;
            this._canvas = null;
            this._inputPosition = null;
            this._pointer = null;
            this._onMouseDownListener = null;
            this._onMouseMoveListener = null;
            this._onMouseUpListener = null;
            this._onTouchStartListener = null;
            this._onTouchMoveListener = null;
            this._onTouchEndListener = null;
            this._onTouchCancelListener = null;
            this._onKeyDownListener = null;
            this._onKeyUpListener = null;
            _super.prototype.destroy.call(this);
        };
        return InputManager;
    })(Avota.Group);
    Avota.InputManager = InputManager;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InputKey = (function () {
        function InputKey(keyCode) {
            if (typeof keyCode === "undefined") { keyCode = 0; }
            this._keyCode = keyCode;
        }
        InputKey.INVALID = 0;
        InputKey.BACKSPACE = 8;
        InputKey.TAB = 9;
        InputKey.ENTER = 13;
        InputKey.COMMAND = 15;
        InputKey.SHIFT = 16;
        InputKey.CONTROL = 17;
        InputKey.ALT = 18;
        InputKey.PAUSE = 19;
        InputKey.CAPS_LOCK = 20;
        InputKey.ESCAPE = 27;
        InputKey.SPACE = 32;
        InputKey.PAGE_UP = 33;
        InputKey.PAGE_DOWN = 34;
        InputKey.END = 35;
        InputKey.HOME = 36;
        InputKey.LEFT = 37;
        InputKey.UP = 38;
        InputKey.RIGHT = 39;
        InputKey.DOWN = 40;
        InputKey.INSERT = 45;
        InputKey.DELETE = 46;
        InputKey.ZERO = 48;
        InputKey.ONE = 49;
        InputKey.TWO = 50;
        InputKey.THREE = 51;
        InputKey.FOUR = 52;
        InputKey.FIVE = 53;
        InputKey.SIX = 54;
        InputKey.SEVEN = 55;
        InputKey.EIGHT = 56;
        InputKey.NINE = 57;
        InputKey.A = 65;
        InputKey.B = 66;
        InputKey.C = 67;
        InputKey.D = 68;
        InputKey.E = 69;
        InputKey.F = 70;
        InputKey.G = 71;
        InputKey.H = 72;
        InputKey.I = 73;
        InputKey.J = 74;
        InputKey.K = 75;
        InputKey.L = 76;
        InputKey.M = 77;
        InputKey.N = 78;
        InputKey.O = 79;
        InputKey.P = 80;
        InputKey.Q = 81;
        InputKey.R = 82;
        InputKey.S = 83;
        InputKey.T = 84;
        InputKey.U = 85;
        InputKey.V = 86;
        InputKey.W = 87;
        InputKey.X = 88;
        InputKey.Y = 89;
        InputKey.Z = 90;
        InputKey.NUM0 = 96;
        InputKey.NUM1 = 97;
        InputKey.NUM2 = 98;
        InputKey.NUM3 = 99;
        InputKey.NUM4 = 100;
        InputKey.NUM5 = 101;
        InputKey.NUM6 = 102;
        InputKey.NUM7 = 103;
        InputKey.NUM8 = 104;
        InputKey.NUM9 = 105;
        InputKey.MULTIPLY = 106;
        InputKey.ADD = 107;
        InputKey.NUMENTER = 108;
        InputKey.SUBTRACT = 109;
        InputKey.DECIMAL = 110;
        InputKey.DIVIDE = 111;
        InputKey.F1 = 112;
        InputKey.F2 = 113;
        InputKey.F3 = 114;
        InputKey.F4 = 115;
        InputKey.F5 = 116;
        InputKey.F6 = 117;
        InputKey.F7 = 118;
        InputKey.F8 = 119;
        InputKey.F9 = 120;
        InputKey.F10 = 121;
        InputKey.F11 = 122;
        InputKey.F12 = 123;
        InputKey.NUM_LOCK = 144;
        InputKey.SCROLL_LOCK = 145;
        InputKey.COLON = 186;
        InputKey.PLUS = 187;
        InputKey.COMMA = 188;
        InputKey.MINUS = 189;
        InputKey.PERIOD = 190;
        InputKey.BACKSLASH = 191;
        InputKey.TILDE = 192;
        InputKey.LEFT_BRACKET = 219;
        InputKey.SLASH = 220;
        InputKey.RIGHT_BRACKET = 221;
        InputKey.QUOTE = 222;
        InputKey.MOUSE_BUTTON = 253;
        InputKey.MOUSE_X = 254;
        InputKey.MOUSE_Y = 255;
        InputKey.MOUSE_WHEEL = 256;
        InputKey.MOUSE_HOVER = 257;
        InputKey.MOUSE_MOVE = 258;
        InputKey.TOUCH_TOUCH = 300;
        InputKey.TOUCH_X = 301;
        InputKey.TOUCH_Y = 302;
        InputKey.TOUCH_MOVE = 303;
        InputKey.INPUT_INPUT = 500;
        InputKey.INPUT_X = 501;
        InputKey.INPUT_Y = 502;
        InputKey.INPUT_MOVE = 503;
        InputKey.getKeyFromString = function getKeyFromString(value) {
            return String.fromCharCode(InputKey[value]);
        };
        InputKey.getKeyFromCode = function getKeyFromCode(value) {
            return String.fromCharCode(value);
        };
        Object.defineProperty(InputKey.prototype, "keyCode", {
            get: function () {
                return this._keyCode;
            },
            enumerable: true,
            configurable: true
        });
        return InputKey;
    })();
    Avota.InputKey = InputKey;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InputMap = (function (_super) {
        __extends(InputMap, _super);
        function InputMap(inputManager, name) {
            if (typeof name === "undefined") { name = InputMap.NAME; }
                _super.call(this, name);
            this._inputManager = inputManager;
            this._lastInputX = Number.NEGATIVE_INFINITY;
            this._lastInputY = Number.NEGATIVE_INFINITY;
            this._keyMap = [];
            this._bindings = {
            };
            this.setInputManager(this._inputManager);
        }
        InputMap.NAME = "InputMap";
        InputMap.prototype.setInputManager = function (inputManager) {
            if(this._inputManager) {
                this._inputManager.keyDown.remove(this.onKeyDown, this);
                this._inputManager.keyUp.remove(this.onKeyUp, this);
                this._inputManager.inputDown.remove(this.onInputDown, this);
                this._inputManager.inputUp.remove(this.onInputUp, this);
                this._inputManager.inputMove.remove(this.onInputMove, this);
            }
            this._inputManager = inputManager;
            this._isRegistered = false;
        };
        InputMap.prototype.getKeyCodeForAction = function (action) {
            for(var i = 0, n = this._keyMap.length; i < n; i++) {
                if(this._keyMap[i] === action) {
                    return i;
                }
            }
        };
        InputMap.prototype.getKeyForAction = function (action) {
            for(var i = 0, n = this._keyMap.length; i < n; i++) {
                if(this._keyMap[i] === action) {
                    return String.fromCharCode(i);
                }
            }
        };
        InputMap.prototype.mapKeyToAction = function (keyCode, action) {
            if(!this._keyMap[keyCode]) {
                if(keyCode == Avota.InputKey.MOUSE_BUTTON || keyCode == Avota.InputKey.TOUCH_TOUCH || keyCode == Avota.InputKey.INPUT_INPUT) {
                    this._inputManager.inputDown.add(this.onInputDown, this);
                    this._inputManager.inputUp.add(this.onInputUp, this);
                } else if((((keyCode == Avota.InputKey.MOUSE_X) && (!this._keyMap[Avota.InputKey.MOUSE_Y]) || (keyCode == Avota.InputKey.MOUSE_Y) && (!this._keyMap[Avota.InputKey.MOUSE_X])) || keyCode == Avota.InputKey.MOUSE_MOVE) || (((keyCode == Avota.InputKey.TOUCH_X) && (!this._keyMap[Avota.InputKey.TOUCH_Y]) || (keyCode == Avota.InputKey.TOUCH_Y) && (!this._keyMap[Avota.InputKey.TOUCH_X])) || keyCode == Avota.InputKey.TOUCH_MOVE) || (((keyCode == Avota.InputKey.INPUT_X) && (!this._keyMap[Avota.InputKey.INPUT_Y]) || (keyCode == Avota.InputKey.INPUT_Y) && (!this._keyMap[Avota.InputKey.INPUT_X])) || keyCode == Avota.InputKey.INPUT_MOVE)) {
                    this._inputManager.inputMove.add(this.onInputMove, this);
                } else if(!this._isRegistered) {
                    this._inputManager.keyDown.add(this.onKeyDown, this);
                    this._inputManager.keyUp.add(this.onKeyUp, this);
                    this._isRegistered = true;
                }
            }
            this._keyMap[keyCode] = action;
        };
        InputMap.prototype.mapActionToHandler = function (action, handler) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 2); _i++) {
                args[_i] = arguments[_i + 2];
            }
            if(!this._bindings[action]) {
                this._bindings[action] = [];
            }
            this._bindings[action].push(new InputData(handler, args));
        };
        InputMap.prototype.mapKeyToHandler = function (keyCode, handler) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 2); _i++) {
                args[_i] = arguments[_i + 2];
            }
            var action = keyCode.toString();
            this.mapKeyToAction(keyCode, action);
            this.mapActionToHandler.apply(this, [
                action, 
                handler
            ].concat(args));
        };
        InputMap.prototype.unmapKey = function (keyCode, unmapActionFlag) {
            if (typeof unmapActionFlag === "undefined") { unmapActionFlag = true; }
            if(!this._keyMap[keyCode]) {
                return;
            }
            if(unmapActionFlag) {
                this.unmapAction(this._keyMap[keyCode]);
            }
            this._keyMap[keyCode] = null;
            delete this._keyMap[keyCode];
        };
        InputMap.prototype.unmapAction = function (action) {
            if(!this._bindings || !this._bindings[action]) {
                return;
            }
            var inputData = this._bindings[action];
            for(var i = 0; i < inputData.length; i++) {
                inputData[i].handler = null;
                inputData[i].args = null;
            }
            inputData = null;
            this._bindings[action] = null;
            delete this._bindings[action];
        };
        InputMap.prototype.unmapAll = function () {
            for(var key in this._bindings) {
                this.unmapAction(key);
            }
        };
        InputMap.prototype.onKeyDown = function (keyCode) {
            if(!this._inputManager.isKeyDown(keyCode)) {
                this.onInputEvent(keyCode, 1);
            }
        };
        InputMap.prototype.onKeyUp = function (keyCode) {
            if(this._inputManager.isKeyDown(keyCode)) {
                this.onInputEvent(keyCode, 0);
            }
        };
        InputMap.prototype.onInputDown = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this.onInputEvent(Avota.InputKey.MOUSE_BUTTON, 1, id);
            this.onInputEvent(Avota.InputKey.TOUCH_TOUCH, 1, id);
            this.onInputEvent(Avota.InputKey.INPUT_INPUT, 1, id);
        };
        InputMap.prototype.onInputUp = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this.onInputEvent(Avota.InputKey.MOUSE_BUTTON, 0, id);
            this.onInputEvent(Avota.InputKey.TOUCH_TOUCH, 0, id);
            this.onInputEvent(Avota.InputKey.INPUT_INPUT, 0, id);
        };
        InputMap.prototype.onInputMove = function (x, y, id) {
            if (typeof id === "undefined") { id = 0; }
            this.onInputEvent(Avota.InputKey.MOUSE_X, x, id);
            this.onInputEvent(Avota.InputKey.MOUSE_Y, y, id);
            this.onInputEvent(Avota.InputKey.TOUCH_X, x, id);
            this.onInputEvent(Avota.InputKey.TOUCH_Y, y, id);
            this.onInputEvent(Avota.InputKey.INPUT_X, x, id);
            this.onInputEvent(Avota.InputKey.INPUT_Y, y, id);
            this.onInputEvent(Avota.InputKey.MOUSE_MOVE, x, y, id);
            this.onInputEvent(Avota.InputKey.TOUCH_MOVE, x, y, id);
            this.onInputEvent(Avota.InputKey.INPUT_MOVE, x, y, id);
        };
        InputMap.prototype.onInputEvent = function (keyCode) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var action = this._keyMap[keyCode];
            if(action && this._bindings[action]) {
                var inputData = this._bindings[action];
                for(var i = 0; i < inputData.length; i++) {
                    inputData[i].handler.apply(null, (inputData[i].args) ? args.concat(inputData[i].args) : args);
                }
            }
        };
        InputMap.prototype.destroy = function () {
            if(this._inputManager) {
                this._inputManager.inputDown.remove(this.onInputDown, this);
                this._inputManager.inputUp.remove(this.onInputUp, this);
                this._inputManager.inputMove.remove(this.onInputMove, this);
                this._inputManager.keyDown.remove(this.onKeyDown, this);
                this._inputManager.keyUp.remove(this.onKeyUp, this);
            }
            for(var i = 0; i < this._keyMap.length - 1; i++) {
                this._keyMap[i] = null;
                delete this._keyMap[i];
            }
            var keyName;
            for(keyName in this._bindings) {
                var inputData = this._bindings[keyName];
                for(var i = 0; i < inputData.length; i++) {
                    inputData[i].handler = null;
                    inputData[i].args = null;
                }
                inputData.length = 0;
                inputData = null;
                this._bindings[keyName] = null;
                delete this._bindings[keyName];
            }
            this._keyMap = null;
            this._bindings = null;
            this._inputManager = null;
            _super.prototype.destroy.call(this);
        };
        return InputMap;
    })(Avota.Element);
    Avota.InputMap = InputMap;    
    var InputData = (function () {
        function InputData(handler) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            this.handler = handler;
            this.args = args;
        }
        return InputData;
    })();
    Avota.InputData = InputData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ObjectPool = (function (_super) {
        __extends(ObjectPool, _super);
        function ObjectPool(name) {
            if (typeof name === "undefined") { name = ObjectPool.NAME; }
                _super.call(this, name);
            this._pools = new Avota.Dictionary();
            this._instances = new Avota.Dictionary();
        }
        ObjectPool.NAME = "ObjectPool";
        ObjectPool.DEFAULT_ALLOCATION = 32;
        ObjectPool.prototype.allocate = function (objectType, params, numObjects, parent, dynamicPool, alias) {
            if (typeof numObjects === "undefined") { numObjects = ObjectPool.DEFAULT_ALLOCATION; }
            if (typeof dynamicPool === "undefined") { dynamicPool = true; }
            var typePool;
            if(alias) {
                if(!this._pools.get(alias)) {
                    this._pools.put(alias, new PoolType(parent, dynamicPool));
                }
                typePool = this._pools.get(alias);
            } else {
                if(!this._pools.get(objectType)) {
                    this._pools.put(objectType, new PoolType(parent, dynamicPool));
                }
                typePool = this._pools.get(objectType);
            }
            typePool.allocate(numObjects, objectType, params);
        };
        ObjectPool.prototype.insert = function (objectType, objects) {
            var typePool;
            if(!this._pools.get(objectType)) {
                this._pools.put(objectType, new PoolType());
            }
            typePool = this._pools.get(objectType);
            typePool.insert(objects);
        };
        ObjectPool.prototype.getObject = function (objectType, initFunction, params) {
            var typePool = this._pools.get(objectType);
            var object = typePool.getObject();
            var typeInstances = this._instances.get(objectType);
            if(!typeInstances) {
                this._instances.put(objectType, []);
                typeInstances = this._instances.get(objectType);
            }
            typeInstances.push(object);
            if(initFunction) {
                object[initFunction].apply(object, params);
            }
            return object;
        };
        ObjectPool.prototype.hasObject = function (objectType) {
            return this._pools.get(objectType) != null;
        };
        ObjectPool.prototype.poolLength = function (objectType) {
            return this._pools.get(objectType).size || 0;
        };
        ObjectPool.prototype.poolUsedLength = function (objectType) {
            return this._pools.get(objectType).used || -1;
        };
        ObjectPool.prototype.poolUnusedLength = function (objectType) {
            return this._pools.get(objectType).unused || -1;
        };
        ObjectPool.prototype.releaseObject = function (object, objectType) {
            var typePool = this._pools.get(objectType) || this._pools.get(object.name);
            var typeInstances = this._instances.get(objectType) || this._instances.get(object.name);
            typePool.releaseObject(typeInstances.splice(typeInstances.indexOf(object), 1)[0]);
        };
        ObjectPool.prototype.getInstances = function (objectType) {
            var typeInstances = this._instances.get(objectType);
            return (typeInstances) ? typeInstances.concat() : [];
        };
        ObjectPool.prototype.getAllInstances = function () {
            var instances = [];
            for(var key in this._instances) {
                instances = instances.concat(this._instances.get(key).concat());
            }
            return instances;
        };
        ObjectPool.prototype.getAll = function () {
            var items = [];
            for(var key in this._pools) {
                items = items.concat(this._pools.get(key).getContents().concat());
            }
            return items;
        };
        ObjectPool.prototype.purge = function (objectType) {
            var typePool = this._pools.get(objectType);
            var typeInstances = this._instances.get(objectType);
            if(typeInstances && typeInstances.length > 0) {
                for(var i = 0; i < typeInstances.length; i++) {
                    typePool.releaseObject(typeInstances[i]);
                }
            }
            var contents = typePool.getContents();
            typePool.destroy();
            this._pools.remove(objectType);
            this._instances.remove(objectType);
            return contents;
        };
        ObjectPool.prototype.destroy = function () {
            this._pools.clear();
            this._instances.clear();
            this._pools = null;
            this._instances = null;
            _super.prototype.destroy.call(this);
        };
        return ObjectPool;
    })(Avota.Element);
    Avota.ObjectPool = ObjectPool;    
    var PoolType = (function (_super) {
        __extends(PoolType, _super);
        function PoolType(parent, isDynamic) {
            if (typeof isDynamic === "undefined") { isDynamic = false; }
            this._parent = parent;
            this._isDynamic = isDynamic;
            this._initialSize = 0;
            this._currentSize = 0;
            this._used = 0;
                _super.call(this);
        }
        Object.defineProperty(PoolType.prototype, "size", {
            get: function () {
                return this._currentSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoolType.prototype, "used", {
            get: function () {
                return this._used;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PoolType.prototype, "unused", {
            get: function () {
                return this._currentSize - this._used;
            },
            enumerable: true,
            configurable: true
        });
        PoolType.prototype.allocate = function (numObjects, objectType, params) {
            this.releasePool();
            this._allocateFactory = new AllocateFactory(objectType, params, this._parent);
            this._initialSize = this._currentSize = numObjects;
            this._head = this._tail = new PoolNode();
            this._head.data = this._allocateFactory.create();
            var node;
            for(var i = 1; i < this._initialSize; i++) {
                node = new PoolNode();
                node.data = this._allocateFactory.create();
                node.next = this._head;
                this._head = node;
            }
            this._emptyNode = this._allocNode = this._head;
            this._tail.next = this._head;
            if(LOGGING) {
                this._log.trace("Allocated " + numObjects + " objects");
            }
        };
        PoolType.prototype.insert = function (objects) {
            var i;
            var node;
            if(this._currentSize === 0) {
                this.releasePool();
                this._initialSize = this._currentSize = objects.length;
                this._head = this._tail = new PoolNode();
                this._head.data = objects[0];
                for(i = 1; i < this._initialSize; i++) {
                    node = new PoolNode();
                    node.data = objects[i];
                    node.next = this._head;
                    this._head = node;
                }
                this._emptyNode = this._allocNode = this._head;
                this._tail.next = this._head;
            } else {
                this._currentSize += objects.length;
                var n = this._tail;
                var t = this._tail;
                for(i = 0; i < objects.length; i++) {
                    node = new PoolNode();
                    node.data = objects[i];
                    t.next = node;
                    t = node;
                }
                this._tail = t;
                this._tail.next = this._emptyNode = this._head;
                this._allocNode = this._head;
            }
            if(LOGGING) {
                this._log.trace("Inserted " + this._initialSize + " objects");
            }
        };
        PoolType.prototype.getObject = function () {
            var object;
            if(this._used === this._currentSize) {
                if(this._isDynamic) {
                    this._currentSize += this._initialSize;
                    var n = this._tail;
                    var t = this._tail;
                    var node;
                    for(var i = 0; i < this._initialSize; i++) {
                        node = new PoolNode();
                        node.data = this._allocateFactory.create();
                        t.next = node;
                        t = node;
                    }
                    this._tail = t;
                    this._tail.next = this._emptyNode = this._head;
                    this._allocNode = n.next;
                    object = this.getObject();
                } else {
                    if(LOGGING) {
                        this._log.error("Pool empty");
                    }
                }
            } else {
                object = this._allocNode.data;
                this._allocNode.data = null;
                this._allocNode = this._allocNode.next;
                this._used++;
            }
            return object;
        };
        PoolType.prototype.initializeObjects = function (func, args) {
            var node = this._head;
            while(node) {
                node.data[func].apply(node.data, args);
                if(node === this._tail) {
                    break;
                }
                node = node.next;
            }
        };
        PoolType.prototype.releaseObject = function (object) {
            if(this.used > 0) {
                this._used--;
                this._emptyNode.data = object;
                this._emptyNode = this._emptyNode.next;
            }
        };
        PoolType.prototype.getContents = function () {
            var contents = [];
            var node = this._head;
            while(node) {
                contents.push(node.data);
                if(node === this._tail) {
                    break;
                }
                node = node.next;
            }
            return contents;
        };
        PoolType.prototype.purge = function () {
            var i;
            var node;
            if(this._used === 0) {
                if(this._currentSize > this._initialSize) {
                    i = 0;
                    node = this._head;
                    while(++i < this._initialSize) {
                        node = node.next;
                    }
                    this._tail = node;
                    this._allocNode = this._emptyNode = this._head;
                    this._currentSize = this._initialSize;
                }
            } else {
                var a = [];
                node = this._head;
                while(node) {
                    if(!node.data) {
                        a[i++] = node;
                    }
                    if(node === this._tail) {
                        break;
                    }
                    node = node.next;
                }
                this._currentSize = this._used = a.length;
                this._head = this._tail = a[0];
                for(i = 1; i < this._currentSize; i++) {
                    node = a[i];
                    node.next = this._head;
                    this._head = node;
                }
                this._emptyNode = this._allocNode = this._head;
                this._tail.next = this._head;
                if(this._used < this._initialSize) {
                    this._currentSize = this._initialSize;
                    var n = this._tail;
                    var t = this._tail;
                    var k = this._initialSize - this._used;
                    for(i = 0; i < k; i++) {
                        node = new PoolNode();
                        node.data = this._allocateFactory.create();
                        t.next = node;
                        t = node;
                    }
                    this._tail = t;
                    this._tail.next = this._emptyNode = this._head;
                    this._allocNode = n.next;
                }
            }
        };
        PoolType.prototype.releasePool = function () {
            var head = this._head;
            var node;
            while(head) {
                node = head.next;
                head.next = null;
                head.data = null;
                head = node;
            }
            this._head = this._tail = this._emptyNode = this._allocNode = node = null;
        };
        PoolType.prototype.destroy = function () {
            this.releasePool();
            if(this._allocateFactory) {
                this._allocateFactory.destroy();
            }
            this._allocateFactory = null;
            this._parent = null;
            _super.prototype.destroy.call(this);
        };
        return PoolType;
    })(Avota.AbstractBase);
    Avota.PoolType = PoolType;    
    var PoolNode = (function () {
        function PoolNode() { }
        return PoolNode;
    })();
    Avota.PoolNode = PoolNode;    
    var AllocateFactory = (function () {
        function AllocateFactory(classRef, args, parent) {
            this._parent = parent;
            this._class = classRef;
            this._args = args;
        }
        AllocateFactory.prototype.create = function () {
            if(this._parent) {
                var params;
                if(this._args) {
                    params = this._args.concat();
                    params.unshift(this._class);
                } else {
                    params = [
                        this._class
                    ];
                }
                return this._parent.create.apply(this._parent, params);
            } else if(this._args && this._args.length > 0) {
                switch(this._args.length) {
                    case 1:
                        return new this._class(this._args[0]);
                        break;
                    case 2:
                        return new this._class(this._args[0], this._args[1]);
                        break;
                    case 3:
                        return new this._class(this._args[0], this._args[1], this._args[2]);
                        break;
                    case 4:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3]);
                        break;
                    case 5:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4]);
                        break;
                    case 6:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4], this._args[5]);
                        break;
                    case 7:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4], this._args[5], this._args[6]);
                        break;
                    case 8:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4], this._args[5], this._args[6], this._args[7]);
                        break;
                    case 9:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4], this._args[5], this._args[6], this._args[7], this._args[8]);
                        break;
                    case 10:
                        return new this._class(this._args[0], this._args[1], this._args[2], this._args[3], this._args[4], this._args[5], this._args[6], this._args[7], this._args[8], this._args[9]);
                        break;
                }
            } else {
                return new this._class();
            }
        };
        AllocateFactory.prototype.destroy = function () {
            this._args.length = 0;
            this._parent = null;
            this._class = null;
            this._args = null;
            this.destroyed = true;
        };
        return AllocateFactory;
    })();
    Avota.AllocateFactory = AllocateFactory;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleMode = (function () {
        function ScaleMode() { }
        ScaleMode.FIXED = 0;
        ScaleMode.SHOW_ALL = 1;
        ScaleMode.SHOW_ALL_MAX = 2;
        ScaleMode.EXACT_FIT = 3;
        return ScaleMode;
    })();
    Avota.ScaleMode = ScaleMode;    
    var GameSettings = (function () {
        function GameSettings(game, params) {
            this.destroyed = false;
            this._game = game;
            this._setDefaults();
            if(params) {
                this.setParams(params);
            }
        }
        GameSettings.DEFAULT_WIDTH = 750;
        GameSettings.DEFAULT_HEIGHT = 500;
        GameSettings.DEFAULT_BGCOLOR = "#000000";
        GameSettings.DEFAULT_FILEFORMAT = "json";
        GameSettings.DEFAULT_AUDIOFORMAT = "auto";
        GameSettings.DEFAULT_TICKRATE = Avota.TimeManager.DEFAULT_TICKRATE;
        GameSettings.DEFAULT_GRIDSIZE = Avota.SpatialManager.DEFAULT_GRIDSIZE;
        GameSettings.DEFAULT_SCALEMODE = ScaleMode.SHOW_ALL;
        GameSettings.DEFAULT_PERFORMANCE = 2;
        GameSettings.DEFAULT_BROWSERSUPPORT = [
            {
                type: "MSIE",
                minVersion: 9
            }, 
            {
                type: "Chrome",
                minVersion: 29
            }, 
            {
                type: "Firefox",
                minVersion: 23
            }, 
            {
                type: "Safari",
                minVersion: 6
            }
        ];
        GameSettings.DEFAULT_STATSALPHA = .8;
        GameSettings.DEFAULT_STATSTYPE = Avota.Stats.MINIMAL;
        GameSettings.DEFAULT_STATSPOSITION = 9;
        GameSettings.prototype._setDefaults = function () {
            this.x = 0;
            this.y = 0;
            this.width = GameSettings.DEFAULT_WIDTH;
            this.height = GameSettings.DEFAULT_HEIGHT;
            this.bgColor = GameSettings.DEFAULT_BGCOLOR;
            this.tickRate = GameSettings.DEFAULT_TICKRATE;
            this.spatialGridSize = GameSettings.DEFAULT_GRIDSIZE;
            this.displayWidth = -1;
            this.displayHeight = -1;
            this.volume = 100;
            this.mute = false;
            this.autoInit = true;
            this.autoStartup = true;
            this.autoShutdown = true;
            this.autoDestroy = false;
            this.gameLoader = Avota.GameLoader;
            this.showLoader = true;
            this.scaleMode = GameSettings.DEFAULT_SCALEMODE;
            this.browserSupport = GameSettings.DEFAULT_BROWSERSUPPORT;
            this.debug = false;
            this.logLevel = Avota.Log.ALL;
            this.logFilters = [];
            this.major = 0;
            this.minor = 0;
            this.build = 1;
            this.parent = "";
            this.basePath = "";
            this.resourcePath = "";
            this.configPath = "";
            this.stringsPath = "";
            this.unsupportedOrientationImagePath = "";
            this.unsupportedCookiesImagePath = "";
            this.unsupportedBrowserImagePath = "";
            this.statsAlpha = GameSettings.DEFAULT_STATSALPHA;
            this.statsPosition = GameSettings.DEFAULT_STATSPOSITION;
            this.statsType = GameSettings.DEFAULT_STATSTYPE;
            this.fileFormat = GameSettings.DEFAULT_FILEFORMAT;
            this.audioFormat = GameSettings.DEFAULT_AUDIOFORMAT;
            this.minPerformance = GameSettings.DEFAULT_PERFORMANCE;
            this.gamePerformance = -1;
        };
        GameSettings.prototype.setParams = function (params) {
            for(var key in params) {
                this[key] = params[key];
            }
        };
        GameSettings.prototype.getSceneManager = function () {
            return (this._sceneManager) ? this._sceneManager : this._sceneManager = this._game.create(Avota.StateManager);
        };
        GameSettings.prototype.getResourceManager = function () {
            return (this._resourceManager) ? this._resourceManager : this._resourceManager = this._game.create(Avota.ResourceManager);
        };
        GameSettings.prototype.getSoundManager = function () {
            return (this._soundManager) ? this._soundManager : this._soundManager = this._game.create(Avota.SoundManager, this.getTimeManager(), this.audioFormat);
        };
        GameSettings.prototype.getInputManager = function () {
            return (this._inputManager) ? this._inputManager : this._inputManager = this._game.create(Avota.InputManager, this.getTimeManager(), this.getRenderManager());
        };
        GameSettings.prototype.getInputMap = function () {
            return (this._inputMap) ? this._inputMap : this._inputMap = this._game.create(Avota.InputMap, this.getInputManager());
        };
        GameSettings.prototype.getTimeManager = function () {
            return (this._timeManager) ? this._timeManager : this._timeManager = this._game.create(Avota.TimeManager, this.tickRate);
        };
        GameSettings.prototype.getTypeManager = function () {
            return (this._typeManager) ? this._typeManager : this._typeManager = this._game.create(Avota.BitMaskManager);
        };
        GameSettings.prototype.getSpatialManager = function () {
            return (this._spatialManager) ? this._spatialManager : this._spatialManager = this._game.create(Avota.SpatialManager, this.getTimeManager(), this.getTypeManager(), this.spatialGridSize);
        };
        GameSettings.prototype.getRenderManager = function () {
            return (this._renderManager) ? this._renderManager : this._renderManager = this._game.create(Avota.RenderManager, this.getTimeManager(), new Avota.Rectangle(this.x, this.y, this.width, this.height), this.getCanvas());
        };
        GameSettings.prototype.getCanvas = function () {
            return (this._renderCanvas) ? this._renderCanvas : this._renderCanvas = this._game.create(Avota.RenderCanvas, this.parent, this.width, this.height);
        };
        GameSettings.prototype.getObjectPool = function () {
            return (this._objectPool) ? this._objectPool : this._objectPool = this._game.create(Avota.ObjectPool);
        };
        GameSettings.prototype.getSharedData = function () {
            return (this._sharedData) ? this._sharedData : this._sharedData = this._game.create(Avota.SharedData);
        };
        GameSettings.prototype.destroy = function () {
            this._game = null;
            this._sceneManager = null;
            this._soundManager = null;
            this._resourceManager = null;
            this._inputManager = null;
            this._inputMap = null;
            this._timeManager = null;
            this._spatialManager = null;
            this._renderManager = null;
            this._renderCanvas = null;
            this._sharedData = null;
            this._objectPool = null;
            this.destroyed = true;
        };
        return GameSettings;
    })();
    Avota.GameSettings = GameSettings;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageGraphic = (function (_super) {
        __extends(ImageGraphic, _super);
        function ImageGraphic(timeManager, renderManager, image, name) {
            if (typeof name === "undefined") { name = ImageGraphic.NAME; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._image = image;
            if(this._timeManager && this._renderManager) {
                this._createRenderComponent();
            }
        }
        ImageGraphic.NAME = "ImageGraphic";
        Object.defineProperty(ImageGraphic.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "tint", {
            get: function () {
                return this._renderComponent.tint;
            },
            set: function (value) {
                this._renderComponent.tint = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "mask", {
            get: function () {
                return this._renderComponent.mask;
            },
            set: function (value) {
                this._renderComponent.mask = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "view", {
            get: function () {
                return this._renderComponent.view;
            },
            set: function (value) {
                this._renderComponent.view = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "blendMode", {
            get: function () {
                return this._renderComponent.compositeOperation;
            },
            set: function (value) {
                this._renderComponent.compositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "x", {
            get: function () {
                return this._renderComponent.x;
            },
            set: function (value) {
                this._renderComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "y", {
            get: function () {
                return this._renderComponent.y;
            },
            set: function (value) {
                this._renderComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "rotation", {
            get: function () {
                return this._renderComponent.rotation;
            },
            set: function (value) {
                this._renderComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "centerX", {
            get: function () {
                return this._renderComponent.centerX;
            },
            set: function (value) {
                this._renderComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "centerY", {
            get: function () {
                return this._renderComponent.centerY;
            },
            set: function (value) {
                this._renderComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "top", {
            get: function () {
                return this._renderComponent.top;
            },
            set: function (value) {
                this._renderComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "left", {
            get: function () {
                return this._renderComponent.left;
            },
            set: function (value) {
                this._renderComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "right", {
            get: function () {
                return this._renderComponent.right;
            },
            set: function (value) {
                this._renderComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "bottom", {
            get: function () {
                return this._renderComponent.bottom;
            },
            set: function (value) {
                this._renderComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "halfWidth", {
            get: function () {
                return this._renderComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "halfHeight", {
            get: function () {
                return this._renderComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "center", {
            get: function () {
                return this._renderComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "position", {
            get: function () {
                return this._renderComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "extents", {
            get: function () {
                return this._renderComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageGraphic.prototype, "_worldTransform", {
            get: function () {
                return this._renderComponent._worldTransform;
            },
            enumerable: true,
            configurable: true
        });
        ImageGraphic.prototype._createRenderComponent = function () {
            this._renderComponent = this.create(Avota.RenderComponent, this._timeManager, this._renderManager, this._image);
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
        };
        ImageGraphic.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        ImageGraphic.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        ImageGraphic.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        ImageGraphic.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        ImageGraphic.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        ImageGraphic.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        ImageGraphic.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        ImageGraphic.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._image = null;
            this._renderComponent = null;
            this._renderManager = null;
        };
        return ImageGraphic;
    })(Avota.GameEntity);
    Avota.ImageGraphic = ImageGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AnimatedGraphic = (function (_super) {
        __extends(AnimatedGraphic, _super);
        function AnimatedGraphic(timeManager, renderManager, spriteSheet, name) {
            if (typeof name === "undefined") { name = AnimatedGraphic.NAME; }
                _super.call(this, timeManager, renderManager, null, name);
            this._animationInfo = {
            };
            if(this._timeManager && this._renderManager) {
                this._createAnimationComponent();
            }
            if(spriteSheet) {
                this.addSpriteSheet(spriteSheet, true);
            }
        }
        AnimatedGraphic.NAME = "AnimatedGraphic";
        Object.defineProperty(AnimatedGraphic.prototype, "currentAnimation", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedGraphic.prototype, "isAnimating", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.isAnimating;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedGraphic.prototype, "totalFrames", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedGraphic.prototype, "repeatCount", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.repeatCount;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.repeatCount = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedGraphic.prototype, "duration", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.duration;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.duration = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedGraphic.prototype, "frameIndex", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.frameIndex;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.frameIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        AnimatedGraphic.prototype._createRenderComponent = function () {
            this._spriteSheetRenderComponent = this.create(Avota.SpriteSheetRenderComponent, this._timeManager, this._renderManager);
            this._renderComponent = this._spriteSheetRenderComponent;
            this.addComponent(this._spriteSheetRenderComponent, Avota.EngineConstants.RENDER);
        };
        AnimatedGraphic.prototype._createAnimationComponent = function () {
            this._spriteSheetAnimationComponent = this.create(Avota.SpriteSheetAnimationComponent, this._timeManager, this._spriteSheetRenderComponent);
            this.addComponent(this._spriteSheetAnimationComponent, Avota.EngineConstants.ANIMATION);
        };
        AnimatedGraphic.prototype.addSpriteSheet = function (spriteSheet, switchToSpriteSheet) {
            if (typeof switchToSpriteSheet === "undefined") { switchToSpriteSheet = false; }
            return this._spriteSheetRenderComponent.addSpriteSheet(spriteSheet, switchToSpriteSheet);
        };
        AnimatedGraphic.prototype.getSpriteSheet = function (name) {
            return this._spriteSheetRenderComponent.getSpriteSheet(name);
        };
        AnimatedGraphic.prototype.removeSpriteSheet = function (name) {
            this._spriteSheetRenderComponent.removeSpriteSheet(name);
        };
        AnimatedGraphic.prototype.addAnimation = function (animationName, spriteSheetName, framesPrefix, duration, repeatCount) {
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof repeatCount === "undefined") { repeatCount = Avota.SpriteSheetAnimation.PLAY_ONCE; }
            this._animationInfo[animationName] = spriteSheetName;
            var frameData;
            var spriteSheet = this.getSpriteSheet(spriteSheetName);
            if(spriteSheet) {
                frameData = spriteSheet.getFrames(framesPrefix);
            }
            this._spriteSheetAnimationComponent.addAnimation(animationName, frameData, duration, repeatCount);
        };
        AnimatedGraphic.prototype.getAnimation = function (name) {
            return this._spriteSheetAnimationComponent.getAnimation(name);
        };
        AnimatedGraphic.prototype.removeAnimation = function (name) {
            this._spriteSheetAnimationComponent.removeAnimation(name);
        };
        AnimatedGraphic.prototype.setFrame = function (value) {
            this._spriteSheetRenderComponent.setFrame(value);
        };
        AnimatedGraphic.prototype.play = function (name, repeatCount, startFrame, onComplete, onRepeat) {
            if (typeof name === "undefined") { name = Avota.SpriteSheetAnimation.NAME; }
            if (typeof repeatCount === "undefined") { repeatCount = Number.MIN_VALUE; }
            if (typeof startFrame === "undefined") { startFrame = 0; }
            var spriteSheetName = this._animationInfo[name];
            if(spriteSheetName) {
                this._spriteSheetRenderComponent.setSpriteSheet(spriteSheetName);
            }
            if(startFrame == Avota.SpriteSheetAnimation.FRAME_CURRENT && this.currentAnimation) {
                startFrame = this.currentAnimation.frameIndex;
            }
            if(startFrame == Avota.SpriteSheetAnimation.FRAME_RANDOM) {
                startFrame = Avota.Random.integer(1, this._spriteSheetAnimationComponent.getAnimation(name).totalFrames - 1);
            }
            this._spriteSheetAnimationComponent.play(name, repeatCount, startFrame, onComplete, onRepeat);
            this._offset = this._spriteSheetAnimationComponent.currentAnimation.frames[0].offset;
            this._spriteSheetRenderComponent.width = this._offset.width;
            this._spriteSheetRenderComponent.height = this._offset.height;
            this._spriteSheetRenderComponent.registrationX = this._offset.width / 2;
            this._spriteSheetRenderComponent.registrationY = this._offset.height / 2;
        };
        AnimatedGraphic.prototype.pause = function () {
            this._spriteSheetAnimationComponent.pause();
        };
        AnimatedGraphic.prototype.suspend = function () {
            this._spriteSheetAnimationComponent.suspend();
        };
        AnimatedGraphic.prototype.resume = function () {
            this._spriteSheetAnimationComponent.resume();
        };
        AnimatedGraphic.prototype.restart = function () {
            this._spriteSheetAnimationComponent.restart();
        };
        AnimatedGraphic.prototype.stop = function () {
            this._spriteSheetAnimationComponent.stop();
        };
        AnimatedGraphic.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for(var key in this._animationInfo) {
                this._animationInfo[key] = null;
                delete this._animationInfo[key];
            }
            this._spriteSheetRenderComponent = null;
            this._spriteSheetAnimationComponent = null;
            this._animationInfo = null;
            this._offset = null;
        };
        return AnimatedGraphic;
    })(Avota.ImageGraphic);
    Avota.AnimatedGraphic = AnimatedGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var HTMLGraphic = (function (_super) {
        __extends(HTMLGraphic, _super);
        function HTMLGraphic(timeManager, renderManager, element, name, absolutePositioning, useGamePosition, useSimpleRenderComponent) {
            if (typeof name === "undefined") { name = HTMLGraphic.NAME; }
            if (typeof absolutePositioning === "undefined") { absolutePositioning = true; }
            if (typeof useGamePosition === "undefined") { useGamePosition = true; }
            if (typeof useSimpleRenderComponent === "undefined") { useSimpleRenderComponent = true; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._element = (Avota.ObjectUtil.isString(element)) ? document.getElementById(element) : element;
            if(this._timeManager && this._renderManager) {
                this._createRenderComponent(absolutePositioning, useGamePosition, useSimpleRenderComponent);
            }
        }
        HTMLGraphic.NAME = "HTMLGraphic";
        Object.defineProperty(HTMLGraphic.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "style", {
            get: function () {
                return this._renderComponent.style;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "absolutePositioning", {
            get: function () {
                return this._renderComponent.absolutePositioning;
            },
            set: function (value) {
                this._renderComponent.absolutePositioning = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "view", {
            get: function () {
                return this._renderComponent.view;
            },
            set: function (value) {
                this._renderComponent.view = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "x", {
            get: function () {
                return this._renderComponent.x;
            },
            set: function (value) {
                this._renderComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "y", {
            get: function () {
                return this._renderComponent.y;
            },
            set: function (value) {
                this._renderComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "rotation", {
            get: function () {
                return this._renderComponent.rotation;
            },
            set: function (value) {
                this._renderComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "centerX", {
            get: function () {
                return this._renderComponent.centerX;
            },
            set: function (value) {
                this._renderComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "centerY", {
            get: function () {
                return this._renderComponent.centerY;
            },
            set: function (value) {
                this._renderComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "top", {
            get: function () {
                return this._renderComponent.top;
            },
            set: function (value) {
                this._renderComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "left", {
            get: function () {
                return this._renderComponent.left;
            },
            set: function (value) {
                this._renderComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "right", {
            get: function () {
                return this._renderComponent.right;
            },
            set: function (value) {
                this._renderComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "bottom", {
            get: function () {
                return this._renderComponent.bottom;
            },
            set: function (value) {
                this._renderComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "halfWidth", {
            get: function () {
                return this._renderComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "halfHeight", {
            get: function () {
                return this._renderComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "center", {
            get: function () {
                return this._renderComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "position", {
            get: function () {
                return this._renderComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "extents", {
            get: function () {
                return this._renderComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HTMLGraphic.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        HTMLGraphic.prototype._createRenderComponent = function (absolutePositioning, useGamePosition, useSimpleRenderComponent) {
            if (typeof absolutePositioning === "undefined") { absolutePositioning = true; }
            if (typeof useGamePosition === "undefined") { useGamePosition = true; }
            if (typeof useSimpleRenderComponent === "undefined") { useSimpleRenderComponent = false; }
            this._renderComponent = ((useSimpleRenderComponent) ? this.create(Avota.SimpleDOMRenderComponent, this._timeManager, this._renderManager, this._element, absolutePositioning, useGamePosition) : this.create(Avota.DOMRenderComponent, this._timeManager, this._renderManager, this._element, absolutePositioning, useGamePosition));
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
        };
        HTMLGraphic.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        HTMLGraphic.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        HTMLGraphic.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        HTMLGraphic.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        HTMLGraphic.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        HTMLGraphic.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        HTMLGraphic.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        HTMLGraphic.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._element = null;
            this._renderComponent = null;
            this._renderManager = null;
        };
        return HTMLGraphic;
    })(Avota.GameEntity);
    Avota.HTMLGraphic = HTMLGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ShapeGraphic = (function (_super) {
        __extends(ShapeGraphic, _super);
        function ShapeGraphic(timeManager, renderManager, width, height, color, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = ShapeGraphic.NAME; }
                _super.call(this, timeManager, renderManager, width, height, name);
            this._color = color;
            this._dirty = true;
            this._stroke = false;
            this.enableOnTick();
        }
        ShapeGraphic.NAME = "ShapeGraphic";
        Object.defineProperty(ShapeGraphic.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeGraphic.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeGraphic.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeGraphic.prototype, "strokeStyle", {
            set: function (value) {
                this._renderContext.strokeStyle = value;
                this._stroke = true;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeGraphic.prototype, "lineWidth", {
            set: function (value) {
                this._renderContext.lineWidth = value;
                this._stroke = true;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        ShapeGraphic.prototype.onTick = function (delta) {
            if(!this._dirty) {
                return;
            }
            this._draw();
        };
        ShapeGraphic.prototype._draw = function () {
            if(this._stroke) {
                this.stroke();
            }
            this._dirty = false;
        };
        return ShapeGraphic;
    })(Avota.CanvasGraphic);
    Avota.ShapeGraphic = ShapeGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DotGraphic = (function (_super) {
        __extends(DotGraphic, _super);
        function DotGraphic(timeManager, renderManager, radius, color, useGradient, name) {
            if (typeof radius === "undefined") { radius = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof useGradient === "undefined") { useGradient = false; }
            if (typeof name === "undefined") { name = DotGraphic.NAME; }
                _super.call(this, timeManager, renderManager, radius, radius, color, name);
            this._useGradient = useGradient;
        }
        DotGraphic.NAME = "DotGraphic";
        Object.defineProperty(DotGraphic.prototype, "radius", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DotGraphic.prototype, "useGradient", {
            get: function () {
                return this._useGradient;
            },
            set: function (value) {
                this._useGradient = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        DotGraphic.prototype._draw = function () {
            this.clear();
            if(this._useGradient) {
                var div = document.createElement("div");
                div.style.color = this.color;
                var colors = div.style.color.split(",");
                var gradient = this._renderContext.createRadialGradient(this.radius / 2, this.radius / 2, 0, this.radius / 2, this.radius / 2, this.radius / 2);
                gradient.addColorStop(0, this.color);
                gradient.addColorStop(1, "rgba(" + colors[0].replace(/[^\d.]/g, "") + "," + colors[1].replace(/[^\d.]/g, "") + "," + colors[2].replace(/[^\d.]/g, "") + ",0)");
                this.fillStyle = gradient;
            } else {
                this.fillStyle = this.color;
            }
            this.beginPath();
            this.moveTo(this.radius / 2, this.radius / 2);
            this.arc(this.radius / 2, this.radius / 2, this.radius / 2, 0, Math.PI * 2);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return DotGraphic;
    })(Avota.ShapeGraphic);
    Avota.DotGraphic = DotGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RectGraphic = (function (_super) {
        __extends(RectGraphic, _super);
        function RectGraphic(timeManager, renderManager, width, height, color, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = RectGraphic.NAME; }
                _super.call(this, timeManager, renderManager, width, height, color, name);
        }
        RectGraphic.NAME = "RectGraphic";
        RectGraphic.prototype._draw = function () {
            this.fillStyle = this.color;
            this.beginPath();
            this.rect(0, 0, this._renderComponent._width, this._renderComponent._height);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return RectGraphic;
    })(Avota.ShapeGraphic);
    Avota.RectGraphic = RectGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SparkleGraphic = (function (_super) {
        __extends(SparkleGraphic, _super);
        function SparkleGraphic(timeManager, renderManager, radius, color, useCircle, name) {
            if (typeof radius === "undefined") { radius = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof useCircle === "undefined") { useCircle = true; }
            if (typeof name === "undefined") { name = SparkleGraphic.NAME; }
                _super.call(this, timeManager, renderManager, radius, radius, color, name);
            this._useCircle = useCircle;
        }
        SparkleGraphic.NAME = "SparkleGraphic";
        Object.defineProperty(SparkleGraphic.prototype, "radius", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SparkleGraphic.prototype, "useCircle", {
            get: function () {
                return this._useCircle;
            },
            set: function (value) {
                this._useCircle = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        SparkleGraphic.prototype._draw = function () {
            this.beginPath();
            this.strokeStyle = this.color;
            this.moveTo(this.radius / 2, 0);
            this.lineTo(this.radius / 2, this.radius);
            this.moveTo(0, this.radius / 2);
            this.lineTo(this.radius, this.radius / 2);
            this.closePath();
            this.lineWidth = 1;
            this.stroke();
            if(this.useCircle) {
                var gradient = this.createRadialGradient(this.radius / 2, this.radius / 2, 1, this.radius / 2, this.radius / 2, this.radius / 2);
                gradient.addColorStop(0.0, 'rgba(255,255,255,1)');
                gradient.addColorStop(0.4, 'rgba(255,255,255,.6)');
                gradient.addColorStop(1.0, 'rgba(255,255,255,0)');
                this.fillStyle = gradient;
                this.arc(this.radius / 2, this.radius / 2, this.radius / 4, 0, Math.PI * 2);
                this.fill();
            }
            _super.prototype._draw.call(this);
        };
        return SparkleGraphic;
    })(Avota.ShapeGraphic);
    Avota.SparkleGraphic = SparkleGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StarGraphic = (function (_super) {
        __extends(StarGraphic, _super);
        function StarGraphic(timeManager, renderManager, numPoints, outerRadius, innerRadius, color, name) {
            if (typeof numPoints === "undefined") { numPoints = 5; }
            if (typeof outerRadius === "undefined") { outerRadius = 100; }
            if (typeof innerRadius === "undefined") { innerRadius = 40; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = StarGraphic.NAME; }
                _super.call(this, timeManager, renderManager, outerRadius, outerRadius, color, name);
            this._numPoints = numPoints;
            this._outerRadius = outerRadius;
            this._innerRadius = innerRadius;
        }
        StarGraphic.NAME = "StarGraphic";
        Object.defineProperty(StarGraphic.prototype, "numPoints", {
            get: function () {
                return this._numPoints;
            },
            set: function (value) {
                this._numPoints = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StarGraphic.prototype, "outerRadius", {
            get: function () {
                return this._outerRadius;
            },
            set: function (value) {
                this._outerRadius = value;
                this._renderComponent.width = value;
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StarGraphic.prototype, "innerRadius", {
            get: function () {
                return this._innerRadius;
            },
            set: function (value) {
                this._innerRadius = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        StarGraphic.prototype._draw = function () {
            var x;
            var y;
            var rot = Math.PI / 2 * 3;
            var step = Math.PI / this._numPoints;
            var or = this._outerRadius / 2;
            var ir = this._innerRadius / 2;
            this.fillStyle = this.color;
            this.beginPath();
            this.moveTo(this.halfWidth, this.halfHeight - or);
            for(var i = 0; i < this._numPoints; i++) {
                x = this.halfWidth + Math.cos(rot) * or;
                y = this.halfHeight + Math.sin(rot) * or;
                this.lineTo(x, y);
                rot += step;
                x = this.halfWidth + Math.cos(rot) * ir;
                y = this.halfHeight + Math.sin(rot) * ir;
                this.lineTo(x, y);
                rot += step;
            }
            this.lineTo(this.halfWidth, this.halfHeight - or);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return StarGraphic;
    })(Avota.ShapeGraphic);
    Avota.StarGraphic = StarGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TriangleGraphic = (function (_super) {
        __extends(TriangleGraphic, _super);
        function TriangleGraphic(timeManager, renderManager, width, height, color, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 85; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = TriangleGraphic.NAME; }
                _super.call(this, timeManager, renderManager, width, height, color, name);
        }
        TriangleGraphic.NAME = "TriangleGraphic";
        TriangleGraphic.prototype._draw = function () {
            this.fillStyle = this.color;
            this.beginPath();
            this.moveTo(this.width / 2, 0);
            this.lineTo(this.width, this.height);
            this.lineTo(0, this.height);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return TriangleGraphic;
    })(Avota.ShapeGraphic);
    Avota.TriangleGraphic = TriangleGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SingleFrameGraphic = (function (_super) {
        __extends(SingleFrameGraphic, _super);
        function SingleFrameGraphic(timeManager, renderManager, spriteSheet, frame, name) {
            if (typeof frame === "undefined") { frame = 0; }
            if (typeof name === "undefined") { name = SingleFrameGraphic.NAME; }
                _super.call(this, timeManager, renderManager, spriteSheet, name);
            this.setFrame(frame);
        }
        SingleFrameGraphic.NAME = "SingleFrameGraphic";
        SingleFrameGraphic.prototype.setFrame = function (value) {
            this._spriteSheetRenderComponent.setFrame(value);
        };
        return SingleFrameGraphic;
    })(Avota.AnimatedGraphic);
    Avota.SingleFrameGraphic = SingleFrameGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StateEntity = (function (_super) {
        __extends(StateEntity, _super);
        function StateEntity(name, destroyOnExit) {
            if (typeof destroyOnExit === "undefined") { destroyOnExit = true; }
                _super.call(this, name, destroyOnExit);
            this._components = {
            };
        }
        StateEntity.prototype.addComponent = function (component, name) {
            if(component.owner || this._components[name]) {
                if(LOGGING) {
                    this._log.warn(name + " is already registered with " + component.owner.name);
                }
                return;
            }
            this._components[name] = component;
            component.register(this, name);
            this._resetComponents();
        };
        StateEntity.prototype.removeComponent = function (component) {
            if(!component || component.owner != this || !this._components[component.name]) {
                if(LOGGING) {
                    this._log.warn(component.name + " is not registered with this entity");
                }
                return;
            }
            this._components[component.name] = null;
            delete this._components[component.name];
            component.unregister();
            this._resetComponents();
        };
        StateEntity.prototype.removeComponentByName = function (name) {
            var component = this.getComponent(name);
            if(!component || component.owner != this || !this._components[component.name]) {
                if(LOGGING) {
                    this._log.warn(component.name + " is not registered with this entity");
                }
                return;
            }
            this._components[component.name] = null;
            delete this._components[component.name];
            component.unregister();
            this._resetComponents();
        };
        StateEntity.prototype.getComponent = function (name) {
            return this._components[name];
        };
        StateEntity.prototype.getComponentByType = function (type) {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(component instanceof type) {
                    return component;
                }
            }
            return null;
        };
        StateEntity.prototype.getComponentsByType = function (type) {
            var component;
            var results = [];
            for(var key in this._components) {
                component = this._components[key];
                if(component instanceof type) {
                    results.push(component);
                }
            }
            return results;
        };
        StateEntity.prototype.getComponents = function () {
            var results = [];
            for(var key in this._components) {
                results.push(this._components[key]);
            }
            return results;
        };
        StateEntity.prototype._registerComponents = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(!component.isRegistered) {
                    component.register(this, component.name);
                }
            }
            this._resetComponents();
        };
        StateEntity.prototype._resetComponents = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                component.reset();
            }
        };
        StateEntity.prototype.destroy = function () {
            var component;
            for(var key in this._components) {
                component = this._components[key];
                if(component && !component.destroyed) {
                    component.destroy();
                }
                this._components[key] = null;
                delete this._components[key];
            }
            this._components = null;
            _super.prototype.destroy.call(this);
        };
        return StateEntity;
    })(Avota.StateElement);
    Avota.StateEntity = StateEntity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameScene = (function (_super) {
        __extends(GameScene, _super);
        function GameScene(game, name, config, destroyOnExit) {
            if (typeof name === "undefined") { name = GameScene.NAME; }
            if (typeof destroyOnExit === "undefined") { destroyOnExit = true; }
                _super.call(this, name, destroyOnExit);
            this._game = game;
            this._config = (config) ? JSON.parse(JSON.stringify(config)) : null;
            this.pauseSignal = new Avota.Signal();
            this.suspendSignal = new Avota.Signal();
            this.resumeSignal = new Avota.Signal();
            this._resetRenderManager = true;
            this._resetSpatialManager = true;
            this.enteredSignal.add(this._onEnterScene, this);
            this.exitedSignal.add(this._onExitScene, this);
        }
        GameScene.NAME = "GameScene";
        Object.defineProperty(GameScene.prototype, "config", {
            get: function () {
                return this._config;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "strings", {
            get: function () {
                return this._strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "globalConfig", {
            get: function () {
                return this._game.config;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "globalStrings", {
            get: function () {
                return this._game.strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "timeManager", {
            get: function () {
                return this._timeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "globalTimeManager", {
            get: function () {
                return this._game.timeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "sceneManager", {
            get: function () {
                return this._game.sceneManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "resourceManager", {
            get: function () {
                return this._game.resourceManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "soundManager", {
            get: function () {
                return this._game.soundManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "objectPool", {
            get: function () {
                return this._game.objectPool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "sharedData", {
            get: function () {
                return this._game.sharedData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "typeManager", {
            get: function () {
                return this._game.typeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "inputManager", {
            get: function () {
                return this._game.inputManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "inputMap", {
            get: function () {
                return this._game.inputMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "spatialManager", {
            get: function () {
                return this._game.spatialManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "renderManager", {
            get: function () {
                return this._game.renderManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "camera", {
            get: function () {
                return this._game.renderManager.camera;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "screenCenterX", {
            get: function () {
                return this._game.width / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "screenCenterY", {
            get: function () {
                return this._game.height / 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "screenWidth", {
            get: function () {
                return this._game.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameScene.prototype, "screenHeight", {
            get: function () {
                return this._game.height;
            },
            enumerable: true,
            configurable: true
        });
        GameScene.prototype._onCreate = function () {
            _super.prototype._onCreate.call(this);
            this._timeManager = this.globalTimeManager.getTimeManager(this.name + Avota.TimeManager.NAME, -1, this._tickRate);
        };
        GameScene.prototype._onEnterScene = function () {
            var _this = this;
            self.focus();
            this.inputMap.mapActionToHandler("pause", function (value) {
                return _this.pause(value);
            });
            this._timeManager.addTickedObject(this, 0);
            this._timeManager.start();
            if(LOGGING) {
                this._log.mark(this.name + " Entered");
            }
        };
        GameScene.prototype._onExitScene = function () {
            this.inputMap.unmapAction("pause");
            this._timeManager.removeTickedObject(this);
            this._timeManager.stop();
            if(this._resetSpatialManager) {
                this.spatialManager.reset();
            }
            if(this._resetRenderManager) {
                this.renderManager.reset();
            }
            if(LOGGING) {
                this._log.mark(this.name + " Exited");
            }
        };
        GameScene.prototype.onTick = function (delta) {
        };
        GameScene.prototype.setScene = function (scene) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            this._game.setScene.apply(this._game, [
                scene
            ].concat(args));
        };
        GameScene.prototype.getAsset = function (assetName, node) {
            if (typeof node === "undefined") { node = this._game.config.resources; }
            return this._game.getAsset(assetName, node);
        };
        GameScene.prototype.pause = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1) {
                if(this._timeManager.isRunning) {
                    this._timeManager.stop();
                    TweenMax.pauseAll();
                    this.suspendSignal.dispatch();
                    this.pauseSignal.dispatch(true);
                } else {
                    this._timeManager.start();
                    TweenMax.resumeAll();
                    this.resumeSignal.dispatch();
                    this.pauseSignal.dispatch(false);
                }
                if(LOGGING) {
                    this._log.info("Pause");
                    this._log.mark("Pause");
                }
            }
        };
        GameScene.prototype.resume = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1 && !this._timeManager.isRunning) {
                this._timeManager.start();
                TweenMax.resumeAll();
                this.resumeSignal.dispatch();
                this.pauseSignal.dispatch(false);
                if(LOGGING) {
                    this._log.info("Resume");
                    this._log.mark("Resume");
                }
            }
        };
        GameScene.prototype.suspend = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1 && this._timeManager.isRunning) {
                this._timeManager.stop();
                TweenMax.pauseAll();
                this.suspendSignal.dispatch();
                this.pauseSignal.dispatch(true);
                if(LOGGING) {
                    this._log.info("Suspend");
                    this._log.mark("Suspend");
                }
            }
        };
        GameScene.prototype.mute = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1) {
                this.soundManager.mute();
            }
        };
        GameScene.prototype.show = function (name) {
            (this.get(name)).visible = true;
        };
        GameScene.prototype.hide = function (name) {
            (this.get(name)).visible = false;
        };
        GameScene.prototype.transitionIn = function (color, duration, type, direction, position, delay, onComplete, onCompleteParams, ease) {
            if (typeof color === "undefined") { color = "#000000"; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof type === "undefined") { type = "circle"; }
            if (typeof direction === "undefined") { direction = "in"; }
            if (typeof position === "undefined") { position = null; }
            if (typeof delay === "undefined") { delay = 0; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof onCompleteParams === "undefined") { onCompleteParams = null; }
            if (typeof ease === "undefined") { ease = null; }
            var transition = new Avota.Transition(this._timeManager, this.renderManager, {
                color: color,
                width: this.screenWidth,
                height: this.screenHeight
            });
            transition.start({
                type: type,
                delay: delay,
                direction: direction,
                position: position,
                duration: duration,
                ease: ease || Sine.easeOut,
                onComplete: onComplete,
                onCompleteParams: onCompleteParams
            });
        };
        GameScene.prototype.transitionOut = function (color, duration, type, direction, position, delay, onComplete, onCompleteParams, ease) {
            if (typeof color === "undefined") { color = "#000000"; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof type === "undefined") { type = "circle"; }
            if (typeof direction === "undefined") { direction = "out"; }
            if (typeof position === "undefined") { position = null; }
            if (typeof delay === "undefined") { delay = 0; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof onCompleteParams === "undefined") { onCompleteParams = null; }
            if (typeof ease === "undefined") { ease = null; }
            var transition = new Avota.Transition(this._timeManager, this.renderManager, {
                color: color,
                width: this.screenWidth,
                height: this.screenHeight
            });
            transition.start({
                type: type,
                delay: delay,
                direction: direction,
                position: position,
                duration: duration,
                ease: ease || Sine.easeOut,
                onComplete: onComplete,
                onCompleteParams: onCompleteParams
            });
        };
        GameScene.prototype.killAllTweens = function () {
            var element;
            var elements = this.getAll();
            for(var i = 0; i < elements.length; i++) {
                element = elements[i];
                TweenMax.killTweensOf(element);
            }
            TweenMax.killTweensOf(this);
        };
        GameScene.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.globalTimeManager.releaseTimeManager(this._timeManager);
            this.pauseSignal.removeAll();
            this.resumeSignal.removeAll();
            this.suspendSignal.removeAll();
            this.pauseSignal = null;
            this.resumeSignal = null;
            this.suspendSignal = null;
            this._timeManager = null;
            this._config = null;
            this._game = null;
        };
        return GameScene;
    })(Avota.StateEntity);
    Avota.GameScene = GameScene;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Level = (function (_super) {
        __extends(Level, _super);
        function Level(game, name, config, destroyOnExit) {
            if (typeof name === "undefined") { name = Level.NAME; }
            if (typeof destroyOnExit === "undefined") { destroyOnExit = true; }
                _super.call(this, game, name, config, destroyOnExit);
        }
        Level.NAME = "Level";
        return Level;
    })(Avota.GameScene);
    Avota.Level = Level;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Screen = (function (_super) {
        __extends(Screen, _super);
        function Screen(game, name, config, strings, destroyOnExit) {
            if (typeof name === "undefined") { name = Screen.NAME; }
            if (typeof destroyOnExit === "undefined") { destroyOnExit = true; }
                _super.call(this, game, name, config, destroyOnExit);
            this._strings = (strings) ? JSON.parse(JSON.stringify(strings)) : null;
            this.buttonSignal = new Avota.Signal();
            this.enteredSignal.addOnce(this.onEnterScreen, this, -1);
        }
        Screen.NAME = "Screen";
        Screen.prototype.onEnterScreen = function () {
            if(this._strings) {
                this.localize(this._strings);
            }
            if(this.globalStrings && this.globalStrings.hasOwnProperty("buttons")) {
                this.localizeButtons(this.globalStrings.buttons);
            }
            this.soundManager.muteSignal.add(this._onMuted, this);
            this._onMuted();
            this.pauseSignal.add(this._onPaused, this);
        };
        Screen.prototype.loadResources = function (resourceList, node) {
            if (typeof node === "undefined") { node = this.globalConfig.resources; }
            this.resourceManager.progressSignal.add(this._onLoadingProgress, this);
            this.resourceManager.failedSignal.add(this._onLoadingFailed, this);
            this.resourceManager.completeSignal.addOnce(this._onLoadingComplete, this);
            if(this._progressBar) {
                this._progressBar.scaleX = 0;
            }
            var resourceInfo;
            for(var i = 0; i < resourceList.length; i++) {
                for(var n = 0; n < node.length; n++) {
                    if(node[n].name == resourceList[i]) {
                        resourceInfo = node[n];
                        break;
                    }
                }
                if(resourceInfo) {
                    var type = resourceInfo.path.substr(resourceInfo.path.lastIndexOf(".") + 1, 4);
                    if((type === "mp3" || type === "wav" || type === "ogg" || type === "aac") && this.soundManager.hasSound(resourceInfo.name)) {
                        continue;
                    }
                    if(!this.resourceManager.isLoaded(resourceInfo.path)) {
                        this.resourceManager.load(resourceInfo.path, resourceInfo.name);
                    }
                }
            }
            if(this.resourceManager.loadingCount == 0) {
                this._onLoadingComplete();
            }
        };
        Screen.prototype._onLoadingProgress = function (itemsLoaded, itemsTotal) {
            if(this._progressBar) {
                this._progressBar.scaleX = (itemsLoaded / itemsTotal);
            }
        };
        Screen.prototype._onLoadingFailed = function () {
        };
        Screen.prototype._onLoadingComplete = function () {
            this.resourceManager.progressSignal.remove(this._onLoadingProgress, this);
            this.resourceManager.failedSignal.remove(this._onLoadingFailed, this);
            this.resourceManager.completeSignal.remove(this._onLoadingComplete, this);
            if(this.globalConfig.hasOwnProperty("assets")) {
                this._game.registerAssets(this.globalConfig.assets);
            }
        };
        Screen.prototype.unloadResources = function (resourceList, node) {
            if (typeof node === "undefined") { node = this.globalConfig.resources; }
            this._game.unloadResources(resourceList, node);
        };
        Screen.prototype._buttonHandler = function (button, action, id) {
            switch(action) {
                case Avota.Button.UP:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_UP | " + button.name + "}");
                    }
                    break;
                case Avota.Button.OVER:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_OVER | " + button.name + "}");
                    }
                    break;
                case Avota.Button.OUT:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_OUT | " + button.name + "}");
                    }
                    break;
                case Avota.Button.DOWN:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_DOWN | " + button.name + "}");
                    }
                    break;
            }
            if(!this.destroyed) {
                this.buttonSignal.dispatch(button, action, id);
            }
        };
        Screen.prototype._onMuted = function (isMuted) {
            if (typeof isMuted === "undefined") { isMuted = false; }
        };
        Screen.prototype._onPaused = function (isPaused) {
            if (typeof isPaused === "undefined") { isPaused = false; }
        };
        Screen.prototype.enableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            if(Avota.ObjectUtil.isString(button)) {
                button = this.get(button);
            }
            button.inputUp.add(this._buttonHandler, this);
            button.inputOver.add(this._buttonHandler, this);
            button.inputDown.add(this._buttonHandler, this);
            button.inputOut.add(this._buttonHandler, this);
            button.enabled = true;
            button.visible = true;
            button.alpha = alpha;
            button.play(Avota.Button.UP);
        };
        Screen.prototype.disableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            if(Avota.ObjectUtil.isString(button)) {
                button = this.get(button);
            }
            button.inputUp.remove(this._buttonHandler, this);
            button.inputOver.remove(this._buttonHandler, this);
            button.inputDown.remove(this._buttonHandler, this);
            button.inputOut.remove(this._buttonHandler, this);
            button.enabled = false;
            button.alpha = alpha;
        };
        Screen.prototype.enableButtons = function (alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.enableButton(button, alpha);
            }
        };
        Screen.prototype.disableButtons = function (alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.disableButton(button, alpha);
            }
        };
        Screen.prototype.enableButtonSet = function (buttons, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(Avota.ObjectUtil.isString(button)) {
                    button = this.get(button);
                }
                if(!button) {
                    continue;
                }
                this.enableButton(button, alpha);
            }
        };
        Screen.prototype.disableButtonSet = function (buttons, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(Avota.ObjectUtil.isString(button)) {
                    button = this.get(button);
                }
                if(!button) {
                    continue;
                }
                this.disableButton(button, alpha);
            }
        };
        Screen.prototype.setLabel = function (name, value) {
            (this.get(name)).text = value;
        };
        Screen.prototype.toggleMute = function (muteOffChild, muteOnChild) {
            this.soundManager.mute();
            this.checkMute(muteOffChild, muteOnChild);
        };
        Screen.prototype.checkMute = function (muteOffChild, muteOnChild) {
            var muteOn = this.get(muteOnChild);
            var muteOff = this.get(muteOffChild);
            if(!muteOn || !muteOff) {
                return;
            }
            if(this.soundManager.isMuted) {
                muteOff.visible = true;
                muteOff.active = true;
                muteOn.visible = false;
                muteOn.active = false;
            } else {
                muteOn.visible = true;
                muteOn.active = true;
                muteOff.visible = false;
                muteOff.active = false;
            }
        };
        Screen.prototype.localizeButtons = function (node) {
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(buttons[i].name == node[j].name) {
                        buttons[i].textLabel.text = node[j].value;
                        if(node[j].style) {
                            buttons[i].textLabel.setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        Screen.prototype.localize = function (node) {
            this.localizeButtons(node);
            var textGraphics = this.getByType(Avota.TextGraphic);
            for(var i = 0, n = textGraphics.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(textGraphics[i].name == node[j].name) {
                        textGraphics[i].text = node[j].value;
                        if(node[j].style) {
                            textGraphics[i].setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        Screen.prototype.destroy = function () {
            this.killAllTweens();
            this.soundManager.muteSignal.remove(this._onMuted, this);
            this.buttonSignal.removeAll();
            this.buttonSignal = null;
            this._progressBar = null;
            this._strings = null;
            _super.prototype.destroy.call(this);
        };
        return Screen;
    })(Avota.GameScene);
    Avota.Screen = Screen;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Random = (function () {
        function Random(seed) {
            if (typeof seed === "undefined") { seed = this.__defaultSeed; }
            this.__defaultSeed = Random.count;
            this.seed = seed || Random.count++;
        }
        Random.count = Math.random() * 1000000000;
        Random._defaultSeed = Random.count;
        Random._seed = Random._defaultSeed;
        Object.defineProperty(Random, "defaultSeed", {
            get: function () {
                return Random._defaultSeed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random, "seed", {
            get: function () {
                return Random._seed;
            },
            set: function (value) {
                Random._seed = Random._defaultSeed = Math.abs(value);
            },
            enumerable: true,
            configurable: true
        });
        Random.integer = function integer(min, max) {
            if (typeof min === "undefined") { min = NaN; }
            if (typeof max === "undefined") { max = NaN; }
            if(isNaN(min)) {
                return Random.generate();
            }
            if(isNaN(max)) {
                max = min;
                min = 0;
            }
            max = ((max < min) ? min : max);
            min = ((max > min) ? min : max);
            return Math.floor(min + (((max + 1) - min) * Random.float()));
        };
        Random.float = function float(min, max) {
            if (typeof min === "undefined") { min = NaN; }
            if (typeof max === "undefined") { max = NaN; }
            if(isNaN(min)) {
                return Random.generate() / 2147483647;
            }
            if(isNaN(max)) {
                max = min;
                min = 0;
            }
            max = ((max < min) ? min : max);
            min = ((max > min) ? min : max);
            return min + ((max - min) * Random.float());
        };
        Random.boolean = function boolean(chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return Random.float() < chance;
        };
        Random.sign = function sign(chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return (Random.float() < chance) ? 1 : -1;
        };
        Random.bit = function bit(chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return (Random.float() < chance) ? 1 : 0;
        };
        Random.color = function color() {
            return Math.floor(Random.integer() * 0xFFFFFF);
        };
        Random.cssColor = function cssColor() {
            return "#" + Math.floor(Math.random() * 16777215).toString(16);
        };
        Random.reset = function reset() {
            Random._seed = Random._defaultSeed;
        };
        Random.generate = function generate() {
            return Random._seed = (Random._seed * 16807) % 2147483647;
        };
        Object.defineProperty(Random.prototype, "defaultSeed", {
            get: function () {
                return this.__defaultSeed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Random.prototype, "seed", {
            get: function () {
                return this.__seed;
            },
            set: function (value) {
                this.__seed = this.__defaultSeed = Math.abs(value);
            },
            enumerable: true,
            configurable: true
        });
        Random.prototype.integer = function (min, max) {
            if (typeof min === "undefined") { min = NaN; }
            if (typeof max === "undefined") { max = NaN; }
            if(isNaN(min)) {
                return this.generate();
            }
            if(isNaN(max)) {
                max = min;
                min = 0;
            }
            max = ((max < min) ? min : max);
            min = ((max > min) ? min : max);
            return Math.round(min + ((max - min) * this.float()));
        };
        Random.prototype.float = function (min, max) {
            if (typeof min === "undefined") { min = NaN; }
            if (typeof max === "undefined") { max = NaN; }
            if(isNaN(min)) {
                return this.generate() / 2147483647;
            }
            if(isNaN(max)) {
                max = min;
                min = 0;
            }
            max = ((max < min) ? min : max);
            min = ((max > min) ? min : max);
            return min + ((max - min) * this.float());
        };
        Random.prototype.boolean = function (chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return this.float() < chance;
        };
        Random.prototype.sign = function (chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return (this.float() < chance) ? 1 : -1;
        };
        Random.prototype.bit = function (chance) {
            if (typeof chance === "undefined") { chance = .5; }
            return (this.float() < chance) ? 1 : 0;
        };
        Random.prototype.color = function () {
            return Math.floor(this.integer() * 0xFFFFFF);
        };
        Random.prototype.cssColor = function () {
            return "#" + Math.floor(Math.random() * 16777215).toString(16);
        };
        Random.prototype.reset = function () {
            this.__seed = this.__defaultSeed;
        };
        Random.prototype.generate = function () {
            return this.__seed = (this.__seed * 16807) % 2147483647;
        };
        return Random;
    })();
    Avota.Random = Random;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageSprite = (function (_super) {
        __extends(ImageSprite, _super);
        function ImageSprite(timeManager, renderManager, spatialManager, image, name) {
            if (typeof name === "undefined") { name = ImageSprite.NAME; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._spatialManager = spatialManager;
            this._image = image;
            if(this._timeManager && this._renderManager) {
                this._createRenderComponent();
            }
            if(this._timeManager && this._spatialManager) {
                this._createSpatialComponent();
            }
        }
        ImageSprite.NAME = "ImageSprite";
        Object.defineProperty(ImageSprite.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "tint", {
            get: function () {
                return this._renderComponent.tint;
            },
            set: function (value) {
                this._renderComponent.tint = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "mask", {
            get: function () {
                return this._renderComponent.mask;
            },
            set: function (value) {
                this._renderComponent.mask = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "view", {
            get: function () {
                return this._renderComponent.view;
            },
            set: function (value) {
                this._renderComponent.view = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "active", {
            get: function () {
                return this._spatialComponent.active;
            },
            set: function (value) {
                this._spatialComponent.active = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "blendMode", {
            get: function () {
                return this._renderComponent.compositeOperation;
            },
            set: function (value) {
                this._renderComponent.compositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "x", {
            get: function () {
                return this._spatialComponent.x;
            },
            set: function (value) {
                this._spatialComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "y", {
            get: function () {
                return this._spatialComponent.y;
            },
            set: function (value) {
                this._spatialComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "width", {
            get: function () {
                return this._spatialComponent.width;
            },
            set: function (value) {
                this._spatialComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "height", {
            get: function () {
                return this._spatialComponent.height;
            },
            set: function (value) {
                this._spatialComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "rotation", {
            get: function () {
                return this._spatialComponent.rotation;
            },
            set: function (value) {
                this._spatialComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "centerX", {
            get: function () {
                return this._spatialComponent.centerX;
            },
            set: function (value) {
                this._spatialComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "centerY", {
            get: function () {
                return this._spatialComponent.centerY;
            },
            set: function (value) {
                this._spatialComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "top", {
            get: function () {
                return this._spatialComponent.top;
            },
            set: function (value) {
                this._spatialComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "left", {
            get: function () {
                return this._spatialComponent.left;
            },
            set: function (value) {
                this._spatialComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "right", {
            get: function () {
                return this._spatialComponent.right;
            },
            set: function (value) {
                this._spatialComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "bottom", {
            get: function () {
                return this._spatialComponent.bottom;
            },
            set: function (value) {
                this._spatialComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "type", {
            get: function () {
                return this._spatialComponent.type;
            },
            set: function (value) {
                this._spatialComponent.type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "velocityX", {
            get: function () {
                return this._spatialComponent.velocityX;
            },
            set: function (value) {
                this._spatialComponent.velocityX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "velocityY", {
            get: function () {
                return this._spatialComponent.velocityY;
            },
            set: function (value) {
                this._spatialComponent.velocityY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "angularVelocity", {
            get: function () {
                return this._spatialComponent.angularVelocity;
            },
            set: function (value) {
                this._spatialComponent.angularVelocity = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "halfWidth", {
            get: function () {
                return this._spatialComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "halfHeight", {
            get: function () {
                return this._spatialComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "center", {
            get: function () {
                return this._spatialComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "position", {
            get: function () {
                return this._spatialComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "extents", {
            get: function () {
                return this._spatialComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageSprite.prototype, "_worldTransform", {
            get: function () {
                return this._renderComponent._worldTransform;
            },
            enumerable: true,
            configurable: true
        });
        ImageSprite.prototype._createRenderComponent = function () {
            this._renderComponent = this.create(Avota.RenderComponent, this._timeManager, this._renderManager, this._image);
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
        };
        ImageSprite.prototype._createSpatialComponent = function () {
            this._spatialComponent = this.create(Avota.SpatialComponent, this._timeManager, this._spatialManager);
            if(this._renderComponent) {
                this._spatialComponent.width = this._renderComponent.width;
                this._spatialComponent.height = this._renderComponent.height;
            }
            this.addComponent(this._spatialComponent, Avota.EngineConstants.SPATIAL);
        };
        ImageSprite.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        ImageSprite.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        ImageSprite.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        ImageSprite.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        ImageSprite.prototype.setCollisionArea = function (width, height, offsetX, offsetY) {
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            this._spatialComponent.width = width;
            this._spatialComponent.height = height;
            this._renderComponent.offsetY = offsetY;
            this._renderComponent.offsetX = offsetX;
        };
        ImageSprite.prototype.setType = function (maskType) {
            this.type = this._spatialManager.typeManager.getBitMask(maskType);
        };
        ImageSprite.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        ImageSprite.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        ImageSprite.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        ImageSprite.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this._image = null;
            this._spatialComponent = null;
            this._renderComponent = null;
            this._spatialManager = null;
            this._renderManager = null;
        };
        return ImageSprite;
    })(Avota.GameEntity);
    Avota.ImageSprite = ImageSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AnimatedSprite = (function (_super) {
        __extends(AnimatedSprite, _super);
        function AnimatedSprite(timeManager, renderManager, spatialManager, spriteSheet, name) {
            if (typeof name === "undefined") { name = AnimatedSprite.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, null, name);
            this._animationInfo = {
            };
            if(this._timeManager && this._renderManager) {
                this._createAnimationComponent();
            }
            if(spriteSheet) {
                this.addSpriteSheet(spriteSheet, true);
            }
        }
        AnimatedSprite.NAME = "AnimatedSprite";
        Object.defineProperty(AnimatedSprite.prototype, "currentAnimation", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedSprite.prototype, "isAnimating", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.isAnimating;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedSprite.prototype, "totalFrames", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.totalFrames;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedSprite.prototype, "repeatCount", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.repeatCount;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.repeatCount = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedSprite.prototype, "duration", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.duration;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.duration = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimatedSprite.prototype, "frameIndex", {
            get: function () {
                return this._spriteSheetAnimationComponent.currentAnimation.frameIndex;
            },
            set: function (value) {
                this._spriteSheetAnimationComponent.currentAnimation.frameIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        AnimatedSprite.prototype._createRenderComponent = function () {
            this._spriteSheetRenderComponent = this.create(Avota.SpriteSheetRenderComponent, this._timeManager, this._renderManager);
            this._renderComponent = this._spriteSheetRenderComponent;
            this.addComponent(this._spriteSheetRenderComponent, Avota.EngineConstants.RENDER);
        };
        AnimatedSprite.prototype._createAnimationComponent = function () {
            this._spriteSheetAnimationComponent = this.create(Avota.SpriteSheetAnimationComponent, this._timeManager, this._spriteSheetRenderComponent);
            this.addComponent(this._spriteSheetAnimationComponent, Avota.EngineConstants.ANIMATION);
        };
        AnimatedSprite.prototype.addSpriteSheet = function (spriteSheet, switchToSpriteSheet) {
            if (typeof switchToSpriteSheet === "undefined") { switchToSpriteSheet = false; }
            return this._spriteSheetRenderComponent.addSpriteSheet(spriteSheet, switchToSpriteSheet);
        };
        AnimatedSprite.prototype.getSpriteSheet = function (name) {
            return this._spriteSheetRenderComponent.getSpriteSheet(name);
        };
        AnimatedSprite.prototype.removeSpriteSheet = function (name) {
            this._spriteSheetRenderComponent.removeSpriteSheet(name);
        };
        AnimatedSprite.prototype.addAnimation = function (animationName, spriteSheetName, framesPrefix, duration, repeatCount) {
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof repeatCount === "undefined") { repeatCount = Avota.SpriteSheetAnimation.PLAY_ONCE; }
            this._animationInfo[animationName] = spriteSheetName;
            var frameData;
            var spriteSheet = this.getSpriteSheet(spriteSheetName);
            if(spriteSheet) {
                frameData = spriteSheet.getFrames(framesPrefix);
            }
            this._spriteSheetAnimationComponent.addAnimation(animationName, frameData, duration, repeatCount);
        };
        AnimatedSprite.prototype.getAnimation = function (name) {
            return this._spriteSheetAnimationComponent.getAnimation(name);
        };
        AnimatedSprite.prototype.removeAnimation = function (name) {
            this._spriteSheetAnimationComponent.removeAnimation(name);
        };
        AnimatedSprite.prototype.setFrame = function (value) {
            this._spriteSheetRenderComponent.setFrame(value);
        };
        AnimatedSprite.prototype.play = function (name, repeatCount, startFrame, onComplete, onRepeat) {
            if (typeof name === "undefined") { name = Avota.SpriteSheetAnimation.NAME; }
            if (typeof repeatCount === "undefined") { repeatCount = Number.MIN_VALUE; }
            if (typeof startFrame === "undefined") { startFrame = 0; }
            var spriteSheetName = this._animationInfo[name];
            if(spriteSheetName) {
                this._spriteSheetRenderComponent.setSpriteSheet(spriteSheetName);
            }
            if(startFrame == Avota.SpriteSheetAnimation.FRAME_CURRENT && this.currentAnimation) {
                startFrame = this.currentAnimation.frameIndex;
            }
            if(startFrame == Avota.SpriteSheetAnimation.FRAME_RANDOM) {
                startFrame = Avota.Random.integer(1, this._spriteSheetAnimationComponent.getAnimation(name).totalFrames - 1);
            }
            this._spriteSheetAnimationComponent.play(name, repeatCount, startFrame, onComplete, onRepeat);
            this._offset = this._spriteSheetAnimationComponent.currentAnimation.frames[0].offset;
            this._spriteSheetRenderComponent.registrationX = this._offset.width / 2;
            this._spriteSheetRenderComponent.registrationY = this._offset.height / 2;
        };
        AnimatedSprite.prototype.pause = function () {
            this._spriteSheetAnimationComponent.pause();
        };
        AnimatedSprite.prototype.suspend = function () {
            this._spriteSheetAnimationComponent.suspend();
        };
        AnimatedSprite.prototype.resume = function () {
            this._spriteSheetAnimationComponent.resume();
        };
        AnimatedSprite.prototype.restart = function () {
            this._spriteSheetAnimationComponent.restart();
        };
        AnimatedSprite.prototype.stop = function () {
            this._spriteSheetAnimationComponent.stop();
        };
        AnimatedSprite.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            for(var key in this._animationInfo) {
                this._animationInfo[key] = null;
                delete this._animationInfo[key];
            }
            this._spriteSheetRenderComponent = null;
            this._spriteSheetAnimationComponent = null;
            this._animationInfo = null;
            this._offset = null;
        };
        return AnimatedSprite;
    })(Avota.ImageSprite);
    Avota.AnimatedSprite = AnimatedSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CanvasSprite = (function (_super) {
        __extends(CanvasSprite, _super);
        function CanvasSprite(timeManager, renderManager, spatialManager, width, height, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof name === "undefined") { name = Avota.ImageSprite.NAME; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._spatialManager = spatialManager;
            this._canvas = document.createElement('canvas');
            this._renderContext = this._canvas.getContext('2d');
            this._canvas.width = width;
            this._canvas.height = height;
            if(this._timeManager && this._renderManager) {
                this._createRenderComponent();
            }
            if(this._timeManager && this._spatialManager) {
                this._createSpatialComponent();
            }
        }
        CanvasSprite.NAME = "CanvasSprite";
        Object.defineProperty(CanvasSprite.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "tint", {
            get: function () {
                return this._renderComponent.tint;
            },
            set: function (value) {
                this._renderComponent.tint = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "mask", {
            get: function () {
                return this._renderComponent.mask;
            },
            set: function (value) {
                this._renderComponent.mask = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "view", {
            get: function () {
                return this._renderComponent.view;
            },
            set: function (value) {
                this._renderComponent.view = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "active", {
            get: function () {
                return this._spatialComponent.active;
            },
            set: function (value) {
                this._spatialComponent.active = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "blendMode", {
            get: function () {
                return this._renderComponent.compositeOperation;
            },
            set: function (value) {
                this._renderComponent.compositeOperation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "x", {
            get: function () {
                return this._spatialComponent.x;
            },
            set: function (value) {
                this._spatialComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "y", {
            get: function () {
                return this._spatialComponent.y;
            },
            set: function (value) {
                this._spatialComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "width", {
            get: function () {
                return this._spatialComponent.width;
            },
            set: function (value) {
                this._spatialComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "height", {
            get: function () {
                return this._spatialComponent.height;
            },
            set: function (value) {
                this._spatialComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "rotation", {
            get: function () {
                return this._spatialComponent.rotation;
            },
            set: function (value) {
                this._spatialComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "centerX", {
            get: function () {
                return this._spatialComponent.centerX;
            },
            set: function (value) {
                this._spatialComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "centerY", {
            get: function () {
                return this._spatialComponent.centerY;
            },
            set: function (value) {
                this._spatialComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "top", {
            get: function () {
                return this._spatialComponent.top;
            },
            set: function (value) {
                this._spatialComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "left", {
            get: function () {
                return this._spatialComponent.left;
            },
            set: function (value) {
                this._spatialComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "right", {
            get: function () {
                return this._spatialComponent.right;
            },
            set: function (value) {
                this._spatialComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "bottom", {
            get: function () {
                return this._spatialComponent.bottom;
            },
            set: function (value) {
                this._spatialComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "type", {
            get: function () {
                return this._spatialComponent.type;
            },
            set: function (value) {
                this._spatialComponent.type = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "velocityX", {
            get: function () {
                return this._spatialComponent.velocityX;
            },
            set: function (value) {
                this._spatialComponent.velocityX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "velocityY", {
            get: function () {
                return this._spatialComponent.velocityY;
            },
            set: function (value) {
                this._spatialComponent.velocityY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "angularVelocity", {
            get: function () {
                return this._spatialComponent.angularVelocity;
            },
            set: function (value) {
                this._spatialComponent.angularVelocity = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "halfWidth", {
            get: function () {
                return this._renderComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "halfHeight", {
            get: function () {
                return this._renderComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "center", {
            get: function () {
                return this._spatialComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "position", {
            get: function () {
                return this._spatialComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "extents", {
            get: function () {
                return this._spatialComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "_worldTransform", {
            get: function () {
                return this._renderComponent._worldTransform;
            },
            enumerable: true,
            configurable: true
        });
        CanvasSprite.prototype._createRenderComponent = function () {
            if(this._canvas == undefined) {
                return;
            }
            this._renderComponent = this.create(Avota.RenderComponent, this._timeManager, this._renderManager, this._canvas);
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
        };
        CanvasSprite.prototype._createSpatialComponent = function () {
            this._spatialComponent = this.create(Avota.SpatialComponent, this._timeManager, this._spatialManager);
            if(this._renderComponent) {
                this._spatialComponent.width = this._renderComponent.width;
                this._spatialComponent.height = this._renderComponent.height;
            }
            this.addComponent(this._spatialComponent, Avota.EngineConstants.SPATIAL);
        };
        CanvasSprite.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        CanvasSprite.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        CanvasSprite.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        CanvasSprite.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        CanvasSprite.prototype.setSize = function (width, height) {
            this.clear();
            this._renderComponent.width = width;
            this._renderComponent.height = height;
            this.view.width = width;
            this.view.height = height;
            this._spatialComponent.width = width;
            this._spatialComponent.height = height;
        };
        CanvasSprite.prototype.translateContext = function (x, y) {
            this._renderContext.translate(x, y);
        };
        CanvasSprite.prototype.rotateContext = function (r) {
            this._renderContext.rotate(r);
        };
        CanvasSprite.prototype.scaleContext = function (x, y) {
            this._renderContext.scale(x, y);
        };
        CanvasSprite.prototype.setTransform = function (a, b, c, d, tx, ty) {
            this._renderContext.setTransform(a, b, c, d, tx, ty);
        };
        CanvasSprite.prototype.drawImage = function (image, sx, sy, sw, sh, dx, dy, dw, dh) {
            this._renderContext.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.getImageData = function (x, y, width, height) {
            return this._renderContext.getImageData(x, y, width, height);
        };
        CanvasSprite.prototype.putImageData = function (imageData, x, y, dx, dy, dw, dh) {
            this._renderContext.putImageData(imageData, x, y, dx, dy, dw, dh);
        };
        CanvasSprite.prototype.createImageData = function (width, height) {
            return this._renderContext.createImageData(width, height);
        };
        Object.defineProperty(CanvasSprite.prototype, "fillStyle", {
            set: function (value) {
                this._renderContext.fillStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "strokeStyle", {
            set: function (value) {
                this._renderContext.strokeStyle = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CanvasSprite.prototype, "lineWidth", {
            set: function (value) {
                this._renderContext.lineWidth = value;
            },
            enumerable: true,
            configurable: true
        });
        CanvasSprite.prototype.font = function (value) {
            this._renderContext.font = value;
        };
        CanvasSprite.prototype.clip = function () {
            this._renderContext.clip();
        };
        CanvasSprite.prototype.beginPath = function () {
            this._renderContext.beginPath();
        };
        CanvasSprite.prototype.closePath = function () {
            this._renderContext.closePath();
        };
        CanvasSprite.prototype.rect = function (x, y, width, height) {
            this._renderContext.rect(x, y, width, height);
        };
        CanvasSprite.prototype.arc = function (x, y, radius, startAngle, endAngle, antiClockwise) {
            this._renderContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
        };
        CanvasSprite.prototype.moveTo = function (x, y) {
            this._renderContext.moveTo(x, y);
        };
        CanvasSprite.prototype.lineTo = function (x, y) {
            this._renderContext.lineTo(x, y);
        };
        CanvasSprite.prototype.arcTo = function (x1, y1, x2, y2, radius) {
            this._renderContext.arcTo(x1, y1, x2, y2, radius);
        };
        CanvasSprite.prototype.fill = function () {
            this._renderContext.fill();
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.fillRect = function (x, y, width, height) {
            this._renderContext.fillRect(x, y, width, height);
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.fillText = function (text, x, y, maxWidth) {
            this._renderContext.fillText(text, x, y, maxWidth);
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.stroke = function () {
            this._renderContext.stroke();
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.strokeRect = function (x, y, width, height) {
            this._renderContext.strokeRect(x, y, width, height);
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.strokeText = function (text, x, y, maxWidth) {
            this._renderContext.strokeText(text, x, y, maxWidth);
            this._renderManager._draws++;
        };
        CanvasSprite.prototype.clearRect = function (x, y, width, height) {
            this._renderContext.clearRect(x, y, width, height);
        };
        CanvasSprite.prototype.createLinearGradient = function (x1, y1, x2, y2) {
            this._renderContext.createLinearGradient(x1, y1, x2, y2);
        };
        CanvasSprite.prototype.createRadialGradient = function (x1, y1, r1, x2, y2, r2) {
            this._renderContext.createRadialGradient(x1, y1, r1, x2, y2, r2);
        };
        CanvasSprite.prototype.createPattern = function (image, repeat) {
            this._renderContext.createPattern(image, repeat);
        };
        CanvasSprite.prototype.clear = function () {
            this._renderContext.clearRect(0, 0, this.width, this.height);
        };
        CanvasSprite.prototype.setCollisionArea = function (width, height, offsetX, offsetY) {
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            this._spatialComponent.width = width;
            this._spatialComponent.height = height;
            this._renderComponent.offsetY = offsetY;
            this._renderComponent.offsetX = offsetX;
        };
        CanvasSprite.prototype.setType = function (maskType) {
            this.type = this._spatialManager.typeManager.getBitMask(maskType);
        };
        CanvasSprite.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        CanvasSprite.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        CanvasSprite.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        CanvasSprite.prototype.destroy = function () {
            this.clear();
            _super.prototype.destroy.call(this);
            this._canvas = null;
            this._renderContext = null;
            this._spatialComponent = null;
            this._renderComponent = null;
            this._spatialManager = null;
            this._renderManager = null;
        };
        return CanvasSprite;
    })(Avota.GameEntity);
    Avota.CanvasSprite = CanvasSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ShapeSprite = (function (_super) {
        __extends(ShapeSprite, _super);
        function ShapeSprite(timeManager, renderManager, spatialManager, width, height, color, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = ShapeSprite.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, width, height, name);
            this._color = color;
            this._dirty = true;
            this._draw();
            this.enableOnTick();
        }
        ShapeSprite.NAME = "ShapeSprite";
        Object.defineProperty(ShapeSprite.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeSprite.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShapeSprite.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        ShapeSprite.prototype.onTick = function (delta) {
            if(!this._dirty) {
                return;
            }
            this._draw();
        };
        ShapeSprite.prototype._draw = function () {
            this._dirty = false;
        };
        return ShapeSprite;
    })(Avota.CanvasSprite);
    Avota.ShapeSprite = ShapeSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DotSprite = (function (_super) {
        __extends(DotSprite, _super);
        function DotSprite(timeManager, renderManager, spatialManager, radius, color, useGradient, name) {
            if (typeof radius === "undefined") { radius = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof useGradient === "undefined") { useGradient = false; }
            if (typeof name === "undefined") { name = DotSprite.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, radius, radius, color, name);
            this._useGradient = useGradient;
        }
        DotSprite.NAME = "DotSprite";
        Object.defineProperty(DotSprite.prototype, "radius", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
                this._renderComponent.height = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DotSprite.prototype, "useGradient", {
            get: function () {
                return this._useGradient;
            },
            set: function (value) {
                this._useGradient = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        DotSprite.prototype._draw = function () {
            this.clear();
            if(this._useGradient) {
                var div = document.createElement("div");
                div.style.color = this.color;
                var colors = div.style.color.split(",");
                var gradient = this._renderContext.createRadialGradient(this.radius / 2, this.radius / 2, 0, this.radius / 2, this.radius / 2, this.radius / 2);
                gradient.addColorStop(0, this.color);
                gradient.addColorStop(1, "rgba(" + colors[0].replace(/[^\d.]/g, "") + "," + colors[1].replace(/[^\d.]/g, "") + "," + colors[2].replace(/[^\d.]/g, "") + ",0)");
                this.fillStyle = gradient;
            } else {
                this.fillStyle = this.color;
            }
            this.beginPath();
            this.moveTo(this.radius / 2, this.radius / 2);
            this.arc(this.radius / 2, this.radius / 2, this.radius / 2, 0, Math.PI * 2);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return DotSprite;
    })(Avota.ShapeSprite);
    Avota.DotSprite = DotSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RectSprite = (function (_super) {
        __extends(RectSprite, _super);
        function RectSprite(timeManager, renderManager, spatialManager, width, height, color, name) {
            if (typeof width === "undefined") { width = 100; }
            if (typeof height === "undefined") { height = 100; }
            if (typeof color === "undefined") { color = "rgba(255,255,255,1)"; }
            if (typeof name === "undefined") { name = Avota.RectGraphic.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, width, height, color, name);
        }
        RectSprite.NAME = "RectSprite";
        RectSprite.prototype._draw = function () {
            this.fillStyle = this.color;
            this.beginPath();
            this.rect(0, 0, this._renderComponent._width, this._renderComponent._height);
            this.closePath();
            this.fill();
            _super.prototype._draw.call(this);
        };
        return RectSprite;
    })(Avota.ShapeSprite);
    Avota.RectSprite = RectSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SingleFrameSprite = (function (_super) {
        __extends(SingleFrameSprite, _super);
        function SingleFrameSprite(timeManager, renderManager, spatialManager, spriteSheet, frame, name) {
            if (typeof frame === "undefined") { frame = 0; }
            if (typeof name === "undefined") { name = SingleFrameSprite.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, spriteSheet, name);
            this.setFrame(frame);
        }
        SingleFrameSprite.NAME = "SingleFrameSprite";
        SingleFrameSprite.prototype.setFrame = function (value) {
            this._spriteSheetRenderComponent.setFrame(value);
        };
        return SingleFrameSprite;
    })(Avota.AnimatedSprite);
    Avota.SingleFrameSprite = SingleFrameSprite;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TileCollisionComponent = (function (_super) {
        __extends(TileCollisionComponent, _super);
        function TileCollisionComponent(timeManager, typeManager, tileMap, componentReference) {
                _super.call(this, timeManager);
            this._typeManager = typeManager;
            if(tileMap) {
                this._tileMap = tileMap;
                this._tileWidth = this._tileMap.tileWidth;
                this._tileHeight = this._tileMap.tileHeight;
            }
            this.priority = -1;
            this.offsetX = 0;
            this.offsetY = 0;
            this._componentReference = componentReference;
            this.collisionSignal = new Avota.Signal();
            this._collisionOffsets = [];
            this.active = true;
        }
        TileCollisionComponent.TOP = 1;
        TileCollisionComponent.BOTTOM = 2;
        TileCollisionComponent.LEFT = 4;
        TileCollisionComponent.RIGHT = 8;
        Object.defineProperty(TileCollisionComponent.prototype, "spatialComponent", {
            get: function () {
                return this._spatialComponent;
            },
            set: function (value) {
                this._spatialComponent = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileCollisionComponent.prototype, "tileMap", {
            get: function () {
                return this._tileMap;
            },
            set: function (value) {
                this._tileMap = value;
                if(this._tileMap) {
                    this._tileWidth = this._tileMap.tileWidth;
                    this._tileHeight = this._tileMap.tileHeight;
                }
            },
            enumerable: true,
            configurable: true
        });
        TileCollisionComponent.prototype._onRegister = function () {
            this._spatialComponent = (this._componentReference) ? this._owner.getComponent(this._componentReference) : this._owner.getComponentByType(Avota.SpatialComponent);
            _super.prototype._onRegister.call(this);
        };
        TileCollisionComponent.prototype._onReset = function () {
            this._spatialComponent = (this._componentReference) ? this._owner.getComponent(this._componentReference) : this._owner.getComponentByType(Avota.SpatialComponent);
            _super.prototype._onReset.call(this);
        };
        TileCollisionComponent.prototype.addCollisionType = function (maskType) {
            if(!this._collisionsMask) {
                this._collisionsMask = this.create(Avota.BitMask, this._typeManager, "default");
                this._collisionsMask.name = "BitMask_CollisionsMask";
            }
            if(!this._collisionNames) {
                this._collisionTypes = [];
                this._collisionNames = [];
            }
            if(Object.prototype.toString.call(maskType) === "[object String]") {
                this._collisionNames.push(maskType);
            }
            if(Object.prototype.toString.call(maskType) === "[object Array]") {
                this._collisionNames.concat(maskType);
            }
            this._collisionTypes.push(this._typeManager.getBitMask(maskType));
            this._collisionsMask.typeNames = this._collisionNames;
        };
        TileCollisionComponent.prototype.onTick = function (delta) {
            if(!this.active || !this._spatialComponent || !this._tileMap) {
                return;
            }
            this._queryRect = this._spatialComponent.extents.clone();
            this._queryRect.x += this.offsetX;
            this._queryRect.y += this.offsetY;
            this._collisions = this._tileMap.queryRectangle(this._queryRect, this._collisionsMask);
            for(var i = this._collisions.length - 1; i >= 0; i--) {
                this._collider = this._collisions[i];
                if(!this._collider) {
                    continue;
                }
                this._topOffset = (this._spatialComponent.top + this.offsetY) - ((this._collider.row * this._tileHeight) + this._tileHeight);
                this._bottomOffset = (this._spatialComponent.bottom + this.offsetY) - (this._collider.row * this._tileHeight);
                this._leftOffset = (this._spatialComponent.left + this.offsetX) - ((this._collider.col * this._tileWidth) + this._tileWidth);
                this._rightOffset = (this._spatialComponent.right + this.offsetX) - (this._collider.col * this._tileWidth);
                this._topOffset = (this._topOffset < 0) ? -this._topOffset : this._topOffset;
                this._bottomOffset = (this._bottomOffset < 0) ? -this._bottomOffset : this._bottomOffset;
                this._leftOffset = (this._leftOffset < 0) ? -this._leftOffset : this._leftOffset;
                this._rightOffset = (this._rightOffset < 0) ? -this._rightOffset : this._rightOffset;
                this._collisionOffsets[0] = this._topOffset;
                this._collisionOffsets[1] = this._bottomOffset;
                this._collisionOffsets[2] = this._leftOffset;
                this._collisionOffsets[3] = this._rightOffset;
                this._collisionOffsets.sort(this.sortOffsets);
                this._collisionOffset = this._collisionOffsets[0];
                if(this._collisionOffset == this._topOffset) {
                    this._loc = Avota.CollisionComponent.TOP;
                }
                if(this._collisionOffset == this._bottomOffset) {
                    this._loc = Avota.CollisionComponent.BOTTOM;
                }
                if(this._collisionOffset == this._leftOffset) {
                    this._loc = Avota.CollisionComponent.LEFT;
                }
                if(this._collisionOffset == this._rightOffset) {
                    this._loc = Avota.CollisionComponent.RIGHT;
                }
                if(!this._collisionTypes) {
                    this.collisionSignal.dispatch(this._spatialComponent, this._collider, this._loc, this._collisionOffset);
                } else {
                    for(var n = this._collisionTypes.length - 1; n >= 0; n--) {
                        if(!this._collider.type) {
                            continue;
                        }
                        if(this._typeManager.doTypesOverlap(this._collider.type, this._collisionTypes[n])) {
                            this.collisionSignal.dispatch(this._spatialComponent, this._collider, this._loc, this._collisionOffset, this._collisionNames[n]);
                        }
                    }
                }
            }
            _super.prototype.onTick.call(this, delta);
        };
        TileCollisionComponent.prototype.sortOffsets = function (offset1, offset2) {
            return (offset1 >= offset2) ? 1 : -1;
        };
        TileCollisionComponent.prototype.destroy = function () {
            this.collisionSignal.removeAll();
            this.active = false;
            this.collisionSignal = null;
            this._spatialComponent = null;
            this._collider = null;
            this._collisions = null;
            this._collisionOffsets = null;
            this._collisionTypes = null;
            this._collisionNames = null;
            this._collisionsMask = null;
            this._tileMap = null;
            this._typeManager = null;
            this._queryRect = null;
            _super.prototype.destroy.call(this);
        };
        return TileCollisionComponent;
    })(Avota.TickedComponent);
    Avota.TileCollisionComponent = TileCollisionComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TileMap = (function (_super) {
        __extends(TileMap, _super);
        function TileMap(timeManager, renderManager, typeManager, tileSet, tileData, mapFormat, name) {
            if (typeof mapFormat === "undefined") { mapFormat = TileMapFormat.TILED_JSON; }
            if (typeof name === "undefined") { name = TileMap.NAME; }
                _super.call(this, timeManager, name);
            this._renderManager = renderManager;
            this._typeManager = typeManager;
            this._pt = new Avota.Point();
            this._result = new Avota.Point();
            this._rect = new Avota.Rectangle();
            this._rayResult = new Avota.RayResult();
            if(tileSet && tileData) {
                this.createTiles(tileSet, tileData, mapFormat);
            }
            if(!this._renderComponent && this._timeManager && this._renderManager && this._tileSet && this._tiles) {
                this._createRenderComponent();
            }
            if(DEBUG) {
                this.enableOnTick();
            }
        }
        TileMap.NAME = "TileMap";
        TileMap.LAYER_OBJECT = "objectgroup";
        TileMap.LAYER_TILE = "tilelayer";
        Object.defineProperty(TileMap.prototype, "isBlinking", {
            get: function () {
                return this._renderComponent.isBlinking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "roundedPixels", {
            get: function () {
                return this._renderComponent.roundedPixels;
            },
            set: function (value) {
                this._renderComponent.roundedPixels = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "x", {
            get: function () {
                return this._renderComponent.x;
            },
            set: function (value) {
                this._renderComponent.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "y", {
            get: function () {
                return this._renderComponent.y;
            },
            set: function (value) {
                this._renderComponent.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "width", {
            get: function () {
                return this._renderComponent.width;
            },
            set: function (value) {
                this._renderComponent.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "height", {
            get: function () {
                return this._renderComponent.height;
            },
            set: function (value) {
                this._renderComponent.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "rotation", {
            get: function () {
                return this._renderComponent.rotation;
            },
            set: function (value) {
                this._renderComponent.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "centerX", {
            get: function () {
                return this._renderComponent.centerX;
            },
            set: function (value) {
                this._renderComponent.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "centerY", {
            get: function () {
                return this._renderComponent.centerY;
            },
            set: function (value) {
                this._renderComponent.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "registrationX", {
            get: function () {
                return this._renderComponent.registrationX;
            },
            set: function (value) {
                this._renderComponent.registrationX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "registrationY", {
            get: function () {
                return this._renderComponent.registrationY;
            },
            set: function (value) {
                this._renderComponent.registrationY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "offsetX", {
            get: function () {
                return this._renderComponent.offsetX;
            },
            set: function (value) {
                this._renderComponent.offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "offsetY", {
            get: function () {
                return this._renderComponent.offsetY;
            },
            set: function (value) {
                this._renderComponent.offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "top", {
            get: function () {
                return this._renderComponent.top;
            },
            set: function (value) {
                this._renderComponent.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "left", {
            get: function () {
                return this._renderComponent.left;
            },
            set: function (value) {
                this._renderComponent.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "right", {
            get: function () {
                return this._renderComponent.right;
            },
            set: function (value) {
                this._renderComponent.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "bottom", {
            get: function () {
                return this._renderComponent.bottom;
            },
            set: function (value) {
                this._renderComponent.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "halfWidth", {
            get: function () {
                return this._renderComponent.halfWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "halfHeight", {
            get: function () {
                return this._renderComponent.halfHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "center", {
            get: function () {
                return this._renderComponent.center;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "position", {
            get: function () {
                return this._renderComponent.position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "registration", {
            get: function () {
                return this._renderComponent.registration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "extents", {
            get: function () {
                return this._renderComponent.extents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "offset", {
            get: function () {
                return this._renderComponent.offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "tileData", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "cols", {
            get: function () {
                return this._cols;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "tileWidth", {
            get: function () {
                return this._tileWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "tileHeight", {
            get: function () {
                return this._tileHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "_renderID", {
            get: function () {
                return this._renderComponent._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TileMap.prototype, "_worldTransform", {
            get: function () {
                return this._renderComponent._worldTransform;
            },
            enumerable: true,
            configurable: true
        });
        TileMap.prototype.createTiles = function (tileSet, tileData, mapFormat) {
            if (typeof mapFormat === "undefined") { mapFormat = TileMapFormat.TILED_JSON; }
            var tile;
            var tiles = [];
            this._data = tileData;
            this._tileSet = tileSet;
            this._tileWidth = this._tileSet.tileWidth;
            this._tileHeight = this._tileSet.tileHeight;
            this._isAnimated = false;
            switch(mapFormat) {
                case TileMapFormat.JSON:
                    this._rows = this._data.length;
                    this._cols = this._data[0].length;
                    for(var r = 0; r < this._rows; r++) {
                        for(var c = 0; c < this._cols; c++) {
                            if(tileData[r][c] != -1) {
                                tile = tileSet.getTile(tileData[r][c]).clone(this);
                                tile.row = r;
                                tile.col = c;
                                if(tile.isAnimated) {
                                    this._isAnimated = true;
                                }
                            }
                            tiles[(r * this._cols) + c] = tile;
                            tile = null;
                        }
                    }
                    break;
                case TileMapFormat.TILED_JSON:
                    this._rows = this._data.height;
                    this._cols = this._data.width;
                    for(var r = 0; r < this._rows; r++) {
                        for(var c = 0; c < this._cols; c++) {
                            if(tileData.data[(r * this._cols) + c] != 0) {
                                tile = tileSet.getTile(tileData.data[(r * this._cols) + c]).clone(this);
                                tile.row = r;
                                tile.col = c;
                                if(tile.isAnimated) {
                                    this._isAnimated = true;
                                }
                            }
                            tiles[(r * this._cols) + c] = tile;
                            tile = null;
                        }
                    }
                    break;
            }
            this._tiles = tiles;
            if(!this._renderComponent && this._timeManager && this._renderManager && this._tileSet && this._tiles) {
                this._createRenderComponent();
            }
            return this._tiles;
        };
        TileMap.prototype._createRenderComponent = function () {
            this._renderComponent = this.create(Avota.TileRenderComponent, this._timeManager, this._renderManager, this._tileSet, this._tiles, this._rows, this._cols);
            this.addComponent(this._renderComponent, Avota.EngineConstants.RENDER);
            if(!this._isAnimated) {
                this._renderComponent._isPrerendered = true;
            }
            this.roundedPixels = true;
        };
        TileMap.prototype.prerender = function (chunkWidth, chunkHeight, tileSet, tileData, mapFormat) {
            if (typeof mapFormat === "undefined") { mapFormat = TileMapFormat.TILED_JSON; }
            this.createTiles(tileSet, tileData, mapFormat);
            if(!this._renderComponent && this._timeManager && this._renderManager && this._tileSet && this._data) {
                this._createRenderComponent();
            }
            if(this._renderComponent) {
                this._renderComponent.prerender(chunkWidth, chunkHeight, this._tileSet, this._tiles, this._rows, this._cols);
            }
        };
        TileMap.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this._renderComponent.blink(repeat, duration, alpha, forceOverride);
        };
        TileMap.prototype.stopBlink = function () {
            this._renderComponent.stopBlink();
        };
        TileMap.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this._renderComponent.shake(repeat, duration, strength);
        };
        TileMap.prototype.stopShake = function () {
            this._renderComponent.stopShake();
        };
        TileMap.prototype._updateNode = function (parentTransformDirty) {
            if (typeof parentTransformDirty === "undefined") { parentTransformDirty = false; }
            this._renderComponent.updateNode(parentTransformDirty);
        };
        TileMap.prototype.globalToLocal = function (position) {
            return this._renderComponent.globalToLocal(position);
        };
        TileMap.prototype.localToGlobal = function (position) {
            return this._renderComponent.localToGlobal(position);
        };
        TileMap.prototype.onTick = function (delta) {
            if(DEBUG) {
                this._checks = 0;
            }
        };
        TileMap.prototype.setTile = function (row, col, reference) {
            if(Avota.ObjectUtil.isString(reference)) {
                var tile = this._tileSet.getTileByName(reference).clone(this);
                tile.row = row;
                tile.col = col;
                if(tile.isAnimated) {
                    this._isAnimated = true;
                }
            }
            this._tiles[(row * this._cols) + col] = tile;
        };
        TileMap.prototype.getTiles = function () {
            return this._tiles.concat();
        };
        TileMap.prototype.getTile = function (row, col) {
            return this._tiles[(row * this._cols) + col];
        };
        TileMap.prototype.getTilesByIndex = function (index) {
            var results = [];
            for(var r = 0; r < this._renderComponent.rows; r++) {
                for(var c = 0; c < this._renderComponent.cols; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if(this._tile.index === index) {
                        results.push(this._tile);
                    }
                }
            }
            return results;
        };
        TileMap.prototype.getTilesByPrefix = function (prefix) {
            var results = [];
            for(var r = 0; r < this._renderComponent.rows; r++) {
                for(var c = 0; c < this._renderComponent.cols; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if((this._tile.name && this._tile.name.indexOf(prefix) != -1) || (this._tile.alias && this._tile.alias.indexOf(prefix) != -1)) {
                        results.push(this._tile);
                    }
                }
            }
            return results;
        };
        TileMap.prototype.getTilesByTag = function (tag) {
            var results = [];
            for(var r = 0; r < this._renderComponent.rows; r++) {
                for(var c = 0; c < this._renderComponent.cols; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if(this._tile.tag === tag) {
                        results.push(this._tile);
                    }
                }
            }
            return results;
        };
        TileMap.prototype.getTilesByType = function (type) {
            var results = [];
            for(var r = 0; r < this._renderComponent.rows; r++) {
                for(var c = 0; c < this._renderComponent.cols; c++) {
                    this._tile = this._tiles[(r * this._cols) + c];
                    if(this._typeManager.doTypesOverlap(type, this._tile.type)) {
                        results.push(this._tile);
                    }
                }
            }
            return results;
        };
        TileMap.prototype.queryCircle = function (center, radius, type) {
            if (typeof type === "undefined") { type = null; }
            var results = [];
            this._rect.setTo(center.x - radius, center.y - radius, radius * 2, radius * 2);
            if(this.querySection(this._rect, 0, this._cols, 0, this._rows)) {
                this._tr = this.clamp(Math.floor((this._rect.top - this.y) / this._tileHeight), 0, this._rows);
                this._br = this.clamp(Math.ceil((this._rect.bottom - this.y) / this._tileHeight), 0, this._rows);
                this._lc = this.clamp(Math.floor((this._rect.left - this.x) / this._tileWidth), 0, this._cols);
                this._rc = this.clamp(Math.ceil((this._rect.right - this.x) / this._tileWidth), 0, this._cols);
                this._sr = radius * radius;
                for(var r = this._tr; r < this._br; r++) {
                    for(var c = this._lc; c < this._rc; c++) {
                        this._tile = this._tiles[(r * this._cols) + c];
                        if(this._tile && type && this._tile.type && !this._typeManager.doTypesOverlap(type, this._tile.type)) {
                            continue;
                        }
                        if(r == this._tr || r == this._br - 1 || c == this._lc || c == this._rc - 1) {
                            this._pt = this.getClosestPoint(this._tile, center);
                            if(Avota.GeomUtil.getDistanceSquared(this._pt.x, this._pt.y, center.x, center.y) > this._sr) {
                                continue;
                            }
                        }
                        results.push(this._tile);
                    }
                }
            }
            return results;
        };
        TileMap.prototype.queryRectangle = function (rect, type) {
            if (typeof type === "undefined") { type = null; }
            var results = [];
            if(this.querySection(rect, 0, this._cols, 0, this._rows)) {
                this._tr = this.clamp(Math.floor((rect.top - this.y) / this._tileHeight), 0, this._rows);
                this._br = this.clamp(Math.ceil((rect.bottom - this.y) / this._tileHeight), 0, this._rows);
                this._lc = this.clamp(Math.floor((rect.left - this.x) / this._tileWidth), 0, this._cols);
                this._rc = this.clamp(Math.ceil((rect.right - this.x) / this._tileWidth), 0, this._cols);
                for(var r = this._tr; r < this._br; r++) {
                    for(var c = this._lc; c < this._rc; c++) {
                        this._tile = this._tiles[(r * this._cols) + c];
                        if(this._tile && type && this._tile.type && !this._typeManager.doTypesOverlap(type, this._tile.type)) {
                            continue;
                        }
                        results.push(this._tile);
                    }
                }
            }
            if(DEBUG) {
                this._checks++;
            }
            return results;
        };
        TileMap.prototype.queryPoint = function (position, type) {
            if (typeof type === "undefined") { type = null; }
            var result;
            this._r = Math.floor(position.y / this._tileHeight);
            this._c = Math.floor(position.x / this._tileWidth);
            if(this._r < this._rows && this._c < this._cols && this._r >= 0 && this._c >= 0) {
                result = this._tiles[(this._r * this._cols) + this._c];
            }
            if(DEBUG) {
                this._checks++;
            }
            if(result && type && result.type && !this._typeManager.doTypesOverlap(type, result.type)) {
                return null;
            }
            return result;
        };
        TileMap.prototype.queryPosition = function (x, y, type) {
            if (typeof type === "undefined") { type = null; }
            var result;
            this._r = Math.floor(y / this._tileHeight);
            this._c = Math.floor(x / this._tileWidth);
            if(this._r < this._rows && this._c < this._cols && this._r >= 0 && this._c >= 0) {
                result = this._tiles[(this._r * this._cols) + this._c];
            }
            if(DEBUG) {
                this._checks++;
            }
            if(result && type && result.type && !this._typeManager.doTypesOverlap(type, result.type)) {
                return null;
            }
            return result;
        };
        TileMap.prototype.querySection = function (rect, _lc, _rc, _tr, _br) {
            this._lc = this.x + _lc * this._tileWidth;
            this._rc = this._lc + _rc * this._tileWidth;
            this._tr = this.y + _tr * this._tileHeight;
            this._br = this._tr + _br * this._tileWidth;
            return (rect.top < this._br && rect.bottom > this._tr && rect.left < this._rc && rect.right > this._lc);
        };
        TileMap.prototype.queryLine = function (start, end, mask) {
            var lineResults = [];
            var yLonger = false;
            var shortLen = end.y - start.y;
            var longLen = end.x - start.x;
            if((shortLen ^ (shortLen >> 31)) - (shortLen >> 31) > (longLen ^ (longLen >> 31)) - (longLen >> 31)) {
                shortLen ^= longLen;
                longLen ^= shortLen;
                shortLen ^= longLen;
                yLonger = true;
            }
            var i;
            var inc = (longLen < 0) ? -1 : 1;
            var multDiff = (longLen == 0) ? shortLen : shortLen / longLen;
            if(yLonger) {
                for(i = 0; i != longLen; i += inc) {
                    this._pt.x = start.x + i * multDiff;
                    this._pt.y = start.y + i;
                    this._tile = this.queryPoint(this._pt, mask);
                    if(this._tile) {
                        lineResults.push(new Avota.RayResult(this._tile, this._pt, i / longLen));
                    }
                }
            } else {
                for(i = 0; i != longLen; i += inc) {
                    this._pt.x = start.x + i;
                    this._pt.y = start.y + i * multDiff;
                    this._tile = this.queryPoint(this._pt, mask);
                    if(this._tile) {
                        lineResults.push(new Avota.RayResult(this._tile, this._pt, i / longLen));
                    }
                }
            }
            if(DEBUG) {
                this._checks++;
            }
            return lineResults;
        };
        TileMap.prototype.castRay = function (start, end, mask) {
            this._rayResult.clear();
            var yLonger = false;
            var shortLen = end.y - start.y;
            var longLen = end.x - start.x;
            if((shortLen ^ (shortLen >> 31)) - (shortLen >> 31) > (longLen ^ (longLen >> 31)) - (longLen >> 31)) {
                shortLen ^= longLen;
                longLen ^= shortLen;
                shortLen ^= longLen;
                yLonger = true;
            }
            var i;
            var inc = (longLen < 0) ? -1 : 1;
            var multDiff = (longLen == 0) ? shortLen : shortLen / longLen;
            var length = Math.floor(longLen);
            if(yLonger) {
                for(i = 0; i != length; i += inc) {
                    this._pt.x = start.x + i * multDiff;
                    this._pt.y = start.y + i;
                    this._tile = this.queryPoint(this._pt, mask);
                    if(this._tile) {
                        this._rayResult.element = this._tile;
                        this._rayResult.position = this._pt;
                        this._rayResult.time = i / longLen;
                        break;
                    }
                }
            } else {
                for(i = 0; i != length; i += inc) {
                    this._pt.x = start.x + i;
                    this._pt.y = start.y + i * multDiff;
                    this._tile = this.queryPoint(this._pt, mask);
                    if(this._tile) {
                        this._rayResult.element = this._tile;
                        this._rayResult.position = this._pt;
                        this._rayResult.time = i / longLen;
                        break;
                    }
                }
            }
            if(DEBUG) {
                this._checks++;
            }
            return this._rayResult;
        };
        TileMap.prototype.getClosestPoint = function (tile, point) {
            this._result.x = this.x + tile.col * this._tileSet.tileWidth;
            this._result.y = this.y + tile.row * this._tileSet.tileHeight;
            var left = this._result.x + this._tileSet.tileWidth;
            var bottom = this._result.y + this._tileSet.tileHeight;
            if(Avota.MathUtil.isInRange(point.x, this._result.x, left)) {
                this._result.x = point.x;
            } else if(Math.abs(left - point.x) < Math.abs(this._result.x - point.x)) {
                this._result.x = left;
            }
            if(Avota.MathUtil.isInRange(point.y, this._result.y, bottom)) {
                this._result.y = point.y;
            } else if(Math.abs(bottom - point.y) < Math.abs(this._result.y - point.y)) {
                this._result.y = bottom;
            }
            return this._result;
        };
        TileMap.prototype.destroy = function () {
            this._rayResult.destroy();
            _super.prototype.destroy.call(this);
            this._canvas = null;
            this._renderComponent = null;
            this._renderManager = null;
            this._typeManager = null;
            this._tiles = null;
            this._tileSet = null;
            this._data = null;
            this._rayResult = null;
            this._tile = null;
            this._pt = null;
            this._result = null;
            this._rect = null;
        };
        TileMap.prototype.clamp = function (value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        return TileMap;
    })(Avota.GameEntity);
    Avota.TileMap = TileMap;    
    var TileMapFormat = (function () {
        function TileMapFormat() { }
        TileMapFormat.TILED_JSON = "tiled";
        TileMapFormat.JSON = "json";
        return TileMapFormat;
    })();
    Avota.TileMapFormat = TileMapFormat;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Button = (function (_super) {
        __extends(Button, _super);
        function Button(name, timeManager, renderManager, inputManager, spriteSheet, params) {
                _super.call(this, timeManager, renderManager, spriteSheet, name);
            this._inputManager = inputManager;
            this.inputOver = new Avota.Signal();
            this.inputOut = new Avota.Signal();
            this.inputDown = new Avota.Signal();
            this.inputUp = new Avota.Signal();
            this._labelOffsetX = 0;
            this._labelOffsetY = 0;
            this._label = this.create(Avota.TextGraphic, this._timeManager, this._renderManager, {
                text: " "
            });
            if(params) {
                if(params.hasOwnProperty("disabled")) {
                    this.addAnimation(Button.DISABLED, spriteSheet.name, params.disabled.prefix, params.disabled.duration || 1000, params.disabled.repeat || -1);
                }
                if(params.hasOwnProperty("down")) {
                    this.addAnimation(Button.DOWN, spriteSheet.name, params.down.prefix, params.down.duration || 1000, params.down.repeat || -1);
                }
                if(params.hasOwnProperty("over")) {
                    this.addAnimation(Button.OVER, spriteSheet.name, params.over.prefix, params.over.duration || 1000, params.over.repeat || -1);
                }
                if(params.hasOwnProperty("out")) {
                    this.addAnimation(Button.OUT, spriteSheet.name, params.over.prefix, params.over.duration || 1000, params.over.repeat || -1);
                }
                if(params.hasOwnProperty("up")) {
                    this.addAnimation(Button.UP, spriteSheet.name, params.up.prefix, params.up.duration || 1000, params.up.repeat || -1);
                    this.play(Button.UP);
                }
                if(params.hasOwnProperty("label")) {
                    if(params.label.hasOwnProperty("style")) {
                        this._label.setStyle(params.label.style);
                    }
                    if(params.label.hasOwnProperty("outline")) {
                        this._label.outline = params.label.outline;
                    }
                    if(params.label.hasOwnProperty("outlineStrength")) {
                        this._label.outlineStrength = params.label.outlineStrength;
                    }
                    if(params.label.hasOwnProperty("outlineColor")) {
                        this._label.outlineColor = params.label.outlineColor;
                    }
                    if(params.label.hasOwnProperty("shadow")) {
                        this._label.shadow = params.label.shadow;
                    }
                    if(params.label.hasOwnProperty("shadowStrength")) {
                        this._label.shadowStrength = params.label.shadowStrength;
                    }
                    if(params.label.hasOwnProperty("shadowColor")) {
                        this._label.shadowColor = params.label.shadowColor;
                    }
                    if(params.label.hasOwnProperty("shadowOffsetX")) {
                        this._label.shadowOffsetX = params.label.shadowOffsetX;
                    }
                    if(params.label.hasOwnProperty("shadowOffsetY")) {
                        this._label.shadowOffsetY = params.label.shadowOffsetY;
                    }
                    if(params.label.hasOwnProperty("italic")) {
                        this._label.italic = params.label.italic;
                    }
                    if(params.label.hasOwnProperty("bold")) {
                        this._label.bold = params.label.bold;
                    }
                    if(params.label.hasOwnProperty("color")) {
                        this._label.color = params.label.color;
                    }
                    if(params.label.hasOwnProperty("size")) {
                        this._label.size = params.label.size;
                    }
                    if(params.label.hasOwnProperty("font")) {
                        this._label.font = params.label.font;
                    }
                    if(params.label.hasOwnProperty("text")) {
                        this._label.text = params.label.text;
                    }
                    if(params.label.hasOwnProperty("offsetX")) {
                        this.labelOffsetX = params.label.offsetX;
                    }
                    if(params.label.hasOwnProperty("offsetY")) {
                        this.labelOffsetY = params.label.offsetY;
                    }
                }
                for(var key in params) {
                    if(this[key] != undefined) {
                        this[key] = params[key];
                    }
                }
            }
            this.addChild(this._label);
            this._updateLabel();
            this._enabled = false;
            if(this._inputManager) {
                this._createInputComponent();
            }
        }
        Button.UP = "up";
        Button.DOWN = "down";
        Button.OVER = "over";
        Button.OUT = "out";
        Button.DISABLED = "disabled";
        Object.defineProperty(Button.prototype, "hitArea", {
            get: function () {
                return this._inputComponent.hitArea;
            },
            set: function (value) {
                this._inputComponent.hitArea = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "ignoreTransparency", {
            get: function () {
                return this._inputComponent.ignoreTransparency;
            },
            set: function (value) {
                this._inputComponent.ignoreTransparency = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "useHandCursor", {
            get: function () {
                return this._inputComponent.useHandCursor;
            },
            set: function (value) {
                this._inputComponent.useHandCursor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "textLabel", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                this._label = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "labelShadow", {
            get: function () {
                return this._label.shadow;
            },
            set: function (value) {
                this._label.shadow = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "labelShadowColor", {
            get: function () {
                return this._label.shadowColor;
            },
            set: function (value) {
                this._label.shadowColor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "labelShadowStrength", {
            get: function () {
                return this._label.shadowStrength;
            },
            set: function (value) {
                this._label.shadowStrength = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "labelOffsetX", {
            get: function () {
                return this._labelOffsetX;
            },
            set: function (value) {
                this._labelOffsetX = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "labelOffsetY", {
            get: function () {
                return this._labelOffsetY;
            },
            set: function (value) {
                this._labelOffsetY = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "active", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this.enabled = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            set: function (value) {
                this._enabled = value;
                this._inputComponent.enabled = value;
                if(this._enabled) {
                    if(this.getAnimation(Button.UP) != undefined) {
                        this.play(Button.UP);
                    }
                } else {
                    if(this.getAnimation(Button.DISABLED) != undefined) {
                        this.play(Button.DISABLED);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "visible", {
            get: function () {
                return this._renderComponent.visible;
            },
            set: function (value) {
                this._renderComponent.visible = value;
                if(!value) {
                    this.enabled = value;
                }
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "alpha", {
            get: function () {
                return this._renderComponent.alpha;
            },
            set: function (value) {
                this._renderComponent.alpha = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "x", {
            get: function () {
                return this._renderComponent.x;
            },
            set: function (value) {
                this._renderComponent.x = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "y", {
            get: function () {
                return this._renderComponent.y;
            },
            set: function (value) {
                this._renderComponent.y = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "centerX", {
            get: function () {
                return this._renderComponent.centerX;
            },
            set: function (value) {
                this._renderComponent.centerX = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "centerY", {
            get: function () {
                return this._renderComponent.centerY;
            },
            set: function (value) {
                this._renderComponent.centerY = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "scale", {
            get: function () {
                return this._renderComponent.scale;
            },
            set: function (value) {
                this._renderComponent.scale = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "scaleX", {
            get: function () {
                return this._renderComponent.scaleX;
            },
            set: function (value) {
                this._renderComponent.scaleX = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "scaleY", {
            get: function () {
                return this._renderComponent.scaleY;
            },
            set: function (value) {
                this._renderComponent.scaleY = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "rotation", {
            get: function () {
                return this._renderComponent.rotation;
            },
            set: function (value) {
                this._renderComponent.rotation = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "top", {
            get: function () {
                return this._renderComponent.top;
            },
            set: function (value) {
                this._renderComponent.top = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "left", {
            get: function () {
                return this._renderComponent.left;
            },
            set: function (value) {
                this._renderComponent.left = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "right", {
            get: function () {
                return this._renderComponent.right;
            },
            set: function (value) {
                this._renderComponent.right = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "bottom", {
            get: function () {
                return this._renderComponent.bottom;
            },
            set: function (value) {
                this._renderComponent.bottom = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "layerIndex", {
            get: function () {
                return this._renderComponent.layerIndex;
            },
            set: function (value) {
                this._renderComponent.layerIndex = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "zIndex", {
            get: function () {
                return this._renderComponent.zIndex;
            },
            set: function (value) {
                this._renderComponent.zIndex = value;
                this._updateLabel();
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype._createInputComponent = function () {
            this._inputComponent = this.create(Avota.InputComponent, this._inputManager);
            this._inputComponent.inputDown.add(this.onDown, this);
            this._inputComponent.inputUp.add(this.onUp, this);
            this._inputComponent.inputOver.add(this.onOver, this);
            this._inputComponent.inputOut.add(this.onOut, this);
            this.addComponent(this._inputComponent, Avota.EngineConstants.INPUT);
        };
        Button.prototype._updateLabel = function () {
            if(this._label) {
                this._label.centerX = this.halfWidth + this._labelOffsetX;
                this._label.centerY = this.halfHeight + this._labelOffsetY;
                this._label.alpha = this.alpha;
                this._label.visible = this.visible;
                this._label.layerIndex = this.layerIndex;
                this._label.zIndex = this.zIndex + 1;
            }
        };
        Button.prototype.onDown = function (sprite, x, y, id) {
            if(!this._enabled) {
                return;
            }
            if(this.getAnimation(Button.DOWN) != undefined) {
                this.play(Button.DOWN);
            } else if(this.getAnimation(Button.OVER) != undefined) {
                this.play(Button.OVER);
            }
            this.inputDown.dispatch(this, Button.DOWN, id);
        };
        Button.prototype.onUp = function (sprite, x, y, id) {
            if(!this._enabled) {
                return;
            }
            if(this.getAnimation(Button.UP) != undefined) {
                this.play(Button.UP);
            }
            this.inputUp.dispatch(this, Button.UP, id);
        };
        Button.prototype.onOver = function (sprite, x, y, id) {
            if(!this._enabled) {
                return;
            }
            if(this.getAnimation(Button.OVER) != undefined) {
                this.play(Button.OVER);
            }
            this.inputOver.dispatch(this, Button.OVER, id);
        };
        Button.prototype.onOut = function (sprite, x, y, id) {
            if(!this._enabled) {
                return;
            }
            if(this.getAnimation(Button.UP) != undefined) {
                this.play(Button.UP);
            }
            this.inputOut.dispatch(this, Button.OUT, id);
        };
        Button.prototype.destroy = function () {
            this.inputOver.removeAll();
            this.inputOut.removeAll();
            this.inputDown.removeAll();
            this.inputUp.removeAll();
            _super.prototype.destroy.call(this);
            this.inputOver = null;
            this.inputOut = null;
            this.inputDown = null;
            this.inputUp = null;
            this._label = null;
            this._inputComponent = null;
            this._inputManager = null;
        };
        return Button;
    })(Avota.AnimatedGraphic);
    Avota.Button = Button;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameUI = (function (_super) {
        __extends(GameUI, _super);
        function GameUI(scene, strings, name) {
            if (typeof strings === "undefined") { strings = null; }
            if (typeof name === "undefined") { name = GameUI.NAME; }
                _super.call(this, name);
            this._scene = scene;
            this._strings = (strings) ? JSON.parse(JSON.stringify(strings)) : null;
            this._layerIndex = GameUI.LAYERINDEX;
            this.buttonSignal = new Avota.Signal();
            this.globalTimeManager.preTick.addOnce(this._init, this);
        }
        GameUI.NAME = "GameUI";
        GameUI.LAYERINDEX = Avota.EngineConstants.LAYERINDEX_GAMEUI;
        GameUI.UI_TEXT = "UIText";
        GameUI.SCENE_TEXT = "SceneText";
        GameUI.GLOBAL_TEXT = "GlobalText";
        Object.defineProperty(GameUI.prototype, "strings", {
            get: function () {
                return this._strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "globalConfig", {
            get: function () {
                return this._scene.globalConfig;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "globalStrings", {
            get: function () {
                return this._scene.globalStrings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "timeManager", {
            get: function () {
                return this._timeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "sceneTimeManager", {
            get: function () {
                return this._scene.timeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "globalTimeManager", {
            get: function () {
                return this._scene.globalTimeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "sceneManager", {
            get: function () {
                return this._scene.sceneManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "resourceManager", {
            get: function () {
                return this._scene.resourceManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "soundManager", {
            get: function () {
                return this._scene.soundManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "objectPool", {
            get: function () {
                return this._scene.objectPool;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "sharedData", {
            get: function () {
                return this._scene.sharedData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "typeManager", {
            get: function () {
                return this._scene.typeManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "inputManager", {
            get: function () {
                return this._scene.inputManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "inputMap", {
            get: function () {
                return this._scene.inputMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "spatialManager", {
            get: function () {
                return this._scene.spatialManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "renderManager", {
            get: function () {
                return this._scene.renderManager;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "camera", {
            get: function () {
                return this._scene.renderManager.camera;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "screenCenterX", {
            get: function () {
                return this._scene.screenCenterX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "screenCenterY", {
            get: function () {
                return this._scene.screenCenterY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "screenWidth", {
            get: function () {
                return this._scene.screenWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameUI.prototype, "screenHeight", {
            get: function () {
                return this._scene.screenHeight;
            },
            enumerable: true,
            configurable: true
        });
        GameUI.prototype._onCreate = function () {
            _super.prototype._onCreate.call(this);
            this._timeManager = this.globalTimeManager.getTimeManager(this.name + Avota.TimeManager.NAME, -1);
            this._timeManager.addTickedObject(this, 0);
            this._timeManager.start();
            this._messagePool = this.create(Avota.ObjectPool, "MessagePool");
            this._messagePool.allocate(Avota.TextGraphic, [
                this.timeManager, 
                this.renderManager
            ], 2, this, true, GameUI.UI_TEXT);
            this._messagePool.allocate(Avota.TextGraphic, [
                this.sceneTimeManager, 
                this.renderManager
            ], 2, this, true, GameUI.SCENE_TEXT);
            this._messagePool.allocate(Avota.TextGraphic, [
                this.globalTimeManager, 
                this.renderManager
            ], 2, this, true, GameUI.GLOBAL_TEXT);
            this._messages = [];
        };
        GameUI.prototype._init = function () {
            if(this._strings) {
                this.localize(this._strings);
            }
            if(this._scene.globalStrings && this._scene.globalStrings.hasOwnProperty("buttons")) {
                this.localizeButtons(this._scene.globalStrings.buttons);
            }
            this.renderManager.getLayer(GameUI.LAYERINDEX, true).cameraTransformOptions = Avota.TransformOptions.NONE;
            this.soundManager.muteSignal.add(this._onMuted, this);
            this._onMuted();
            this._scene.pauseSignal.add(this._onPaused, this);
        };
        GameUI.prototype._buttonHandler = function (button, action, id) {
            switch(action) {
                case Avota.Button.UP:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_UP | " + button.name + "}");
                    }
                    break;
                case Avota.Button.OVER:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_OVER | " + button.name + "}");
                    }
                    break;
                case Avota.Button.OUT:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_OUT | " + button.name + "}");
                    }
                    break;
                case Avota.Button.DOWN:
                    if(LOGGING) {
                        this._log.trace("{BUTTON_DOWN | " + button.name + "}");
                    }
                    break;
            }
            if(!this.destroyed) {
                this.buttonSignal.dispatch(button, action, id);
            }
        };
        GameUI.prototype.onTick = function (delta) {
        };
        GameUI.prototype.showMessage = function (text, params, motion, position, duration, onComplete, type) {
            if (typeof params === "undefined") { params = null; }
            if (typeof motion === "undefined") { motion = null; }
            if (typeof position === "undefined") { position = null; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof type === "undefined") { type = GameUI.UI_TEXT; }
            var message = this._messagePool.getObject(type);
            if(!message.data) {
                message.data = {
                };
            }
            message.data.__type__ = type;
            message.visible = true;
            message.layerIndex = params.layerIndex || this._layerIndex;
            message.zIndex = params.zIndex || 0;
            message.alpha = params.alpha || 1;
            if(params.style) {
                message.setStyle(params.style);
            } else {
                message.font = params.font;
                message.size = params.size;
                message.color = params.color;
                message.bold = params.bold || false;
                message.italic = params.italic || false;
            }
            if(params.color) {
                message.color = params.color;
            }
            if(params.rotation) {
                message.rotation = params.rotation;
            }
            if(params.scale) {
                message.scaleX = params.scale;
                message.scaleY = params.scale;
            }
            if(params.outline) {
                message.outline = params.outline;
                message.outlineStrength = params.outlineStrength || 1;
                message.outlineColor = params.outlineColor || "#000000";
            }
            if(params.shadow) {
                message.shadow = params.shadow;
                message.shadowStrength = params.shadowStrength || 0;
                message.shadowColor = params.shadowColor || "#000000";
                message.shadowOffsetX = params.shadowOffsetX || 0;
                message.shadowOffsetY = params.shadowOffsetY || 0;
            }
            if(params.gradient) {
                message.gradient = params.gradient;
            } else {
                message.gradient = null;
            }
            message.text = " " + text + " ";
            if(position) {
                message.centerX = position.x;
                message.centerY = position.y;
                position = null;
            } else {
                message.centerX = this.screenCenterX;
                message.centerY = this.screenCenterY;
            }
            if(params.offset) {
                if(params.offset.x) {
                    message.centerX += params.offset.x;
                }
                if(params.offset.y) {
                    message.centerY += params.offset.y;
                }
            }
            message.registrationX = message.halfWidth;
            message.registrationY = message.halfHeight;
            this._messages.push(message);
            if(LOGGING) {
                this._log.trace("{MESSAGE | " + text + "}");
            }
            ;
            this._displayMessage(message, motion, duration, params.delay || 0, onComplete);
            return message;
        };
        GameUI.prototype._displayMessage = function (message, motion, duration, delay, onComplete) {
            if (typeof motion === "undefined") { motion = null; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof delay === "undefined") { delay = 0; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            var _this = this;
            var timeline = new TimelineMax({
                delay: delay,
                onComplete: function (message, callback) {
                    if (typeof callback === "undefined") { callback = null; }
                    return _this._onMessageComplete(message, onComplete);
                },
                onCompleteParams: [
                    message, 
                    onComplete
                ]
            });
            message.data.timeline = timeline;
        };
        GameUI.prototype._onMessageComplete = function (message, callback) {
            if (typeof callback === "undefined") { callback = null; }
            if(!message || message.destroyed) {
                return;
            }
            if(message.data && message.data.timeline) {
                message.data.timeline = null;
            }
            message.visible = false;
            message.alpha = 1;
            message.scaleX = 1;
            message.scaleY = 1;
            message.rotation = 0;
            message.centerX = -1000;
            message.centerY = -1000;
            message.clear();
            message.outline = false;
            message.shadow = false;
            this._messages.splice(this._messages.indexOf(message), 1);
            this._messagePool.releaseObject(message, message.data.__type__);
            if(callback != null) {
                callback.apply();
            }
        };
        GameUI.prototype._onMuted = function (isMuted) {
            if (typeof isMuted === "undefined") { isMuted = false; }
        };
        GameUI.prototype._onPaused = function (isPaused) {
            if (typeof isPaused === "undefined") { isPaused = false; }
            if(isPaused) {
                this._timeManager.stop();
            } else {
                this._timeManager.start();
            }
        };
        GameUI.prototype.enableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            button.inputUp.add(this._buttonHandler, this);
            button.inputOver.add(this._buttonHandler, this);
            button.inputDown.add(this._buttonHandler, this);
            button.inputOut.add(this._buttonHandler, this);
            button.enabled = true;
            button.visible = true;
            button.alpha = alpha;
            button.play(Avota.Button.UP);
        };
        GameUI.prototype.disableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            button.inputUp.remove(this._buttonHandler, this);
            button.inputOver.remove(this._buttonHandler, this);
            button.inputDown.remove(this._buttonHandler, this);
            button.inputOut.remove(this._buttonHandler, this);
            button.enabled = false;
            button.alpha = alpha;
        };
        GameUI.prototype.enableButtons = function (alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.enableButton(button, alpha);
            }
        };
        GameUI.prototype.disableButtons = function (alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.disableButton(button, alpha);
            }
        };
        GameUI.prototype.enableButtonSet = function (buttons, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.enableButton(button, alpha);
            }
        };
        GameUI.prototype.disableButtonSet = function (buttons, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var button;
            for(var i = 0, n = buttons.length; i < n; i++) {
                button = buttons[i];
                if(!button) {
                    continue;
                }
                this.disableButton(button, alpha);
            }
        };
        GameUI.prototype.setLabel = function (name, value) {
            (this.get(name)).text = value;
        };
        GameUI.prototype.show = function (name) {
            (this.get(name)).visible = true;
        };
        GameUI.prototype.hide = function (name) {
            (this.get(name)).visible = false;
        };
        GameUI.prototype.mute = function (value) {
            if (typeof value === "undefined") { value = 1; }
            if(value == 1) {
                this.soundManager.mute();
            }
        };
        GameUI.prototype.toggleMute = function (muteOffChild, muteOnChild) {
            this.soundManager.mute();
            this.checkMute(muteOffChild, muteOnChild);
        };
        GameUI.prototype.checkMute = function (muteOffChild, muteOnChild) {
            var muteOn = this.get(muteOnChild);
            var muteOff = this.get(muteOffChild);
            if(!muteOn || !muteOff) {
                return;
            }
            if(this.soundManager.isMuted) {
                muteOff.visible = true;
                muteOff.active = true;
                muteOn.visible = false;
                muteOn.active = false;
            } else {
                muteOn.visible = true;
                muteOn.active = true;
                muteOff.visible = false;
                muteOff.active = false;
            }
        };
        GameUI.prototype.transitionIn = function (color, duration, type, direction, position, delay, onComplete, onCompleteParams, ease) {
            if (typeof color === "undefined") { color = "#000000"; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof type === "undefined") { type = "circle"; }
            if (typeof direction === "undefined") { direction = "in"; }
            if (typeof position === "undefined") { position = null; }
            if (typeof delay === "undefined") { delay = 0; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof onCompleteParams === "undefined") { onCompleteParams = null; }
            if (typeof ease === "undefined") { ease = null; }
            var transition = new Avota.Transition(this._timeManager, this.renderManager, {
                color: color,
                width: this.screenWidth,
                height: this.screenHeight
            });
            transition.start({
                type: type,
                delay: delay,
                direction: direction,
                position: position,
                duration: duration,
                ease: ease || Sine.easeOut,
                onComplete: onComplete,
                onCompleteParams: onCompleteParams
            });
        };
        GameUI.prototype.transitionOut = function (color, duration, type, direction, position, delay, onComplete, onCompleteParams, ease) {
            if (typeof color === "undefined") { color = "#000000"; }
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof type === "undefined") { type = "circle"; }
            if (typeof direction === "undefined") { direction = "out"; }
            if (typeof position === "undefined") { position = null; }
            if (typeof delay === "undefined") { delay = 0; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof onCompleteParams === "undefined") { onCompleteParams = null; }
            if (typeof ease === "undefined") { ease = null; }
            var transition = new Avota.Transition(this._timeManager, this.renderManager, {
                color: color,
                width: this.screenWidth,
                height: this.screenHeight
            });
            transition.start({
                type: type,
                delay: delay,
                direction: direction,
                position: position,
                duration: duration,
                ease: ease || Sine.easeOut,
                onComplete: onComplete,
                onCompleteParams: onCompleteParams
            });
        };
        GameUI.prototype.blink = function (repeat, duration, alpha, forceOverride) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof alpha === "undefined") { alpha = .25; }
            if (typeof forceOverride === "undefined") { forceOverride = false; }
            this.renderManager.getLayer(this._layerIndex, true).blink(repeat, duration, alpha, forceOverride);
        };
        GameUI.prototype.stopBlink = function () {
            this.renderManager.getLayer(this._layerIndex, true).stopBlink();
        };
        GameUI.prototype.shake = function (repeat, duration, strength) {
            if (typeof repeat === "undefined") { repeat = 10; }
            if (typeof duration === "undefined") { duration = 1000; }
            if (typeof strength === "undefined") { strength = 2; }
            this.renderManager.getLayer(this._layerIndex, true).shake(repeat, duration, strength);
        };
        GameUI.prototype.stopShake = function () {
            this.renderManager.getLayer(this._layerIndex, true).stopShake();
        };
        GameUI.prototype.localizeButtons = function (node) {
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(buttons[i].name == node[j].name) {
                        buttons[i].textLabel.text = node[j].value;
                        if(node[j].style) {
                            buttons[i].textLabel.setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        GameUI.prototype.localize = function (node) {
            this.localizeButtons(node);
            var textGraphics = this.getByType(Avota.TextGraphic);
            for(var i = 0, n = textGraphics.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(textGraphics[i].name == node[j].name) {
                        textGraphics[i].text = node[j].value;
                        if(node[j].style) {
                            textGraphics[i].setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        GameUI.prototype.killAllTweens = function () {
            var element;
            var elements = this.getAll();
            for(var i = 0; i < elements.length; i++) {
                element = elements[i];
                TweenMax.killTweensOf(element);
            }
            TweenMax.killTweensOf(this);
        };
        GameUI.prototype.destroy = function () {
            this.killAllTweens();
            this._timeManager.stop();
            this.soundManager.muteSignal.remove(this._onMuted, this);
            this._scene.pauseSignal.remove(this._onPaused, this);
            this.buttonSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.globalTimeManager.releaseTimeManager(this._timeManager);
            this.buttonSignal = null;
            this._scene = null;
            this._timeManager = null;
        };
        return GameUI;
    })(Avota.Entity);
    Avota.GameUI = GameUI;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GameUIOverlay = (function (_super) {
        __extends(GameUIOverlay, _super);
        function GameUIOverlay(scene, strings, name) {
            if (typeof strings === "undefined") { strings = null; }
            if (typeof name === "undefined") { name = GameUIOverlay.NAME; }
                _super.call(this, scene, strings, name);
            this._layerIndex = GameUIOverlay.LAYERINDEX_OVERLAY;
            this.callbackSignal = new Avota.Signal();
        }
        GameUIOverlay.NAME = "GameUIOverlay";
        GameUIOverlay.LAYERINDEX_OVERLAY = Avota.EngineConstants.LAYERINDEX_GAMEUI_OVERLAY;
        GameUIOverlay.LAYERINDEX_UNDERLAY = Avota.EngineConstants.LAYERINDEX_GAMEUI_UNDERLAY;
        GameUIOverlay.prototype._init = function () {
            if(this._strings) {
                this.localize(this._strings);
            }
            if(this._scene.globalStrings && this._scene.globalStrings.hasOwnProperty("buttons")) {
                this.localizeButtons(this._scene.globalStrings.buttons);
            }
            this.renderManager.getLayer(GameUIOverlay.LAYERINDEX_OVERLAY, true).cameraTransformOptions = Avota.TransformOptions.NONE;
            this.renderManager.getLayer(GameUIOverlay.LAYERINDEX_UNDERLAY, true).cameraTransformOptions = Avota.TransformOptions.NONE;
            this.soundManager.muteSignal.add(this._onMuted, this);
            this._onMuted();
            this._scene.pauseSignal.add(this._onPaused, this);
            this.hideOverlay(null, false);
        };
        GameUIOverlay.prototype.showOverlay = function (callback, useFade, duration) {
            if (typeof callback === "undefined") { callback = null; }
            if (typeof useFade === "undefined") { useFade = true; }
            if (typeof duration === "undefined") { duration = .5; }
            var _this = this;
            var element;
            var elements = this.getAll();
            if(useFade) {
                var timeline = new TimelineMax({
                    onComplete: function (value) {
                        return _this._onShowComplete(callback);
                    },
                    onCompleteParams: [
                        callback
                    ]
                });
                for(var i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if(!element instanceof Avota.GameEntity) {
                        continue;
                    }
                    element.active = true;
                    element.visible = true;
                    timeline.insert(TweenMax.from(element, duration, {
                        alpha: 0
                    }));
                }
            } else {
                for(var i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if(!element instanceof Avota.GameEntity) {
                        continue;
                    }
                    element.active = true;
                    element.visible = true;
                }
                this._timeManager.callLater(function (value) {
                    return _this._onShowComplete(callback);
                });
            }
            this.enableButtons();
            this.soundManager.muteSignal.add(this._onMuted, this);
            this._onMuted();
            this._scene.pauseSignal.add(this._onPaused, this);
        };
        GameUIOverlay.prototype._onShowComplete = function (callback) {
            if(callback) {
                callback.apply();
            }
        };
        GameUIOverlay.prototype.hideOverlay = function (callback, useFade, duration) {
            if (typeof callback === "undefined") { callback = null; }
            if (typeof useFade === "undefined") { useFade = true; }
            if (typeof duration === "undefined") { duration = .5; }
            var _this = this;
            var element;
            var elements = this.getAll();
            if(useFade) {
                var timeline = new TimelineMax({
                    onComplete: function (value) {
                        return _this._onHideComplete(callback);
                    },
                    onCompleteParams: [
                        callback
                    ]
                });
                for(var i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if(!element instanceof Avota.GameEntity) {
                        continue;
                    }
                    element.active = false;
                    timeline.insert(TweenMax.to(element, duration, {
                        alpha: 0,
                        onComplete: function (value) {
                            return _this.hide(element.name);
                        },
                        onCompleteParams: [
                            element.name
                        ]
                    }));
                }
            } else {
                for(var i = 0; i < elements.length; i++) {
                    element = elements[i];
                    if(!element instanceof Avota.GameEntity) {
                        continue;
                    }
                    element.active = false;
                    element.visible = false;
                }
                this._timeManager.callLater(function (value) {
                    return _this._onHideComplete(callback);
                });
            }
            this.disableButtons();
            this.soundManager.muteSignal.remove(this._onMuted, this);
            this._scene.pauseSignal.remove(this._onPaused, this);
        };
        GameUIOverlay.prototype._onHideComplete = function (callback) {
            if(callback) {
                callback.apply();
            }
        };
        GameUIOverlay.prototype.destroy = function () {
            this.callbackSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.callbackSignal = null;
        };
        return GameUIOverlay;
    })(Avota.GameUI);
    Avota.GameUIOverlay = GameUIOverlay;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TextGraphic = (function (_super) {
        __extends(TextGraphic, _super);
        function TextGraphic(timeManager, renderManager, params, name) {
            if (typeof name === "undefined") { name = TextGraphic.NAME; }
                _super.call(this, timeManager, renderManager, 1, 1, name);
            this._italic = false;
            this._bold = false;
            this._color = "rgb(255,255,255)";
            this._size = 8;
            this._font = "sans-serif";
            this._margin = 0;
            this._outline = false;
            this._outlineStrength = 4;
            this._outlineColor = "rgb(0,0,0)";
            this._shadow = false;
            this._shadowStrength = 12;
            this._shadowColor = "rgb(0,0,0)";
            this._shadowOffsetX = 0;
            this._shadowOffsetY = 0;
            this._text = " ";
            this._align = TextGraphic.ALIGN_LEFT;
            this._lineJoin = "miter";
            this._miterLimit = 2;
            this._cx = -1;
            this._cy = -1;
            this._b = -1;
            this._r = -1;
            this._t = -1;
            this._l = -1;
            this._dirty = true;
            this._cXDirty = false;
            this._cYDirty = false;
            this._bDirty = false;
            this._rDirty = false;
            this._tDirty = false;
            this._lDirty = false;
            if(params) {
                if(params.hasOwnProperty("style")) {
                    this.setStyle(params.style);
                }
                for(var key in params) {
                    if(this[key] != undefined) {
                        this[key] = params[key];
                    }
                }
            }
            this.enableOnTick();
        }
        TextGraphic.NAME = "TextGraphic";
        TextGraphic.ALIGN_LEFT = "left";
        TextGraphic.ALIGN_RIGHT = "right";
        TextGraphic.ALIGN_CENTER = "center";
        TextGraphic._heightCache = {
        };
        Object.defineProperty(TextGraphic.prototype, "lines", {
            get: function () {
                return this._lines;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "top", {
            get: function () {
                return this._t;
            },
            set: function (value) {
                this._t = value;
                this._tDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "left", {
            get: function () {
                return this._l;
            },
            set: function (value) {
                this._l = value;
                this._lDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "right", {
            get: function () {
                return this._r;
            },
            set: function (value) {
                this._r = value;
                this._rDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "bottom", {
            get: function () {
                return this._b;
            },
            set: function (value) {
                this._b = value;
                this._bDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "centerX", {
            get: function () {
                return this._cx;
            },
            set: function (value) {
                this._cx = value;
                this._cXDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "centerY", {
            get: function () {
                return this._cy;
            },
            set: function (value) {
                this._cy = value;
                this._cYDirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                if(this._text == value) {
                    return;
                }
                this._text = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "margin", {
            get: function () {
                return this._margin;
            },
            set: function (value) {
                if(this._margin == value) {
                    return;
                }
                this._margin = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "lineHeight", {
            get: function () {
                return this._lineHeight;
            },
            set: function (value) {
                if(this._lineHeight == value) {
                    return;
                }
                this._lineHeight = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "lineWidth", {
            get: function () {
                return this._lineWidth;
            },
            set: function (value) {
                if(this._lineWidth == value) {
                    return;
                }
                this._lineWidth = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "font", {
            get: function () {
                return this._font;
            },
            set: function (value) {
                if(this._font == value) {
                    return;
                }
                this._font = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (value) {
                if(this._size == value) {
                    return;
                }
                this._size = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "align", {
            get: function () {
                return this._align;
            },
            set: function (value) {
                if(this._align == value) {
                    return;
                }
                this._align = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                if(this._color == value) {
                    return;
                }
                this._color = value;
                this._gradient = null;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "gradient", {
            get: function () {
                return this._gradient;
            },
            set: function (value) {
                if(this._gradient == value) {
                    return;
                }
                this._gradient = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "bold", {
            get: function () {
                return this._bold;
            },
            set: function (value) {
                if(this._bold == value) {
                    return;
                }
                this._bold = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "italic", {
            get: function () {
                return this._italic;
            },
            set: function (value) {
                if(this._italic == value) {
                    return;
                }
                this._italic = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "outline", {
            get: function () {
                return this._outline;
            },
            set: function (value) {
                if(this._outline == value) {
                    return;
                }
                this._outline = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "outlineStrength", {
            get: function () {
                return this._outlineStrength;
            },
            set: function (value) {
                if(this.outlineStrength == value) {
                    return;
                }
                this._outlineStrength = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "outlineColor", {
            get: function () {
                return this._outlineColor;
            },
            set: function (value) {
                if(this.outlineColor == value) {
                    return;
                }
                this._outlineColor = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "shadow", {
            get: function () {
                return this._shadow;
            },
            set: function (value) {
                if(this._shadow == value) {
                    return;
                }
                this._shadow = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "shadowStrength", {
            get: function () {
                return this._shadowStrength;
            },
            set: function (value) {
                if(this.shadowStrength == value) {
                    return;
                }
                this._shadowStrength = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "shadowColor", {
            get: function () {
                return this._shadowColor;
            },
            set: function (value) {
                if(this.shadowColor == value) {
                    return;
                }
                this._shadowColor = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "shadowOffsetX", {
            get: function () {
                return this._shadowOffsetX;
            },
            set: function (value) {
                if(this.shadowOffsetX == value) {
                    return;
                }
                this._shadowOffsetX = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "shadowOffsetY", {
            get: function () {
                return this._shadowOffsetY;
            },
            set: function (value) {
                if(this.shadowOffsetY == value) {
                    return;
                }
                this._shadowOffsetY = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "lineJoin", {
            get: function () {
                return this._lineJoin;
            },
            set: function (value) {
                if(this._lineJoin == value) {
                    return;
                }
                this._lineJoin = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextGraphic.prototype, "miterLimit", {
            get: function () {
                return this._miterLimit;
            },
            set: function (value) {
                if(this._miterLimit == value) {
                    return;
                }
                this._miterLimit = value;
                this._dirty = true;
            },
            enumerable: true,
            configurable: true
        });
        TextGraphic.prototype.clear = function () {
            this._text = " ";
            _super.prototype.clear.call(this);
        };
        TextGraphic.prototype.setStyle = function (value) {
            var style = Avota.DOMUtil.getStyle(value);
            if(style["font-weight"] == "bold") {
                this.bold = true;
            }
            if(style["font-weight"] == "normal") {
                this.bold = false;
            }
            if(style["fontWeight"] == "bold") {
                this.bold = true;
            }
            if(style["fontWeight"] == "normal") {
                this.bold = false;
            }
            if(style["font-style"] == "italic") {
                this.italic = true;
            }
            if(style["fontStyle"] == "italic") {
                this.italic = true;
            }
            if(style["font-style"] == "normal") {
                this.italic = false;
            }
            if(style["fontStyle"] == "normal") {
                this.italic = false;
            }
            if(style["font-size"]) {
                this.size = parseInt(style["font-size"]);
            }
            if(style["fontSize"]) {
                this.size = parseInt(style["fontSize"]);
            }
            if(style["font-family"]) {
                this.font = style["font-family"];
            }
            if(style["fontFamily"]) {
                this.font = style["fontFamily"];
            }
            if(style["color"]) {
                this.color = style["color"];
            }
            if(style["text-align"]) {
                this.align = style["text-align"];
            }
            if(style["textAlign"]) {
                this.align = style["textAlign"];
            }
            if(style["line-height"]) {
                this.lineHeight = parseInt(style["line-height"]);
            }
            if(style["lineHeight"]) {
                this.lineHeight = parseInt(style["lineHeight"]);
            }
            if(style["width"]) {
                this.lineWidth = parseInt(style["width"]);
            }
            if(style["margin"]) {
                this.margin = parseInt(style["margin"]);
            }
            if(style["outline-color"]) {
                this.outline = true;
                this.outlineColor = style["outline-color"];
            }
            if(style["outlineColor"]) {
                this.outline = true;
                this.outlineColor = style["outlineColor"];
            }
            if(style["outline-width"]) {
                this.outline = true;
                this.outlineStrength = parseInt(style["outline-width"]);
            }
            if(style["outlineWidth"]) {
                this.outline = true;
                this.outlineStrength = parseInt(style["outlineWidth"]);
            }
            var shadowInfo = style["text-shadow"] || style["textShadow"];
            if(shadowInfo) {
            }
            if(style["left"]) {
                this.left = parseInt(style["left"]);
            }
            if(style["right"]) {
                this.right = parseInt(style["right"]);
            }
            if(style["top"]) {
                this.top = parseInt(style["top"]);
            }
            if(style["bottom"]) {
                this.bottom = parseInt(style["bottom"]);
            }
        };
        TextGraphic.prototype.animateOn = function (duration, delay) {
            if (typeof delay === "undefined") { delay = 0; }
            var _this = this;
            if(!this._text) {
                return;
            }
            if(!this.animateCompleteSignal) {
                this.animateCompleteSignal = new Avota.Signal();
            }
            this._charIndex = 0;
            this._characters = this._text.split("");
            this.clear();
            if(!this._displayTimer) {
                this._displayTimer = this.create(Avota.Timer, this._timeManager);
                this._displayTimer.timerSignal.add(this._onDisplayCharacter, this);
                this._displayTimer.completeSignal.add(this._onDisplayComplete, this);
            }
            this._displayTimer.reset();
            this._displayTimer.delay = duration;
            this._displayTimer.repeatCount = this._characters.length;
            this._timeManager.callLater(function () {
                return _this._displayTimer.start();
            }, delay);
        };
        TextGraphic.prototype.stopAnimate = function (dispatchOnComplete) {
            if (typeof dispatchOnComplete === "undefined") { dispatchOnComplete = true; }
            this._displayTimer.reset();
            if(dispatchOnComplete) {
                this._onDisplayComplete();
            }
        };
        TextGraphic.prototype._onDisplayCharacter = function () {
            this.text += this._characters[this._charIndex++];
        };
        TextGraphic.prototype._onDisplayComplete = function () {
            this.animateCompleteSignal.dispatch();
        };
        TextGraphic.prototype.onTick = function (delta) {
            if(this._dirty) {
                this.draw();
            }
            if(this._cXDirty) {
                this._renderComponent.centerX = this._cx;
                this._cXDirty = false;
            }
            if(this._cYDirty) {
                this._renderComponent.centerY = this._cy;
                this._cYDirty = false;
            }
            if(this._rDirty) {
                this._renderComponent.right = this._r;
                this._rDirty = false;
            }
            if(this._bDirty) {
                this._renderComponent.bottom = this._b;
                this._bDirty = false;
            }
            if(this._tDirty) {
                this._renderComponent.top = this._t;
                this._tDirty = false;
            }
            if(this._lDirty) {
                this._renderComponent.left = this._l;
                this._lDirty = false;
            }
        };
        TextGraphic.prototype.draw = function () {
            if(!this._text || this._text.length === 0) {
                return;
            }
            this._css = "";
            if(this.italic) {
                this._css += "italic ";
            }
            if(this.bold) {
                this._css += "bold ";
            }
            this._css += this._size + "pt ";
            this._css += this._font;
            this._renderContext.font = this._css;
            this._buffer = 0;
            if(this._outline) {
                this._buffer += this._outlineStrength * .5;
            }
            if(this._shadow) {
                this._buffer += this._shadowStrength * .5;
            }
            this._lines = this._text.split(/(?:\r\n|\r|\n)/);
            if(this._lineWidth) {
                var lineChars;
                var lineWidth = 0;
                for(var i = 0, n = this._lines.length; i < n; i++) {
                    lineWidth = this._renderContext.measureText(this._lines[i]).width;
                    this._lines[i] = this.wordWrap(this._lines[i], Math.ceil(this._lineWidth / Math.ceil(Math.ceil(lineWidth + (this._margin * 10)) / Math.ceil(this._lines[i].length))));
                }
                this._lines = this._lines.join("\n").split(/(?:\r\n|\r|\n)/);
            }
            var lineWidths = [];
            var lineWidth = 0;
            var maxWidth = 0;
            for(var i = 0, n = this._lines.length; i < n; i++) {
                lineWidth = this._renderContext.measureText(this._lines[i]).width;
                lineWidths[i] = lineWidth;
                if(lineWidth > maxWidth) {
                    maxWidth = lineWidth;
                }
            }
            var lineHeight = this._lineHeight || this.getFontHeight("font: " + this._css + ";");
            var maxHeight = lineHeight * this._lines.length;
            maxWidth = (this._lineWidth) ? this._lineWidth : maxWidth;
            this.width = Math.floor(maxWidth);
            this.height = Math.floor(maxHeight);
            this.registrationX = this.halfWidth;
            this.registrationY = this.halfHeight;
            if(this._outline) {
                this.width += this._outlineStrength;
                this.height += this._outlineStrength;
            }
            if(this._shadow) {
                this.width += this._shadowStrength + this._shadowOffsetX;
                this.height += this._shadowStrength + this._shadowOffsetY;
            }
            this.registrationX = this.width * .5;
            this.registrationY = this.height * .5;
            this._canvas.width = this.width;
            this._canvas.height = this.height;
            this._renderComponent._renderRect.width = this.width;
            this._renderComponent._renderRect.height = this.height;
            this._renderContext.lineJoin = this._lineJoin;
            this._renderContext.miterLimit = this._miterLimit;
            this._renderContext.font = this._css;
            this._renderContext.textBaseline = "bottom";
            if(this._shadow) {
                this._renderContext.shadowColor = this._shadowColor;
                this._renderContext.shadowBlur = this._shadowStrength;
                this._renderContext.shadowOffsetX = this._shadowOffsetX;
                this._renderContext.shadowOffsetY = this._shadowOffsetY;
            }
            if(this._gradient != null && !Avota.EnvUtil.isSafari && !Avota.EnvUtil.isWebApp) {
                var endPos = 0;
                this._gradientContext = this._renderContext.createLinearGradient(0, 0, 0, this.height);
                for(var n = 0; n < this._gradient.length; n++) {
                    this._gradient[n].position = this._gradient[n].position / this._lines.length;
                }
                for(var i = 0; i < this._lines.length; i++) {
                    for(var n = 0; n < this._gradient.length; n++) {
                        this._gradientContext.addColorStop(this._gradient[n].position + endPos, this._gradient[n].color);
                    }
                    endPos = this._gradient[n - 1].position;
                }
                this._renderContext.fillStyle = this._gradientContext;
            } else {
                this._renderContext.fillStyle = this._color;
            }
            if(this._outline) {
                this._renderContext.strokeStyle = this._outlineColor;
                this._renderContext.lineWidth = this._outlineStrength;
                this._renderContext.lineJoin = "round";
            }
            var linePos;
            for(var i = 0, n = this._lines.length; i < n; i++) {
                linePos = this._buffer + this._shadowOffsetX;
                if(this._align == TextGraphic.ALIGN_RIGHT) {
                    linePos += maxWidth - lineWidths[i];
                }
                if(this._align == TextGraphic.ALIGN_CENTER) {
                    linePos += (maxWidth - lineWidths[i]) / 2;
                }
                if(this._outline) {
                    this._renderContext.strokeText(this._lines[i], linePos, this._buffer - this._shadowOffsetY + (lineHeight * (i + 1)));
                }
                this._renderContext.fillText(this._lines[i], linePos, this._buffer - this._shadowOffsetY + (lineHeight * (i + 1)));
            }
            this._dirty = false;
        };
        TextGraphic.prototype.getFontHeight = function (value) {
            var result = TextGraphic._heightCache[value];
            if(!result) {
                var body = document.getElementsByTagName("body")[0];
                var dummy = document.createElement("div");
                var dummyText = document.createTextNode("M");
                dummy.appendChild(dummyText);
                dummy.setAttribute("style", value + ';position:absolute;top:0;left:0');
                body.appendChild(dummy);
                result = dummy.offsetHeight;
                TextGraphic._heightCache[value] = result;
                body.removeChild(dummy);
            }
            return result;
        };
        TextGraphic.prototype.wordWrap = function (text, numChars, lineBreak, cutWord) {
            if (typeof lineBreak === "undefined") { lineBreak = "\n"; }
            if (typeof cutWord === "undefined") { cutWord = false; }
            if(text.length == 0) {
                return text;
            }
            return text.match(new RegExp('.{1,' + numChars + '}(\\s|$)' + (cutWord ? '|.{' + numChars + '}|.+$' : '|\\S+?(\\s|$)'), 'g')).join(lineBreak);
        };
        TextGraphic.prototype.destroy = function () {
            if(this.animateCompleteSignal) {
                this.animateCompleteSignal.removeAll();
            }
            if(this._displayTimer) {
                this._displayTimer.reset();
            }
            _super.prototype.destroy.call(this);
            this.animateCompleteSignal = null;
            this._lines = null;
            this._color = null;
            this._gradient = null;
            this._displayTimer = null;
            this._characters = null;
            this._gradientContext = null;
        };
        return TextGraphic;
    })(Avota.CanvasGraphic);
    Avota.TextGraphic = TextGraphic;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ToggleButton = (function (_super) {
        __extends(ToggleButton, _super);
        function ToggleButton(name, buttonA, buttonB, params) {
            if(buttonA._timeManager !== buttonB._timeManager) {
                if(LOGGING) {
                    this._log.error(buttonA.name + " & " + buttonB.name + " must have the same TimeManager.");
                }
                throw new Error(buttonA.name + " & " + buttonB.name + " must have the same TimeManager.");
                return;
            }
                _super.call(this, buttonA._timeManager, name);
            this._buttonA = buttonA;
            this._buttonB = buttonB;
            this.inputOver = new Avota.Signal();
            this.inputOut = new Avota.Signal();
            this.inputDown = new Avota.Signal();
            this.inputUp = new Avota.Signal();
            if(params) {
                if(params.hasOwnProperty("state")) {
                    this._state = params.state;
                }
            }
            this._buttonA.inputOver.add(this.buttonHandler, this);
            this._buttonA.inputOut.add(this.buttonHandler, this);
            this._buttonA.inputDown.add(this.buttonHandler, this);
            this._buttonA.inputUp.add(this.buttonHandler, this);
            this._buttonB.inputOver.add(this.buttonHandler, this);
            this._buttonB.inputOut.add(this.buttonHandler, this);
            this._buttonB.inputDown.add(this.buttonHandler, this);
            this._buttonB.inputUp.add(this.buttonHandler, this);
            this.setState(this._state);
        }
        ToggleButton.STATE_A = 0;
        ToggleButton.STATE_B = 1;
        ToggleButton.STATE_ON = ToggleButton.STATE_A;
        ToggleButton.STATE_OFF = ToggleButton.STATE_B;
        Object.defineProperty(ToggleButton.prototype, "state", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "enabled", {
            get: function () {
                switch(this._state) {
                    case ToggleButton.STATE_A:
                        return this._buttonA.enabled;
                        break;
                    case ToggleButton.STATE_B:
                        return this._buttonB.enabled;
                        break;
                }
            },
            set: function (value) {
                switch(this._state) {
                    case ToggleButton.STATE_A:
                        this._buttonA.enabled = value;
                        break;
                    case ToggleButton.STATE_B:
                        this._buttonB.enabled = value;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "visible", {
            get: function () {
                switch(this._state) {
                    case ToggleButton.STATE_A:
                        return this._buttonA.visible;
                        break;
                    case ToggleButton.STATE_B:
                        return this._buttonB.visible;
                        break;
                }
            },
            set: function (value) {
                switch(this._state) {
                    case ToggleButton.STATE_A:
                        this._buttonA.visible = value;
                        break;
                    case ToggleButton.STATE_B:
                        this._buttonB.visible = value;
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "ignoreTransparency", {
            get: function () {
                return this._buttonA.ignoreTransparency;
            },
            set: function (value) {
                this._buttonA.ignoreTransparency = value;
                this._buttonB.ignoreTransparency = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "useHandCursor", {
            get: function () {
                return this._buttonA.useHandCursor;
            },
            set: function (value) {
                this._buttonA.useHandCursor = value;
                this._buttonB.useHandCursor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "alpha", {
            get: function () {
                return this._buttonA.alpha;
            },
            set: function (value) {
                this._buttonA.alpha = value;
                this._buttonB.alpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "x", {
            get: function () {
                return this._buttonA.x;
            },
            set: function (value) {
                this._buttonA.x = value;
                this._buttonB.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "y", {
            get: function () {
                return this._buttonA.y;
            },
            set: function (value) {
                this._buttonA.y = value;
                this._buttonB.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "centerX", {
            get: function () {
                return this._buttonA.centerX;
            },
            set: function (value) {
                this._buttonA.centerX = value;
                this._buttonB.centerX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "centerY", {
            get: function () {
                return this._buttonA.centerY;
            },
            set: function (value) {
                this._buttonA.centerY = value;
                this._buttonB.centerY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "scale", {
            get: function () {
                return this._buttonA.scale;
            },
            set: function (value) {
                this._buttonA.scale = value;
                this._buttonB.scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "scaleX", {
            get: function () {
                return this._buttonA.scaleX;
            },
            set: function (value) {
                this._buttonA.scaleX = value;
                this._buttonB.scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "scaleY", {
            get: function () {
                return this._buttonA.scaleY;
            },
            set: function (value) {
                this._buttonA.scaleY = value;
                this._buttonB.scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "rotation", {
            get: function () {
                return this._buttonA.rotation;
            },
            set: function (value) {
                this._buttonA.rotation = value;
                this._buttonB.rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "top", {
            get: function () {
                return this._buttonA.top;
            },
            set: function (value) {
                this._buttonA.top = value;
                this._buttonB.top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "left", {
            get: function () {
                return this._buttonA.left;
            },
            set: function (value) {
                this._buttonA.left = value;
                this._buttonB.left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "right", {
            get: function () {
                return this._buttonA.right;
            },
            set: function (value) {
                this._buttonA.right = value;
                this._buttonB.right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "bottom", {
            get: function () {
                return this._buttonA.bottom;
            },
            set: function (value) {
                this._buttonA.bottom = value;
                this._buttonB.bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "layerIndex", {
            get: function () {
                return this._buttonA.layerIndex;
            },
            set: function (value) {
                this._buttonA.layerIndex = value;
                this._buttonB.layerIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ToggleButton.prototype, "zIndex", {
            get: function () {
                return this._buttonA.zIndex;
            },
            set: function (value) {
                this._buttonA.zIndex = value;
                this._buttonB.zIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        ToggleButton.prototype.setState = function (state) {
            this._state = state;
            switch(this._state) {
                case ToggleButton.STATE_A:
                    this._buttonA.visible = true;
                    this._buttonA.active = true;
                    this._buttonB.visible = false;
                    this._buttonB.active = false;
                    break;
                case ToggleButton.STATE_B:
                    this._buttonA.visible = false;
                    this._buttonA.active = false;
                    this._buttonB.visible = true;
                    this._buttonB.active = true;
                    break;
            }
        };
        ToggleButton.prototype.buttonHandler = function (button, action, id) {
            switch(action) {
                case Avota.Button.OVER:
                    this.inputOver.dispatch(this, Avota.Button.OVER, id, this._state);
                    break;
                case Avota.Button.OUT:
                    this.inputOut.dispatch(this, Avota.Button.OUT, id, this._state);
                    break;
                case Avota.Button.DOWN:
                    this.inputDown.dispatch(this, Avota.Button.DOWN, id, this._state);
                    break;
                case Avota.Button.UP:
                    switch(this._state) {
                        case ToggleButton.STATE_A:
                            this.setState(ToggleButton.STATE_B);
                            break;
                        case ToggleButton.STATE_B:
                            this.setState(ToggleButton.STATE_A);
                            break;
                    }
                    this.inputDown.dispatch(this, Avota.Button.UP, id, this._state);
                    break;
            }
        };
        ToggleButton.prototype.destroy = function () {
            this.inputOver.removeAll();
            this.inputOut.removeAll();
            this.inputDown.removeAll();
            this.inputUp.removeAll();
            _super.prototype.destroy.call(this);
            this.inputOver = null;
            this.inputOut = null;
            this.inputDown = null;
            this.inputUp = null;
            this._buttonA = null;
            this._buttonB = null;
        };
        return ToggleButton;
    })(Avota.GameEntity);
    Avota.ToggleButton = ToggleButton;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Transition = (function (_super) {
        __extends(Transition, _super);
        function Transition(timeManager, renderManager, params, name) {
            if (typeof name === "undefined") { name = Transition.NAME; }
                _super.call(this, timeManager, renderManager, renderManager.renderCanvas.width, renderManager.renderCanvas.height, name);
            this._color = "#000000";
            if(params) {
                if(params.hasOwnProperty("color")) {
                    this._color = params.color;
                }
            }
            this.completeSignal = new Avota.Signal();
            this.visible = false;
            this.layerIndex = Avota.EngineConstants.LAYERINDEX_TRANSITION;
            this._renderManager.getLayer(this.layerIndex, true).cameraTransformOptions = Avota.TransformOptions.NONE;
        }
        Transition.NAME = "Transition";
        Transition.TYPE_CIRCLE = "circle";
        Transition.TYPE_SQUARE = "square";
        Transition.TYPE_WIPE = "wipe";
        Transition.TYPE_FADE = "fade";
        Transition.TYPE_CUSTOM = "custom";
        Transition.IN = "in";
        Transition.OUT = "out";
        Transition.LEFT = "left";
        Transition.RIGHT = "right";
        Transition.prototype.start = function (params) {
            var _this = this;
            var duration = params.duration || 1;
            var easing = params.ease || Avota.Linear.easeNone;
            var direction = params.direction || Transition.IN;
            var delay = params.delay || 0;
            var color = params.color || this._color;
            var timeline = new TimelineLite({
                delay: delay,
                onComplete: function (params) {
                    return _this.onComplete(params);
                },
                onCompleteParams: [
                    params
                ]
            });
            this.fillStyle = color;
            this.fillRect(0, 0, this.width, this.height);
            this._type = params.type || Transition.TYPE_FADE;
            this._position = params.position || Transition.LEFT;
            if(LOGGING) {
                this._log.trace("{TRANSITION  | type: " + params.type + ", direction: " + direction + "}");
            }
            ;
            switch(params.type) {
                case Transition.TYPE_FADE:
                    switch(direction) {
                        case Transition.IN:
                            timeline.insert(TweenLite.to(this, duration, {
                                alpha: 0,
                                ease: easing
                            }));
                            break;
                        case Transition.OUT:
                            timeline.insert(TweenLite.from(this, duration, {
                                alpha: 0,
                                ease: easing
                            }));
                            break;
                    }
                    break;
                case Transition.TYPE_CIRCLE:
                case Transition.TYPE_SQUARE:
                    this.globalCompositeOperation = "destination-out";
                    this._size = Math.max(this.width, this.height);
                    switch(direction) {
                        case Transition.IN:
                            timeline.insert(TweenMax.from(this, duration, {
                                _size: 0,
                                ease: easing
                            }));
                            break;
                        case Transition.OUT:
                            timeline.insert(TweenMax.to(this, duration, {
                                _size: 0,
                                ease: easing
                            }));
                            break;
                    }
                    break;
                case Transition.TYPE_WIPE:
                    this._size = this.width;
                    switch(direction) {
                        case Transition.IN:
                            this.globalCompositeOperation = "destination-out";
                            timeline.insert(TweenMax.from(this, duration, {
                                _size: 0,
                                ease: easing
                            }));
                            break;
                        case Transition.OUT:
                            timeline.insert(TweenMax.from(this, duration, {
                                x: -this._size,
                                ease: easing
                            }));
                            break;
                    }
                    break;
                case Transition.TYPE_CUSTOM:
                    this._mask = params.mask;
                    this._mask.visible = false;
                    if(params.motion) {
                        timeline.insert(params.motion);
                    }
                    switch(direction) {
                        case Transition.IN:
                            timeline.append(TweenMax.to(this, .5, {
                                alpha: 0,
                                ease: Strong.easeOut
                            }), 0);
                            break;
                        case Transition.OUT:
                            break;
                    }
                    break;
            }
            this.visible = true;
            this._timeManager.addAnimatedObject(this);
            return this;
        };
        Transition.prototype.onComplete = function (params) {
            this._timeManager.removeAnimatedObject(this);
            this.removeComponentByName(Avota.EngineConstants.RENDER);
            this.completeSignal.dispatch();
            if(params.onComplete) {
                params.onComplete.apply(null, (params.onCompleteParams) ? params.onCompleteParams : null);
            }
            this.destroy();
        };
        Transition.prototype.onFrame = function (delta) {
            switch(this._type) {
                case Transition.TYPE_CIRCLE:
                    this.beginPath();
                    this.arc(this.centerX, this.centerY, this._size, 0, 2 * Math.PI, false);
                    this.closePath();
                    this.fill();
                    break;
                case Transition.TYPE_SQUARE:
                    this.beginPath();
                    this.rect(this.centerX - (this._size * .5), this.centerY - (this._size * .5), this._size, this._size);
                    this.closePath();
                    this.fill();
                    break;
                case Transition.TYPE_WIPE:
                    this.beginPath();
                    switch(this._position) {
                        case Transition.LEFT:
                            this.rect(0, 0, this._size, this.height);
                            break;
                        case Transition.RIGHT:
                            this.rect(this.width - this._size, 0, this._size, this.height);
                            break;
                    }
                    this.closePath();
                    this.fill();
                    break;
                case Transition.TYPE_CUSTOM:
                    var transform = (this._mask)._renderComponent.transform;
                    this.fillRect(0, 0, this.width, this.height);
                    this._renderContext.save();
                    this.globalCompositeOperation = "destination-out";
                    this._renderContext.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                    this._renderContext.drawImage(this._mask.view, 0, 0);
                    this._renderContext.restore();
                    break;
            }
        };
        Transition.prototype.destroy = function () {
            this.completeSignal.removeAll();
            this.completeSignal = null;
            _super.prototype.destroy.call(this);
        };
        return Transition;
    })(Avota.CanvasGraphic);
    Avota.Transition = Transition;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Direction = (function () {
        function Direction() { }
        Direction.UP = 1 << 1;
        Direction.DOWN = 1 << 2;
        Direction.LEFT = 1 << 3;
        Direction.RIGHT = 1 << 4;
        Direction.UP_LEFT = Direction.UP | Direction.LEFT;
        Direction.UP_RIGHT = Direction.UP | Direction.RIGHT;
        Direction.DOWN_LEFT = Direction.DOWN | Direction.LEFT;
        Direction.DOWN_RIGHT = Direction.DOWN | Direction.RIGHT;
        return Direction;
    })();
    Avota.Direction = Direction;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Matrix = (function () {
        function Matrix(a, b, c, d, tx, ty) {
            if (typeof a === "undefined") { a = 1; }
            if (typeof b === "undefined") { b = 0; }
            if (typeof c === "undefined") { c = 0; }
            if (typeof d === "undefined") { d = 1; }
            if (typeof tx === "undefined") { tx = 0; }
            if (typeof ty === "undefined") { ty = 0; }
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        }
        Matrix.prototype.identity = function () {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0;
            return this;
        };
        Matrix.prototype.setTo = function (a, b, c, d, tx, ty) {
            if (typeof a === "undefined") { a = 1; }
            if (typeof b === "undefined") { b = 0; }
            if (typeof c === "undefined") { c = 0; }
            if (typeof d === "undefined") { d = 1; }
            if (typeof tx === "undefined") { tx = 0; }
            if (typeof ty === "undefined") { ty = 0; }
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
            return this;
        };
        Matrix.prototype.translate = function (x, y) {
            this.tx += this.a * x + this.c * y;
            this.ty += this.b * x + this.d * y;
            return this;
        };
        Matrix.prototype.rotate = function (r) {
            this._cos = Math.cos(r);
            this._sin = Math.sin(r);
            this._ma = this.a * this._cos + this.c * this._sin;
            this._mb = this.b * this._cos + this.d * this._sin;
            this._mc = this.a * -this._sin + this.c * this._cos;
            this._md = this.b * -this._sin + this.d * this._cos;
            this.a = this._ma;
            this.b = this._mb;
            this.c = this._mc;
            this.d = this._md;
            return this;
        };
        Matrix.prototype.scale = function (x, y) {
            this.a *= x;
            this.b *= x;
            this.c *= y;
            this.d *= y;
            return this;
        };
        Matrix.prototype.multiply = function (matrix) {
            this._ma = (this.a * matrix.a) + (this.b * matrix.c);
            this._mb = (this.a * matrix.b) + (this.b * matrix.d);
            this._mc = (this.c * matrix.a) + (this.d * matrix.c);
            this._md = (this.c * matrix.b) + (this.d * matrix.d);
            this._mtx = (this.tx * matrix.a) + (this.ty * matrix.c) + matrix.tx;
            this._mty = (this.tx * matrix.b) + (this.ty * matrix.d) + matrix.ty;
            this.a = this._ma;
            this.b = this._mb;
            this.c = this._mc;
            this.d = this._md;
            this.tx = this._mtx;
            this.ty = this._mty;
            return this;
        };
        Matrix.prototype.invert = function () {
            this._d = 1 / (this.a * this.d - this.b * this.c);
            this._ma = this.d * this._d;
            this._mb = -this.b * this._d;
            this._mc = -this.c * this._d;
            this._md = this.a * this._d;
            this._mtx = this._d * (this.c * this.ty - this.d * this.tx);
            this._mty = this._d * (this.b * this.tx - this.a * this.ty);
            this.a = this._ma;
            this.b = this._mb;
            this.c = this._mc;
            this.d = this._md;
            this.tx = this._mtx;
            this.ty = this._mty;
            return this;
        };
        Matrix.prototype.transformPoint = function (point, result) {
            if (typeof result === "undefined") { result = new Avota.Point(); }
            result.x = point.x * this.a + point.y * this.c + this.tx;
            result.y = point.x * this.b + point.y * this.d + this.ty;
            return result;
        };
        Matrix.prototype.transformPointDelta = function (point, result) {
            if (typeof result === "undefined") { result = new Avota.Point(); }
            result.x = point.x * this.a + point.y * this.c;
            result.y = point.x * this.b + point.y * this.d;
            return result;
        };
        Matrix.prototype.transformPointInverse = function (point, result) {
            if (typeof result === "undefined") { result = new Avota.Point(); }
            var id = 1 / (this.a * this.d + this.c * -this.b);
            result.x = this.d * id * point.x + -this.c * id * point.y + (this.ty * this.c - this.tx * this.d) * id;
            result.y = this.a * id * point.y + -this.b * id * point.x + (-this.ty * this.a + this.tx * this.b) * id;
            return result;
        };
        Matrix.prototype.clone = function () {
            return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
        };
        Matrix.prototype.toString = function () {
            return '[{Matrix (a=' + this.a + ' b=' + this.b + ' c=' + this.c + ' d=' + this.d + ' tx=' + this.tx + ' ty=' + this.ty + ')}]';
        };
        return Matrix;
    })();
    Avota.Matrix = Matrix;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TransformOptions = (function () {
        function TransformOptions() { }
        TransformOptions.NONE = 1 << 0;
        TransformOptions.TRANSLATE = 1 << 1;
        TransformOptions.ROTATE = 1 << 2;
        TransformOptions.SCALE = 1 << 3;
        TransformOptions.ALL = TransformOptions.TRANSLATE | TransformOptions.ROTATE | TransformOptions.SCALE;
        return TransformOptions;
    })();
    Avota.TransformOptions = TransformOptions;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InputComponent = (function (_super) {
        __extends(InputComponent, _super);
        function InputComponent(inputManager) {
                _super.call(this);
            this._inputManager = inputManager;
            this.inputOver = new Avota.Signal();
            this.inputOut = new Avota.Signal();
            this.inputDown = new Avota.Signal();
            this.inputUp = new Avota.Signal();
            this.inputMove = new Avota.Signal();
            this.enabled = true;
            this.ignoreTransparency = true;
            this.useHandCursor = true;
        }
        Object.defineProperty(InputComponent.prototype, "_renderID", {
            get: function () {
                return this._inputObject._renderID;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputComponent.prototype, "hitArea", {
            get: function () {
                return this._hitArea || this._inputObject.extents.inflate(-5, -5);
            },
            set: function (value) {
                this._hitArea = value;
            },
            enumerable: true,
            configurable: true
        });
        InputComponent.prototype._onRegister = function () {
            this._inputObject = this._owner;
            this._inputManager.addInputObject(this);
            _super.prototype._onRegister.call(this);
        };
        InputComponent.prototype._onUnregister = function () {
            this._inputManager.removeInputObject(this);
            _super.prototype._onUnregister.call(this);
        };
        InputComponent.prototype._onReset = function () {
            this._inputObject = this._owner;
            _super.prototype._onReset.call(this);
        };
        InputComponent.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.inputOver.removeAll();
            this.inputOut.removeAll();
            this.inputDown.removeAll();
            this.inputUp.removeAll();
            this.inputMove.removeAll();
            this._hitArea = null;
            this.inputOver = null;
            this.inputOut = null;
            this.inputDown = null;
            this.inputUp = null;
            this.inputMove = null;
            this._inputManager = null;
            this._inputObject = null;
        };
        return InputComponent;
    })(Avota.Component);
    Avota.InputComponent = InputComponent;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InputPointer = (function (_super) {
        __extends(InputPointer, _super);
        function InputPointer(inputManager) {
                _super.call(this, InputPointer.NAME + InputPointer.COUNT++);
            this._inputManager = inputManager;
            this.id = -1;
            this.x = -1;
            this.y = -1;
            this.prevX = -1;
            this.prevY = -1;
            this.isDown = false;
            this._inputObjects = [];
            this._currentInput = [];
            this._previousInput = [];
            this._pt = new Avota.Point();
            this._renderInfo = new Avota.Rectangle();
        }
        InputPointer.NAME = "InputPointer";
        InputPointer.COUNT = 0;
        InputPointer.prototype.getObjectsUnderPointer = function () {
            var result = [];
            var inputObjects = this._inputManager._inputObjects;
            if(inputObjects.length === 0) {
                return result;
            }
            var inputObject;
            for(var i = 0, n = inputObjects.length; i < n; i++) {
                inputObject = inputObjects[i];
                if(!inputObject.enabled) {
                    continue;
                }
                this._renderComponent = (inputObject.owner)._renderComponent;
                this._renderRect = this._renderComponent._renderRect;
                this._renderOffset = this._renderComponent._renderOffset;
                this._renderInfo = inputObject.hitArea;
                if(inputObject.ignoreTransparency) {
                    this._pt = this._renderComponent.globalToLocal(this._pt.setTo(this.x, this.y));
                    this._alpha = this._renderComponent._renderContext.getImageData(this._renderRect.x + this._pt.x - this._renderOffset.x + this._renderComponent.offsetX, this._renderRect.y + this._pt.y - this._renderOffset.y + this._renderComponent.offsetY, 1, 1).data[3] / 255;
                    if(this._alpha == 0) {
                        continue;
                    }
                }
                if(this.rectContainsInput(this._renderInfo)) {
                    result.push(inputObject.owner);
                }
            }
            return result;
        };
        InputPointer.prototype.start = function (x, y, id) {
            this.prevX = this.x;
            this.prevY = this.y;
            this.x = x;
            this.y = y;
            this.id = id;
            this.isDown = true;
            this.active = true;
            this._inputObjects = this._inputManager._inputObjects;
            if(this._inputObjects.length == 0) {
                return;
            }
            var inputObject;
            var topMostInputObject;
            var topMostRenderID = -1;
            for(var i = 0, n = this._inputObjects.length; i < n; i++) {
                inputObject = this._inputObjects[i];
                if(!inputObject.enabled) {
                    continue;
                }
                this._renderComponent = (inputObject.owner)._renderComponent;
                this._renderRect = this._renderComponent._renderRect;
                this._renderOffset = this._renderComponent._renderOffset;
                this._renderInfo = inputObject.hitArea;
                if(inputObject.ignoreTransparency) {
                    this._pt = this._renderComponent.globalToLocal(this._pt.setTo(this.x, this.y));
                    this._alpha = this._renderComponent._renderContext.getImageData(this._renderRect.x + this._pt.x - this._renderOffset.x + this._renderComponent.offsetX, this._renderRect.y + this._pt.y - this._renderOffset.y + this._renderComponent.offsetY, 1, 1).data[3] / 255;
                    if(this._alpha == 0) {
                        continue;
                    }
                }
                if(this.rectContainsInput(this._renderInfo) && inputObject._renderID > topMostRenderID) {
                    topMostRenderID = inputObject._renderID;
                    topMostInputObject = inputObject;
                }
            }
            if(topMostInputObject) {
                if(LOGGING) {
                    this._log.mark(topMostInputObject.owner.name + " Down");
                }
                topMostInputObject.inputDown.dispatch(topMostInputObject.owner, this.x, this.y, this.id);
            } else {
                if(LOGGING) {
                    this._log.mark("Input Down");
                }
            }
        };
        InputPointer.prototype.end = function (x, y, id) {
            this.prevX = this.x;
            this.prevY = this.y;
            this.x = x;
            this.y = y;
            this.id = id;
            this.isDown = false;
            this.active = false;
            this._inputObjects = this._inputManager._inputObjects;
            if(this._inputObjects.length == 0) {
                return;
            }
            var inputObject;
            var topMostInputObject;
            var topMostRenderID = -1;
            for(var i = 0, n = this._inputObjects.length; i < n; i++) {
                inputObject = this._inputObjects[i];
                if(!inputObject.enabled) {
                    continue;
                }
                this._renderComponent = (inputObject.owner)._renderComponent;
                this._renderRect = this._renderComponent._renderRect;
                this._renderOffset = this._renderComponent._renderOffset;
                this._renderInfo = inputObject.hitArea;
                if(inputObject.ignoreTransparency) {
                    this._pt = this._renderComponent.globalToLocal(this._pt.setTo(this.x, this.y));
                    this._alpha = this._renderComponent._renderContext.getImageData(this._renderRect.x + this._pt.x - this._renderOffset.x + this._renderComponent.offsetX, this._renderRect.y + this._pt.y - this._renderOffset.y + this._renderComponent.offsetY, 1, 1).data[3] / 255;
                    if(this._alpha == 0) {
                        continue;
                    }
                }
                if(this.rectContainsInput(this._renderInfo) && inputObject._renderID > topMostRenderID) {
                    topMostRenderID = inputObject._renderID;
                    topMostInputObject = inputObject;
                }
            }
            if(topMostInputObject) {
                if(LOGGING) {
                    this._log.mark(topMostInputObject.owner.name + " Up");
                }
                topMostInputObject.inputUp.dispatch(topMostInputObject.owner, this.x, this.y, this.id);
            } else {
                if(LOGGING) {
                    this._log.mark("Input Up");
                }
            }
            this._inputManager._canvas.style.cursor = "default";
        };
        InputPointer.prototype.move = function (x, y, id) {
            this.prevX = this.x;
            this.prevY = this.y;
            this.x = x;
            this.y = y;
            this.id = id;
            this.active = true;
            this._inputObjects = this._inputManager._inputObjects;
            if(this._inputObjects.length == 0) {
                return;
            }
            this._currentInput = [];
            this._topMostRenderID = -1;
            this._topMostInputObject = null;
            for(var i = 0, n = this._inputObjects.length; i < n; i++) {
                this._inputObject = this._inputObjects[i];
                if(!this._inputObject.enabled) {
                    continue;
                }
                this._renderComponent = (this._inputObject.owner)._renderComponent;
                this._renderRect = this._renderComponent._renderRect;
                this._renderOffset = this._renderComponent._renderOffset;
                this._renderInfo = this._inputObject.hitArea;
                if(!this.rectContainsInput(this._renderInfo)) {
                    continue;
                }
                this._currentInput.push(this._inputObject);
                if(this._inputObject.ignoreTransparency) {
                    this._pt = this._renderComponent.globalToLocal(this._pt.setTo(this.x, this.y));
                    this._alpha = this._renderComponent._renderContext.getImageData(this._renderRect.x + this._pt.x - this._renderOffset.x + this._renderComponent.offsetX, this._renderRect.y + this._pt.y - this._renderOffset.y + this._renderComponent.offsetY, 1, 1).data[3] / 255;
                    if(this._alpha == 0) {
                        continue;
                    }
                }
                if(this._inputObject._renderID > this._topMostRenderID) {
                    this._topMostRenderID = this._inputObject._renderID;
                    this._topMostInputObject = this._inputObject;
                }
            }
            for(var i = 0, n = this._inputObjects.length; i < n; i++) {
                this._inputObject = this._inputObjects[i];
                if(!this._inputObject.enabled) {
                    continue;
                }
                this._currentIndex = this._currentInput.indexOf(this._inputObject);
                this._previousIndex = this._previousInput.indexOf(this._inputObject);
                if(this._inputObject.inputOut.getNumListeners() > 0) {
                    if(this._inputObject == this._previousTopMostInputObject && this._previousTopMostInputObject != this._topMostInputObject) {
                        this._inputObject.inputOut.dispatch(this._inputObject.owner, this.x, this.y, this.id);
                    } else if(this._currentIndex == -1 && this._previousIndex != -1 && this._inputObject == this._topMostInputObject) {
                        this._inputObject.inputOut.dispatch(this._inputObject.owner, this.x, this.y, this.id);
                    }
                }
                if(this._inputObject.inputOver.getNumListeners() > 0) {
                    if(this._inputObject != this._previousTopMostInputObject && this._inputObject == this._topMostInputObject) {
                        this._inputObject.inputOver.dispatch(this._inputObject.owner, this.x, this.y, this.id);
                    }
                }
            }
            this._inputManager._canvas.style.cursor = (this._topMostInputObject && this._topMostInputObject.enabled && this._topMostInputObject.useHandCursor) ? "pointer" : "default";
            this._previousTopMostInputObject = this._topMostInputObject;
            this._previousInput = this._currentInput.concat();
            if(this._topMostInputObject && this._topMostInputObject.inputMove.getNumListeners() > 0) {
                this._topMostInputObject.inputMove.dispatch(this._topMostInputObject.owner, this.x, this.y, id);
            }
        };
        InputPointer.prototype.rectContainsInput = function (rect) {
            return (this.x >= rect.x && this.x <= rect.x + rect.width && this.y >= rect.y && this.y <= rect.y + rect.height);
        };
        InputPointer.prototype.destroy = function () {
            this._inputObjects = null;
            this._currentInput = null;
            this._previousInput = null;
            this._inputManager = null;
            this._pt = null;
            _super.prototype.destroy.call(this);
        };
        return InputPointer;
    })(Avota.Element);
    Avota.InputPointer = InputPointer;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ActionBase = (function () {
        function ActionBase() {
            this._priority = 0;
        }
        Object.defineProperty(ActionBase.prototype, "priority", {
            get: function () {
                return this._priority;
            },
            set: function (value) {
                this._priority = value;
            },
            enumerable: true,
            configurable: true
        });
        ActionBase.prototype.addedToEmitter = function (emitter) {
        };
        ActionBase.prototype.removedFromEmitter = function (emitter) {
        };
        ActionBase.prototype.update = function (emitter, particle, time) {
        };
        return ActionBase;
    })();
    Avota.ActionBase = ActionBase;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Accelerate = (function (_super) {
        __extends(Accelerate, _super);
        function Accelerate(accelerationX, accelerationY) {
            if (typeof accelerationX === "undefined") { accelerationX = 0; }
            if (typeof accelerationY === "undefined") { accelerationY = 0; }
                _super.call(this);
            this.x = accelerationX;
            this.y = accelerationY;
        }
        Object.defineProperty(Accelerate.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Accelerate.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Accelerate.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.velX += this._x * time;
            p.velY += this._y * time;
        };
        return Accelerate;
    })(Avota.ActionBase);
    Avota.Accelerate = Accelerate;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Age = (function (_super) {
        __extends(Age, _super);
        function Age(easing) {
            if (typeof easing === "undefined") { easing = null; }
                _super.call(this);
            if(easing == null) {
                this._easing = Avota.Linear.easeNone;
            } else {
                this._easing = easing;
            }
        }
        Object.defineProperty(Age.prototype, "easing", {
            get: function () {
                return this._easing;
            },
            set: function (value) {
                this._easing = value;
            },
            enumerable: true,
            configurable: true
        });
        Age.prototype.update = function (emitter, particle, time) {
            particle.age += time;
            if(particle.age >= particle.lifetime) {
                particle.energy = 0;
                particle.isDead = true;
            } else {
                particle.energy = this._easing(particle.age, 1, -1, particle.lifetime);
            }
        };
        return Age;
    })(Avota.ActionBase);
    Avota.Age = Age;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GravityWell = (function (_super) {
        __extends(GravityWell, _super);
        function GravityWell(power, x, y, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            if (typeof epsilon === "undefined") { epsilon = 100; }
                _super.call(this);
            this._gravityConst = 10000;
            this.power = power;
            this.x = x;
            this.y = y;
            this.epsilon = epsilon;
        }
        Object.defineProperty(GravityWell.prototype, "power", {
            get: function () {
                return this._power / this._gravityConst;
            },
            set: function (value) {
                this._power = value * this._gravityConst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GravityWell.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GravityWell.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GravityWell.prototype, "epsilon", {
            get: function () {
                return Math.sqrt(this._epsilonSq);
            },
            set: function (value) {
                this._epsilonSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        GravityWell.prototype.update = function (emitter, particle, time) {
            if(particle.mass == 0) {
                return;
            }
            var p = particle;
            var x = this._x - p.x;
            var y = this._y - p.y;
            var dSq = x * x + y * y;
            if(dSq == 0) {
                return;
            }
            var d = Math.sqrt(dSq);
            if(dSq < this._epsilonSq) {
                dSq = this._epsilonSq;
            }
            var factor = (this._power * time) / (dSq * d);
            p.velX += x * factor;
            p.velY += y * factor;
        };
        return GravityWell;
    })(Avota.ActionBase);
    Avota.GravityWell = GravityWell;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AntiGravity = (function (_super) {
        __extends(AntiGravity, _super);
        function AntiGravity(power, x, y, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            if (typeof epsilon === "undefined") { epsilon = 1; }
                _super.call(this, power, x, y, epsilon);
        }
        Object.defineProperty(AntiGravity.prototype, "power", {
            get: function () {
                return -_super.prototype.power;
            },
            set: function (value) {
                _super.prototype.power = -value;
            },
            enumerable: true,
            configurable: true
        });
        return AntiGravity;
    })(Avota.GravityWell);
    Avota.AntiGravity = AntiGravity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ApproachNeighbours = (function (_super) {
        __extends(ApproachNeighbours, _super);
        function ApproachNeighbours(maxDistance, acceleration) {
            if (typeof maxDistance === "undefined") { maxDistance = 0; }
            if (typeof acceleration === "undefined") { acceleration = 0; }
                _super.call(this);
            this.priority = 10;
            this.maxDistance = maxDistance;
            this.acceleration = acceleration;
        }
        Object.defineProperty(ApproachNeighbours.prototype, "maxDistance", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
                this._maxSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApproachNeighbours.prototype, "acceleration", {
            get: function () {
                return this._acc;
            },
            set: function (value) {
                this._acc = value;
            },
            enumerable: true,
            configurable: true
        });
        ApproachNeighbours.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
        };
        ApproachNeighbours.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var distanceInv;
            var distanceSq;
            var dx;
            var dy;
            var moveX = 0;
            var moveY = 0;
            var factor;
            for(i = p.sortID - 1; i >= 0; --i) {
                other = particles[i];
                if((dx = other.x - p.x) < -this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq && distanceSq > 0) {
                    distanceInv = 1 / Math.sqrt(distanceSq);
                    moveX += dx * distanceInv;
                    moveY += dy * distanceInv;
                }
            }
            for(i = p.sortID + 1; i < len; ++i) {
                other = particles[i];
                if((dx = other.x - p.x) > this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq && distanceSq > 0) {
                    distanceInv = 1 / Math.sqrt(distanceSq);
                    moveX += dx * distanceInv;
                    moveY += dy * distanceInv;
                }
            }
            if(moveX != 0 || moveY != 0) {
                factor = time * this._acc / Math.sqrt(moveX * moveX + moveY * moveY);
                p.velX += factor * moveX;
                p.velY += factor * moveY;
            }
        };
        return ApproachNeighbours;
    })(Avota.ActionBase);
    Avota.ApproachNeighbours = ApproachNeighbours;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var BoundingBox = (function (_super) {
        __extends(BoundingBox, _super);
        function BoundingBox(left, top, right, bottom, bounce) {
            if (typeof left === "undefined") { left = 0; }
            if (typeof top === "undefined") { top = 0; }
            if (typeof right === "undefined") { right = 0; }
            if (typeof bottom === "undefined") { bottom = 0; }
            if (typeof bounce === "undefined") { bounce = 1; }
                _super.call(this);
            this.priority = -20;
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;
            this.bounce = bounce;
        }
        Object.defineProperty(BoundingBox.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (value) {
                this._left = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingBox.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (value) {
                this._top = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingBox.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (value) {
                this._right = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingBox.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (value) {
                this._bottom = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingBox.prototype, "bounce", {
            get: function () {
                return this._bounce;
            },
            set: function (value) {
                this._bounce = value;
            },
            enumerable: true,
            configurable: true
        });
        BoundingBox.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var radius = particle.collisionRadius;
            var position;
            if(p.velX > 0 && (position = p.x + radius) >= this._right) {
                p.velX = -p.velX * this._bounce;
                p.x += 2 * (this._right - position);
                if(emitter.particleBoundingBoxCollision.getNumListeners() > 0) {
                    emitter.particleBoundingBoxCollision.dispatch(p);
                }
            } else if(p.velX < 0 && (position = p.x - radius) <= this._left) {
                p.velX = -p.velX * this._bounce;
                p.x += 2 * (this._left - position);
                if(emitter.particleBoundingBoxCollision.getNumListeners() > 0) {
                    emitter.particleBoundingBoxCollision.dispatch(p);
                }
            }
            if(p.velY > 0 && (position = p.y + radius) >= this._bottom) {
                p.velY = -p.velY * this._bounce;
                p.y += 2 * (this._bottom - position);
                if(emitter.particleBoundingBoxCollision.getNumListeners() > 0) {
                    emitter.particleBoundingBoxCollision.dispatch(p);
                }
            } else if(p.velY < 0 && (position = p.y - radius) <= this._top) {
                p.velY = -p.velY * this._bounce;
                p.y += 2 * (this._top - position);
                if(emitter.particleBoundingBoxCollision.getNumListeners() > 0) {
                    emitter.particleBoundingBoxCollision.dispatch(p);
                }
            }
        };
        return BoundingBox;
    })(Avota.ActionBase);
    Avota.BoundingBox = BoundingBox;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ChangeCollisionRadius = (function (_super) {
        __extends(ChangeCollisionRadius, _super);
        function ChangeCollisionRadius(startRadius, endRadius) {
            if (typeof startRadius === "undefined") { startRadius = 1; }
            if (typeof endRadius === "undefined") { endRadius = 1; }
                _super.call(this);
            this._diffRadius = startRadius - endRadius;
            this._endRadius = endRadius;
        }
        Object.defineProperty(ChangeCollisionRadius.prototype, "startRadius", {
            get: function () {
                return this._endRadius + this._diffRadius;
            },
            set: function (value) {
                this._diffRadius = value - this._endRadius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeCollisionRadius.prototype, "endRadius", {
            get: function () {
                return this._endRadius;
            },
            set: function (value) {
                this._diffRadius = this._endRadius + this._diffRadius - value;
                this._endRadius = value;
            },
            enumerable: true,
            configurable: true
        });
        ChangeCollisionRadius.prototype.update = function (emitter, particle, time) {
            particle.collisionRadius = this._endRadius + this._diffRadius * particle.energy;
        };
        return ChangeCollisionRadius;
    })(Avota.ActionBase);
    Avota.ChangeCollisionRadius = ChangeCollisionRadius;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ChangeMass = (function (_super) {
        __extends(ChangeMass, _super);
        function ChangeMass(startMass, endMass) {
            if (typeof startMass === "undefined") { startMass = 1; }
            if (typeof endMass === "undefined") { endMass = 1; }
                _super.call(this);
            this._diffMass = startMass - endMass;
            this._endMass = endMass;
        }
        Object.defineProperty(ChangeMass.prototype, "startMass", {
            get: function () {
                return this._endMass + this._diffMass;
            },
            set: function (value) {
                this._diffMass = value - this._endMass;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChangeMass.prototype, "endMass", {
            get: function () {
                return this._endMass;
            },
            set: function (value) {
                this._diffMass = this._endMass + this._diffMass - value;
                this._endMass = value;
            },
            enumerable: true,
            configurable: true
        });
        ChangeMass.prototype.update = function (emitter, particle, time) {
            particle.mass = this._endMass + this._diffMass * particle.energy;
        };
        return ChangeMass;
    })(Avota.ActionBase);
    Avota.ChangeMass = ChangeMass;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Collide = (function (_super) {
        __extends(Collide, _super);
        function Collide(bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
                _super.call(this);
            this._sign = 1;
            this.priority = -20;
            this.bounce = bounce;
            this._maxDistance = 0;
        }
        Object.defineProperty(Collide.prototype, "bounce", {
            get: function () {
                return this._bounce;
            },
            set: function (value) {
                this._bounce = value;
            },
            enumerable: true,
            configurable: true
        });
        Collide.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
            this._updateActivity = new Avota.UpdateOnFrame(this);
            emitter.addActivity(this._updateActivity);
        };
        Collide.prototype.removedFromEmitter = function (emitter) {
            if(this._updateActivity) {
                emitter.removeActivity(this._updateActivity);
            }
        };
        Collide.prototype.frameUpdate = function (emitter, time) {
            var particles = emitter.particles;
            var max1 = 0;
            var max2 = 0;
            var p;
            for(var i = 0; i < particles.length; i++) {
                p = particles[i];
                if(p.collisionRadius > max1) {
                    max2 = max1;
                    max1 = p.collisionRadius;
                } else if(p.collisionRadius > max2) {
                    max2 = p.collisionRadius;
                }
            }
            this._maxDistance = max1 + max2;
            this._sign = -this._sign;
        };
        Collide.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var factor;
            var distanceSq;
            var collisionDist;
            var dx, dy;
            var n1, n2;
            var relN;
            var m1, m2;
            var f1, f2;
            for(i = p.sortID + this._sign; i < len && i >= 0; i += this._sign) {
                other = particles[i];
                if((dx = other.x - p.x) * this._sign > this._maxDistance) {
                    break;
                }
                collisionDist = other.collisionRadius + p.collisionRadius;
                if(dx * this._sign > collisionDist) {
                    continue;
                }
                dy = other.y - p.y;
                if(dy > collisionDist || dy < -collisionDist) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= collisionDist * collisionDist && distanceSq > 0) {
                    factor = 1 / Math.sqrt(distanceSq);
                    dx *= factor;
                    dy *= factor;
                    n1 = dx * p.velX + dy * p.velY;
                    n2 = dx * other.velX + dy * other.velY;
                    relN = n1 - n2;
                    if(relN > 0) {
                        m1 = p.mass;
                        m2 = other.mass;
                        factor = ((1 + this._bounce) * relN) / (m1 + m2);
                        f1 = factor * m2;
                        f2 = -factor * m1;
                        p.velX -= f1 * dx;
                        p.velY -= f1 * dy;
                        other.velX -= f2 * dx;
                        other.velY -= f2 * dy;
                        if(emitter.particleCollision.getNumListeners() > 0) {
                            emitter.particleCollision.dispatch(p, other);
                        }
                    }
                }
            }
        };
        return Collide;
    })(Avota.ActionBase);
    Avota.Collide = Collide;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CollisionZone = (function (_super) {
        __extends(CollisionZone, _super);
        function CollisionZone(zone, bounce) {
            if (typeof zone === "undefined") { zone = null; }
            if (typeof bounce === "undefined") { bounce = 1; }
                _super.call(this);
            this.priority = -30;
            this.bounce = bounce;
            this.zone = zone;
        }
        Object.defineProperty(CollisionZone.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CollisionZone.prototype, "bounce", {
            get: function () {
                return this._bounce;
            },
            set: function (value) {
                this._bounce = value;
            },
            enumerable: true,
            configurable: true
        });
        CollisionZone.prototype.update = function (emitter, particle, time) {
            var collide = this._zone.collideParticle(particle, this._bounce);
            if(collide && emitter.particleZoneCollision.getNumListeners() > 0) {
                emitter.particleZoneCollision.dispatch(particle, this._zone);
            }
        };
        return CollisionZone;
    })(Avota.ActionBase);
    Avota.CollisionZone = CollisionZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ColorChange = (function (_super) {
        __extends(ColorChange, _super);
        function ColorChange(startColor, endColor) {
            if (typeof startColor === "undefined") { startColor = 0xFFFFFFFF; }
            if (typeof endColor === "undefined") { endColor = 0xFFFFFFFF; }
                _super.call(this);
            this._startColor = startColor;
            this._endColor = endColor;
        }
        Object.defineProperty(ColorChange.prototype, "startColor", {
            get: function () {
                return this._startColor;
            },
            set: function (value) {
                this._startColor = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorChange.prototype, "endColor", {
            get: function () {
                return this._endColor;
            },
            set: function (value) {
                this._endColor = value;
            },
            enumerable: true,
            configurable: true
        });
        ColorChange.prototype.update = function (emitter, particle, time) {
            particle.color = Avota.ColorUtil.interpolateARGB(this._startColor, this._endColor, particle.energy);
        };
        return ColorChange;
    })(Avota.ActionBase);
    Avota.ColorChange = ColorChange;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DeathSpeed = (function (_super) {
        __extends(DeathSpeed, _super);
        function DeathSpeed(speed, isMinimum) {
            if (typeof speed === "undefined") { speed = Number.MAX_VALUE; }
            if (typeof isMinimum === "undefined") { isMinimum = false; }
                _super.call(this);
            this.limit = speed;
            this.isMinimum = isMinimum;
        }
        Object.defineProperty(DeathSpeed.prototype, "limit", {
            get: function () {
                return this._limit;
            },
            set: function (value) {
                this._limit = value;
                this._limitSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeathSpeed.prototype, "isMinimum", {
            get: function () {
                return this._isMinimum;
            },
            set: function (value) {
                this._isMinimum = value;
            },
            enumerable: true,
            configurable: true
        });
        DeathSpeed.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var speedSq = p.velX * p.velX + p.velY * p.velY;
            if((this._isMinimum && speedSq < this._limitSq) || (!this._isMinimum && speedSq > this._limitSq)) {
                p.isDead = true;
            }
        };
        return DeathSpeed;
    })(Avota.ActionBase);
    Avota.DeathSpeed = DeathSpeed;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DeathZone = (function (_super) {
        __extends(DeathZone, _super);
        function DeathZone(zone, zoneIsSafe) {
            if (typeof zone === "undefined") { zone = null; }
            if (typeof zoneIsSafe === "undefined") { zoneIsSafe = false; }
                _super.call(this);
            this.priority = -20;
            this.zone = zone;
            this.zoneIsSafe = zoneIsSafe;
        }
        Object.defineProperty(DeathZone.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DeathZone.prototype, "zoneIsSafe", {
            get: function () {
                return this._invertZone;
            },
            set: function (value) {
                this._invertZone = value;
            },
            enumerable: true,
            configurable: true
        });
        DeathZone.prototype.update = function (emitter, particle, time) {
            this.p = particle;
            this.inside = this._zone.contains(this.p.x, this.p.y);
            if(this._invertZone) {
                if(!this.inside) {
                    this.p.isDead = true;
                }
            } else {
                if(this.inside) {
                    this.p.isDead = true;
                }
            }
        };
        return DeathZone;
    })(Avota.ActionBase);
    Avota.DeathZone = DeathZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Explosion = (function (_super) {
        __extends(Explosion, _super);
        function Explosion(power, x, y, expansionRate, depth, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            if (typeof expansionRate === "undefined") { expansionRate = 300; }
            if (typeof depth === "undefined") { depth = 10; }
            if (typeof epsilon === "undefined") { epsilon = 1; }
                _super.call(this);
            this._oldRadius = 0;
            this._radius = 0;
            this._radiusChange = 0;
            this._expansionRate = 500;
            this.power = power;
            this.x = x;
            this.y = y;
            this.expansionRate = expansionRate;
            this.depth = depth;
            this.epsilon = epsilon;
        }
        Explosion.POWER_FACTOR = 100000;
        Object.defineProperty(Explosion.prototype, "power", {
            get: function () {
                return this._power / Explosion.POWER_FACTOR;
            },
            set: function (value) {
                this._power = value * Explosion.POWER_FACTOR;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Explosion.prototype, "expansionRate", {
            get: function () {
                return this._expansionRate;
            },
            set: function (value) {
                this._expansionRate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Explosion.prototype, "depth", {
            get: function () {
                return this._depth * 2;
            },
            set: function (value) {
                this._depth = value * 0.5;
                this._invDepth = 1 / this._depth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Explosion.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Explosion.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Explosion.prototype, "epsilon", {
            get: function () {
                return Math.sqrt(this._epsilonSq);
            },
            set: function (value) {
                this._epsilonSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Explosion.prototype.addedToEmitter = function (emitter) {
            this._updateActivity = new Avota.UpdateOnFrame(this);
            emitter.addActivity(this._updateActivity);
        };
        Explosion.prototype.removedFromEmitter = function (emitter) {
            if(this._updateActivity) {
                emitter.removeActivity(this._updateActivity);
            }
        };
        Explosion.prototype.reset = function () {
            this._radius = 0;
            this._oldRadius = 0;
            this._radiusChange = 0;
        };
        Explosion.prototype.frameUpdate = function (emitter, time) {
            this._oldRadius = this._radius;
            this._radiusChange = this._expansionRate * time;
            this._radius += this._radiusChange;
        };
        Explosion.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var x = p.x - this._x;
            var y = p.y - this._y;
            var dSq = x * x + y * y;
            if(dSq == 0) {
                dSq = 0.02;
                x = 0.1;
                y = 0.1;
            }
            var d = Math.sqrt(dSq);
            if(d < this._oldRadius - this._depth) {
                return;
            }
            if(d > this._radius + this._depth) {
                return;
            }
            var offset = d < this._radius ? this._depth - this._radius + d : this._depth - d + this._radius;
            var oldOffset = d < this._oldRadius ? this._depth - this._oldRadius + d : this._depth - d + this._oldRadius;
            offset *= this._invDepth;
            oldOffset *= this._invDepth;
            if(offset < 0) {
                time = time * (this._radiusChange + offset) / this._radiusChange;
                offset = 0;
            }
            if(oldOffset < 0) {
                time = time * (this._radiusChange + oldOffset) / this._radiusChange;
                oldOffset = 0;
            }
            var factor;
            if(d < this._oldRadius || d > this._radius) {
                factor = time * this._power * (offset + oldOffset) / (this._radius * 2 * d * p.mass);
            } else {
                var ratio = (1 - oldOffset) / this._radiusChange;
                var f1 = ratio * time * this._power * (oldOffset + 1);
                var f2 = (1 - ratio) * time * this._power * (offset + 1);
                factor = (f1 + f2) / (this._radius * 2 * d * p.mass);
            }
            p.velX += x * factor;
            p.velY += y * factor;
        };
        return Explosion;
    })(Avota.ActionBase);
    Avota.Explosion = Explosion;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Fade = (function (_super) {
        __extends(Fade, _super);
        function Fade(startAlpha, endAlpha) {
            if (typeof startAlpha === "undefined") { startAlpha = 1; }
            if (typeof endAlpha === "undefined") { endAlpha = 0; }
                _super.call(this);
            this.priority = -5;
            this._diffAlpha = startAlpha - endAlpha;
            this._endAlpha = endAlpha;
        }
        Object.defineProperty(Fade.prototype, "startAlpha", {
            get: function () {
                return this._endAlpha + this._diffAlpha;
            },
            set: function (value) {
                this._diffAlpha = value - this._endAlpha;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Fade.prototype, "endAlpha", {
            get: function () {
                return this._endAlpha;
            },
            set: function (value) {
                this._diffAlpha = this._endAlpha + this._diffAlpha - value;
                this._endAlpha = value;
            },
            enumerable: true,
            configurable: true
        });
        Fade.prototype.update = function (emitter, particle, time) {
            var alpha = this._endAlpha + this._diffAlpha * particle.energy;
            particle.color = (particle.color & 0xFFFFFF) | (Math.round(alpha * 255) << 24);
        };
        return Fade;
    })(Avota.ActionBase);
    Avota.Fade = Fade;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Friction = (function (_super) {
        __extends(Friction, _super);
        function Friction(friction) {
            if (typeof friction === "undefined") { friction = 0; }
                _super.call(this);
            this.friction = friction;
        }
        Object.defineProperty(Friction.prototype, "friction", {
            get: function () {
                return this._friction;
            },
            set: function (value) {
                this._friction = value;
            },
            enumerable: true,
            configurable: true
        });
        Friction.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var len2 = p.velX * p.velX + p.velY * p.velY;
            if(len2 == 0) {
                return;
            }
            var scale = 1 - (this._friction * time) / (Math.sqrt(len2) * p.mass);
            if(scale < 0) {
                p.velX = 0;
                p.velY = 0;
            } else {
                p.velX *= scale;
                p.velY *= scale;
            }
        };
        return Friction;
    })(Avota.ActionBase);
    Avota.Friction = Friction;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Jet = (function (_super) {
        __extends(Jet, _super);
        function Jet(accelerationX, accelerationY, zone, invertZone) {
            if (typeof accelerationX === "undefined") { accelerationX = 0; }
            if (typeof accelerationY === "undefined") { accelerationY = 0; }
            if (typeof zone === "undefined") { zone = null; }
            if (typeof invertZone === "undefined") { invertZone = false; }
                _super.call(this);
            this.x = accelerationX;
            this.y = accelerationY;
            this.zone = zone;
            this.invertZone = invertZone;
        }
        Object.defineProperty(Jet.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Jet.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Jet.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Jet.prototype, "invertZone", {
            get: function () {
                return this._invert;
            },
            set: function (value) {
                this._invert = value;
            },
            enumerable: true,
            configurable: true
        });
        Jet.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(this._zone.contains(p.x, p.y)) {
                if(!this._invert) {
                    p.velX += this._x * time;
                    p.velY += this._y * time;
                }
            } else {
                if(this._invert) {
                    p.velX += this._x * time;
                    p.velY += this._y * time;
                }
            }
        };
        return Jet;
    })(Avota.ActionBase);
    Avota.Jet = Jet;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var KeyDownAction = (function (_super) {
        __extends(KeyDownAction, _super);
        function KeyDownAction(action, keyCode) {
            if (typeof action === "undefined") { action = null; }
            if (typeof keyCode === "undefined") { keyCode = 0; }
                _super.call(this);
            this._action = action;
            this._keyCode = keyCode;
            this._isDown = false;
        }
        Object.defineProperty(KeyDownAction.prototype, "action", {
            get: function () {
                return this._action;
            },
            set: function (value) {
                this._action = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyDownAction.prototype, "keyCode", {
            get: function () {
                return this._keyCode;
            },
            set: function (value) {
                this._keyCode = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyDownAction.prototype, "priority", {
            get: function () {
                return this._action.priority;
            },
            set: function (value) {
                this._action.priority = value;
            },
            enumerable: true,
            configurable: true
        });
        KeyDownAction.prototype.addedToEmitter = function (emitter) {
            this._action.addedToEmitter(emitter);
        };
        KeyDownAction.prototype.removedFromEmitter = function (emitter) {
            this._action.removedFromEmitter(emitter);
        };
        KeyDownAction.prototype.update = function (emitter, particle, time) {
            if(this._isDown) {
                this._action.update(emitter, particle, time);
            }
        };
        return KeyDownAction;
    })(Avota.ActionBase);
    Avota.KeyDownAction = KeyDownAction;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var LinearDrag = (function (_super) {
        __extends(LinearDrag, _super);
        function LinearDrag(drag) {
            if (typeof drag === "undefined") { drag = 0; }
                _super.call(this);
            this.drag = drag;
        }
        Object.defineProperty(LinearDrag.prototype, "drag", {
            get: function () {
                return this._drag;
            },
            set: function (value) {
                this._drag = value;
            },
            enumerable: true,
            configurable: true
        });
        LinearDrag.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var scale = 1 - this._drag * time / p.mass;
            if(scale < 0) {
                p.velX = 0;
                p.velY = 0;
            } else {
                p.velX *= scale;
                p.velY *= scale;
            }
        };
        return LinearDrag;
    })(Avota.ActionBase);
    Avota.LinearDrag = LinearDrag;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MatchRotateVelocity = (function (_super) {
        __extends(MatchRotateVelocity, _super);
        function MatchRotateVelocity(maxDistance, acceleration) {
            if (typeof maxDistance === "undefined") { maxDistance = 0; }
            if (typeof acceleration === "undefined") { acceleration = 0; }
                _super.call(this);
            this.priority = 10;
            this.maxDistance = maxDistance;
            this.acceleration = acceleration;
        }
        Object.defineProperty(MatchRotateVelocity.prototype, "maxDistance", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
                this._maxSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatchRotateVelocity.prototype, "acceleration", {
            get: function () {
                return this._acc;
            },
            set: function (value) {
                this._acc = value;
            },
            enumerable: true,
            configurable: true
        });
        MatchRotateVelocity.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
        };
        MatchRotateVelocity.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var distanceSq;
            var dx;
            var dy;
            var vel = 0;
            var count = 0;
            var factor;
            for(i = p.sortID - 1; i >= 0; --i) {
                other = particles[i];
                if((dx = p.x - other.x) > this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq) {
                    vel += other.angVelocity;
                    ++count;
                }
            }
            for(i = p.sortID + 1; i < len; ++i) {
                other = particles[i];
                if((dx = other.x - p.x) > this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq) {
                    vel += other.angVelocity;
                    ++count;
                }
            }
            if(count != 0) {
                vel = vel / count - p.angVelocity;
                if(vel != 0) {
                    var velSign = 1;
                    if(vel < 0) {
                        velSign = -1;
                        vel = -vel;
                    }
                    factor = time * this._acc;
                    if(factor > vel) {
                        factor = vel;
                    }
                    p.angVelocity += factor * velSign;
                }
            }
        };
        return MatchRotateVelocity;
    })(Avota.ActionBase);
    Avota.MatchRotateVelocity = MatchRotateVelocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MatchVelocity = (function (_super) {
        __extends(MatchVelocity, _super);
        function MatchVelocity(maxDistance, acceleration) {
            if (typeof maxDistance === "undefined") { maxDistance = 0; }
            if (typeof acceleration === "undefined") { acceleration = 0; }
                _super.call(this);
            this.priority = 10;
            this.maxDistance = maxDistance;
            this.acceleration = acceleration;
        }
        Object.defineProperty(MatchVelocity.prototype, "maxDistance", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
                this._maxSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MatchVelocity.prototype, "acceleration", {
            get: function () {
                return this._acc;
            },
            set: function (value) {
                this._acc = value;
            },
            enumerable: true,
            configurable: true
        });
        MatchVelocity.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
        };
        MatchVelocity.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var distanceSq;
            var dx;
            var dy;
            var velX = 0;
            var velY = 0;
            var count = 0;
            var factor;
            for(i = p.sortID - 1; i >= 0; --i) {
                other = particles[i];
                if((dx = p.x - other.x) > this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq) {
                    velX += other.velX;
                    velY += other.velY;
                    ++count;
                }
            }
            for(i = p.sortID + 1; i < len; ++i) {
                other = particles[i];
                if((dx = other.x - p.x) > this._max) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._max || dy < -this._max) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxSq) {
                    velX += other.velX;
                    velY += other.velY;
                    ++count;
                }
            }
            if(count != 0) {
                velX = velX / count - p.velX;
                velY = velY / count - p.velY;
                if(velX != 0 || velY != 0) {
                    factor = time * this._acc / Math.sqrt(velX * velX + velY * velY);
                    if(factor > 1) {
                        factor = 1;
                    }
                    p.velX += factor * velX;
                    p.velY += factor * velY;
                }
            }
        };
        return MatchVelocity;
    })(Avota.ActionBase);
    Avota.MatchVelocity = MatchVelocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MinimumDistance = (function (_super) {
        __extends(MinimumDistance, _super);
        function MinimumDistance(minimum, acceleration) {
            if (typeof minimum === "undefined") { minimum = 0; }
            if (typeof acceleration === "undefined") { acceleration = 0; }
                _super.call(this);
            this.priority = 10;
            this.minimum = minimum;
            this.acceleration = acceleration;
        }
        Object.defineProperty(MinimumDistance.prototype, "minimum", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
                this._minSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MinimumDistance.prototype, "acceleration", {
            get: function () {
                return this._acc;
            },
            set: function (value) {
                this._acc = value;
            },
            enumerable: true,
            configurable: true
        });
        MinimumDistance.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
        };
        MinimumDistance.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var distanceInv;
            var distanceSq;
            var dx;
            var dy;
            var moveX = 0;
            var moveY = 0;
            var factor;
            for(i = p.sortID - 1; i >= 0; --i) {
                other = particles[i];
                if((dx = p.x - other.x) > this._min) {
                    break;
                }
                dy = p.y - other.y;
                if(dy > this._min || dy < -this._min) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._minSq && distanceSq > 0) {
                    distanceInv = 1 / Math.sqrt(distanceSq);
                    moveX += dx * distanceInv;
                    moveY += dy * distanceInv;
                }
            }
            for(i = p.sortID + 1; i < len; ++i) {
                other = particles[i];
                if((dx = p.x - other.x) < -this._min) {
                    break;
                }
                dy = p.y - other.y;
                if(dy > this._min || dy < -this._min) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._minSq && distanceSq > 0) {
                    distanceInv = 1 / Math.sqrt(distanceSq);
                    moveX += dx * distanceInv;
                    moveY += dy * distanceInv;
                }
            }
            if(moveX != 0 || moveY != 0) {
                factor = time * this._acc / Math.sqrt(moveX * moveX + moveY * moveY);
                p.velX += factor * moveX;
                p.velY += factor * moveY;
            }
        };
        return MinimumDistance;
    })(Avota.ActionBase);
    Avota.MinimumDistance = MinimumDistance;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MouseGravity = (function (_super) {
        __extends(MouseGravity, _super);
        function MouseGravity(power, inputManager, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof inputManager === "undefined") { inputManager = null; }
            if (typeof epsilon === "undefined") { epsilon = 100; }
                _super.call(this);
            this._gravityConst = 10000;
            this.power = power;
            this.epsilon = epsilon;
            this._inputManager = inputManager;
        }
        MouseGravity.NAME = "MouseGravity";
        Object.defineProperty(MouseGravity.prototype, "power", {
            get: function () {
                return this._power / this._gravityConst;
            },
            set: function (value) {
                this._power = value * this._gravityConst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MouseGravity.prototype, "epsilon", {
            get: function () {
                return Math.sqrt(this._epsilonSq);
            },
            set: function (value) {
                this._epsilonSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        MouseGravity.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var x = this._inputManager.inputX - p.x;
            var y = this._inputManager.inputY - p.y;
            var dSq = x * x + y * y;
            if(dSq == 0) {
                return;
            }
            var d = Math.sqrt(dSq);
            if(dSq < this._epsilonSq) {
                dSq = this._epsilonSq;
            }
            var factor = (this._power * time) / (dSq * d);
            p.velX += x * factor;
            p.velY += y * factor;
        };
        return MouseGravity;
    })(Avota.ActionBase);
    Avota.MouseGravity = MouseGravity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MouseAntiGravity = (function (_super) {
        __extends(MouseAntiGravity, _super);
        function MouseAntiGravity(power, inputManager, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof inputManager === "undefined") { inputManager = null; }
            if (typeof epsilon === "undefined") { epsilon = 1; }
                _super.call(this, power, inputManager, epsilon);
        }
        MouseAntiGravity.NAME = "MouseAntiGravity";
        Object.defineProperty(MouseAntiGravity.prototype, "power", {
            get: function () {
                return -_super.prototype.power;
            },
            set: function (value) {
                _super.prototype.power = -value;
            },
            enumerable: true,
            configurable: true
        });
        return MouseAntiGravity;
    })(Avota.MouseGravity);
    Avota.MouseAntiGravity = MouseAntiGravity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Move = (function (_super) {
        __extends(Move, _super);
        function Move() {
                _super.call(this);
            this.priority = -10;
        }
        Move.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.previousX = p.x;
            p.previousY = p.y;
            p.x += p.velX * time;
            p.y += p.velY * time;
        };
        return Move;
    })(Avota.ActionBase);
    Avota.Move = Move;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MutualGravity = (function (_super) {
        __extends(MutualGravity, _super);
        function MutualGravity(power, maxDistance, epsilon) {
            if (typeof power === "undefined") { power = 0; }
            if (typeof maxDistance === "undefined") { maxDistance = 0; }
            if (typeof epsilon === "undefined") { epsilon = 1; }
                _super.call(this);
            this._gravityConst = 1000;
            this.priority = 10;
            this.power = power;
            this.maxDistance = maxDistance;
            this.epsilon = epsilon;
        }
        Object.defineProperty(MutualGravity.prototype, "power", {
            get: function () {
                return this._power / this._gravityConst;
            },
            set: function (value) {
                this._power = value * this._gravityConst;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MutualGravity.prototype, "maxDistance", {
            get: function () {
                return this._maxDistance;
            },
            set: function (value) {
                this._maxDistance = value;
                this._maxDistanceSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MutualGravity.prototype, "epsilon", {
            get: function () {
                return Math.sqrt(this._epsilonSq);
            },
            set: function (value) {
                this._epsilonSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        MutualGravity.prototype.addedToEmitter = function (emitter) {
            (emitter).spaceSort = true;
        };
        MutualGravity.prototype.update = function (emitter, particle, time) {
            if(particle.mass == 0) {
                return;
            }
            var p = particle;
            var e = emitter;
            var particles = e.particles;
            var other;
            var i;
            var len = particles.length;
            var factor;
            var distance;
            var distanceSq;
            var dx;
            var dy;
            for(i = p.sortID + 1; i < len; ++i) {
                other = particles[i];
                if(other.mass == 0) {
                    continue;
                }
                if((dx = other.x - p.x) > this._maxDistance) {
                    break;
                }
                dy = other.y - p.y;
                if(dy > this._maxDistance || dy < -this._maxDistance) {
                    continue;
                }
                distanceSq = dy * dy + dx * dx;
                if(distanceSq <= this._maxDistanceSq && distanceSq > 0) {
                    distance = Math.sqrt(distanceSq);
                    if(distanceSq < this._epsilonSq) {
                        distanceSq = this._epsilonSq;
                    }
                    factor = (this._power * time) / (distanceSq * distance);
                    p.velX += (dx *= factor) * other.mass;
                    p.velY += (dy *= factor) * other.mass;
                    other.velX -= dx * p.mass;
                    other.velY -= dy * p.mass;
                }
            }
        };
        return MutualGravity;
    })(Avota.ActionBase);
    Avota.MutualGravity = MutualGravity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var QuadraticDrag = (function (_super) {
        __extends(QuadraticDrag, _super);
        function QuadraticDrag(drag) {
            if (typeof drag === "undefined") { drag = 0; }
                _super.call(this);
            this.drag = drag;
        }
        Object.defineProperty(QuadraticDrag.prototype, "drag", {
            get: function () {
                return this._drag;
            },
            set: function (value) {
                this._drag = value;
            },
            enumerable: true,
            configurable: true
        });
        QuadraticDrag.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var len2 = p.velX * p.velX + p.velY * p.velY;
            if(len2 == 0) {
                return;
            }
            var scale = 1 - this._drag * time * Math.sqrt(len2) / p.mass;
            if(scale < 0) {
                p.velX = 0;
                p.velY = 0;
            } else {
                p.velX *= scale;
                p.velY *= scale;
            }
        };
        return QuadraticDrag;
    })(Avota.ActionBase);
    Avota.QuadraticDrag = QuadraticDrag;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RandomDrift = (function (_super) {
        __extends(RandomDrift, _super);
        function RandomDrift(driftX, driftY) {
            if (typeof driftX === "undefined") { driftX = 0; }
            if (typeof driftY === "undefined") { driftY = 0; }
                _super.call(this);
            this.driftX = driftX;
            this.driftY = driftY;
        }
        Object.defineProperty(RandomDrift.prototype, "driftX", {
            get: function () {
                return this._sizeX / 2;
            },
            set: function (value) {
                this._sizeX = value * 2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RandomDrift.prototype, "driftY", {
            get: function () {
                return this._sizeY / 2;
            },
            set: function (value) {
                this._sizeY = value * 2;
            },
            enumerable: true,
            configurable: true
        });
        RandomDrift.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.velX += (Math.random() - 0.5) * this._sizeX * time;
            p.velY += (Math.random() - 0.5) * this._sizeY * time;
        };
        return RandomDrift;
    })(Avota.ActionBase);
    Avota.RandomDrift = RandomDrift;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Rotate = (function (_super) {
        __extends(Rotate, _super);
        function Rotate() {
                _super.call(this);
            this.priority = -10;
        }
        Rotate.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.rotation += p.angVelocity * time;
        };
        return Rotate;
    })(Avota.ActionBase);
    Avota.Rotate = Rotate;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotateToDirection = (function (_super) {
        __extends(RotateToDirection, _super);
        function RotateToDirection() {
                _super.call(this);
        }
        RotateToDirection.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.rotation = Math.atan2(p.velY, p.velX);
        };
        return RotateToDirection;
    })(Avota.ActionBase);
    Avota.RotateToDirection = RotateToDirection;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotationalFriction = (function (_super) {
        __extends(RotationalFriction, _super);
        function RotationalFriction(friction) {
            if (typeof friction === "undefined") { friction = 0; }
                _super.call(this);
            this.friction = friction;
        }
        Object.defineProperty(RotationalFriction.prototype, "friction", {
            get: function () {
                return this._friction;
            },
            set: function (value) {
                this._friction = value;
            },
            enumerable: true,
            configurable: true
        });
        RotationalFriction.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(p.angVelocity == 0) {
                return;
            }
            var scale = 1 - (this._friction * time) / (Math.abs(p.angVelocity) * p.inertia);
            if(scale < 0) {
                p.angVelocity = 0;
            } else {
                p.angVelocity *= scale;
            }
        };
        return RotationalFriction;
    })(Avota.ActionBase);
    Avota.RotationalFriction = RotationalFriction;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotationalLinearDrag = (function (_super) {
        __extends(RotationalLinearDrag, _super);
        function RotationalLinearDrag(drag) {
            if (typeof drag === "undefined") { drag = 0; }
                _super.call(this);
            this.drag = drag;
        }
        Object.defineProperty(RotationalLinearDrag.prototype, "drag", {
            get: function () {
                return this._drag;
            },
            set: function (value) {
                this._drag = value;
            },
            enumerable: true,
            configurable: true
        });
        RotationalLinearDrag.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(p.angVelocity == 0) {
                return;
            }
            var scale = 1 - this._drag * time / p.inertia;
            if(scale < 0) {
                p.angVelocity = 0;
            } else {
                p.angVelocity *= scale;
            }
        };
        return RotationalLinearDrag;
    })(Avota.ActionBase);
    Avota.RotationalLinearDrag = RotationalLinearDrag;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotationalQuadraticDrag = (function (_super) {
        __extends(RotationalQuadraticDrag, _super);
        function RotationalQuadraticDrag(drag) {
            if (typeof drag === "undefined") { drag = 0; }
                _super.call(this);
            this.drag = drag;
        }
        Object.defineProperty(RotationalQuadraticDrag.prototype, "drag", {
            get: function () {
                return this._drag;
            },
            set: function (value) {
                this._drag = value;
            },
            enumerable: true,
            configurable: true
        });
        RotationalQuadraticDrag.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(p.angVelocity == 0) {
                return;
            }
            var scale = 1 - this._drag * time * p.angVelocity / p.inertia;
            if(scale < 0) {
                p.angVelocity = 0;
            } else {
                p.angVelocity *= scale;
            }
        };
        return RotationalQuadraticDrag;
    })(Avota.ActionBase);
    Avota.RotationalQuadraticDrag = RotationalQuadraticDrag;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleAll = (function (_super) {
        __extends(ScaleAll, _super);
        function ScaleAll(startScale, endScale) {
            if (typeof startScale === "undefined") { startScale = 1; }
            if (typeof endScale === "undefined") { endScale = 1; }
                _super.call(this);
            this._diffScale = 0;
            this._endScale = 1;
            this.startScale = startScale;
            this.endScale = endScale;
        }
        Object.defineProperty(ScaleAll.prototype, "startScale", {
            get: function () {
                return this._endScale + this._diffScale;
            },
            set: function (value) {
                this._diffScale = value - this._endScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleAll.prototype, "endScale", {
            get: function () {
                return this._endScale;
            },
            set: function (value) {
                this._diffScale = this._endScale + this._diffScale - value;
                this._endScale = value;
            },
            enumerable: true,
            configurable: true
        });
        ScaleAll.prototype.update = function (emitter, particle, time) {
            var scale = this._endScale + this._diffScale * particle.energy;
            var change = scale / particle.scale;
            particle.scale = scale;
            particle.mass *= change * change;
            particle.collisionRadius *= change;
        };
        return ScaleAll;
    })(Avota.ActionBase);
    Avota.ScaleAll = ScaleAll;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleImage = (function (_super) {
        __extends(ScaleImage, _super);
        function ScaleImage(startScale, endScale) {
            if (typeof startScale === "undefined") { startScale = 1; }
            if (typeof endScale === "undefined") { endScale = 1; }
                _super.call(this);
            this._diffScale = startScale - endScale;
            this._endScale = endScale;
        }
        Object.defineProperty(ScaleImage.prototype, "startScale", {
            get: function () {
                return this._endScale + this._diffScale;
            },
            set: function (value) {
                this._diffScale = value - this._endScale;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleImage.prototype, "endScale", {
            get: function () {
                return this._endScale;
            },
            set: function (value) {
                this._diffScale = this._endScale + this._diffScale - value;
                this._endScale = value;
            },
            enumerable: true,
            configurable: true
        });
        ScaleImage.prototype.update = function (emitter, particle, time) {
            particle.scale = this._endScale + this._diffScale * particle.energy;
        };
        return ScaleImage;
    })(Avota.ActionBase);
    Avota.ScaleImage = ScaleImage;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SpeedLimit = (function (_super) {
        __extends(SpeedLimit, _super);
        function SpeedLimit(speed, isMinimum) {
            if (typeof speed === "undefined") { speed = Number.MAX_VALUE; }
            if (typeof isMinimum === "undefined") { isMinimum = false; }
                _super.call(this);
            this.priority = -5;
            this.limit = speed;
            this.isMinimum = isMinimum;
        }
        Object.defineProperty(SpeedLimit.prototype, "limit", {
            get: function () {
                return this._limit;
            },
            set: function (value) {
                this._limit = value;
                this._limitSq = value * value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SpeedLimit.prototype, "isMinimum", {
            get: function () {
                return this._isMinimum;
            },
            set: function (value) {
                this._isMinimum = value;
            },
            enumerable: true,
            configurable: true
        });
        SpeedLimit.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var speedSq = p.velX * p.velX + p.velY * p.velY;
            if((this._isMinimum && speedSq < this._limitSq) || (!this._isMinimum && speedSq > this._limitSq)) {
                var scale = this._limit / Math.sqrt(speedSq);
                p.velX *= scale;
                p.velY *= scale;
            }
        };
        return SpeedLimit;
    })(Avota.ActionBase);
    Avota.SpeedLimit = SpeedLimit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TargetColor = (function (_super) {
        __extends(TargetColor, _super);
        function TargetColor(targetColor, rate) {
            if (typeof targetColor === "undefined") { targetColor = 0xFFFFFF; }
            if (typeof rate === "undefined") { rate = 0.1; }
                _super.call(this);
            this._red = (targetColor >>> 16) & 255;
            this._green = (targetColor >>> 8) & 255;
            this._blue = (targetColor) & 255;
            this._alpha = (targetColor >>> 24) & 255;
            this._rate = rate;
        }
        Object.defineProperty(TargetColor.prototype, "targetColor", {
            get: function () {
                return (this._alpha << 24) | (this._red << 16) | (this._green << 8) | this._blue;
            },
            set: function (value) {
                this._red = (value >>> 16) & 255;
                this._green = (value >>> 8) & 255;
                this._blue = (value) & 255;
                this._alpha = (value >>> 24) & 255;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TargetColor.prototype, "rate", {
            get: function () {
                return this._rate;
            },
            set: function (value) {
                this._rate = value;
            },
            enumerable: true,
            configurable: true
        });
        TargetColor.prototype.update = function (emitter, particle, time) {
            if(!particle.dictionary.get(this)) {
                particle.dictionary.put(this, new ColorFloat(particle.color));
            }
            var dicObj = particle.dictionary.get(this);
            var inv = this._rate * time;
            if(inv > 1) {
                inv = 1;
            }
            var ratio = 1 - inv;
            dicObj.red = dicObj.red * ratio + this._red * inv;
            dicObj.green = dicObj.green * ratio + this._green * inv;
            dicObj.blue = dicObj.blue * ratio + this._blue * inv;
            dicObj.alpha = dicObj.alpha * ratio + this._alpha * inv;
            particle.color = dicObj.getColor();
        };
        return TargetColor;
    })(Avota.ActionBase);
    Avota.TargetColor = TargetColor;    
    var ColorFloat = (function () {
        function ColorFloat(color) {
            this.red = (color >>> 16) & 255;
            this.green = (color >>> 8) & 255;
            this.blue = (color) & 255;
            this.alpha = (color >>> 24) & 255;
        }
        ColorFloat.prototype.getColor = function () {
            return (Math.round(this.alpha) << 24) | (Math.round(this.red) << 16) | (Math.round(this.green) << 8) | Math.round(this.blue);
        };
        return ColorFloat;
    })();
    Avota.ColorFloat = ColorFloat;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TargetRotateVelocity = (function (_super) {
        __extends(TargetRotateVelocity, _super);
        function TargetRotateVelocity(targetVelocity, rate) {
            if (typeof targetVelocity === "undefined") { targetVelocity = 0; }
            if (typeof rate === "undefined") { rate = 0.1; }
                _super.call(this);
            this.targetVelocity = targetVelocity;
            this.rate = rate;
        }
        Object.defineProperty(TargetRotateVelocity.prototype, "targetVelocity", {
            get: function () {
                return this._vel;
            },
            set: function (value) {
                this._vel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TargetRotateVelocity.prototype, "rate", {
            get: function () {
                return this._rate;
            },
            set: function (value) {
                this._rate = value;
            },
            enumerable: true,
            configurable: true
        });
        TargetRotateVelocity.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.angVelocity += (this._vel - p.angVelocity) * this._rate * time;
        };
        return TargetRotateVelocity;
    })(Avota.ActionBase);
    Avota.TargetRotateVelocity = TargetRotateVelocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TargetScale = (function (_super) {
        __extends(TargetScale, _super);
        function TargetScale(targetScale, rate) {
            if (typeof targetScale === "undefined") { targetScale = 1; }
            if (typeof rate === "undefined") { rate = 0.1; }
                _super.call(this);
            this._scale = targetScale;
            this._rate = rate;
        }
        Object.defineProperty(TargetScale.prototype, "targetScale", {
            get: function () {
                return this._scale;
            },
            set: function (value) {
                this._scale = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TargetScale.prototype, "rate", {
            get: function () {
                return this._rate;
            },
            set: function (value) {
                this._rate = value;
            },
            enumerable: true,
            configurable: true
        });
        TargetScale.prototype.update = function (emitter, particle, time) {
            particle.scale += (this._scale - particle.scale) * this._rate * time;
        };
        return TargetScale;
    })(Avota.ActionBase);
    Avota.TargetScale = TargetScale;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TargetVelocity = (function (_super) {
        __extends(TargetVelocity, _super);
        function TargetVelocity(targetVelocityX, targetVelocityY, rate) {
            if (typeof targetVelocityX === "undefined") { targetVelocityX = 0; }
            if (typeof targetVelocityY === "undefined") { targetVelocityY = 0; }
            if (typeof rate === "undefined") { rate = 0.1; }
                _super.call(this);
            this.targetVelocityX = targetVelocityX;
            this.targetVelocityY = targetVelocityY;
            this.rate = rate;
        }
        Object.defineProperty(TargetVelocity.prototype, "targetVelocityY", {
            get: function () {
                return this._velY;
            },
            set: function (value) {
                this._velY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TargetVelocity.prototype, "targetVelocityX", {
            get: function () {
                return this._velX;
            },
            set: function (value) {
                this._velX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TargetVelocity.prototype, "rate", {
            get: function () {
                return this._rate;
            },
            set: function (value) {
                this._rate = value;
            },
            enumerable: true,
            configurable: true
        });
        TargetVelocity.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.velX += (this._velX - p.velX) * this._rate * time;
            p.velY += (this._velY - p.velY) * this._rate * time;
        };
        return TargetVelocity;
    })(Avota.ActionBase);
    Avota.TargetVelocity = TargetVelocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TurnTowardsPoint = (function (_super) {
        __extends(TurnTowardsPoint, _super);
        function TurnTowardsPoint(x, y, power) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
            if (typeof power === "undefined") { power = 0; }
                _super.call(this);
            this.power = power;
            this.x = x;
            this.y = y;
        }
        Object.defineProperty(TurnTowardsPoint.prototype, "power", {
            get: function () {
                return this._power;
            },
            set: function (value) {
                this._power = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TurnTowardsPoint.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TurnTowardsPoint.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        TurnTowardsPoint.prototype.update = function (emitter, particle, time) {
            var p = particle;
            var velLength = Math.sqrt(p.velX * p.velX + p.velY * p.velY);
            var dx = p.velX / velLength;
            var dy = p.velY / velLength;
            var acc = this._power * time;
            var targetX = this._x - p.x;
            var targetY = this._y - p.y;
            var len = Math.sqrt(targetX * targetX + targetY * targetY);
            if(len == 0) {
                return;
            }
            targetX /= len;
            targetY /= len;
            var dot = targetX * dx + targetY * dy;
            var perpX = targetX - dx * dot;
            var perpY = targetY - dy * dot;
            var factor = acc / Math.sqrt(perpX * perpX + perpY * perpY);
            p.velX += perpX * factor;
            p.velY += perpY * factor;
            factor = velLength / Math.sqrt(p.velX * p.velX + p.velY * p.velY);
            p.velX *= factor;
            p.velY *= factor;
        };
        return TurnTowardsPoint;
    })(Avota.ActionBase);
    Avota.TurnTowardsPoint = TurnTowardsPoint;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TweenPosition = (function (_super) {
        __extends(TweenPosition, _super);
        function TweenPosition(startX, startY, endX, endY) {
            if (typeof startX === "undefined") { startX = 0; }
            if (typeof startY === "undefined") { startY = 0; }
            if (typeof endX === "undefined") { endX = 0; }
            if (typeof endY === "undefined") { endY = 0; }
                _super.call(this);
            this._diffX = 0;
            this._endX = 0;
            this._diffY = 0;
            this._endY = 0;
            this.startX = startX;
            this.endX = endX;
            this.startY = startY;
            this.endY = endY;
        }
        Object.defineProperty(TweenPosition.prototype, "startX", {
            get: function () {
                return this._endX + this._diffX;
            },
            set: function (value) {
                this._diffX = value - this._endX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TweenPosition.prototype, "endX", {
            get: function () {
                return this._endX;
            },
            set: function (value) {
                this._diffX = this._endX + this._diffX - value;
                this._endX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TweenPosition.prototype, "startY", {
            get: function () {
                return this._endY + this._diffY;
            },
            set: function (value) {
                this._diffY = value - this._endY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TweenPosition.prototype, "endY", {
            get: function () {
                return this._endY;
            },
            set: function (value) {
                this._diffY = this._endY + this._diffY - value;
                this._endY = value;
            },
            enumerable: true,
            configurable: true
        });
        TweenPosition.prototype.update = function (emitter, particle, time) {
            var p = particle;
            p.x = this._endX + this._diffX * p.energy;
            p.y = this._endY + this._diffY * p.energy;
        };
        return TweenPosition;
    })(Avota.ActionBase);
    Avota.TweenPosition = TweenPosition;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TweenToCurrentPosition = (function (_super) {
        __extends(TweenToCurrentPosition, _super);
        function TweenToCurrentPosition(zone) {
                _super.call(this);
            this._zone = zone;
            this.priority = -10;
        }
        Object.defineProperty(TweenToCurrentPosition.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        TweenToCurrentPosition.prototype.addedToEmitter = function (emitter) {
            if(!emitter.hasInitializer(this)) {
                emitter.addInitializer(this);
            }
        };
        TweenToCurrentPosition.prototype.removedFromEmitter = function (emitter) {
            emitter.removeInitializer(this);
        };
        TweenToCurrentPosition.prototype.initialize = function (emitter, particle) {
            var p = particle;
            var pt = this._zone.getLocation();
            var data = new TweenToPositionData(pt.x, pt.y, p.x, p.y);
            p.dictionary.put(this, data);
        };
        TweenToCurrentPosition.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(!p.dictionary.get(this)) {
                this.initialize(emitter, particle);
            }
            var data = p.dictionary.get(this);
            p.x = data.endX + data.diffX * p.energy;
            p.y = data.endY + data.diffY * p.energy;
        };
        return TweenToCurrentPosition;
    })(Avota.ActionBase);
    Avota.TweenToCurrentPosition = TweenToCurrentPosition;    
    var TweenToPositionData = (function () {
        function TweenToPositionData(startX, startY, endX, endY) {
            this.diffX = startX - endX;
            this.diffY = startY - endY;
            this.endX = endX;
            this.endY = endY;
        }
        return TweenToPositionData;
    })();
    Avota.TweenToPositionData = TweenToPositionData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TweenToZone = (function (_super) {
        __extends(TweenToZone, _super);
        function TweenToZone(zone) {
                _super.call(this);
            this._zone = zone;
            this.priority = -10;
        }
        Object.defineProperty(TweenToZone.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        TweenToZone.prototype.addedToEmitter = function (emitter) {
            if(!emitter.hasInitializer(this)) {
                emitter.addInitializer(this);
            }
        };
        TweenToZone.prototype.removedFromEmitter = function (emitter) {
            emitter.removeInitializer(this);
        };
        TweenToZone.prototype.initialize = function (emitter, particle) {
            var p = particle;
            var pt = this._zone.getLocation();
            var data = new TweenToZoneData(p.x, p.y, pt.x, pt.y);
            p.dictionary.put(this, data);
        };
        TweenToZone.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(!p.dictionary.get(this)) {
                this.initialize(emitter, particle);
            }
            var data = p.dictionary.get(this);
            p.x = data.endX + data.diffX * p.energy;
            p.y = data.endY + data.diffY * p.energy;
        };
        return TweenToZone;
    })(Avota.ActionBase);
    Avota.TweenToZone = TweenToZone;    
    var TweenToZoneData = (function () {
        function TweenToZoneData(startX, startY, endX, endY) {
            this.diffX = startX - endX;
            this.diffY = startY - endY;
            this.endX = endX;
            this.endY = endY;
        }
        return TweenToZoneData;
    })();
    Avota.TweenToZoneData = TweenToZoneData;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var WrapAroundBox = (function (_super) {
        __extends(WrapAroundBox, _super);
        function WrapAroundBox(left, top, right, bottom) {
            if (typeof left === "undefined") { left = 0; }
            if (typeof top === "undefined") { top = 0; }
            if (typeof right === "undefined") { right = 0; }
            if (typeof bottom === "undefined") { bottom = 0; }
                _super.call(this);
            this.priority = -20;
            this.left = left;
            this.top = top;
            this.right = right;
            this.bottom = bottom;
        }
        Object.defineProperty(WrapAroundBox.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (value) {
                this._left = value;
                this._width = this._right - this._left;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrapAroundBox.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (value) {
                this._top = value;
                this._height = this._bottom - this._top;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrapAroundBox.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (value) {
                this._right = value;
                this._width = this._right - this._left;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WrapAroundBox.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (value) {
                this._bottom = value;
                this._height = this._bottom - this._top;
            },
            enumerable: true,
            configurable: true
        });
        WrapAroundBox.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(p.velX > 0 && p.x >= this._right) {
                p.x -= this._width;
            } else if(p.velX < 0 && p.x <= this._left) {
                p.x += this._width;
            }
            if(p.velY > 0 && p.y >= this._bottom) {
                p.y -= this._height;
            } else if(p.velY < 0 && p.y <= this._top) {
                p.y += this._height;
            }
        };
        return WrapAroundBox;
    })(Avota.ActionBase);
    Avota.WrapAroundBox = WrapAroundBox;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ZonedAction = (function (_super) {
        __extends(ZonedAction, _super);
        function ZonedAction(action, zone, invertZone) {
            if (typeof action === "undefined") { action = null; }
            if (typeof zone === "undefined") { zone = null; }
            if (typeof invertZone === "undefined") { invertZone = false; }
                _super.call(this);
            this.action = action;
            this.zone = zone;
            this.invertZone = invertZone;
        }
        Object.defineProperty(ZonedAction.prototype, "action", {
            get: function () {
                return this._action;
            },
            set: function (value) {
                this._action = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ZonedAction.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ZonedAction.prototype, "invertZone", {
            get: function () {
                return this._invert;
            },
            set: function (value) {
                this._invert = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ZonedAction.prototype, "priority", {
            get: function () {
                return this._action.priority;
            },
            set: function (value) {
                this._action.priority = value;
            },
            enumerable: true,
            configurable: true
        });
        ZonedAction.prototype.addedToEmitter = function (emitter) {
            this._action.addedToEmitter(emitter);
        };
        ZonedAction.prototype.removedFromEmitter = function (emitter) {
            this._action.removedFromEmitter(emitter);
        };
        ZonedAction.prototype.update = function (emitter, particle, time) {
            var p = particle;
            if(this._zone.contains(p.x, p.y)) {
                if(!this._invert) {
                    this._action.update(emitter, particle, time);
                }
            } else {
                if(this._invert) {
                    this._action.update(emitter, particle, time);
                }
            }
        };
        return ZonedAction;
    })(Avota.ActionBase);
    Avota.ZonedAction = ZonedAction;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ActivityBase = (function () {
        function ActivityBase() {
            this._priority = 0;
        }
        Object.defineProperty(ActivityBase.prototype, "priority", {
            get: function () {
                return this._priority;
            },
            set: function (value) {
                this._priority = value;
            },
            enumerable: true,
            configurable: true
        });
        ActivityBase.prototype.addedToEmitter = function (emitter) {
        };
        ActivityBase.prototype.removedFromEmitter = function (emitter) {
        };
        ActivityBase.prototype.initialize = function (emitter) {
        };
        ActivityBase.prototype.update = function (emitter, time) {
        };
        return ActivityBase;
    })();
    Avota.ActivityBase = ActivityBase;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MoveEmitter = (function (_super) {
        __extends(MoveEmitter, _super);
        function MoveEmitter(x, y) {
            if (typeof x === "undefined") { x = 0; }
            if (typeof y === "undefined") { y = 0; }
                _super.call(this);
            this.x = x;
            this.y = y;
        }
        Object.defineProperty(MoveEmitter.prototype, "x", {
            get: function () {
                return this._velX;
            },
            set: function (value) {
                this._velX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MoveEmitter.prototype, "y", {
            get: function () {
                return this._velY;
            },
            set: function (value) {
                this._velY = value;
            },
            enumerable: true,
            configurable: true
        });
        MoveEmitter.prototype.update = function (emitter, time) {
            var e = emitter;
            e.x += this._velX * time;
            e.y += this._velY * time;
        };
        return MoveEmitter;
    })(Avota.ActivityBase);
    Avota.MoveEmitter = MoveEmitter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotateEmitter = (function (_super) {
        __extends(RotateEmitter, _super);
        function RotateEmitter(angularVelocity) {
            if (typeof angularVelocity === "undefined") { angularVelocity = 0; }
                _super.call(this);
            this.angularVelocity = angularVelocity;
        }
        Object.defineProperty(RotateEmitter.prototype, "angularVelocity", {
            get: function () {
                return this._angularVelocity;
            },
            set: function (value) {
                this._angularVelocity = value;
            },
            enumerable: true,
            configurable: true
        });
        RotateEmitter.prototype.update = function (emitter, time) {
            var e = emitter;
            e.rotRadians += this._angularVelocity * time;
        };
        return RotateEmitter;
    })(Avota.ActivityBase);
    Avota.RotateEmitter = RotateEmitter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var UpdateOnFrame = (function (_super) {
        __extends(UpdateOnFrame, _super);
        function UpdateOnFrame(frameUpdatable) {
                _super.call(this);
            this.action = frameUpdatable;
        }
        UpdateOnFrame.prototype.update = function (emitter, time) {
            this.action.frameUpdate(emitter, time);
        };
        return UpdateOnFrame;
    })(Avota.ActivityBase);
    Avota.UpdateOnFrame = UpdateOnFrame;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Blast = (function () {
        function Blast(startCount) {
            if (typeof startCount === "undefined") { startCount = 0; }
            this._startCount = startCount;
            this._done = false;
        }
        Object.defineProperty(Blast.prototype, "startCount", {
            get: function () {
                return this._startCount;
            },
            set: function (value) {
                this._startCount = value;
            },
            enumerable: true,
            configurable: true
        });
        Blast.prototype.stop = function () {
        };
        Blast.prototype.resume = function () {
        };
        Blast.prototype.startEmitter = function (emitter) {
            this._done = true;
            emitter.dispatchCounterComplete();
            return this._startCount;
        };
        Blast.prototype.updateEmitter = function (emitter, time) {
            return 0;
        };
        Object.defineProperty(Blast.prototype, "complete", {
            get: function () {
                return this._done;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Blast.prototype, "running", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        return Blast;
    })();
    Avota.Blast = Blast;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var KeyDownCounter = (function () {
        function KeyDownCounter(counter, keyCode) {
            if (typeof counter === "undefined") { counter = null; }
            if (typeof keyCode === "undefined") { keyCode = 0; }
            this._stop = false;
            this._counter = counter;
            this._keyCode = keyCode;
            this._isDown = false;
        }
        Object.defineProperty(KeyDownCounter.prototype, "counter", {
            get: function () {
                return this._counter;
            },
            set: function (value) {
                this._counter = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyDownCounter.prototype, "keyCode", {
            get: function () {
                return this._keyCode;
            },
            set: function (value) {
                this._keyCode = value;
            },
            enumerable: true,
            configurable: true
        });
        KeyDownCounter.prototype.startEmitter = function (emitter) {
            if(this._isDown && !this._stop) {
                return this._counter.startEmitter(emitter);
            }
            this._counter.startEmitter(emitter);
            return 0;
        };
        KeyDownCounter.prototype.updateEmitter = function (emitter, time) {
            if(this._isDown && !this._stop) {
                return this._counter.updateEmitter(emitter, time);
            }
            return 0;
        };
        KeyDownCounter.prototype.stop = function () {
            this._stop = true;
        };
        KeyDownCounter.prototype.resume = function () {
            this._stop = false;
        };
        Object.defineProperty(KeyDownCounter.prototype, "complete", {
            get: function () {
                return this._counter.complete;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KeyDownCounter.prototype, "running", {
            get: function () {
                return this._counter.running;
            },
            enumerable: true,
            configurable: true
        });
        return KeyDownCounter;
    })();
    Avota.KeyDownCounter = KeyDownCounter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var PerformanceAdjusted = (function () {
        function PerformanceAdjusted(rateMin, rateMax, targetFrameRate) {
            if (typeof rateMin === "undefined") { rateMin = 0; }
            if (typeof rateMax === "undefined") { rateMax = 0; }
            if (typeof targetFrameRate === "undefined") { targetFrameRate = 30; }
            this._running = false;
            this._rateMin = rateMin;
            this._rate = this._rateMax = rateMax;
            this._target = targetFrameRate;
            this._times = [];
            this._timeToRateCheck = 0;
        }
        Object.defineProperty(PerformanceAdjusted.prototype, "rateMin", {
            get: function () {
                return this._rateMin;
            },
            set: function (value) {
                this._rateMin = value;
                this._timeToRateCheck = 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerformanceAdjusted.prototype, "rateMax", {
            get: function () {
                return this._rateMax;
            },
            set: function (value) {
                this._rate = this._rateMax = value;
                this._timeToRateCheck = 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerformanceAdjusted.prototype, "targetFrameRate", {
            get: function () {
                return this._target;
            },
            set: function (value) {
                this._target = value;
            },
            enumerable: true,
            configurable: true
        });
        PerformanceAdjusted.prototype.stop = function () {
            this._running = false;
        };
        PerformanceAdjusted.prototype.resume = function () {
            this._running = true;
        };
        PerformanceAdjusted.prototype.startEmitter = function (emitter) {
            this._running = true;
            this.newTimeToNext();
            return 0;
        };
        PerformanceAdjusted.prototype.newTimeToNext = function () {
            this._timeToNext = 1 / this._rate;
        };
        PerformanceAdjusted.prototype.updateEmitter = function (emitter, time) {
            if(!this._running) {
                return 0;
            }
            if(this._rate > this._rateMin && (this._timeToRateCheck -= time) <= 0) {
                var t;
 {
                    var frameRate = Math.round(10000 / (t - this._times.shift()));
                    if(frameRate < this._target) {
                        this._rate = Math.floor((this._rate + this._rateMin) * 0.5);
                        this._times.length = 0;
                        if(!(this._timeToRateCheck = (emitter.particles[0]).lifetime)) {
                            this._timeToRateCheck = 2;
                        }
                    }
                }
            }
            var emitTime = time;
            var count = 0;
            emitTime -= this._timeToNext;
            while(emitTime >= 0) {
                ++count;
                this.newTimeToNext();
                emitTime -= this._timeToNext;
            }
            this._timeToNext = -emitTime;
            return count;
        };
        Object.defineProperty(PerformanceAdjusted.prototype, "complete", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PerformanceAdjusted.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        return PerformanceAdjusted;
    })();
    Avota.PerformanceAdjusted = PerformanceAdjusted;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Pulse = (function () {
        function Pulse(period, quantity) {
            if (typeof period === "undefined") { period = 1; }
            if (typeof quantity === "undefined") { quantity = 0; }
            this._running = false;
            this._quantity = quantity;
            this._period = period;
        }
        Pulse.prototype.stop = function () {
            this._running = false;
        };
        Pulse.prototype.resume = function () {
            this._running = true;
        };
        Object.defineProperty(Pulse.prototype, "period", {
            get: function () {
                return this._period;
            },
            set: function (value) {
                this._period = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pulse.prototype, "quantity", {
            get: function () {
                return this._quantity;
            },
            set: function (value) {
                this._quantity = value;
            },
            enumerable: true,
            configurable: true
        });
        Pulse.prototype.startEmitter = function (emitter) {
            this._running = true;
            this._timeToNext = this._period;
            return this._quantity;
        };
        Pulse.prototype.updateEmitter = function (emitter, time) {
            if(!this._running) {
                return 0;
            }
            var count = 0;
            this._timeToNext -= time;
            while(this._timeToNext <= 0) {
                count += this._quantity;
                this._timeToNext += this._period;
            }
            return count;
        };
        Object.defineProperty(Pulse.prototype, "complete", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pulse.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        return Pulse;
    })();
    Avota.Pulse = Pulse;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RandomCounter = (function () {
        function RandomCounter(minRate, maxRate) {
            if (typeof minRate === "undefined") { minRate = 0; }
            if (typeof maxRate === "undefined") { maxRate = 0; }
            this._running = false;
            this._minRate = minRate;
            this._maxRate = maxRate;
        }
        RandomCounter.prototype.stop = function () {
            this._running = false;
        };
        RandomCounter.prototype.resume = function () {
            this._running = true;
        };
        Object.defineProperty(RandomCounter.prototype, "minRate", {
            get: function () {
                return this._minRate;
            },
            set: function (value) {
                this._minRate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RandomCounter.prototype, "maxRate", {
            get: function () {
                return this._maxRate;
            },
            set: function (value) {
                this._maxRate = value;
            },
            enumerable: true,
            configurable: true
        });
        RandomCounter.prototype.startEmitter = function (emitter) {
            this._running = true;
            this._timeToNext = this.newTimeToNext();
            return 0;
        };
        RandomCounter.prototype.newTimeToNext = function () {
            var rate = Math.random() * (this._maxRate - this._minRate) + this._maxRate;
            return 1 / rate;
        };
        RandomCounter.prototype.updateEmitter = function (emitter, time) {
            if(!this._running) {
                return 0;
            }
            var count = 0;
            this._timeToNext -= time;
            while(this._timeToNext <= 0) {
                ++count;
                this._timeToNext += this.newTimeToNext();
            }
            return count;
        };
        Object.defineProperty(RandomCounter.prototype, "complete", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RandomCounter.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        return RandomCounter;
    })();
    Avota.RandomCounter = RandomCounter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SineCounter = (function () {
        function SineCounter(period, rateMax, rateMin) {
            if (typeof period === "undefined") { period = 1; }
            if (typeof rateMax === "undefined") { rateMax = 0; }
            if (typeof rateMin === "undefined") { rateMin = 0; }
            this._running = false;
            this._period = period;
            this._rateMin = rateMin;
            this._rateMax = rateMax;
            this._factor = 2 * Math.PI / period;
            this._scale = 0.5 * (this._rateMax - this._rateMin);
        }
        SineCounter.prototype.stop = function () {
            this._running = false;
        };
        SineCounter.prototype.resume = function () {
            this._running = true;
            this._emitted = 0;
        };
        Object.defineProperty(SineCounter.prototype, "rateMin", {
            get: function () {
                return this._rateMin;
            },
            set: function (value) {
                this._rateMin = value;
                this._scale = 0.5 * (this._rateMax - this._rateMin);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SineCounter.prototype, "rateMax", {
            get: function () {
                return this._rateMax;
            },
            set: function (value) {
                this._rateMax = value;
                this._scale = 0.5 * (this._rateMax - this._rateMin);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SineCounter.prototype, "period", {
            get: function () {
                return this._period;
            },
            set: function (value) {
                this._period = value;
                this._factor = 2 * Math.PI / this._period;
            },
            enumerable: true,
            configurable: true
        });
        SineCounter.prototype.startEmitter = function (emitter) {
            this._running = true;
            this._timePassed = 0;
            this._emitted = 0;
            return 0;
        };
        SineCounter.prototype.updateEmitter = function (emitter, time) {
            if(!this._running) {
                return 0;
            }
            this._timePassed += time;
            var count = Math.floor(this._rateMax * this._timePassed + this._scale * (1 - Math.cos(this._timePassed * this._factor)) / this._factor);
            var ret = count - this._emitted;
            this._emitted = count;
            return ret;
        };
        Object.defineProperty(SineCounter.prototype, "complete", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SineCounter.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        return SineCounter;
    })();
    Avota.SineCounter = SineCounter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Steady = (function () {
        function Steady(rate) {
            if (typeof rate === "undefined") { rate = 0; }
            this._running = false;
            this.rate = rate;
        }
        Steady.prototype.stop = function () {
            this._running = false;
        };
        Steady.prototype.resume = function () {
            this._running = true;
        };
        Object.defineProperty(Steady.prototype, "rate", {
            get: function () {
                return this._rate;
            },
            set: function (value) {
                if(!value || value < 0) {
                    value = 0;
                }
                if(this._rate != value) {
                    if(this._rate && value) {
                        var timePassed = this._rateInv - this._timeToNext;
                        this._rate = value;
                        this._rateInv = value ? 1 / value : Number.MAX_VALUE;
                        this._timeToNext = Math.max(this._rateInv - timePassed, 0);
                    } else {
                        this._rate = value;
                        this._rateInv = value ? 1 / value : Number.MAX_VALUE;
                        this._timeToNext = this._rateInv;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Steady.prototype.startEmitter = function (emitter) {
            this._running = true;
            this._timeToNext = this._rateInv;
            return 0;
        };
        Steady.prototype.updateEmitter = function (emitter, time) {
            if(!this._running) {
                return 0;
            }
            var count = 0;
            this._timeToNext -= time;
            while(this._timeToNext <= 0) {
                ++count;
                this._timeToNext += this._rateInv;
            }
            return count;
        };
        Object.defineProperty(Steady.prototype, "complete", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Steady.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        return Steady;
    })();
    Avota.Steady = Steady;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TimePeriod = (function () {
        function TimePeriod(numParticles, duration, easing) {
            if (typeof numParticles === "undefined") { numParticles = 0; }
            if (typeof duration === "undefined") { duration = 0; }
            if (typeof easing === "undefined") { easing = null; }
            this._running = false;
            this._particles = numParticles;
            this._duration = duration;
            if(easing == null) {
                this._easing = Avota.Linear.easeNone;
            } else {
                this._easing = easing;
            }
        }
        Object.defineProperty(TimePeriod.prototype, "numParticles", {
            get: function () {
                return this._particles;
            },
            set: function (value) {
                this._particles = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimePeriod.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (value) {
                this._duration = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimePeriod.prototype, "easing", {
            get: function () {
                return this._easing;
            },
            set: function (value) {
                this._easing = value;
            },
            enumerable: true,
            configurable: true
        });
        TimePeriod.prototype.startEmitter = function (emitter) {
            this._running = true;
            this._particlesPassed = 0;
            this._timePassed = 0;
            return 0;
        };
        TimePeriod.prototype.updateEmitter = function (emitter, time) {
            if(!this._running || this._timePassed >= this._duration) {
                return 0;
            }
            this._timePassed += time;
            if(this._timePassed >= this._duration) {
                emitter.dispatchCounterComplete();
                var newParticles = this._particles - this._particlesPassed;
                this._particlesPassed = this._particles;
                return newParticles;
            }
            var oldParticles = this._particlesPassed;
            this._particlesPassed = Math.round(this._easing(this._timePassed, 0, this._particles, this._duration));
            return this._particlesPassed - oldParticles;
        };
        TimePeriod.prototype.stop = function () {
            this._running = false;
        };
        TimePeriod.prototype.resume = function () {
            this._running = true;
        };
        Object.defineProperty(TimePeriod.prototype, "complete", {
            get: function () {
                return this._particlesPassed == this._particles;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimePeriod.prototype, "running", {
            get: function () {
                return (this._running && this._timePassed < this._duration);
            },
            enumerable: true,
            configurable: true
        });
        return TimePeriod;
    })();
    Avota.TimePeriod = TimePeriod;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ZeroCounter = (function () {
        function ZeroCounter() {
        }
        ZeroCounter.prototype.startEmitter = function (emitter) {
            return 0;
        };
        ZeroCounter.prototype.updateEmitter = function (emitter, time) {
            return 0;
        };
        ZeroCounter.prototype.stop = function () {
        };
        ZeroCounter.prototype.resume = function () {
        };
        Object.defineProperty(ZeroCounter.prototype, "complete", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ZeroCounter.prototype, "running", {
            get: function () {
                return false;
            },
            enumerable: true,
            configurable: true
        });
        return ZeroCounter;
    })();
    Avota.ZeroCounter = ZeroCounter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ParticleFactoryStats = (function () {
        function ParticleFactoryStats() { }
        ParticleFactoryStats.numParticles = 0;
        return ParticleFactoryStats;
    })();
    Avota.ParticleFactoryStats = ParticleFactoryStats;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Emitter = (function (_super) {
        __extends(Emitter, _super);
        function Emitter(timeManager, name) {
            if (typeof name === "undefined") { name = Emitter.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this.particleDead = new Avota.Signal();
            this.particleCreated = new Avota.Signal();
            this.particleAdded = new Avota.Signal();
            this.particleRemoved = new Avota.Signal();
            this.particleCollision = new Avota.Signal();
            this.particleZoneCollision = new Avota.Signal();
            this.particleBoundingBoxCollision = new Avota.Signal();
            this.emitterEmpty = new Avota.Signal();
            this.emitterUpdated = new Avota.Signal();
            this.counterComplete = new Avota.Signal();
            this._particles = [];
            this._initializers = [];
            this._actions = [];
            this._activities = [];
            this._running = false;
            this._started = false;
            this._updating = false;
            this._maximumFrameTime = .1;
            this._dispatchCounterComplete = false;
            this._processLastFirst = false;
            this._counter = new Avota.ZeroCounter();
        }
        Emitter.NAME = "Emitter";
        Object.defineProperty(Emitter.prototype, "maximumFrameTime", {
            get: function () {
                return this._maximumFrameTime;
            },
            set: function (value) {
                this._maximumFrameTime = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter.prototype, "initializers", {
            get: function () {
                return this._initializers;
            },
            set: function (value) {
                for(var i = this._initializers.length - 1; i >= 0; i--) {
                    this._initializers[i].removedFromEmitter(this);
                }
                this._initializers = value.concat();
                this._initializers.sort(this.prioritySort);
                for(var i = value.length - 1; i >= 0; i--) {
                    value[i].addedToEmitter(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype.addInitializer = function (initializer) {
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                if(this._initializers[i].priority < initializer.priority) {
                    break;
                }
            }
            this._initializers.splice(i, 0, initializer);
            initializer.addedToEmitter(this);
        };
        Emitter.prototype.removeInitializer = function (initializer) {
            var index = this._initializers.indexOf(initializer);
            if(index != -1) {
                this._initializers.splice(index, 1);
                initializer.removedFromEmitter(this);
            }
        };
        Emitter.prototype.hasInitializer = function (initializer) {
            return this._initializers.indexOf(initializer) != -1;
        };
        Emitter.prototype.hasInitializerOfType = function (initializerClass) {
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                if(this._initializers[i] instanceof initializerClass) {
                    return true;
                }
            }
            return false;
        };
        Object.defineProperty(Emitter.prototype, "actions", {
            get: function () {
                return this._actions;
            },
            set: function (value) {
                for(var i = this._actions.length - 1; i >= 0; i--) {
                    this._actions[i].removedFromEmitter(this);
                }
                this._actions = value.concat();
                this._actions.sort(this.prioritySort);
                for(var i = value.length - 1; i >= 0; i--) {
                    value[i].addedToEmitter(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype.addAction = function (action) {
            var len = this._actions.length;
            for(var i = 0; i < len; ++i) {
                if(this._actions[i].priority < action.priority) {
                    break;
                }
            }
            this._actions.splice(i, 0, action);
            action.addedToEmitter(this);
        };
        Emitter.prototype.removeAction = function (action) {
            var index = this._actions.indexOf(action);
            if(index != -1) {
                this._actions.splice(index, 1);
                action.removedFromEmitter(this);
            }
        };
        Emitter.prototype.hasAction = function (action) {
            return this._actions.indexOf(action) != -1;
        };
        Emitter.prototype.hasActionOfType = function (actionClass) {
            var len = this._actions.length;
            for(var i = 0; i < len; ++i) {
                if(this._actions[i] instanceof actionClass) {
                    return true;
                }
            }
            return false;
        };
        Object.defineProperty(Emitter.prototype, "activities", {
            get: function () {
                return this._activities;
            },
            set: function (value) {
                for(var i = this._activities.length - 1; i >= 0; i--) {
                    this._activities[i].removedFromEmitter(this);
                }
                this._activities = value.concat();
                this._activities.sort(this.prioritySort);
                for(var i = value.length - 1; i >= 0; i--) {
                    value[i].addedToEmitter(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype.addActivity = function (activity) {
            var len = this._activities.length;
            for(var i = 0; i < len; ++i) {
                if(this._activities[i].priority < activity.priority) {
                    break;
                }
            }
            this._activities.splice(i, 0, activity);
            activity.addedToEmitter(this);
        };
        Emitter.prototype.removeActivity = function (activity) {
            var index = this._activities.indexOf(activity);
            if(index != -1) {
                this._activities.splice(index, 1);
                activity.removedFromEmitter(this);
            }
        };
        Emitter.prototype.hasActivity = function (activity) {
            return this._activities.indexOf(activity) != -1;
        };
        Emitter.prototype.hasActivityOfType = function (activityClass) {
            var len = this._activities.length;
            for(var i = 0; i < len; ++i) {
                if(this._activities[i] instanceof activityClass) {
                    return true;
                }
            }
            return false;
        };
        Object.defineProperty(Emitter.prototype, "counter", {
            get: function () {
                return this._counter;
            },
            set: function (value) {
                this._counter = value;
                if(this.running) {
                    this._counter.startEmitter(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype.dispatchCounterComplete = function () {
            this._dispatchCounterComplete = true;
        };
        Object.defineProperty(Emitter.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter.prototype, "particleFactory", {
            get: function () {
                return this._particleFactory;
            },
            set: function (value) {
                this._particleFactory = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter.prototype, "particles", {
            get: function () {
                return this._particles;
            },
            set: function (value) {
                this.killAllParticles();
                this.addParticles(value, false);
            },
            enumerable: true,
            configurable: true
        });
        Emitter.prototype._createParticle = function () {
            this._p = this._particleFactory.createParticle();
            this._len = this._initializers.length;
            this._initParticle(this._p);
            var initializer;
            for(var i = 0; i < this._len; ++i) {
                this._initializers[i].initialize(this, this._p);
            }
            this._particles.push(this._p);
            if(this.particleCreated.getNumListeners() > 0) {
                this.particleCreated.dispatch(this._p);
            }
            return this._p;
        };
        Emitter.prototype._initParticle = function (particle) {
        };
        Emitter.prototype.addParticle = function (particle, applyInitializers) {
            if (typeof applyInitializers === "undefined") { applyInitializers = false; }
            if(applyInitializers) {
                var len = this._initializers.length;
                for(var i = 0; i < len; ++i) {
                    this._initializers[i].initialize(this, particle);
                }
            }
            this._particles.push(particle);
            if(this.particleAdded.getNumListeners() > 0) {
                this.particleAdded.dispatch(particle);
            }
        };
        Emitter.prototype.addParticles = function (particles, applyInitializers) {
            if (typeof applyInitializers === "undefined") { applyInitializers = false; }
            var len = particles.length;
            var i;
            if(applyInitializers) {
                var len2 = this._initializers.length;
                for(var j = 0; j < len2; ++j) {
                    for(i = 0; i < len; ++i) {
                        this._initializers[j].initialize(this, particles[i]);
                    }
                }
            }
            if(this.particleAdded.getNumListeners() > 0) {
                for(i = 0; i < len; ++i) {
                    this._particles.push(particles[i]);
                    this.particleAdded.dispatch(particles[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._particles.push(particles[i]);
                }
            }
        };
        Emitter.prototype.removeParticle = function (particle) {
            var index = this._particles.indexOf(particle);
            if(index != -1) {
                if(this._updating) {
                    this.emitterUpdated.add(this.onRemoveParticle, this);
                } else {
                    this._particles.splice(index, 1);
                    this.particleRemoved.dispatch(particle);
                }
                return true;
            }
            return false;
        };
        Emitter.prototype.onRemoveParticle = function (particle) {
            this.emitterUpdated.remove(this.onRemoveParticle, this);
            this.removeParticle(particle);
        };
        Emitter.prototype.removeParticles = function (particles) {
            if(this._updating) {
                this.emitterUpdated.add(this.onRemoveParticles, this);
            } else {
                for(var i = 0, len = particles.length; i < len; ++i) {
                    var index = this._particles.indexOf(particles[i]);
                    if(index != -1) {
                        this._particles.splice(index, 1);
                        this.particleRemoved.dispatch(particles[i]);
                    }
                }
            }
        };
        Emitter.prototype.onRemoveParticles = function (particles) {
            this.emitterUpdated.remove(this.onRemoveParticles, this);
            this.removeParticles(particles);
        };
        Emitter.prototype.killAllParticles = function () {
            var len = this._particles.length;
            var i;
            if(this.particleDead.getNumListeners() > 0) {
                for(i = 0; i < len; ++i) {
                    this.particleDead.dispatch(this._particles[i]);
                    this._particleFactory.disposeParticle(this._particles[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._particleFactory.disposeParticle(this._particles[i]);
                }
            }
            this._particles = [];
        };
        Emitter.prototype.start = function () {
            this._timeManager.addTickedObject(this);
            this._started = true;
            this._running = true;
            var len = this._activities.length;
            for(var i = 0; i < len; ++i) {
                this._activities[i].initialize(this);
            }
            len = this._counter.startEmitter(this);
            for(i = 0; i < len; ++i) {
                this._createParticle();
            }
        };
        Emitter.prototype.onTick = function (delta) {
            this.update(delta);
        };
        Emitter.prototype.update = function (time) {
            if(!this._running) {
                return;
            }
            if(time > this._maximumFrameTime) {
                time = this._maximumFrameTime;
            }
            var i;
            var particle;
            this._updating = true;
            var len = this._counter.updateEmitter(this, time);
            for(i = 0; i < len; ++i) {
                this._createParticle();
            }
            this._sortParticles();
            len = this._activities.length;
            for(i = 0; i < len; ++i) {
                this._activities[i].update(this, time);
            }
            if(this._particles.length > 0) {
                len = this._actions.length;
                var action;
                var len2 = this._particles.length;
                var j;
                if(this._processLastFirst) {
                    for(j = 0; j < len; ++j) {
                        action = this._actions[j];
                        for(i = len2 - 1; i >= 0; --i) {
                            particle = this._particles[i];
                            action.update(this, particle, time);
                        }
                    }
                } else {
                    for(j = 0; j < len; ++j) {
                        action = this._actions[j];
                        for(i = 0; i < len2; ++i) {
                            particle = this._particles[i];
                            action.update(this, particle, time);
                        }
                    }
                }
                this._processLastFirst = !this._processLastFirst;
                if(this.particleDead.getNumListeners() > 0) {
                    for(i = len2; i--; ) {
                        particle = this._particles[i];
                        if(particle.isDead) {
                            this._particles.splice(i, 1);
                            this.particleDead.dispatch(particle);
                            if(particle.isDead) {
                                this._particleFactory.disposeParticle(particle);
                            }
                        }
                    }
                } else {
                    for(i = len2; i--; ) {
                        particle = this._particles[i];
                        if(particle.isDead) {
                            this._particles.splice(i, 1);
                            this._particleFactory.disposeParticle(particle);
                        }
                    }
                }
            } else {
                if(this.emitterEmpty.getNumListeners() > 0) {
                    this.emitterEmpty.dispatch(this);
                }
            }
            this._updating = false;
            if(this.emitterUpdated.getNumListeners() > 0) {
                this.emitterUpdated.dispatch(this);
            }
            if(this._dispatchCounterComplete) {
                this._dispatchCounterComplete = false;
                if(this.counterComplete.getNumListeners() > 0) {
                    this.counterComplete.dispatch();
                }
            }
        };
        Emitter.prototype._sortParticles = function () {
        };
        Emitter.prototype.pause = function () {
            this._running = false;
        };
        Emitter.prototype.resume = function () {
            this._running = true;
        };
        Emitter.prototype.stop = function () {
            this._timeManager.removeTickedObject(this);
            this._started = false;
            this._running = false;
            this.killAllParticles();
        };
        Emitter.prototype.runAhead = function (time, frameRate) {
            if (typeof frameRate === "undefined") { frameRate = 10; }
            var maxTime = this._maximumFrameTime;
            var step = 1 / frameRate;
            this._maximumFrameTime = step;
            while(time > 0) {
                time -= step;
                this.update(step);
            }
            this._maximumFrameTime = maxTime;
        };
        Emitter.prototype.prioritySort = function (b1, b2) {
            return b1.priority - b2.priority;
        };
        Emitter.prototype.destroy = function () {
            this.particleDead.removeAll();
            this.particleCreated.removeAll();
            this.particleAdded.removeAll();
            this.particleRemoved.removeAll();
            this.particleCollision.removeAll();
            this.particleZoneCollision.removeAll();
            this.particleBoundingBoxCollision.removeAll();
            this.emitterEmpty.removeAll();
            this.emitterUpdated.removeAll();
            this.counterComplete.removeAll();
            this.particleDead = null;
            this.particleCreated = null;
            this.particleAdded = null;
            this.particleRemoved = null;
            this.particleCollision = null;
            this.particleZoneCollision = null;
            this.particleBoundingBoxCollision = null;
            this.emitterEmpty = null;
            this.emitterUpdated = null;
            this.counterComplete = null;
            this._particles = null;
            this._initializers = null;
            this._actions = null;
            this._activities = null;
            this._counter = null;
            _super.prototype.destroy.call(this);
        };
        return Emitter;
    })(Avota.Element);
    Avota.Emitter = Emitter;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Emitter2D = (function (_super) {
        __extends(Emitter2D, _super);
        function Emitter2D(timeManager, name) {
            if (typeof name === "undefined") { name = Avota.Emitter.NAME; }
                _super.call(this, timeManager, name);
            if(!Emitter2D._creator) {
                Emitter2D._creator = new Avota.ParticleCreator2D();
            }
            this._particleFactory = Emitter2D._creator;
            this._x = 0;
            this._y = 0;
            this._rotation = 0;
            this.spaceSort = false;
        }
        Object.defineProperty(Emitter2D, "defaultParticleFactory", {
            get: function () {
                return Emitter2D._creator;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter2D.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter2D.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter2D.prototype, "rotation", {
            get: function () {
                return Avota.GeomUtil.radiansToDegrees(this._rotation);
            },
            set: function (value) {
                this._rotation = Avota.GeomUtil.degreesToRadians(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Emitter2D.prototype, "rotRadians", {
            get: function () {
                return this._rotation;
            },
            set: function (value) {
                this._rotation = value;
            },
            enumerable: true,
            configurable: true
        });
        Emitter2D.prototype._initParticle = function (particle) {
            particle.x = this._x;
            particle.y = this._y;
            particle.previousX = this._x;
            particle.previousY = this._y;
            particle.rotation = this._rotation;
        };
        Emitter2D.prototype._sortParticles = function () {
            if(this.spaceSort) {
                this._particles.sort(this.xSort);
                var len = this._particles.length;
                for(var i = 0; i < len; ++i) {
                    (this._particles[i]).sortID = i;
                }
            }
        };
        Emitter2D.prototype.xSort = function (b1, b2) {
            return b1.x - b2.x;
        };
        return Emitter2D;
    })(Avota.Emitter);
    Avota.Emitter2D = Emitter2D;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InitializerBase = (function () {
        function InitializerBase() {
            this._priority = 0;
        }
        Object.defineProperty(InitializerBase.prototype, "priority", {
            get: function () {
                return this._priority;
            },
            set: function (value) {
                this._priority = value;
            },
            enumerable: true,
            configurable: true
        });
        InitializerBase.prototype.addedToEmitter = function (emitter) {
        };
        InitializerBase.prototype.removedFromEmitter = function (emitter) {
        };
        InitializerBase.prototype.initialize = function (emitter, particle) {
        };
        return InitializerBase;
    })();
    Avota.InitializerBase = InitializerBase;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var AlphaInit = (function (_super) {
        __extends(AlphaInit, _super);
        function AlphaInit(minAlpha, maxAlpha) {
            if (typeof minAlpha === "undefined") { minAlpha = 1; }
            if (typeof maxAlpha === "undefined") { maxAlpha = NaN; }
                _super.call(this);
            this.priority = -10;
            this._min = minAlpha;
            if(isNaN(maxAlpha)) {
                this._max = this._min;
            } else {
                this._max = maxAlpha;
            }
        }
        Object.defineProperty(AlphaInit.prototype, "minAlpha", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlphaInit.prototype, "maxAlpha", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlphaInit.prototype, "alpha", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        AlphaInit.prototype.initialize = function (emitter, particle) {
            var alpha;
            if(this._max == this._min) {
                alpha = this._min;
            } else {
                alpha = this._min + Math.random() * (this._max - this._min);
            }
            particle.color = (particle.color & 0xFFFFFF) | (Math.round(alpha * 255) << 24);
        };
        return AlphaInit;
    })(Avota.InitializerBase);
    Avota.AlphaInit = AlphaInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ChooseInitializer = (function (_super) {
        __extends(ChooseInitializer, _super);
        function ChooseInitializer(initializers, weights) {
            if (typeof initializers === "undefined") { initializers = null; }
            if (typeof weights === "undefined") { weights = null; }
                _super.call(this);
            this._initializers = new Avota.WeightedArray();
            if(initializers == null) {
                return;
            }
            this.init(initializers, weights);
        }
        ChooseInitializer.prototype.addedToEmitter = function (emitter) {
            if(this._mxmlInitializers) {
                this.init(this._mxmlInitializers, this._mxmlWeights);
                this._mxmlInitializers = null;
                this._mxmlWeights = null;
            }
        };
        ChooseInitializer.prototype.init = function (initializers, weights) {
            if (typeof initializers === "undefined") { initializers = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._initializers.clear();
            var len = initializers.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this._initializers.add(initializers[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._initializers.add(initializers[i], 1);
                }
            }
        };
        ChooseInitializer.prototype.addInitializer = function (initializer, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            this._initializers.add(initializer, weight);
        };
        ChooseInitializer.prototype.removeInitializer = function (initializer) {
            this._initializers.remove(initializer);
        };
        Object.defineProperty(ChooseInitializer.prototype, "initializers", {
            set: function (value) {
                this._mxmlInitializers = value;
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChooseInitializer.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        ChooseInitializer.prototype.checkStartValues = function () {
            if(this._mxmlInitializers && this._mxmlWeights) {
                this.init(this._mxmlInitializers, this._mxmlWeights);
                this._mxmlInitializers = null;
                this._mxmlWeights = null;
            }
        };
        ChooseInitializer.prototype.initialize = function (emitter, particle) {
            var initializer = this._initializers.getRandomValue();
            initializer.initialize(emitter, particle);
        };
        return ChooseInitializer;
    })(Avota.InitializerBase);
    Avota.ChooseInitializer = ChooseInitializer;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CollisionRadiusInit = (function (_super) {
        __extends(CollisionRadiusInit, _super);
        function CollisionRadiusInit(radius) {
            if (typeof radius === "undefined") { radius = 1; }
                _super.call(this);
            this._radius = radius;
        }
        Object.defineProperty(CollisionRadiusInit.prototype, "radius", {
            get: function () {
                return this._radius;
            },
            set: function (value) {
                this._radius = value;
            },
            enumerable: true,
            configurable: true
        });
        CollisionRadiusInit.prototype.initialize = function (emitter, particle) {
            particle.collisionRadius = this._radius;
        };
        return CollisionRadiusInit;
    })(Avota.InitializerBase);
    Avota.CollisionRadiusInit = CollisionRadiusInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ColorInit = (function (_super) {
        __extends(ColorInit, _super);
        function ColorInit(color1, color2) {
            if (typeof color1 === "undefined") { color1 = 0xFFFFFF; }
            if (typeof color2 === "undefined") { color2 = 0xFFFFFF; }
                _super.call(this);
            this._min = color1;
            this._max = color2;
        }
        Object.defineProperty(ColorInit.prototype, "minColor", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorInit.prototype, "maxColor", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorInit.prototype, "color", {
            get: function () {
                return this._min == this._max ? this._min : Avota.ColorUtil.interpolateARGB(this._max, this._min, 0.5);
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        ColorInit.prototype.initialize = function (emitter, particle) {
            if(this._max == this._min) {
                particle.color = this._min;
            } else {
                particle.color = Avota.ColorUtil.interpolateARGB(this._min, this._max, Math.random());
            }
        };
        return ColorInit;
    })(Avota.InitializerBase);
    Avota.ColorInit = ColorInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ColorsInit = (function (_super) {
        __extends(ColorsInit, _super);
        function ColorsInit(colors, weights) {
            if (typeof colors === "undefined") { colors = null; }
            if (typeof weights === "undefined") { weights = null; }
                _super.call(this);
            this._colors = new Avota.WeightedArray();
            if(colors == null) {
                return;
            }
            this.init(colors, weights);
        }
        ColorsInit.prototype.addedToEmitter = function (emitter) {
            if(this._mxmlColors) {
                this.init(this._mxmlColors, this._mxmlWeights);
                this._mxmlColors = null;
                this._mxmlWeights = null;
            }
        };
        ColorsInit.prototype.init = function (colors, weights) {
            if (typeof colors === "undefined") { colors = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._colors.clear();
            var len = colors.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this._colors.add(colors[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._colors.add(colors[i], 1);
                }
            }
        };
        ColorsInit.prototype.addColor = function (color, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            this._colors.add(color, weight);
        };
        ColorsInit.prototype.removeColor = function (color) {
            this._colors.remove(color);
        };
        Object.defineProperty(ColorsInit.prototype, "colors", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlColors = value[0].split(",");
                } else {
                    this._mxmlColors = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorsInit.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        ColorsInit.prototype.checkStartValues = function () {
            if(this._mxmlColors && this._mxmlWeights) {
                this.init(this._mxmlColors, this._mxmlWeights);
                this._mxmlColors = null;
                this._mxmlWeights = null;
            }
        };
        ColorsInit.prototype.initialize = function (emitter, particle) {
            particle.color = this._colors.getRandomValue();
        };
        return ColorsInit;
    })(Avota.InitializerBase);
    Avota.ColorsInit = ColorsInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DictionaryInitializer = (function (_super) {
        __extends(DictionaryInitializer, _super);
        function DictionaryInitializer(initValues) {
                _super.call(this);
            this._initValues = initValues;
        }
        Object.defineProperty(DictionaryInitializer.prototype, "initValues", {
            get: function () {
                return this._initValues;
            },
            set: function (value) {
                this._initValues = value;
            },
            enumerable: true,
            configurable: true
        });
        DictionaryInitializer.prototype.initialize = function (emitter, particle) {
            if(!this._initValues) {
                return;
            }
            for(var key in this._initValues) {
                particle.dictionary[key] = this._initValues[key];
            }
        };
        return DictionaryInitializer;
    })(Avota.InitializerBase);
    Avota.DictionaryInitializer = DictionaryInitializer;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageInitializerBase = (function (_super) {
        __extends(ImageInitializerBase, _super);
        function ImageInitializerBase(usePool, fillPool) {
            if (typeof usePool === "undefined") { usePool = false; }
            if (typeof fillPool === "undefined") { fillPool = 0; }
                _super.call(this);
            this._usePool = usePool;
            this._emitters = [];
            if(this._usePool) {
                this.clearPool();
                if(fillPool) {
                    this.fillPool(fillPool);
                }
            }
        }
        ImageInitializerBase.prototype.clearPool = function () {
            this._pool = [];
        };
        ImageInitializerBase.prototype.addedToEmitter = function (emitter) {
            this._emitters.push(emitter);
            if(this._usePool) {
                emitter.particleDead.add(this.particleDying, this, -1000);
            }
        };
        ImageInitializerBase.prototype.particleDying = function (particle) {
            if(particle.isDead && particle.dictionary.get(this)) {
                this._pool.push(particle.image);
                delete particle.dictionary.get(this);
            }
        };
        ImageInitializerBase.prototype.removedFromEmitter = function (emitter) {
            emitter.particleDead.remove(this.particleDying, this);
            var index = this._emitters.indexOf(emitter);
            if(index != -1) {
                this._emitters.splice(index, 1);
            }
        };
        ImageInitializerBase.prototype.fillPool = function (count) {
            if(!this._usePool) {
                return;
            }
            if(this._pool.length > 0) {
                this._pool = [];
            }
            for(var i = 0; i < count; ++i) {
                this._pool[i] = this.createImage();
            }
        };
        Object.defineProperty(ImageInitializerBase.prototype, "usePool", {
            get: function () {
                return this._usePool;
            },
            set: function (value) {
                if(this._usePool != value) {
                    this._usePool = value;
                    if(this._usePool) {
                        for(var i = 0; i < this._emitters.length; i++) {
                            this._emitters[i].particleDead.add(this.particleDying, this, -1000);
                        }
                    } else {
                        for(var i = 0; i < this._emitters.length; i++) {
                            this._emitters[i].particleDead.remove(this.particleDying, this);
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        ImageInitializerBase.prototype.createImage = function () {
            throw new Error("Image initializer must override the createImage method.");
        };
        ImageInitializerBase.prototype.initialize = function (emitter, particle) {
            if(this._usePool) {
                if(this._pool.length > 0) {
                    particle.image = this._pool.shift();
                } else {
                    particle.image = this.createImage();
                }
                particle.dictionary.put(this, true);
            } else {
                particle.image = this.createImage();
            }
        };
        return ImageInitializerBase;
    })(Avota.InitializerBase);
    Avota.ImageInitializerBase = ImageInitializerBase;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageClass = (function (_super) {
        __extends(ImageClass, _super);
        function ImageClass(imageClass, parameters, usePool, fillPool) {
            if (typeof imageClass === "undefined") { imageClass = null; }
            if (typeof parameters === "undefined") { parameters = null; }
            if (typeof usePool === "undefined") { usePool = false; }
            if (typeof fillPool === "undefined") { fillPool = 0; }
                _super.call(this, usePool);
            this._imageClass = imageClass;
            this._parameters = parameters ? parameters : [];
            if(fillPool > 0) {
                this.fillPool(fillPool);
            }
        }
        Object.defineProperty(ImageClass.prototype, "imageClass", {
            get: function () {
                return this._imageClass;
            },
            set: function (value) {
                this._imageClass = value;
                if(this._usePool) {
                    this.clearPool();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageClass.prototype, "parameters", {
            get: function () {
                return this._parameters;
            },
            set: function (value) {
                this._parameters = value;
                if(this._usePool) {
                    this.clearPool();
                }
            },
            enumerable: true,
            configurable: true
        });
        ImageClass.prototype.createImage = function () {
            return Avota.ObjectUtil.create(this._imageClass, this._parameters);
        };
        return ImageClass;
    })(Avota.ImageInitializerBase);
    Avota.ImageClass = ImageClass;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageClasses = (function (_super) {
        __extends(ImageClasses, _super);
        function ImageClasses(images, weights, usePool, fillPool) {
            if (typeof images === "undefined") { images = null; }
            if (typeof weights === "undefined") { weights = null; }
            if (typeof usePool === "undefined") { usePool = false; }
            if (typeof fillPool === "undefined") { fillPool = 0; }
                _super.call(this, usePool);
            this._images = new Avota.WeightedArray();
            if(images == null) {
                return;
            }
            this.init(images, weights);
            if(fillPool > 0) {
                this.fillPool(fillPool);
            }
        }
        ImageClasses.prototype.addedToEmitter = function (emitter) {
            _super.prototype.addedToEmitter.call(this, emitter);
            if(this._mxmlImages) {
                this.init(this._mxmlImages, this._mxmlWeights);
                this._mxmlImages = null;
                this._mxmlWeights = null;
            }
        };
        ImageClasses.prototype.init = function (images, weights) {
            if (typeof images === "undefined") { images = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._images.clear();
            var len = images.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this.addImage(images[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this.addImage(images[i], 1);
                }
            }
        };
        ImageClasses.prototype.addImage = function (image, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            if(Avota.ObjectUtil.isArray(image)) {
                var parameters = image.concat();
                var img = parameters.shift();
                this._images.add(new ImagePair(img, parameters), weight);
            } else {
                this._images.add(new ImagePair(image, []), weight);
            }
            if(this._usePool) {
                this.clearPool();
            }
        };
        ImageClasses.prototype.removeImage = function (image) {
            this._images.remove(image);
            if(this._usePool) {
                this.clearPool();
            }
        };
        Object.defineProperty(ImageClasses.prototype, "images", {
            set: function (value) {
                this._mxmlImages = value;
                this.checkStartValues();
                if(this._usePool) {
                    this.clearPool();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageClasses.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
                if(this._usePool) {
                    this.clearPool();
                }
            },
            enumerable: true,
            configurable: true
        });
        ImageClasses.prototype.checkStartValues = function () {
            if(this._mxmlImages && this._mxmlWeights) {
                this.init(this._mxmlImages, this._mxmlWeights);
                this._mxmlImages = null;
                this._mxmlWeights = null;
            }
        };
        ImageClasses.prototype.createImage = function () {
            var img = this._images.getRandomValue();
            return Avota.ObjectUtil.create(img.image, img.parameters);
        };
        return ImageClasses;
    })(Avota.ImageInitializerBase);
    Avota.ImageClasses = ImageClasses;    
    var ImagePair = (function () {
        function ImagePair(image, parameters) {
            this.image = image;
            this.parameters = parameters;
        }
        return ImagePair;
    })();
    Avota.ImagePair = ImagePair;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var InitializerGroup = (function (_super) {
        __extends(InitializerGroup, _super);
        function InitializerGroup() {
            var initializers = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                initializers[_i] = arguments[_i + 0];
            }
                _super.call(this);
            this._initializers = [];
            for(var i = 0; i < initializers.length; i++) {
                this.addInitializer(initializers[i]);
            }
        }
        Object.defineProperty(InitializerGroup.prototype, "initializers", {
            get: function () {
                return this._initializers;
            },
            set: function (value) {
                var initializer;
                if(this._emitter) {
                    for(var i = 0; i < this._initializers.length; i++) {
                        this._initializers[i].removedFromEmitter(this._emitter);
                    }
                }
                this._initializers = value.concat();
                this._initializers.sort(this.prioritySort);
                if(this._emitter) {
                    for(var i = 0; i < this._initializers.length; i++) {
                        this._initializers[i].addedToEmitter(this._emitter);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        InitializerGroup.prototype.addInitializer = function (initializer) {
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                if(this._initializers[i].priority < initializer.priority) {
                    break;
                }
            }
            this._initializers.splice(i, 0, initializer);
            if(this._emitter) {
                initializer.addedToEmitter(this._emitter);
            }
        };
        InitializerGroup.prototype.removeInitializer = function (initializer) {
            var index = this._initializers.indexOf(initializer);
            if(index != -1) {
                this._initializers.splice(index, 1);
                if(this._emitter) {
                    initializer.removedFromEmitter(this._emitter);
                }
            }
        };
        InitializerGroup.prototype.addedToEmitter = function (emitter) {
            this._emitter = emitter;
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                this._initializers[i].addedToEmitter(emitter);
            }
        };
        InitializerGroup.prototype.removedFromEmitter = function (emitter) {
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                this._initializers[i].removedFromEmitter(emitter);
            }
            this._emitter = null;
        };
        InitializerGroup.prototype.initialize = function (emitter, particle) {
            var len = this._initializers.length;
            for(var i = 0; i < len; ++i) {
                this._initializers[i].initialize(emitter, particle);
            }
        };
        InitializerGroup.prototype.prioritySort = function (b1, b2) {
            return b1.priority - b2.priority;
        };
        return InitializerGroup;
    })(Avota.InitializerBase);
    Avota.InitializerGroup = InitializerGroup;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Lifetime = (function (_super) {
        __extends(Lifetime, _super);
        function Lifetime(minLifetime, maxLifetime) {
            if (typeof minLifetime === "undefined") { minLifetime = Number.MAX_VALUE; }
            if (typeof maxLifetime === "undefined") { maxLifetime = NaN; }
                _super.call(this);
            this._max = maxLifetime;
            this._min = minLifetime;
        }
        Object.defineProperty(Lifetime.prototype, "minLifetime", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Lifetime.prototype, "maxLifetime", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Lifetime.prototype, "lifetime", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) * 0.5;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Lifetime.prototype.initialize = function (emitter, particle) {
            if(isNaN(this._max)) {
                particle.lifetime = this._min;
            } else {
                particle.lifetime = this._min + Math.random() * (this._max - this._min);
            }
        };
        return Lifetime;
    })(Avota.InitializerBase);
    Avota.Lifetime = Lifetime;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MassInit = (function (_super) {
        __extends(MassInit, _super);
        function MassInit(mass) {
            if (typeof mass === "undefined") { mass = 1; }
                _super.call(this);
            this._mass = mass;
        }
        Object.defineProperty(MassInit.prototype, "mass", {
            get: function () {
                return this._mass;
            },
            set: function (value) {
                this._mass = value;
            },
            enumerable: true,
            configurable: true
        });
        MassInit.prototype.initialize = function (emitter, particle) {
            particle.mass = this._mass;
        };
        return MassInit;
    })(Avota.InitializerBase);
    Avota.MassInit = MassInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Position = (function (_super) {
        __extends(Position, _super);
        function Position(zone) {
            if (typeof zone === "undefined") { zone = null; }
                _super.call(this);
            this.zone = zone;
        }
        Object.defineProperty(Position.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Position.prototype.initialize = function (emitter, particle) {
            var p = particle;
            var loc = this._zone.getLocation();
            if(p.rotation == 0) {
                p.x += loc.x;
                p.y += loc.y;
            } else {
                var sin = Math.sin(p.rotation);
                var cos = Math.cos(p.rotation);
                p.x += cos * loc.x - sin * loc.y;
                p.y += cos * loc.y + sin * loc.x;
            }
            p.previousX = p.x;
            p.previousY = p.y;
        };
        return Position;
    })(Avota.InitializerBase);
    Avota.Position = Position;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var PositionAbsolute = (function (_super) {
        __extends(PositionAbsolute, _super);
        function PositionAbsolute(zone) {
            if (typeof zone === "undefined") { zone = null; }
                _super.call(this);
            this.zone = zone;
        }
        Object.defineProperty(PositionAbsolute.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        PositionAbsolute.prototype.initialize = function (emitter, particle) {
            var p = particle;
            var loc = this._zone.getLocation();
            p.x = loc.x;
            p.y = loc.y;
            p.previousX = p.x;
            p.previousY = p.y;
        };
        return PositionAbsolute;
    })(Avota.InitializerBase);
    Avota.PositionAbsolute = PositionAbsolute;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotateVelocity = (function (_super) {
        __extends(RotateVelocity, _super);
        function RotateVelocity(minAngVelocity, maxAngVelocity) {
            if (typeof minAngVelocity === "undefined") { minAngVelocity = 0; }
            if (typeof maxAngVelocity === "undefined") { maxAngVelocity = NaN; }
                _super.call(this);
            this.minAngVelocity = minAngVelocity;
            this.maxAngVelocity = maxAngVelocity;
        }
        Object.defineProperty(RotateVelocity.prototype, "minAngVelocity", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RotateVelocity.prototype, "maxAngVelocity", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RotateVelocity.prototype, "angVelocity", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        RotateVelocity.prototype.initialize = function (emitter, particle) {
            var p = particle;
            if(isNaN(this._max)) {
                p.angVelocity = this._min;
            } else {
                p.angVelocity = this._min + Math.random() * (this._max - this._min);
            }
        };
        return RotateVelocity;
    })(Avota.InitializerBase);
    Avota.RotateVelocity = RotateVelocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Rotation = (function (_super) {
        __extends(Rotation, _super);
        function Rotation(minAngle, maxAngle) {
            if (typeof minAngle === "undefined") { minAngle = 0; }
            if (typeof maxAngle === "undefined") { maxAngle = NaN; }
                _super.call(this);
            this.minAngle = minAngle;
            this.maxAngle = maxAngle;
        }
        Object.defineProperty(Rotation.prototype, "minAngle", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rotation.prototype, "maxAngle", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rotation.prototype, "angle", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Rotation.prototype.initialize = function (emitter, particle) {
            var p = particle;
            if(isNaN(this._max)) {
                p.rotation += this._min;
            } else {
                p.rotation += this._min + Math.random() * (this._max - this._min);
            }
        };
        return Rotation;
    })(Avota.InitializerBase);
    Avota.Rotation = Rotation;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RotationAbsolute = (function (_super) {
        __extends(RotationAbsolute, _super);
        function RotationAbsolute(minAngle, maxAngle) {
            if (typeof minAngle === "undefined") { minAngle = 0; }
            if (typeof maxAngle === "undefined") { maxAngle = NaN; }
                _super.call(this);
            this.minAngle = minAngle;
            this.maxAngle = maxAngle;
        }
        Object.defineProperty(RotationAbsolute.prototype, "minAngle", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RotationAbsolute.prototype, "maxAngle", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RotationAbsolute.prototype, "angle", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        RotationAbsolute.prototype.initialize = function (emitter, particle) {
            var p = particle;
            if(isNaN(this._max)) {
                p.rotation = this._min;
            } else {
                p.rotation = this._min + Math.random() * (this._max - this._min);
            }
        };
        return RotationAbsolute;
    })(Avota.InitializerBase);
    Avota.RotationAbsolute = RotationAbsolute;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleAllInit = (function (_super) {
        __extends(ScaleAllInit, _super);
        function ScaleAllInit(minScale, maxScale) {
            if (typeof minScale === "undefined") { minScale = 1; }
            if (typeof maxScale === "undefined") { maxScale = NaN; }
                _super.call(this);
            this.priority = -10;
            this.minScale = minScale;
            this.maxScale = isNaN(maxScale) ? minScale : maxScale;
        }
        Object.defineProperty(ScaleAllInit.prototype, "minScale", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleAllInit.prototype, "maxScale", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleAllInit.prototype, "scale", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        ScaleAllInit.prototype.initialize = function (emitter, particle) {
            var scale;
            if(this._max == this._min) {
                scale = this._min;
            } else {
                scale = this._min + Math.random() * (this._max - this._min);
            }
            particle.scale = scale;
            particle.mass *= scale * scale;
            particle.collisionRadius *= scale;
        };
        return ScaleAllInit;
    })(Avota.InitializerBase);
    Avota.ScaleAllInit = ScaleAllInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleAllsInit = (function (_super) {
        __extends(ScaleAllsInit, _super);
        function ScaleAllsInit(scales, weights) {
            if (typeof scales === "undefined") { scales = null; }
            if (typeof weights === "undefined") { weights = null; }
                _super.call(this);
            this.priority = -10;
            this._scales = new Avota.WeightedArray();
            if(scales == null) {
                return;
            }
            this.init(scales, weights);
        }
        ScaleAllsInit.prototype.addedToEmitter = function (emitter) {
            if(this._mxmlScales) {
                this.init(this._mxmlScales, this._mxmlWeights);
                this._mxmlScales = null;
                this._mxmlWeights = null;
            }
        };
        ScaleAllsInit.prototype.init = function (scales, weights) {
            if (typeof scales === "undefined") { scales = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._scales.clear();
            var len = scales.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this._scales.add(scales[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._scales.add(scales[i], 1);
                }
            }
        };
        ScaleAllsInit.prototype.addScale = function (scale, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            this._scales.add(scale, weight);
        };
        ScaleAllsInit.prototype.removeScale = function (scale) {
            this._scales.remove(scale);
        };
        Object.defineProperty(ScaleAllsInit.prototype, "scales", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlScales = value[0].split(",");
                } else {
                    this._mxmlScales = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleAllsInit.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        ScaleAllsInit.prototype.checkStartValues = function () {
            if(this._mxmlScales && this._mxmlWeights) {
                this.init(this._mxmlScales, this._mxmlWeights);
                this._mxmlScales = null;
                this._mxmlWeights = null;
            }
        };
        ScaleAllsInit.prototype.initialize = function (emitter, particle) {
            var scale = this._scales.getRandomValue();
            particle.scale = scale;
            particle.mass *= scale * scale;
            particle.collisionRadius *= scale;
        };
        return ScaleAllsInit;
    })(Avota.InitializerBase);
    Avota.ScaleAllsInit = ScaleAllsInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleImageInit = (function (_super) {
        __extends(ScaleImageInit, _super);
        function ScaleImageInit(minScale, maxScale) {
            if (typeof minScale === "undefined") { minScale = 1; }
            if (typeof maxScale === "undefined") { maxScale = NaN; }
                _super.call(this);
            this._min = minScale;
            if(isNaN(maxScale)) {
                this._max = this._min;
            } else {
                this._max = maxScale;
            }
        }
        Object.defineProperty(ScaleImageInit.prototype, "minScale", {
            get: function () {
                return this._min;
            },
            set: function (value) {
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleImageInit.prototype, "maxScale", {
            get: function () {
                return this._max;
            },
            set: function (value) {
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleImageInit.prototype, "scale", {
            get: function () {
                return this._min == this._max ? this._min : (this._max + this._min) / 2;
            },
            set: function (value) {
                this._max = this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        ScaleImageInit.prototype.initialize = function (emitter, particle) {
            if(this._max == this._min) {
                particle.scale = this._min;
            } else {
                particle.scale = this._min + Math.random() * (this._max - this._min);
            }
        };
        return ScaleImageInit;
    })(Avota.InitializerBase);
    Avota.ScaleImageInit = ScaleImageInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ScaleImagesInit = (function (_super) {
        __extends(ScaleImagesInit, _super);
        function ScaleImagesInit(scales, weights) {
            if (typeof scales === "undefined") { scales = null; }
            if (typeof weights === "undefined") { weights = null; }
                _super.call(this);
            this._scales = new Avota.WeightedArray();
            if(scales == null) {
                return;
            }
            this.init(scales, weights);
        }
        ScaleImagesInit.prototype.addedToEmitter = function (emitter) {
            if(this._mxmlScales) {
                this.init(this._mxmlScales, this._mxmlWeights);
                this._mxmlScales = null;
                this._mxmlWeights = null;
            }
        };
        ScaleImagesInit.prototype.init = function (scales, weights) {
            if (typeof scales === "undefined") { scales = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._scales.clear();
            var len = scales.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this._scales.add(scales[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._scales.add(scales[i], 1);
                }
            }
        };
        ScaleImagesInit.prototype.addScale = function (scale, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            this._scales.add(scale, weight);
        };
        ScaleImagesInit.prototype.removeScale = function (scale) {
            this._scales.remove(scale);
        };
        Object.defineProperty(ScaleImagesInit.prototype, "scales", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlScales = value[0].split(",");
                } else {
                    this._mxmlScales = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScaleImagesInit.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        ScaleImagesInit.prototype.checkStartValues = function () {
            if(this._mxmlScales && this._mxmlWeights) {
                this.init(this._mxmlScales, this._mxmlWeights);
                this._mxmlScales = null;
                this._mxmlWeights = null;
            }
        };
        ScaleImagesInit.prototype.initialize = function (emitter, particle) {
            particle.scale = this._scales.getRandomValue();
        };
        return ScaleImagesInit;
    })(Avota.InitializerBase);
    Avota.ScaleImagesInit = ScaleImagesInit;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SetImageProperties = (function (_super) {
        __extends(SetImageProperties, _super);
        function SetImageProperties(properties) {
                _super.call(this);
            this.priority = -10;
            this._properties = properties;
        }
        Object.defineProperty(SetImageProperties.prototype, "properties", {
            get: function () {
                return this._properties;
            },
            set: function (value) {
                this._properties = value;
            },
            enumerable: true,
            configurable: true
        });
        SetImageProperties.prototype.initialize = function (emitter, particle) {
            if(!particle.image) {
                throw new Error("Attempting to set image properties when no image is set");
            }
            var img = particle.image;
            for(var name in this._properties) {
                if(img.hasOwnProperty(name)) {
                    img[name] = this._properties[name];
                }
            }
        };
        return SetImageProperties;
    })(Avota.InitializerBase);
    Avota.SetImageProperties = SetImageProperties;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SharedImage = (function (_super) {
        __extends(SharedImage, _super);
        function SharedImage(image) {
            if (typeof image === "undefined") { image = null; }
                _super.call(this);
            this._image = image;
        }
        Object.defineProperty(SharedImage.prototype, "image", {
            get: function () {
                return this._image;
            },
            set: function (value) {
                this._image = value;
            },
            enumerable: true,
            configurable: true
        });
        SharedImage.prototype.initialize = function (emitter, particle) {
            particle.image = this._image;
        };
        return SharedImage;
    })(Avota.InitializerBase);
    Avota.SharedImage = SharedImage;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SharedImages = (function (_super) {
        __extends(SharedImages, _super);
        function SharedImages(images, weights) {
            if (typeof images === "undefined") { images = null; }
            if (typeof weights === "undefined") { weights = null; }
                _super.call(this);
            this._images = new Avota.WeightedArray();
            if(images == null) {
                return;
            }
            this.init(images, weights);
        }
        SharedImages.prototype.addedToEmitter = function (emitter) {
            if(this._mxmlImages) {
                this.init(this._mxmlImages, this._mxmlWeights);
                this._mxmlImages = null;
                this._mxmlWeights = null;
            }
        };
        SharedImages.prototype.init = function (images, weights) {
            if (typeof images === "undefined") { images = null; }
            if (typeof weights === "undefined") { weights = null; }
            this._images.clear();
            var len = images.length;
            var i;
            if(weights != null && weights.length == len) {
                for(i = 0; i < len; ++i) {
                    this._images.add(images[i], weights[i]);
                }
            } else {
                for(i = 0; i < len; ++i) {
                    this._images.add(images[i], 1);
                }
            }
        };
        SharedImages.prototype.addImage = function (image, weight) {
            if (typeof weight === "undefined") { weight = 1; }
            this._images.add(image, weight);
        };
        SharedImages.prototype.removeImage = function (image) {
            this._images.remove(image);
        };
        Object.defineProperty(SharedImages.prototype, "images", {
            set: function (value) {
                this._mxmlImages = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SharedImages.prototype, "weights", {
            set: function (value) {
                if(value.length == 1) {
                    this._mxmlWeights = value[0].split(",");
                } else {
                    this._mxmlWeights = value;
                }
                this.checkStartValues();
            },
            enumerable: true,
            configurable: true
        });
        SharedImages.prototype.checkStartValues = function () {
            if(this._mxmlImages && this._mxmlWeights) {
                this.init(this._mxmlImages, this._mxmlWeights);
                this._mxmlImages = null;
                this._mxmlWeights = null;
            }
        };
        SharedImages.prototype.initialize = function (emitter, particle) {
            particle.image = this._images.getRandomValue();
        };
        return SharedImages;
    })(Avota.InitializerBase);
    Avota.SharedImages = SharedImages;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Velocity = (function (_super) {
        __extends(Velocity, _super);
        function Velocity(zone) {
            if (typeof zone === "undefined") { zone = null; }
                _super.call(this);
            this.zone = zone;
        }
        Object.defineProperty(Velocity.prototype, "zone", {
            get: function () {
                return this._zone;
            },
            set: function (value) {
                this._zone = value;
            },
            enumerable: true,
            configurable: true
        });
        Velocity.prototype.initialize = function (emitter, particle) {
            var p = particle;
            var loc = this._zone.getLocation();
            if(p.rotation == 0) {
                p.velX = loc.x;
                p.velY = loc.y;
            } else {
                var sin = Math.sin(p.rotation);
                var cos = Math.cos(p.rotation);
                p.velX = cos * loc.x - sin * loc.y;
                p.velY = cos * loc.y + sin * loc.x;
            }
        };
        return Velocity;
    })(Avota.InitializerBase);
    Avota.Velocity = Velocity;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Particle = (function () {
        function Particle() {
            this.initialize();
        }
        Object.defineProperty(Particle.prototype, "dictionary", {
            get: function () {
                if(this._dictionary == null) {
                    this._dictionary = new Avota.Dictionary();
                }
                return this._dictionary;
            },
            enumerable: true,
            configurable: true
        });
        Particle.prototype.initialize = function () {
            this.color = 0xFFFFFFFF;
            this.scale = 1;
            this.mass = 1;
            this.collisionRadius = 1;
            this.lifetime = 0;
            this.age = 0;
            this.energy = 1;
            this.isDead = false;
            this.image = null;
            this._dictionary = null;
        };
        Object.defineProperty(Particle.prototype, "alpha", {
            get: function () {
                return ((this.color & 0xFF000000) >>> 24) / 255;
            },
            enumerable: true,
            configurable: true
        });
        Particle.prototype._cloneInto = function (particle) {
            particle.color = this.color;
            particle.scale = this.scale;
            particle.mass = this.mass;
            particle.collisionRadius = this.collisionRadius;
            particle.lifetime = this.lifetime;
            particle.age = this.age;
            particle.energy = this.energy;
            particle.isDead = this.isDead;
            particle.image = this.image;
            if(this._dictionary) {
                particle._dictionary = new Avota.Dictionary();
                for(var key in this._dictionary._hash) {
                    particle._dictionary.put(key, this._dictionary.get(key));
                }
            }
            return particle;
        };
        Particle.prototype.clone = function (factory) {
            if (typeof factory === "undefined") { factory = null; }
            var p;
            if(factory) {
                p = factory.createParticle();
            } else {
                p = new Particle();
            }
            return this._cloneInto(p);
        };
        Particle.prototype.revive = function () {
            this.lifetime = 0;
            this.age = 0;
            this.energy = 1;
            this.isDead = false;
        };
        return Particle;
    })();
    Avota.Particle = Particle;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Particle2D = (function (_super) {
        __extends(Particle2D, _super);
        function Particle2D() {
                _super.call(this);
            this.sortID = -1;
            this.x = 0;
            this.y = 0;
            this.previousX = 0;
            this.previousY = 0;
            this.velX = 0;
            this.velY = 0;
            this.rotation = 0;
            this.angVelocity = 0;
            this._matrix = new Avota.Matrix();
        }
        Object.defineProperty(Particle2D.prototype, "inertia", {
            get: function () {
                if(this.mass != this._previousMass || this.collisionRadius != this._previousRadius) {
                    this._inertia = this.mass * this.collisionRadius * this.collisionRadius * 0.5;
                    this._previousMass = this.mass;
                    this._previousRadius = this.collisionRadius;
                }
                return this._inertia;
            },
            enumerable: true,
            configurable: true
        });
        Particle2D.prototype.initialize = function () {
            _super.prototype.initialize.call(this);
            this.x = 0;
            this.y = 0;
            this.previousX = 0;
            this.previousY = 0;
            this.velX = 0;
            this.velY = 0;
            this.rotation = 0;
            this.angVelocity = 0;
            this.sortID = -1;
            this._regX = 0;
            this._regY = 0;
        };
        Object.defineProperty(Particle2D.prototype, "matrixTransform", {
            get: function () {
                if(this.image) {
                    this._regX = this.image.width * .5;
                    this._regY = this.image.height * .5;
                }
                this._matrix.identity();
                this._matrix.translate(this.x + this._regX, this.y + this._regY);
                this._matrix.scale(this.scale, this.scale);
                this._matrix.rotate(this.rotation * (Math.PI / 180));
                this._matrix.translate(-this._regX, -this._regY);
                return this._matrix;
            },
            enumerable: true,
            configurable: true
        });
        Particle2D.prototype.clone = function (factory) {
            if (typeof factory === "undefined") { factory = null; }
            var p;
            if(factory) {
                p = factory.createParticle();
            } else {
                p = new Particle2D();
            }
            this._cloneInto(p);
            p.x = this.x;
            p.y = this.y;
            p.velX = this.velX;
            p.velY = this.velY;
            p.rotation = this.rotation;
            p.angVelocity = this.angVelocity;
            return p;
        };
        return Particle2D;
    })(Avota.Particle);
    Avota.Particle2D = Particle2D;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ParticleCreator2D = (function () {
        function ParticleCreator2D() {
            this._particles = [];
        }
        ParticleCreator2D.prototype.createParticle = function () {
            Avota.ParticleFactoryStats.numParticles++;
            if(this._particles.length) {
                return this._particles.pop();
            } else {
                return new Avota.Particle2D();
            }
        };
        ParticleCreator2D.prototype.disposeParticle = function (particle) {
            Avota.ParticleFactoryStats.numParticles--;
            if(particle instanceof Avota.Particle2D) {
                particle.initialize();
                this._particles.push(particle);
            }
        };
        ParticleCreator2D.prototype.clearAllParticles = function () {
            this._particles = [];
        };
        return ParticleCreator2D;
    })();
    Avota.ParticleCreator2D = ParticleCreator2D;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var FastWeightedArray = (function () {
        function FastWeightedArray() {
            this._values = [];
            this._totalRatios = 0;
        }
        FastWeightedArray.prototype.add = function (value, ratio) {
            this._totalRatios += ratio;
            this._values.push(new FastPair(this._totalRatios, value));
            return this._values.length;
        };
        FastWeightedArray.prototype.clear = function () {
            this._values = [];
            this._totalRatios = 0;
        };
        Object.defineProperty(FastWeightedArray.prototype, "length", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastWeightedArray.prototype, "totalRatios", {
            get: function () {
                return this._totalRatios;
            },
            enumerable: true,
            configurable: true
        });
        FastWeightedArray.prototype.getRandomValue = function () {
            var position = Math.random() * this._totalRatios;
            var low = 0;
            var mid;
            var high = this._values.length;
            while(low < high) {
                mid = Math.floor((low + high) * 0.5);
                if(this._values[mid].topWeight < position) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return this._values[low].value;
        };
        return FastWeightedArray;
    })();
    Avota.FastWeightedArray = FastWeightedArray;    
    var FastPair = (function () {
        function FastPair(topWeight, value) {
            this.topWeight = topWeight;
            this.value = value;
        }
        return FastPair;
    })();
    Avota.FastPair = FastPair;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var WeightedArray = (function () {
        function WeightedArray() {
            this._values = [];
            this._totalWeights = 0;
        }
        WeightedArray.prototype.add = function (value, weight) {
            this._totalWeights += weight;
            this._values.push(new WeightedPair(weight, value));
            return this._values.length;
        };
        WeightedArray.prototype.remove = function (value) {
            for(var i = this._values.length; i--; ) {
                if(this._values[i].value == value) {
                    this._totalWeights -= this._values[i].weight;
                    this._values.splice(i, 1);
                    return true;
                }
            }
            return false;
        };
        WeightedArray.prototype.contains = function (value) {
            for(var i = this._values.length; i--; ) {
                if(this._values[i].value == value) {
                    return true;
                }
            }
            return false;
        };
        WeightedArray.prototype.removeAt = function (index) {
            var temp = this._values[index].value;
            this._totalWeights -= this._values[index].weight;
            this._values.splice(index, 1);
            return temp;
        };
        WeightedArray.prototype.clear = function () {
            this._values = [];
            this._totalWeights = 0;
        };
        Object.defineProperty(WeightedArray.prototype, "length", {
            get: function () {
                return this._values.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WeightedArray.prototype, "totalWeights", {
            get: function () {
                return this._totalWeights;
            },
            enumerable: true,
            configurable: true
        });
        WeightedArray.prototype.getRandomValue = function () {
            var position = Math.random() * this._totalWeights;
            var current = 0;
            var len = this._values.length;
            for(var i = 0; i < len; ++i) {
                current += this._values[i].weight;
                if(current >= position) {
                    return this._values[i].value;
                }
            }
            return this._values[len - 1].value;
        };
        return WeightedArray;
    })();
    Avota.WeightedArray = WeightedArray;    
    var WeightedPair = (function () {
        function WeightedPair(weight, value) {
            this.weight = weight;
            this.value = value;
        }
        return WeightedPair;
    })();
    Avota.WeightedPair = WeightedPair;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DiscSectorZone = (function () {
        function DiscSectorZone(center, outerRadius, innerRadius, minAngle, maxAngle) {
            if (typeof center === "undefined") { center = null; }
            if (typeof outerRadius === "undefined") { outerRadius = 0; }
            if (typeof innerRadius === "undefined") { innerRadius = 0; }
            if (typeof minAngle === "undefined") { minAngle = 0; }
            if (typeof maxAngle === "undefined") { maxAngle = 0; }
            if(outerRadius < innerRadius) {
                throw new Error("The outerRadius (" + outerRadius + ") can't be smaller than the innerRadius (" + innerRadius + ") in your DiscSectorZone. N.B. the outerRadius is the second argument in the constructor and the innerRadius is the third argument.");
            }
            this._center = center ? center.clone() : new Avota.Point(0, 0);
            this._innerRadius = innerRadius;
            this._outerRadius = outerRadius;
            this._innerSq = this._innerRadius * this._innerRadius;
            this._outerSq = this._outerRadius * this._outerRadius;
            this._minAngle = minAngle;
            this._maxAngle = maxAngle;
            if(!isNaN(this._maxAngle)) {
                while(this._maxAngle > DiscSectorZone.TWOPI) {
                    this._maxAngle -= DiscSectorZone.TWOPI;
                }
                while(this._maxAngle < 0) {
                    this._maxAngle += DiscSectorZone.TWOPI;
                }
                this._minAllowed = this._maxAngle - DiscSectorZone.TWOPI;
                if(!isNaN(this._minAngle)) {
                    if(minAngle == maxAngle) {
                        this._minAngle = this._maxAngle;
                    } else {
                        this._minAngle = this.clamp(this._minAngle);
                    }
                }
                this.calculateNormals();
            }
        }
        DiscSectorZone.TWOPI = Math.PI * 2;
        DiscSectorZone.prototype.clamp = function (angle) {
            if(!isNaN(this._maxAngle)) {
                while(angle > this._maxAngle) {
                    angle -= DiscSectorZone.TWOPI;
                }
                while(angle < this._minAllowed) {
                    angle += DiscSectorZone.TWOPI;
                }
            }
            return angle;
        };
        DiscSectorZone.prototype.calculateNormals = function () {
            if(!isNaN(this._minAngle)) {
                this._minNormal = new Avota.Point(Math.sin(this._minAngle), -Math.cos(this._minAngle));
                this._minNormal.normalize(1);
            }
            if(!isNaN(this._maxAngle)) {
                this._maxNormal = new Avota.Point(-Math.sin(this._maxAngle), Math.cos(this._maxAngle));
                this._maxNormal.normalize(1);
            }
        };
        Object.defineProperty(DiscSectorZone.prototype, "center", {
            get: function () {
                return this._center;
            },
            set: function (value) {
                this._center = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "centerX", {
            get: function () {
                return this._center.x;
            },
            set: function (value) {
                this._center.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "centerY", {
            get: function () {
                return this._center.y;
            },
            set: function (value) {
                this._center.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "innerRadius", {
            get: function () {
                return this._innerRadius;
            },
            set: function (value) {
                this._innerRadius = value;
                this._innerSq = this._innerRadius * this._innerRadius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "outerRadius", {
            get: function () {
                return this._outerRadius;
            },
            set: function (value) {
                this._outerRadius = value;
                this._outerSq = this._outerRadius * this._outerRadius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "minAngle", {
            get: function () {
                return this._minAngle;
            },
            set: function (value) {
                this._minAngle = this.clamp(value);
                this.calculateNormals();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscSectorZone.prototype, "maxAngle", {
            get: function () {
                return this._maxAngle;
            },
            set: function (value) {
                this._maxAngle = value;
                while(this._maxAngle > DiscSectorZone.TWOPI) {
                    this._maxAngle -= DiscSectorZone.TWOPI;
                }
                while(this._maxAngle < 0) {
                    this._maxAngle += DiscSectorZone.TWOPI;
                }
                this._minAllowed = this._maxAngle - DiscSectorZone.TWOPI;
                this._minAngle = this.clamp(this._minAngle);
                this.calculateNormals();
            },
            enumerable: true,
            configurable: true
        });
        DiscSectorZone.prototype.contains = function (x, y) {
            x -= this._center.x;
            y -= this._center.y;
            var distSq = x * x + y * y;
            if(distSq > this._outerSq || distSq < this._innerSq) {
                return false;
            }
            var angle = Math.atan2(y, x);
            angle = this.clamp(angle);
            return angle >= this._minAngle;
        };
        DiscSectorZone.prototype.getLocation = function () {
            var rand = Math.random();
            var point = Avota.Point.polar(this._innerRadius + (1 - rand * rand) * (this._outerRadius - this._innerRadius), this._minAngle + Math.random() * (this._maxAngle - this._minAngle));
            point.x += this._center.x;
            point.y += this._center.y;
            return point;
        };
        DiscSectorZone.prototype.getArea = function () {
            return (this._outerSq - this._innerSq) * (this._maxAngle - this._minAngle) * 0.5;
        };
        DiscSectorZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var xNow = particle.x - this._center.x;
            var yNow = particle.y - this._center.y;
            var xThen = particle.previousX - this._center.x;
            var yThen = particle.previousY - this._center.y;
            var insideNow = true;
            var insideThen = true;
            var distThenSq = xThen * xThen + yThen * yThen;
            var distNowSq = xNow * xNow + yNow * yNow;
            if(distThenSq > this._outerSq || distThenSq < this._innerSq) {
                insideThen = false;
            }
            if(distNowSq > this._outerSq || distNowSq < this._innerSq) {
                insideNow = false;
            }
            if((!insideNow) && (!insideThen)) {
                return false;
            }
            var angleThen = this.clamp(Math.atan2(yThen, xThen));
            var angleNow = this.clamp(Math.atan2(yNow, xNow));
            insideThen = insideThen && angleThen >= this._minAngle;
            insideNow = insideNow && angleNow >= this._minAngle;
            if(insideNow == insideThen) {
                return false;
            }
            var adjustSpeed;
            var dotProduct = particle.velX * xNow + particle.velY * yNow;
            var factor;
            var normalSpeed;
            if(insideNow) {
                if(distThenSq > this._outerSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distNowSq;
                    particle.velX -= adjustSpeed * xNow;
                    particle.velY -= adjustSpeed * yNow;
                } else if(distThenSq < this._innerSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distNowSq;
                    particle.velX -= adjustSpeed * xNow;
                    particle.velY -= adjustSpeed * yNow;
                }
                if(angleThen < this._minAngle) {
                    if(angleThen < (this._minAllowed + this._minAngle) / 2) {
                        normalSpeed = this._maxNormal.x * particle.velX + this._maxNormal.y * particle.velY;
                        factor = (1 + bounce) * normalSpeed;
                        particle.velX -= factor * this._maxNormal.x;
                        particle.velY -= factor * this._maxNormal.y;
                    } else {
                        normalSpeed = this._minNormal.x * particle.velX + this._minNormal.y * particle.velY;
                        factor = (1 + bounce) * normalSpeed;
                        particle.velX -= factor * this._minNormal.x;
                        particle.velY -= factor * this._minNormal.y;
                    }
                }
            } else {
                if(distNowSq > this._outerSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distNowSq;
                    particle.velX -= adjustSpeed * xNow;
                    particle.velY -= adjustSpeed * yNow;
                } else if(distNowSq < this._innerSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distNowSq;
                    particle.velX -= adjustSpeed * xNow;
                    particle.velY -= adjustSpeed * yNow;
                }
                if(angleNow < this._minAngle) {
                    if(angleNow < (this._minAllowed + this._minAngle) / 2) {
                        normalSpeed = this._maxNormal.x * particle.velX + this._maxNormal.y * particle.velY;
                        factor = (1 + bounce) * normalSpeed;
                        particle.velX -= factor * this._maxNormal.x;
                        particle.velY -= factor * this._maxNormal.y;
                    } else {
                        normalSpeed = this._minNormal.x * particle.velX + this._minNormal.y * particle.velY;
                        factor = (1 + bounce) * normalSpeed;
                        particle.velX -= factor * this._minNormal.x;
                        particle.velY -= factor * this._minNormal.y;
                    }
                }
            }
            particle.x = particle.previousX;
            particle.y = particle.previousY;
            return true;
        };
        return DiscSectorZone;
    })();
    Avota.DiscSectorZone = DiscSectorZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DiscZone = (function () {
        function DiscZone(center, outerRadius, innerRadius) {
            if (typeof center === "undefined") { center = null; }
            if (typeof outerRadius === "undefined") { outerRadius = 0; }
            if (typeof innerRadius === "undefined") { innerRadius = 0; }
            if(outerRadius < innerRadius) {
                throw new Error("The outerRadius (" + outerRadius + ") can't be smaller than the innerRadius (" + innerRadius + ") in your DiscZone. N.B. the outerRadius is the second argument in the constructor and the innerRadius is the third argument.");
            }
            if(center == null) {
                this._center = new Avota.Point(0, 0);
            } else {
                this._center = center;
            }
            this._innerRadius = innerRadius;
            this._outerRadius = outerRadius;
            this._innerSq = this._innerRadius * this._innerRadius;
            this._outerSq = this._outerRadius * this._outerRadius;
        }
        DiscZone.TWOPI = Math.PI * 2;
        Object.defineProperty(DiscZone.prototype, "center", {
            get: function () {
                return this._center;
            },
            set: function (value) {
                this._center = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscZone.prototype, "centerX", {
            get: function () {
                return this._center.x;
            },
            set: function (value) {
                this._center.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscZone.prototype, "centerY", {
            get: function () {
                return this._center.y;
            },
            set: function (value) {
                this._center.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscZone.prototype, "innerRadius", {
            get: function () {
                return this._innerRadius;
            },
            set: function (value) {
                this._innerRadius = value;
                this._innerSq = this._innerRadius * this._innerRadius;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DiscZone.prototype, "outerRadius", {
            get: function () {
                return this._outerRadius;
            },
            set: function (value) {
                this._outerRadius = value;
                this._outerSq = this._outerRadius * this._outerRadius;
            },
            enumerable: true,
            configurable: true
        });
        DiscZone.prototype.contains = function (x, y) {
            x -= this._center.x;
            y -= this._center.y;
            var distSq = x * x + y * y;
            return distSq <= this._outerSq && distSq >= this._innerSq;
        };
        DiscZone.prototype.getLocation = function () {
            var rand = Math.random();
            var point = Avota.Point.polar(this._innerRadius + (1 - rand * rand) * (this._outerRadius - this._innerRadius), Math.random() * DiscZone.TWOPI);
            point.x += this._center.x;
            point.y += this._center.y;
            return point;
        };
        DiscZone.prototype.getArea = function () {
            return Math.PI * (this._outerSq - this._innerSq);
        };
        DiscZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var outerLimit;
            var innerLimit;
            var outerLimitSq;
            var innerLimitSq;
            var distanceSq;
            var distance;
            var pdx;
            var pdy;
            var pDistanceSq;
            var adjustSpeed;
            var positionRatio;
            var epsilon = 0.001;
            var dx = particle.x - this._center.x;
            var dy = particle.y - this._center.y;
            var dotProduct = particle.velX * dx + particle.velY * dy;
            if(dotProduct < 0) {
                outerLimit = this._outerRadius + particle.collisionRadius;
                if(Math.abs(dx) > outerLimit) {
                    return false;
                }
                if(Math.abs(dy) > outerLimit) {
                    return false;
                }
                distanceSq = dx * dx + dy * dy;
                outerLimitSq = outerLimit * outerLimit;
                if(distanceSq > outerLimitSq) {
                    return false;
                }
                pdx = particle.previousX - this._center.x;
                pdy = particle.previousY - this._center.y;
                pDistanceSq = pdx * pdx + pdy * pdy;
                if(pDistanceSq > outerLimitSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distanceSq;
                    particle.velX -= adjustSpeed * dx;
                    particle.velY -= adjustSpeed * dy;
                    distance = Math.sqrt(distanceSq);
                    positionRatio = (2 * outerLimit - distance) / distance + epsilon;
                    particle.x = this._center.x + dx * positionRatio;
                    particle.y = this._center.y + dy * positionRatio;
                    return true;
                }
                if(this._innerRadius != 0 && this._innerRadius != this._outerRadius) {
                    innerLimit = this._innerRadius + particle.collisionRadius;
                    if(Math.abs(dx) > innerLimit) {
                        return false;
                    }
                    if(Math.abs(dy) > innerLimit) {
                        return false;
                    }
                    innerLimitSq = innerLimit * innerLimit;
                    if(distanceSq > innerLimitSq) {
                        return false;
                    }
                    if(pDistanceSq > innerLimitSq) {
                        adjustSpeed = (1 + bounce) * dotProduct / distanceSq;
                        particle.velX -= adjustSpeed * dx;
                        particle.velY -= adjustSpeed * dy;
                        distance = Math.sqrt(distanceSq);
                        positionRatio = (2 * innerLimit - distance) / distance + epsilon;
                        particle.x = this._center.x + dx * positionRatio;
                        particle.y = this._center.y + dy * positionRatio;
                        return true;
                    }
                }
                return false;
            } else {
                outerLimit = this._outerRadius - particle.collisionRadius;
                pdx = particle.previousX - this._center.x;
                pdy = particle.previousY - this._center.y;
                if(Math.abs(pdx) > outerLimit) {
                    return false;
                }
                if(Math.abs(pdy) > outerLimit) {
                    return false;
                }
                pDistanceSq = pdx * pdx + pdy * pdy;
                outerLimitSq = outerLimit * outerLimit;
                if(pDistanceSq > outerLimitSq) {
                    return false;
                }
                distanceSq = dx * dx + dy * dy;
                if(this._innerRadius != 0 && this._innerRadius != this._outerRadius) {
                    innerLimit = this._innerRadius - particle.collisionRadius;
                    innerLimitSq = innerLimit * innerLimit;
                    if(pDistanceSq < innerLimitSq && distanceSq >= innerLimitSq) {
                        adjustSpeed = (1 + bounce) * dotProduct / distanceSq;
                        particle.velX -= adjustSpeed * dx;
                        particle.velY -= adjustSpeed * dy;
                        distance = Math.sqrt(distanceSq);
                        positionRatio = (2 * innerLimit - distance) / distance - epsilon;
                        particle.x = this._center.x + dx * positionRatio;
                        particle.y = this._center.y + dy * positionRatio;
                        return true;
                    }
                }
                if(distanceSq >= outerLimitSq) {
                    adjustSpeed = (1 + bounce) * dotProduct / distanceSq;
                    particle.velX -= adjustSpeed * dx;
                    particle.velY -= adjustSpeed * dy;
                    distance = Math.sqrt(distanceSq);
                    positionRatio = (2 * outerLimit - distance) / distance - epsilon;
                    particle.x = this._center.x + dx * positionRatio;
                    particle.y = this._center.y + dy * positionRatio;
                    return true;
                }
                return false;
            }
        };
        return DiscZone;
    })();
    Avota.DiscZone = DiscZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GreyscaleZone = (function () {
        function GreyscaleZone(image, offsetX, offsetY, scaleX, scaleY) {
            if (typeof image === "undefined") { image = null; }
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            if (typeof scaleX === "undefined") { scaleX = 1; }
            if (typeof scaleY === "undefined") { scaleY = 1; }
            this._image = image;
            this._offsetX = offsetX;
            this._offsetY = offsetY;
            this._scaleX = scaleX;
            this._scaleY = scaleY;
            this.invalidate();
        }
        Object.defineProperty(GreyscaleZone.prototype, "image", {
            get: function () {
                return this._image;
            },
            set: function (value) {
                this._image = value;
                this.invalidate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GreyscaleZone.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                this._offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GreyscaleZone.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                this._offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GreyscaleZone.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                this._scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GreyscaleZone.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                this._scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        GreyscaleZone.prototype.invalidate = function () {
            if(!this._image) {
                return;
            }
            this._canvas = document.createElement("canvas");
            this._context = this._canvas.getContext("2d");
            this._canvas.width = this._image.width;
            this._canvas.height = this._image.height;
            this._canvas.getContext("2d").drawImage(this._image, 0, 0, this._image.width, this._image.height);
            this._validPoints = new Avota.FastWeightedArray();
            for(var x = 0; x < this._canvas.width; ++x) {
                for(var y = 0; y < this._canvas.height; ++y) {
                    var pixel = this._context.getImageData(x, y, 1, 1).data;
                    var color = Avota.ColorUtil.ARGBToHex(pixel[3], pixel[0], pixel[1], pixel[2]);
                    var grey = 0.11 * (color & 0xFF) + 0.59 * ((color >>> 8) & 0xFF) + 0.3 * ((color >>> 16) & 0xFF);
                    if(grey != 0) {
                        this._validPoints.add(new Avota.Point(x, y), grey / 255);
                    }
                }
            }
        };
        GreyscaleZone.prototype.contains = function (x, y) {
            if(x >= this._offsetX && x <= this._offsetX + this._canvas.width * this._scaleX && y >= this._offsetY && y <= this._offsetY + this._canvas.height * this._scaleY) {
                var pixel = this._context.getImageData(Math.round((x - this._offsetX) / this._scaleX), Math.round((y - this._offsetY) / this._scaleY), 1, 1).data;
                var color = Avota.ColorUtil.ARGBToHex(pixel[3], pixel[0], pixel[1], pixel[2]);
                return (color & 0xFFFFFF) != 0;
            }
            return false;
        };
        GreyscaleZone.prototype.getLocation = function () {
            var p = this._validPoints.getRandomValue().clone();
            p.x = p.x * this._scaleX + this._offsetX;
            p.y = p.y * this._scaleY + this._offsetY;
            return p;
        };
        GreyscaleZone.prototype.getArea = function () {
            return this._validPoints.totalRatios * this._scaleX * this._scaleY;
        };
        GreyscaleZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            if(this.contains(particle.x, particle.y) != this.contains(particle.previousX, particle.previousY)) {
                particle.x = particle.previousX;
                particle.y = particle.previousY;
                particle.velX = -bounce * particle.velX;
                particle.velY = -bounce * particle.velY;
                return true;
            } else {
                return false;
            }
        };
        return GreyscaleZone;
    })();
    Avota.GreyscaleZone = GreyscaleZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageZone = (function () {
        function ImageZone(image, offsetX, offsetY, scaleX, scaleY) {
            if (typeof image === "undefined") { image = null; }
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            if (typeof scaleX === "undefined") { scaleX = 1; }
            if (typeof scaleY === "undefined") { scaleY = 1; }
            this._image = image;
            this._offsetX = offsetX;
            this._offsetY = offsetY;
            this._scaleX = scaleX;
            this._scaleY = scaleY;
            this._renderRect = new Avota.Rectangle();
            this._renderOffset = new Avota.Point();
            if(this._image) {
                this._renderRect.width = this._image.width;
                this._renderRect.height = this._image.height;
            }
            this.invalidate();
        }
        Object.defineProperty(ImageZone.prototype, "image", {
            get: function () {
                return this._image;
            },
            set: function (value) {
                this._image = value;
                if(this._image) {
                    this._renderRect.width = this._image.width;
                    this._renderRect.height = this._image.height;
                }
                this.invalidate();
            },
            enumerable: true,
            configurable: true
        });
        ImageZone.prototype.setRenderInfo = function (image, renderRect, renderOffset) {
            this._image = image;
            this._renderRect = renderRect;
            this._renderOffset = renderOffset;
            this.invalidate();
        };
        Object.defineProperty(ImageZone.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                this._offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageZone.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                this._offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageZone.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                this._scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ImageZone.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                this._scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        ImageZone.prototype.invalidate = function () {
            if(!this._image) {
                return;
            }
            if(!this._canvas) {
                this._canvas = document.createElement("canvas");
                this._context = this._canvas.getContext("2d");
            }
            this._canvas.width = this._renderRect.width;
            this._canvas.height = this._renderRect.height;
            this._context.drawImage(this._image, this._renderRect.x, this._renderRect.y, this._renderRect.width, this._renderRect.height, this._renderOffset.x, this._renderOffset.y, this._renderRect.width, this._renderRect.height);
            this._validPoints = new Avota.FastWeightedArray();
            var ratio;
            var pos;
            var imageData = this._context.getImageData(0, 0, this._canvas.width, this._canvas.height).data;
            for(var i = 0, n = imageData.length; i < n; i += 4) {
                ratio = imageData[i + 3] / 0xFF;
                if(ratio != 0) {
                    pos = i / 4;
                    this._validPoints.add(new Avota.Point(pos % this._canvas.width, Math.floor(pos / this._canvas.width)), ratio);
                }
            }
        };
        ImageZone.prototype.contains = function (x, y) {
            if(x >= this._offsetX && x <= this._offsetX + this._canvas.width * this._scaleX && y >= this._offsetY && y <= this._offsetY + this._canvas.height * this._scaleY) {
                var pixel = this._context.getImageData(Math.round((x - this._offsetX) / this._scaleX), Math.round((y - this._offsetY) / this._scaleY), 1, 1).data;
                return pixel[3] != 0;
            }
            return false;
        };
        ImageZone.prototype.getLocation = function () {
            var p = this._validPoints.getRandomValue().clone();
            p.x = p.x * this._scaleX + this._offsetX;
            p.y = p.y * this._scaleY + this._offsetY;
            return p;
        };
        ImageZone.prototype.getArea = function () {
            return this._validPoints.totalRatios * this._scaleX * this._scaleY;
        };
        ImageZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            if(this.contains(particle.x, particle.y) != this.contains(particle.previousX, particle.previousY)) {
                particle.x = particle.previousX;
                particle.y = particle.previousY;
                particle.velX = -bounce * particle.velX;
                particle.velY = -bounce * particle.velY;
                return true;
            } else {
                return false;
            }
        };
        return ImageZone;
    })();
    Avota.ImageZone = ImageZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var LineZone = (function () {
        function LineZone(start, end) {
            if (typeof start === "undefined") { start = null; }
            if (typeof end === "undefined") { end = null; }
            if(start == null) {
                this._start = new Avota.Point(0, 0);
            } else {
                this._start = start;
            }
            if(end == null) {
                this._end = new Avota.Point(0, 0);
            } else {
                this._end = end;
            }
            this.setLengthAndNormal();
        }
        LineZone.prototype.setLengthAndNormal = function () {
            this._length = this._end.subtract(this._start);
            this._parallel = this._length.clone();
            this._parallel.normalize(1);
            this._normal = new Avota.Point(this._parallel.y, -this._parallel.x);
        };
        Object.defineProperty(LineZone.prototype, "start", {
            get: function () {
                return this._start;
            },
            set: function (value) {
                this._start = value;
                this.setLengthAndNormal();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineZone.prototype, "end", {
            get: function () {
                return this._end;
            },
            set: function (value) {
                this._end = value;
                this.setLengthAndNormal();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineZone.prototype, "startX", {
            get: function () {
                return this._start.x;
            },
            set: function (value) {
                this._start.x = value;
                this._length = this._end.subtract(this._start);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineZone.prototype, "startY", {
            get: function () {
                return this._start.y;
            },
            set: function (value) {
                this._start.y = value;
                this._length = this._end.subtract(this._start);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineZone.prototype, "endX", {
            get: function () {
                return this._end.x;
            },
            set: function (value) {
                this._end.x = value;
                this._length = this._end.subtract(this._start);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineZone.prototype, "endY", {
            get: function () {
                return this._end.y;
            },
            set: function (value) {
                this._end.y = value;
                this._length = this._end.subtract(this._start);
            },
            enumerable: true,
            configurable: true
        });
        LineZone.prototype.contains = function (x, y) {
            if((x - this._start.x) * this._length.y - (y - this._start.y) * this._length.x != 0) {
                return false;
            }
            return (x - this._start.x) * (x - this._end.x) + (y - this._start.y) * (y - this._end.y) <= 0;
        };
        LineZone.prototype.getLocation = function () {
            var ret = this._start.clone();
            var scale = Math.random();
            ret.x += this._length.x * scale;
            ret.y += this._length.y * scale;
            return ret;
        };
        LineZone.prototype.getArea = function () {
            return this._length.length;
        };
        LineZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var previousDistance = (particle.previousX - this._start.x) * this._normal.x + (particle.previousY - this._start.y) * this._normal.y;
            var velDistance = particle.velX * this._normal.x + particle.velY * this._normal.y;
            if(previousDistance * velDistance >= 0) {
                return false;
            }
            var distance = (particle.x - this._start.x) * this._normal.x + (particle.y - this._start.y) * this._normal.y;
            if(distance * previousDistance > 0 && (distance > particle.collisionRadius || distance < -particle.collisionRadius)) {
                return false;
            }
            var offsetX;
            var offsetY;
            if(previousDistance < 0) {
                offsetX = this._normal.x * particle.collisionRadius;
                offsetY = this._normal.y * particle.collisionRadius;
            } else {
                offsetX = -this._normal.x * particle.collisionRadius;
                offsetY = -this._normal.y * particle.collisionRadius;
            }
            var thenX = particle.previousX + offsetX;
            var thenY = particle.previousY + offsetY;
            var nowX = particle.x + offsetX;
            var nowY = particle.y + offsetY;
            var startX = this._start.x - this._parallel.x * particle.collisionRadius;
            var startY = this._start.y - this._parallel.y * particle.collisionRadius;
            var endX = this._end.x + this._parallel.x * particle.collisionRadius;
            var endY = this._end.y + this._parallel.y * particle.collisionRadius;
            var den = 1 / ((nowY - thenY) * (endX - startX) - (nowX - thenX) * (endY - startY));
            var u = den * ((nowX - thenX) * (startY - thenY) - (nowY - thenY) * (startX - thenX));
            if(u < 0 || u > 1) {
                return false;
            }
            var v = -den * ((endX - startX) * (thenY - startY) - (endY - startY) * (thenX - startX));
            if(v < 0 || v > 1) {
                return false;
            }
            particle.x = particle.previousX + v * (particle.x - particle.previousX);
            particle.y = particle.previousY + v * (particle.y - particle.previousY);
            var normalSpeed = this._normal.x * particle.velX + this._normal.y * particle.velY;
            var factor = (1 + bounce) * normalSpeed;
            particle.velX -= factor * this._normal.x;
            particle.velY -= factor * this._normal.y;
            return true;
        };
        return LineZone;
    })();
    Avota.LineZone = LineZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MultiZone = (function () {
        function MultiZone() {
            this._zones = [];
            this._areas = [];
            this._totalArea = 0;
        }
        MultiZone.prototype.addZone = function (zone) {
            this._zones.push(zone);
            var area = zone.getArea();
            this._areas.push(area);
            this._totalArea += area;
        };
        MultiZone.prototype.removeZone = function (zone) {
            var len = this._zones.length;
            for(var i = 0; i < len; ++i) {
                if(this._zones[i] == zone) {
                    this._totalArea -= this._areas[i];
                    this._areas.splice(i, 1);
                    this._zones.splice(i, 1);
                    return;
                }
            }
        };
        MultiZone.prototype.contains = function (x, y) {
            var len = this._zones.length;
            for(var i = 0; i < len; ++i) {
                if(this._zones[i].contains(x, y)) {
                    return true;
                }
            }
            return false;
        };
        MultiZone.prototype.getLocation = function () {
            var selectZone = Math.random() * this._totalArea;
            var len = this._zones.length;
            for(var i = 0; i < len; ++i) {
                if((selectZone -= this._areas[i]) <= 0) {
                    return this._zones[i].getLocation();
                }
            }
            if(this._zones.length == 0) {
                throw new Error("Attempt to use a MultiZone object that contains no Zones");
            } else {
                return this._zones[0].getLocation();
            }
            return null;
        };
        MultiZone.prototype.getArea = function () {
            return this._totalArea;
        };
        MultiZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var collide = false;
            for(var i = 0; i < this._zones.length; i++) {
                collide = this._zones[i].collideParticle(particle, bounce) || collide;
            }
            return collide;
        };
        return MultiZone;
    })();
    Avota.MultiZone = MultiZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var PointZone = (function () {
        function PointZone(point) {
            if (typeof point === "undefined") { point = null; }
            if(point == null) {
                this._point = new Avota.Point(0, 0);
            } else {
                this._point = point;
            }
        }
        Object.defineProperty(PointZone.prototype, "point", {
            get: function () {
                return this._point;
            },
            set: function (value) {
                this._point = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointZone.prototype, "x", {
            get: function () {
                return this._point.x;
            },
            set: function (value) {
                this._point.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointZone.prototype, "y", {
            get: function () {
                return this._point.y;
            },
            set: function (value) {
                this._point.y = value;
            },
            enumerable: true,
            configurable: true
        });
        PointZone.prototype.contains = function (x, y) {
            return this._point.x == x && this._point.y == y;
        };
        PointZone.prototype.getLocation = function () {
            return this._point.clone();
        };
        PointZone.prototype.getArea = function () {
            return 1;
        };
        PointZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var relativePreviousX = particle.previousX - this._point.x;
            var relativePreviousY = particle.previousY - this._point.y;
            var dot = relativePreviousX * particle.velX + relativePreviousY * particle.velY;
            if(dot >= 0) {
                return false;
            }
            var relativeX = particle.x - this._point.x;
            var relativeY = particle.y - this._point.y;
            var radius = particle.collisionRadius;
            dot = relativeX * particle.velX + relativeY * particle.velY;
            if(dot <= 0) {
                if(relativeX > radius || relativeX < -radius) {
                    return false;
                }
                if(relativeY > radius || relativeY < -radius) {
                    return false;
                }
                if(relativeX * relativeX + relativeY * relativeY > radius * radius) {
                    return false;
                }
            }
            var frameVelX = relativeX - relativePreviousX;
            var frameVelY = relativeY - relativePreviousY;
            var a = frameVelX * frameVelX + frameVelY * frameVelY;
            var b = 2 * (relativePreviousX * frameVelX + relativePreviousY * frameVelY);
            var c = relativePreviousX * relativePreviousX + relativePreviousY * relativePreviousY - radius * radius;
            var sq = b * b - 4 * a * c;
            if(sq < 0) {
                return false;
            }
            var srt = Math.sqrt(sq);
            var t1 = (-b + srt) / (2 * a);
            var t2 = (-b - srt) / (2 * a);
            var t = [];
            if(t1 > 0 && t1 <= 1) {
                t.push(t1);
            }
            if(t2 > 0 && t2 <= 1) {
                t.push(t2);
            }
            var time;
            if(t.length == 0) {
                return false;
            }
            if(t.length == 1) {
                time = t[0];
            } else {
                time = Math.min(t1, t2);
            }
            var cx = relativePreviousX + time * frameVelX + this._point.x;
            var cy = relativePreviousY + time * frameVelY + this._point.y;
            var nx = cx - this._point.x;
            var ny = cy - this._point.y;
            var d = Math.sqrt(nx * nx + ny * ny);
            nx /= d;
            ny /= d;
            var n = frameVelX * nx + frameVelY * ny;
            frameVelX -= 2 * nx * n;
            frameVelY -= 2 * ny * n;
            particle.x = cx + (1 - time) * frameVelX;
            particle.y = cy + (1 - time) * frameVelY;
            var normalVel = particle.velX * nx + particle.velY * ny;
            particle.velX -= (1 + bounce) * nx * normalVel;
            particle.velY -= (1 + bounce) * ny * normalVel;
            return true;
        };
        return PointZone;
    })();
    Avota.PointZone = PointZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var RectangleZone = (function () {
        function RectangleZone(left, top, right, bottom) {
            if (typeof left === "undefined") { left = 0; }
            if (typeof top === "undefined") { top = 0; }
            if (typeof right === "undefined") { right = 0; }
            if (typeof bottom === "undefined") { bottom = 0; }
            this._left = left;
            this._top = top;
            this._right = right;
            this._bottom = bottom;
            this._width = right - left;
            this._height = bottom - top;
        }
        Object.defineProperty(RectangleZone.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectangleZone.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectangleZone.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (value) {
                this._left = value;
                if(!isNaN(this._right) && !isNaN(this._left)) {
                    this._width = this.right - this.left;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectangleZone.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (value) {
                this._right = value;
                if(!isNaN(this._right) && !isNaN(this._left)) {
                    this._width = this.right - this.left;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectangleZone.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (value) {
                this._top = value;
                if(!isNaN(this._top) && !isNaN(this._bottom)) {
                    this._height = this.bottom - this.top;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RectangleZone.prototype, "bottom", {
            get: function () {
                return this._bottom;
            },
            set: function (value) {
                this._bottom = value;
                if(!isNaN(this._top) && !isNaN(this._bottom)) {
                    this._height = this.bottom - this.top;
                }
            },
            enumerable: true,
            configurable: true
        });
        RectangleZone.prototype.contains = function (x, y) {
            return x >= this._left && x <= this._right && y >= this._top && y <= this._bottom;
        };
        RectangleZone.prototype.getLocation = function () {
            return new Avota.Point(this._left + Math.random() * this._width, this._top + Math.random() * this._height);
        };
        RectangleZone.prototype.getArea = function () {
            return this._width * this._height;
        };
        RectangleZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            var position;
            var previousPosition;
            var intersect;
            var collision = false;
            if(particle.velX > 0) {
                position = particle.x + particle.collisionRadius;
                previousPosition = particle.previousX + particle.collisionRadius;
                if(previousPosition < this._left && position >= this._left) {
                    intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);
                    if(intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {
                        particle.velX = -particle.velX * bounce;
                        particle.x += 2 * (this._left - position);
                        collision = true;
                    }
                } else if(previousPosition <= this._right && position > this._right) {
                    intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);
                    if(intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {
                        particle.velX = -particle.velX * bounce;
                        particle.x += 2 * (this._right - position);
                        collision = true;
                    }
                }
            } else if(particle.velX < 0) {
                position = particle.x - particle.collisionRadius;
                previousPosition = particle.previousX - particle.collisionRadius;
                if(previousPosition > this._right && position <= this._right) {
                    intersect = particle.previousY + (particle.y - particle.previousY) * (this._right - previousPosition) / (position - previousPosition);
                    if(intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {
                        particle.velX = -particle.velX * bounce;
                        particle.x += 2 * (this._right - position);
                        collision = true;
                    }
                } else if(previousPosition >= this._left && position < this._left) {
                    intersect = particle.previousY + (particle.y - particle.previousY) * (this._left - previousPosition) / (position - previousPosition);
                    if(intersect >= this._top - particle.collisionRadius && intersect <= this._bottom + particle.collisionRadius) {
                        particle.velX = -particle.velX * bounce;
                        particle.x += 2 * (this._left - position);
                        collision = true;
                    }
                }
            }
            if(particle.velY > 0) {
                position = particle.y + particle.collisionRadius;
                previousPosition = particle.previousY + particle.collisionRadius;
                if(previousPosition < this._top && position >= this._top) {
                    intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);
                    if(intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {
                        particle.velY = -particle.velY * bounce;
                        particle.y += 2 * (this._top - position);
                        collision = true;
                    }
                } else if(previousPosition <= this._bottom && position > this._bottom) {
                    intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);
                    if(intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {
                        particle.velY = -particle.velY * bounce;
                        particle.y += 2 * (this._bottom - position);
                        collision = true;
                    }
                }
            } else if(particle.velY < 0) {
                position = particle.y - particle.collisionRadius;
                previousPosition = particle.previousY - particle.collisionRadius;
                if(previousPosition > this._bottom && position <= this._bottom) {
                    intersect = particle.previousX + (particle.x - particle.previousX) * (this._bottom - previousPosition) / (position - previousPosition);
                    if(intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {
                        particle.velY = -particle.velY * bounce;
                        particle.y += 2 * (this._bottom - position);
                        collision = true;
                    }
                } else if(previousPosition >= this._top && position < this._top) {
                    intersect = particle.previousX + (particle.x - particle.previousX) * (this._top - previousPosition) / (position - previousPosition);
                    if(intersect >= this._left - particle.collisionRadius && intersect <= this._right + particle.collisionRadius) {
                        particle.velY = -particle.velY * bounce;
                        particle.y += 2 * (this._top - position);
                        collision = true;
                    }
                }
            }
            return collision;
        };
        return RectangleZone;
    })();
    Avota.RectangleZone = RectangleZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var TextZone = (function () {
        function TextZone(textGraphic, offsetX, offsetY, scaleX, scaleY) {
            if (typeof textGraphic === "undefined") { textGraphic = null; }
            if (typeof offsetX === "undefined") { offsetX = 0; }
            if (typeof offsetY === "undefined") { offsetY = 0; }
            if (typeof scaleX === "undefined") { scaleX = 1; }
            if (typeof scaleY === "undefined") { scaleY = 1; }
            this._textGraphic = textGraphic;
            this._offsetX = offsetX;
            this._offsetY = offsetY;
            this._scaleX = scaleX;
            this._scaleY = scaleY;
            this.invalidate();
        }
        TextZone.NAME = "TextZone";
        Object.defineProperty(TextZone.prototype, "textGraphic", {
            get: function () {
                return this._textGraphic;
            },
            set: function (value) {
                this._textGraphic = value;
                this.invalidate();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextZone.prototype, "offsetX", {
            get: function () {
                return this._offsetX;
            },
            set: function (value) {
                this._offsetX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextZone.prototype, "offsetY", {
            get: function () {
                return this._offsetY;
            },
            set: function (value) {
                this._offsetY = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextZone.prototype, "scaleX", {
            get: function () {
                return this._scaleX;
            },
            set: function (value) {
                this._scaleX = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextZone.prototype, "scaleY", {
            get: function () {
                return this._scaleY;
            },
            set: function (value) {
                this._scaleY = value;
            },
            enumerable: true,
            configurable: true
        });
        TextZone.prototype.invalidate = function () {
            if(!this._textGraphic) {
                return;
            }
            this._validPoints = new Avota.FastWeightedArray();
            var ratio;
            var pixel;
            var data = this._textGraphic._renderContext.getImageData(0, 0, this._textGraphic.width, this._textGraphic.height).data;
            for(var x = 0; x < this._textGraphic.width; ++x) {
                for(var y = 0; y < this._textGraphic.height; ++y) {
                    ratio = data[(~~x + (~~y * this._textGraphic.width)) * 4] / 0xFF;
                    if(ratio != 0) {
                        this._validPoints.add(new Avota.Point(x, y), ratio);
                    }
                }
            }
        };
        TextZone.prototype.contains = function (x, y) {
            if(x >= this._offsetX && x <= this._offsetX + this._textGraphic.width * this._scaleX && y >= this._offsetY && y <= this._offsetY + this._textGraphic.height * this._scaleY) {
                return this._textGraphic._renderContext.getImageData(Math.round((x - this._offsetX) / this._scaleX), Math.round((y - this._offsetY) / this._scaleY), 1, 1).data[3] != 0;
            }
            return false;
        };
        TextZone.prototype.getLocation = function () {
            var p = this._validPoints.getRandomValue().clone();
            p.x = p.x * this._scaleX + this._offsetX;
            p.y = p.y * this._scaleY + this._offsetY;
            return p;
        };
        TextZone.prototype.getArea = function () {
            return this._validPoints.totalRatios * this._scaleX * this._scaleY;
        };
        TextZone.prototype.collideParticle = function (particle, bounce) {
            if (typeof bounce === "undefined") { bounce = 1; }
            if(this.contains(particle.x, particle.y) != this.contains(particle.previousX, particle.previousY)) {
                particle.x = particle.previousX;
                particle.y = particle.previousY;
                particle.velX = -bounce * particle.velX;
                particle.velY = -bounce * particle.velY;
                return true;
            } else {
                return false;
            }
        };
        return TextZone;
    })();
    Avota.TextZone = TextZone;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ResourceElement = (function (_super) {
        __extends(ResourceElement, _super);
        function ResourceElement(resourceManager, name, options) {
            if (typeof name === "undefined") { name = ResourceElement.NAME; }
            if (typeof options === "undefined") { options = null; }
                _super.call(this, name);
            this._resourceManager = resourceManager;
            this._options = options;
            this.loadCompleteSignal = new Avota.Signal();
            this.loadErrorSignal = new Avota.Signal();
            this._onLoadListener = this._onLoadComplete.bind(this);
            this._onErrorListener = this._onLoadError.bind(this);
        }
        ResourceElement.NAME = "ResourceElement";
        Object.defineProperty(ResourceElement.prototype, "status", {
            get: function () {
                return this._status;
            },
            enumerable: true,
            configurable: true
        });
        ResourceElement.prototype.load = function (fileName) {
            if(LOGGING) {
                this._log.log("Loading: " + fileName);
            }
            this.path = fileName;
            this._status = ResourceStatus.LOADING;
        };
        ResourceElement.prototype.setContent = function (content) {
            return false;
        };
        ResourceElement.prototype._onLoadComplete = function (event) {
            if(LOGGING) {
                this._log.log("Load Complete: " + this.path);
            }
            this._status = ResourceStatus.LOADED;
            this._removeListeners();
            this.loadCompleteSignal.dispatch(this);
        };
        ResourceElement.prototype._onLoadError = function (event) {
            if(LOGGING) {
                this._log.error("Error | Unable to Load: " + this.path);
            }
            this._status = ResourceStatus.FAILED;
            this._removeListeners();
            this.loadErrorSignal.dispatch(this);
        };
        ResourceElement.prototype._removeListeners = function () {
        };
        ResourceElement.prototype.destroy = function () {
            this._removeListeners();
            this.loadCompleteSignal.removeAll();
            this.loadErrorSignal.removeAll();
            this.data = null;
            this.loadCompleteSignal = null;
            this.loadErrorSignal = null;
            this._resourceManager = null;
            this._onLoadListener = null;
            this._onErrorListener = null;
            _super.prototype.destroy.call(this);
        };
        return ResourceElement;
    })(Avota.Element);
    Avota.ResourceElement = ResourceElement;    
    var ResourceStatus = (function () {
        function ResourceStatus() { }
        ResourceStatus.LOADING = "loading";
        ResourceStatus.LOADED = "loaded";
        ResourceStatus.FAILED = "failed";
        return ResourceStatus;
    })();
    Avota.ResourceStatus = ResourceStatus;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CSSResource = (function (_super) {
        __extends(CSSResource, _super);
        function CSSResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        CSSResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            this.css = document.createElement("link");
            this.css.type = "text/css";
            this.css.rel = "stylesheet";
            this.css.addEventListener("load", this._onLoadListener, false);
            this.css.addEventListener("error", this._onErrorListener, false);
            this.css.href = this.path;
            document.getElementsByTagName("head")[0].appendChild(this.css);
        };
        CSSResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this.css)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        CSSResource.prototype.setContent = function (content) {
            this.data = this.css;
            return this.css != null;
        };
        CSSResource.prototype._removeListeners = function () {
            this.css.removeEventListener("load", this._onLoadListener);
            this.css.removeEventListener("error", this._onErrorListener);
        };
        CSSResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.css = null;
        };
        return CSSResource;
    })(Avota.ResourceElement);
    Avota.CSSResource = CSSResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var FontResource = (function (_super) {
        __extends(FontResource, _super);
        function FontResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        FontResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            if(!this._xhr) {
                this._xhr = new XMLHttpRequest();
            }
            this._xhr.open("GET", this.path, true);
            this._xhr.responseType = "text";
            this._xhr.addEventListener("load", this._onLoadListener, false);
            this._xhr.addEventListener("error", this._onErrorListener, false);
            this._xhr.send();
        };
        FontResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this._xhr.responseText)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        FontResource.prototype.setContent = function (content) {
            this.font = content;
            this.data = this.font;
            return this.font != null;
        };
        FontResource.prototype._removeListeners = function () {
            this._xhr.removeEventListener("load", this._onLoadListener);
            this._xhr.removeEventListener("error", this._onErrorListener);
        };
        FontResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.font = null;
            this._xhr = null;
        };
        return FontResource;
    })(Avota.ResourceElement);
    Avota.FontResource = FontResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ImageResource = (function (_super) {
        __extends(ImageResource, _super);
        function ImageResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        ImageResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            if(!this.source) {
                this.source = new Image();
            }
            this.source.addEventListener("load", this._onLoadListener, false);
            this.source.addEventListener("error", this._onErrorListener, false);
            this.source.src = this.path;
        };
        ImageResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this.source)) {
                this.image = document.createElement("canvas");
                this.image.width = this.source.width;
                this.image.height = this.source.height;
                this.image.getContext("2d").drawImage(this.source, 0, 0, this.source.width, this.source.height);
                _super.prototype._onLoadComplete.call(this, event);
                this.source = null;
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        ImageResource.prototype.setContent = function (content) {
            this.data = this.source;
            return this.source != null;
        };
        ImageResource.prototype._removeListeners = function () {
            if(this.source) {
                this.source.removeEventListener("load", this._onLoadListener);
                this.source.removeEventListener("error", this._onErrorListener);
            }
        };
        ImageResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.source = null;
            this.image = null;
        };
        return ImageResource;
    })(Avota.ResourceElement);
    Avota.ImageResource = ImageResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var JSONResource = (function (_super) {
        __extends(JSONResource, _super);
        function JSONResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        JSONResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            if(!this._xhr) {
                this._xhr = new XMLHttpRequest();
            }
            this._xhr.open("GET", this.path, true);
            this._xhr.responseType = "text";
            this._xhr.addEventListener("load", this._onLoadListener, false);
            this._xhr.addEventListener("error", this._onErrorListener, false);
            this._xhr.send();
        };
        JSONResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this._xhr.responseText)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        JSONResource.prototype.setContent = function (content) {
            this.json = JSON.parse(content);
            this.data = this.json;
            return this.json != null;
        };
        JSONResource.prototype._removeListeners = function () {
            this._xhr.removeEventListener("load", this._onLoadListener);
            this._xhr.removeEventListener("error", this._onErrorListener);
        };
        JSONResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.json = null;
            this._xhr = null;
        };
        return JSONResource;
    })(Avota.ResourceElement);
    Avota.JSONResource = JSONResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var JSResource = (function (_super) {
        __extends(JSResource, _super);
        function JSResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        JSResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            this.js = document.createElement("script");
            this.js.type = "text/javascript";
            this.js.addEventListener("load", this._onLoadListener);
            this.js.addEventListener("error", this._onErrorListener);
            this.js.src = this.path;
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(this.js, firstScriptTag);
        };
        JSResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this.js)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        JSResource.prototype.setContent = function (content) {
            this.data = this.js;
            return this.js != null;
        };
        JSResource.prototype._removeListeners = function () {
            this.js.removeEventListener("load", this._onLoadListener);
            this.js.removeEventListener("error", this._onErrorListener);
        };
        JSResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.js = null;
        };
        return JSResource;
    })(Avota.ResourceElement);
    Avota.JSResource = JSResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SoundResource = (function (_super) {
        __extends(SoundResource, _super);
        function SoundResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        SoundResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            if(Avota.EnvUtil.hasWebAudio) {
                if(!this._xhr) {
                    this._xhr = new XMLHttpRequest();
                }
                this._xhr.open("GET", this.path, true);
                this._xhr.responseType = "arraybuffer";
                this._onXHRLoadListener = this._onXHRLoadComplete.bind(this);
                this._xhr.addEventListener("load", this._onXHRLoadListener, false);
                this._xhr.addEventListener("error", this._onErrorListener, false);
                this._xhr.send();
                return;
            }
            if(Avota.EnvUtil.hasAudioTag && !Avota.EnvUtil.hasWebAudio) {
                if(!this.soundData) {
                    this.soundData = new Audio();
                }
                this.soundData.addEventListener("canplaythrough", this._onLoadListener, false);
                this.soundData.addEventListener("error", this._onErrorListener, false);
                this.soundData.id = this.name;
                this.soundData.preload = "none";
                this.soundData.src = this.path;
                this.soundData.load();
                return;
            }
            if(!Avota.EnvUtil.hasAudioTag && !Avota.EnvUtil.hasWebAudio) {
                if(LOGGING) {
                    this._log.warn("Audio not supported, bypassing load of: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
                this._removeListeners();
                this.loadErrorSignal.dispatch(this);
            }
        };
        SoundResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this.soundData)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
                _super.prototype._onLoadError.call(this, event);
            }
        };
        SoundResource.prototype._onXHRLoadComplete = function (event) {
            if(this._xhr.readyState == 4 && this._xhr.status == 200) {
                if(this.setContent(this._xhr.response)) {
                    _super.prototype._onLoadComplete.call(this, event);
                } else {
                    if(LOGGING) {
                        this._log.error("Resource Data unavailable for: " + this.path);
                    }
                    this._status = Avota.ResourceStatus.FAILED;
                    _super.prototype._onLoadError.call(this, event);
                }
            } else {
                _super.prototype._onLoadError.call(this, event);
            }
        };
        SoundResource.prototype.setContent = function (content) {
            if(Avota.EnvUtil.hasWebAudio) {
                this.soundData = this._xhr.response;
                this.data = this.soundData;
                return this.soundData != null;
            }
            if(Avota.EnvUtil.hasAudioTag && !Avota.EnvUtil.hasWebAudio) {
                this.data = this.soundData;
                return this.soundData != null;
            }
        };
        SoundResource.prototype._removeListeners = function () {
            if(Avota.EnvUtil.hasWebAudio) {
                this._xhr.removeEventListener("load", this._onXHRLoadListener);
                this._xhr.removeEventListener("error", this._onErrorListener);
            }
            if(Avota.EnvUtil.hasAudioTag && !Avota.EnvUtil.hasWebAudio) {
                this.soundData.removeEventListener("canplaythrough", this._onLoadListener, false);
                this.soundData.removeEventListener("error", this._onErrorListener, false);
            }
        };
        SoundResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.soundData = null;
            this._xhr = null;
            this._onXHRLoadListener = null;
        };
        return SoundResource;
    })(Avota.ResourceElement);
    Avota.SoundResource = SoundResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SWFResource = (function (_super) {
        __extends(SWFResource, _super);
        function SWFResource(resourceManager, name, options) {
                _super.call(this, resourceManager, name, options);
        }
        SWFResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            this._html = '<object id="' + this._options.id + '" type="application/x-shockwave-flash" data="' + this.path + '" width="' + this._options.width + '" height="' + this._options.height + '"><param name="movie" value="' + this.path + '" />';
            if(this._options.hasOwnProperty("flashVars")) {
                this._html += '<param name="FlashVars" value="';
                for(var key in this._options.flashVars) {
                    this._html += key + '=' + this._options.flashVars[key] + '&amp;';
                }
                this._html += '" />';
            }
            this._html += '<param name="allowScriptAccess" value="always" /></object>';
            if(this._options.hasOwnProperty("autoplay") && this._options.autoplay == true) {
                this.init();
            }
            if(this._options.hasOwnProperty("parent")) {
                this.parent = document.getElementById(this._options.parent);
            } else {
                this.parent = document.createElement("div");
                if(this._options.hasOwnProperty("parentID")) {
                    this.parent.setAttribute("id", this._options.parentID);
                }
                document.body.appendChild(this.parent);
            }
            this.parent.style.position = "absolute";
            this.parent.style.width = this._options.width + "px";
            this.parent.style.height = this._options.height + "px";
            _super.prototype._onLoadComplete.call(this, null);
        };
        SWFResource.prototype.init = function () {
            document.body.appendChild(this.parent);
            this.parent.innerHTML = this._html;
            this.swf = document.getElementById(this._options.id);
            this.data = this.swf;
        };
        SWFResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.swf = null;
            this._options = null;
        };
        return SWFResource;
    })(Avota.ResourceElement);
    Avota.SWFResource = SWFResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var XMLResource = (function (_super) {
        __extends(XMLResource, _super);
        function XMLResource(resourceManager, name) {
                _super.call(this, resourceManager, name);
        }
        XMLResource.prototype.load = function (fileName) {
            _super.prototype.load.call(this, fileName);
            if(!this._xhr) {
                this._xhr = new XMLHttpRequest();
            }
            this._xhr.open("GET", this.path, true);
            this._xhr.responseType = "text";
            this._xhr.addEventListener("load", this._onLoadListener, false);
            this._xhr.addEventListener("error", this._onErrorListener, false);
            this._xhr.send();
        };
        XMLResource.prototype._onLoadComplete = function (event) {
            if(this.setContent(this._xhr.response)) {
                _super.prototype._onLoadComplete.call(this, event);
            } else {
                if(LOGGING) {
                    this._log.error("Resource Data unavailable for: " + this.path);
                }
                this._status = Avota.ResourceStatus.FAILED;
            }
        };
        XMLResource.prototype.setContent = function (content) {
            try  {
                if(window['DOMParser']) {
                    var domParser = new DOMParser();
                    this.xml = domParser.parseFromString(content, "text/xml");
                } else {
                    this.xml = new ActiveXObject("Microsoft.XMLDOM");
                    this.xml.async = 'false';
                    this.xml.loadXML(content);
                }
            } catch (e) {
                this.xml = null;
            }
            this.data = this.xml;
            return this.xml != null;
        };
        XMLResource.prototype._removeListeners = function () {
            this._xhr.removeEventListener("load", this._onLoadListener);
            this._xhr.removeEventListener("error", this._onErrorListener);
        };
        XMLResource.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.xml = null;
            this._xhr = null;
        };
        return XMLResource;
    })(Avota.ResourceElement);
    Avota.XMLResource = XMLResource;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SoundCategory = (function (_super) {
        __extends(SoundCategory, _super);
        function SoundCategory(name) {
            if (typeof name === "undefined") { name = SoundCategory.NAME; }
                _super.call(this, name);
            this.changedSignal = new Avota.Signal();
            this.channels = SoundCategory.MAX_CHANNELS;
            this._playingSounds = [];
            this._mute = false;
            this._volume = 1;
            this._pan = 0;
            this.override = false;
        }
        SoundCategory.NAME = "SoundCategory";
        SoundCategory.MAX_CHANNELS = Number.MAX_VALUE;
        SoundCategory.MUSIC = "music";
        SoundCategory.SFX = "sfx";
        SoundCategory.VO = "vo";
        Object.defineProperty(SoundCategory.prototype, "mute", {
            get: function () {
                return this._mute;
            },
            set: function (value) {
                this._mute = value;
                this.changedSignal.dispatch();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundCategory.prototype, "volume", {
            get: function () {
                return this._volume * 100;
            },
            set: function (value) {
                if(value > 100) {
                    value = 100;
                }
                if(value < 0) {
                    value = 0;
                }
                this._volume = value / 100;
                this.changedSignal.dispatch();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundCategory.prototype, "pan", {
            get: function () {
                return this._pan;
            },
            set: function (value) {
                this._pan = value;
                this.changedSignal.dispatch();
            },
            enumerable: true,
            configurable: true
        });
        SoundCategory.prototype.destroy = function () {
            this.changedSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.changedSignal = null;
            this._playingSounds = null;
        };
        return SoundCategory;
    })(Avota.Element);
    Avota.SoundCategory = SoundCategory;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SoundElement = (function (_super) {
        __extends(SoundElement, _super);
        function SoundElement(name, soundManager, soundData, category, repeat, volume) {
            if (typeof repeat === "undefined") { repeat = false; }
            if (typeof volume === "undefined") { volume = 100; }
            var _this = this;
                _super.call(this, name);
            this._soundManager = soundManager;
            this._soundData = soundData;
            this._category = category;
            this._repeat = repeat;
            this._volume = volume / 100;
            this._defaultVolume = this._volume;
            this._position = 0;
            this._isPlaying = false;
            this._isPaused = false;
            this._isStopping = false;
            this._isPending = false;
            this._playbackRate = 1;
            this.startSignal = new Avota.Signal();
            this.stopSignal = new Avota.Signal();
            this.completeSignal = new Avota.Signal();
            switch(this._soundManager._support) {
                case Avota.SoundSupport.WEBAUDIO:
                    this._filterNodes = [];
                    if(typeof this._soundManager._audioContext.createGain === 'undefined') {
                        this._volumeNode = this._soundManager._audioContext.createGainNode();
                    } else {
                        this._volumeNode = this._soundManager._audioContext.createGain();
                    }
                    this._volumeNode.gain.value = this._volume;
                    this._volumeNode.connect(this._soundManager._volumeNode);
                    this._status = SoundElement.DECODING;
                    this._soundManager._audioContext.decodeAudioData(this._soundData, function (buffer) {
                        return _this.onAudioDataDecoded(buffer);
                    });
                    break;
                case Avota.SoundSupport.AUDIOTAG:
                    this._sound = this._soundData;
                    this._sound.volume = this._volume;
                    this._duration = this._sound.duration * 1000;
                    this._defaultDuration = this._duration;
                    this._onSoundCompleteListener = this.onSoundComplete.bind(this);
                    break;
            }
            this._soundManager._timeManager.tick.add(this.onTick, this);
            if(this._category) {
                this._category.changedSignal.add(this.onCategoryChange, this);
            }
        }
        SoundElement.FILTER_CONVOLVER = 0;
        SoundElement.FILTER_HIGHPASS = 1;
        SoundElement.FILTER_LOWPASS = 2;
        SoundElement.DECODING = 0;
        SoundElement.DECODED = 1;
        Object.defineProperty(SoundElement.prototype, "isMuted", {
            get: function () {
                return this._mute;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "position", {
            get: function () {
                return this._position * 1000;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "isPlaying", {
            get: function () {
                return this._isPlaying;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "isPaused", {
            get: function () {
                return this._isPaused;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "repeat", {
            get: function () {
                return this._repeat;
            },
            set: function (value) {
                this._repeat = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "playbackRate", {
            get: function () {
                return this._playbackRate;
            },
            set: function (value) {
                this._playbackRate = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "category", {
            get: function () {
                return this._category;
            },
            set: function (value) {
                if(this._category) {
                    this._category.changedSignal.remove(this.onCategoryChange);
                }
                this._category = value;
                if(this._category) {
                    this._category.changedSignal.add(this.onCategoryChange);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundElement.prototype, "volume", {
            get: function () {
                return this._volume * 100;
            },
            set: function (value) {
                if(value > 100) {
                    value = 100;
                }
                if(value < 0) {
                    value = 0;
                }
                this._volume = value / 100;
                switch(this._soundManager._support) {
                    case Avota.SoundSupport.WEBAUDIO:
                        this._volumeNode.gain.value = this._volume;
                        break;
                    case Avota.SoundSupport.AUDIOTAG:
                        this._sound.volume = this._volume;
                        break;
                }
                this.applyCategoryTransform();
            },
            enumerable: true,
            configurable: true
        });
        SoundElement.prototype.onTick = function (delta) {
            if(this._sound && this.isPlaying) {
                var time;
                switch(this._soundManager._support) {
                    case Avota.SoundSupport.WEBAUDIO:
                        time = (this._soundManager._audioContext.currentTime - this._playStartTime) * 1000;
                        if(!this._repeat) {
                            if(time >= this._duration - this._position) {
                                this.stop();
                                return;
                            }
                        }
                        if(this.currentCuePoint) {
                            if(this.currentCuePoint.start + time >= this.currentCuePoint.start + this.currentCuePoint.duration) {
                                this.stop();
                                return;
                            }
                        }
                        break;
                    case Avota.SoundSupport.AUDIOTAG:
                        time = this._sound.currentTime * 1000;
                        if(this.currentCuePoint) {
                            if(time >= this.currentCuePoint.start + this.currentCuePoint.duration) {
                                this.stop();
                                return;
                            }
                        }
                        break;
                }
            }
        };
        SoundElement.prototype.onAudioDataDecoded = function (buffer) {
            this._soundBuffer = buffer;
            this._duration = this._soundBuffer.duration * 1000;
            this._defaultDuration = this._duration;
            this._status = SoundElement.DECODED;
            if(this._isPending) {
                this._isPending = false;
                this.playSound();
            }
        };
        SoundElement.prototype.addCuePoint = function (name, start, duration, loop, volume, category) {
            if (typeof duration === "undefined") { duration = -1; }
            if (typeof loop === "undefined") { loop = false; }
            if (typeof volume === "undefined") { volume = -1; }
            if (typeof category === "undefined") { category = null; }
            if(!this._cuePoints) {
                this._cuePoints = {
                };
            }
            this._cuePoints[name] = {
                name: name,
                start: start,
                duration: duration,
                loop: loop,
                volume: volume,
                category: category
            };
        };
        SoundElement.prototype.hasCuePoint = function (name) {
            return (this._cuePoints) ? this._cuePoints[name] != null : false;
        };
        SoundElement.prototype.getCuePoint = function (name) {
            return (this._cuePoints) ? this._cuePoints[name] : null;
        };
        SoundElement.prototype.play = function (param1, fadeDuration, position, volume) {
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            if (typeof position === "undefined") { position = -1; }
            if (typeof volume === "undefined") { volume = -1; }
            if(Avota.ObjectUtil.isString(param1)) {
                var cuePointName = param1;
                this.currentCuePoint = this._cuePoints[cuePointName];
                if(!this.currentCuePoint) {
                    if(LOGGING) {
                        this._log.warn("CuePoint: " + cuePointName + " not found.");
                    }
                    return;
                }
                this._position = this.currentCuePoint.start / 1000;
                this._duration = (this.currentCuePoint.duration != -1) ? this.currentCuePoint.duration : this._defaultDuration - this._position;
                if(this.currentCuePoint.volume != -1) {
                    this.volume = this.currentCuePoint.volume;
                }
                if(this.currentCuePoint.category) {
                    if(!this.category || (this.category && this.category.name !== this.currentCuePoint.category)) {
                        if(!this._soundManager._categories[this.currentCuePoint.category]) {
                            this._soundManager._categories[this.currentCuePoint.category] = this._soundManager.create(Avota.SoundCategory, this.currentCuePoint.category);
                        }
                        this.category = this._soundManager._categories[this.currentCuePoint.category];
                    }
                }
                if(this.currentCuePoint.loop) {
                    this._repeat = true;
                }
                this.applyCategoryTransform();
                this.playSound();
                this.startSignal.dispatch(this);
                this._isPlaying = true;
            } else {
                var useFade = param1;
                if(position != -1) {
                    this._position = position;
                }
                if(volume != -1) {
                    this.volume = volume;
                }
                this.applyCategoryTransform();
                this.playSound();
                this.startSignal.dispatch(this);
                this._isPlaying = true;
                if(useFade) {
                    TweenMax.from(this, fadeDuration / 1000, {
                        volume: 0
                    });
                }
            }
        };
        SoundElement.prototype.pause = function () {
            this._isPaused = !this._isPaused;
            if(!this._isPaused) {
                if(this._isPlaying) {
                    this.playSound();
                }
            } else {
                if(!this._isPlaying) {
                    return;
                }
                switch(this._soundManager._support) {
                    case Avota.SoundSupport.WEBAUDIO:
                        this._position = this._soundManager._audioContext.currentTime - this._playStartTime;
                        if(typeof this._sound.stop === 'undefined') {
                            this._sound.noteOff(0);
                        } else {
                            this._sound.stop(0);
                        }
                        break;
                    case Avota.SoundSupport.AUDIOTAG:
                        this._position = this._sound.currentTime;
                        this._sound.removeEventListener("ended", this._onSoundCompleteListener, false);
                        this._sound.pause();
                        break;
                }
            }
        };
        SoundElement.prototype.resume = function () {
            if(!this._isPaused) {
                return;
            }
            this.playSound();
            this._isPaused = false;
        };
        SoundElement.prototype.stop = function (useFade, fadeDuration) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            var _this = this;
            if((!this._isPlaying && !this._isPaused) || !this._sound) {
                return;
            }
            TweenMax.killTweensOf(this, true);
            if(useFade) {
                TweenMax.to(this, fadeDuration / 1000, {
                    volume: 0,
                    onComplete: function () {
                        return _this.stop();
                    }
                });
                this._isStopping = true;
            } else {
                switch(this._soundManager._support) {
                    case Avota.SoundSupport.WEBAUDIO:
                        if(typeof this._sound.stop === 'undefined') {
                            this._sound.noteOff(0);
                        } else {
                            this._sound.stop(0);
                        }
                        break;
                    case Avota.SoundSupport.AUDIOTAG:
                        this._sound.removeEventListener("ended", this._onSoundCompleteListener, false);
                        this._sound.pause();
                        break;
                }
                this._position = 0;
                this._isPlaying = false;
                this._isStopping = false;
                this.volume = this._defaultVolume * 100;
                this._duration = this._defaultDuration;
                this.currentCuePoint = null;
                if(!this.repeat) {
                    this.stopSignal.dispatch(this);
                    this.completeSignal.dispatch(this);
                }
            }
        };
        SoundElement.prototype.mute = function (value) {
            if (typeof value === "undefined") { value = !this._mute; }
            this._mute = value;
            switch(this._soundManager._support) {
                case Avota.SoundSupport.WEBAUDIO:
                    this._volumeNode.gain.value = (this._mute) ? 0 : this._volume;
                    break;
                case Avota.SoundSupport.AUDIOTAG:
                    this._sound.volume = (this._mute) ? 0 : this._volume;
                    break;
            }
        };
        SoundElement.prototype.addFilter = function (type, params, position) {
            if (typeof position === "undefined") { position = this._filterNodes.length; }
            var node;
            var data = {
            };
            switch(type) {
                case SoundElement.FILTER_CONVOLVER:
                    if(!params && !params.hasOwnProperty("impulseResponse")) {
                        return;
                    }
                    node = this._soundManager._audioContext.createConvolver();
                    node.buffer = this._soundManager.getSound(params.impulseResponse)._soundBuffer;
                    data.id = params.impulseResponse;
                    break;
                case SoundElement.FILTER_LOWPASS:
                    node = this._soundManager._audioContext.createBiquadFilter();
                    node.type = "lowpass";
                    node.frequency.value = (params && params.hasOwnProperty("frequency")) ? params.frequency : 440;
                    break;
                case SoundElement.FILTER_HIGHPASS:
                    node = this._soundManager._audioContext.createBiquadFilter();
                    node.type = "highpass";
                    node.frequency.value = (params && params.hasOwnProperty("frequency")) ? params.frequency : 440;
                    break;
            }
            data.type = type;
            data.node = node;
            this._filterNodes[position] = data;
            this._updateNodes();
        };
        SoundElement.prototype.removeFilter = function (type, id) {
            for(var i = this._filterNodes.length - 1; i >= 0; i--) {
                this._filterNodes[i].node.disconnect(0);
                if(this._filterNodes[i].type === type) {
                    if(id) {
                        if(this._filterNodes[i].id === id) {
                            this._filterNodes.splice(i, 1);
                        } else {
                            continue;
                        }
                    } else {
                        this._filterNodes.splice(i, 1);
                    }
                }
            }
            this._updateNodes();
        };
        SoundElement.prototype.playSound = function (audioTagFlag) {
            if (typeof audioTagFlag === "undefined") { audioTagFlag = true; }
            if(this.destroyed) {
                return;
            }
            switch(this._soundManager._support) {
                case Avota.SoundSupport.WEBAUDIO:
                    if(this._status == SoundElement.DECODING) {
                        this._isPending = true;
                        return;
                    }
                    this._sound = this._soundManager._audioContext.createBufferSource();
                    this._sound.buffer = this._soundBuffer;
                    this._updateNodes();
                    this._sound.loop = this._repeat;
                    this._sound.playbackRate.value = this._playbackRate;
                    if(typeof this._sound.start === 'undefined') {
                        this._sound.noteOn(0, this._position);
                    } else {
                        this._sound.start(0, this._position);
                    }
                    this._playStartTime = this._soundManager._audioContext.currentTime;
                    break;
                case Avota.SoundSupport.AUDIOTAG:
                    this._sound.currentTime = this._position - .25;
                    this.applyCategoryTransform();
                    this._sound.volume = (this._mute) ? 0 : this._volume;
                    this._sound.play();
                    if(!this.currentCuePoint) {
                        this._sound.addEventListener("ended", this._onSoundCompleteListener, false);
                    }
                    break;
            }
        };
        SoundElement.prototype._updateNodes = function () {
            this._sound.disconnect(0);
            if(this._filterNodes.length > 0) {
                for(var i = 0, n = this._filterNodes.length; i < n; i++) {
                    this._filterNodes[i].node.disconnect(0);
                }
                this._sound.connect(this._filterNodes[0].node);
                for(var i = 0, n = this._filterNodes.length - 2; i <= n; i++) {
                    this._filterNodes[i].node.connect(this._filterNodes[i + 1].node);
                }
                this._filterNodes[this._filterNodes.length - 1].node.connect(this._volumeNode);
            } else {
                this._sound.connect(this._volumeNode);
            }
        };
        SoundElement.prototype.onSoundComplete = function (event) {
            this.stop();
            if(this._repeat && !this._isStopping) {
                this.play();
            }
        };
        SoundElement.prototype.onCategoryChange = function () {
            this.applyCategoryTransform();
        };
        SoundElement.prototype.applyCategoryTransform = function () {
            if(this._category) {
                switch(this._soundManager._support) {
                    case Avota.SoundSupport.WEBAUDIO:
                        this._volumeNode.gain.value = (this._category.mute) ? 0 : this._volume * (this._category.volume / 100);
                        break;
                    case Avota.SoundSupport.AUDIOTAG:
                        this._sound.volume = (this._category.mute) ? 0 : this._volume * (this._category.volume / 100);
                        break;
                }
            }
        };
        SoundElement.prototype.destroy = function () {
            var _this = this;
            this._soundManager._timeManager.tick.remove(this.onTick, this);
            if(this._isPlaying || this._isPaused) {
                this.stop();
            }
            if(this._category) {
                if(this._category._playingSounds.indexOf(this._sound) != -1) {
                    this._category._playingSounds.splice(this._category._playingSounds.indexOf(this._sound), 1);
                }
                this._category.changedSignal.remove(function () {
                    return _this.onCategoryChange();
                });
            }
            switch(this._soundManager._support) {
                case Avota.SoundSupport.WEBAUDIO:
                    this._volumeNode.disconnect(0);
                    if(this._sound) {
                        this._sound.disconnect(0);
                    }
                    break;
                case Avota.SoundSupport.AUDIOTAG:
                    break;
            }
            this.startSignal.removeAll();
            this.stopSignal.removeAll();
            this.completeSignal.removeAll();
            _super.prototype.destroy.call(this);
            this.startSignal = null;
            this.stopSignal = null;
            this.completeSignal = null;
            this._category = null;
            this._sound = null;
            this._soundBuffer = null;
            this._soundData = null;
            this._cuePoints = null;
            this._volumeNode = null;
            this._filterNodes = null;
            this._soundManager = null;
            this._onSoundCompleteListener = null;
        };
        return SoundElement;
    })(Avota.Element);
    Avota.SoundElement = SoundElement;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var SoundManager = (function (_super) {
        __extends(SoundManager, _super);
        function SoundManager(timeManager, audioFormat, name) {
            if (typeof audioFormat === "undefined") { audioFormat = "auto"; }
            if (typeof name === "undefined") { name = SoundManager.NAME; }
                _super.call(this, name);
            this._timeManager = timeManager;
            this._volume = 1;
            this._mute = false;
            this._sounds = {
            };
            this._categories = {
            };
            this._cuePointSources = {
            };
            this._playingSounds = [];
            this._count = 0;
            this.muteSignal = new Avota.Signal();
            this.volumeSignal = new Avota.Signal();
            this.playSignal = new Avota.Signal();
            this.stopSignal = new Avota.Signal();
            this.errorSignal = new Avota.Signal();
            switch(audioFormat) {
                case SoundSupport.WEBAUDIO:
                    if(LOGGING) {
                        this._log.warn("Audio Format Override: WebAudio");
                    }
                    if(!!window["AudioContext"]) {
                        this._audioContext = new window["AudioContext"]();
                        this._support = SoundSupport.WEBAUDIO;
                        Avota.EnvUtil.hasWebAudio = true;
                        Avota.EnvUtil.hasAudioTag = false;
                    } else if(!!window["webkitAudioContext"]) {
                        this._audioContext = new window["webkitAudioContext"]();
                        this._support = SoundSupport.WEBAUDIO;
                        Avota.EnvUtil.hasWebAudio = true;
                        Avota.EnvUtil.hasAudioTag = false;
                    } else {
                        this._support = SoundSupport.NONE;
                        Avota.EnvUtil.hasWebAudio = false;
                        Avota.EnvUtil.hasAudioTag = false;
                    }
                    break;
                case SoundSupport.AUDIOTAG:
                    if(LOGGING) {
                        this._log.warn("Audio Format Override: AudioTag");
                    }
                    if(!!window["Audio"]) {
                        this._support = SoundSupport.AUDIOTAG;
                        Avota.EnvUtil.hasWebAudio = false;
                        Avota.EnvUtil.hasAudioTag = true;
                    } else {
                        this._support = SoundSupport.NONE;
                        Avota.EnvUtil.hasWebAudio = false;
                        Avota.EnvUtil.hasAudioTag = false;
                    }
                    break;
                case SoundSupport.NONE:
                    if(LOGGING) {
                        this._log.warn("Audio Format Override: None");
                    }
                    this._support = SoundSupport.NONE;
                    Avota.EnvUtil.hasWebAudio = false;
                    Avota.EnvUtil.hasAudioTag = false;
                    break;
                default:
                    if(!!window["AudioContext"]) {
                        this._audioContext = new window["AudioContext"]();
                        this._support = SoundSupport.WEBAUDIO;
                    } else if(!!window["webkitAudioContext"]) {
                        this._audioContext = new window["webkitAudioContext"]();
                        this._support = SoundSupport.WEBAUDIO;
                    } else if(!!window["Audio"]) {
                        this._support = SoundSupport.AUDIOTAG;
                    } else {
                        this._support = SoundSupport.NONE;
                    }
                    break;
            }
            if(this._support == SoundSupport.WEBAUDIO) {
                this._compressorNode = this._audioContext.createDynamicsCompressor();
                this._compressorNode.threshold.value = -50;
                this._compressorNode.knee.value = 40;
                this._compressorNode.ratio.value = 12;
                this._compressorNode.reduction.value = -20;
                this._compressorNode.attack.value = 0;
                this._compressorNode.release.value = 0.25;
                if(typeof this._audioContext.createGain === 'undefined') {
                    this._volumeNode = this._audioContext.createGainNode();
                } else {
                    this._volumeNode = this._audioContext.createGain();
                }
                this._volumeNode.gain.value = this._volume;
                this._volumeNode.connect(this._compressorNode);
                this._compressorNode.connect(this._audioContext.destination);
            }
        }
        SoundManager.NAME = "SoundManager";
        Object.defineProperty(SoundManager.prototype, "playingSounds", {
            get: function () {
                return this._playingSounds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundManager.prototype, "volume", {
            get: function () {
                return this._volume * 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SoundManager.prototype, "isMuted", {
            get: function () {
                return this._mute;
            },
            enumerable: true,
            configurable: true
        });
        SoundManager.prototype.createEmptyBuffer = function () {
            this._emptyBuffer = this._audioContext.createBufferSource();
            this._emptyBuffer.buffer = this._audioContext.createBuffer(1, 1, 22050);
            this._emptyBuffer.connect(this._audioContext.destination);
            this._emptyBuffer.noteOn(0);
        };
        SoundManager.prototype.mute = function (value) {
            if (typeof value === "undefined") { value = !this._mute; }
            this._mute = value;
            switch(this._support) {
                case SoundSupport.WEBAUDIO:
                    this._volumeNode.gain.value = (this._mute) ? 0 : this._volume;
                    break;
                case SoundSupport.AUDIOTAG:
                    for(var key in this._sounds) {
                        this._sounds[key].mute(this._mute);
                    }
                    break;
            }
            this.muteSignal.dispatch(this._mute);
            if(LOGGING) {
                this._log.info("Mute " + ((this._mute) ? "On" : "Off"));
                this._log.mark("Mute " + ((this._mute) ? "On" : "Off"));
            }
        };
        SoundManager.prototype.setGlobalVolume = function (volume) {
            if(volume > 100) {
                volume = 100;
            }
            if(volume < 0) {
                volume = 0;
            }
            this._volume = volume / 100;
            switch(this._support) {
                case SoundSupport.WEBAUDIO:
                    this._volumeNode.gain = this._volume;
                    break;
                case SoundSupport.AUDIOTAG:
                    for(var key in this._sounds) {
                        this._sounds[key].volume = this._sounds[key].volume * this._volume;
                    }
                    break;
            }
            this.volumeSignal.dispatch(volume);
            if(LOGGING) {
                this._log.info("Volume: " + volume);
            }
        };
        SoundManager.prototype.addSound = function (name, soundData, category, repeat, volume) {
            if (typeof category === "undefined") { category = null; }
            if (typeof repeat === "undefined") { repeat = false; }
            if (typeof volume === "undefined") { volume = 100; }
            if(category && !this._categories[category]) {
                this._categories[category] = this.create(Avota.SoundCategory, category);
            }
            var soundElement = this.create(Avota.SoundElement, name, this, soundData, this._categories[category], repeat, volume);
            if(this._sounds[name]) {
                if(LOGGING) {
                    this._log.warn("Sound: " + name + " already exists - replacing existing sound");
                }
                this.removeSound(name);
            }
            this._sounds[name] = soundElement;
            this._count++;
            if(LOGGING) {
                this._log.debug("Added Sound: " + name);
            }
        };
        SoundManager.prototype.hasSound = function (name) {
            var sound = this._sounds[name];
            if(!sound && this._cuePointSources[name]) {
                sound = this._cuePointSources[name].sound;
            }
            return sound != null;
        };
        SoundManager.prototype.getSound = function (name) {
            var sound = this._sounds[name];
            if(!sound && this._cuePointSources[name]) {
                sound = this._cuePointSources[name].sound;
            }
            return sound;
        };
        SoundManager.prototype.removeSound = function (name, destroy) {
            if (typeof destroy === "undefined") { destroy = true; }
            var sound = this._sounds[name];
            if(sound && destroy) {
                sound.destroy();
            }
            this._sounds[name] = null;
            delete this._sounds[name];
            this._count--;
            if(LOGGING) {
                this._log.debug("Removed Sound: " + name);
            }
        };
        SoundManager.prototype.playSound = function (name, useFade, fadeDuration, onComplete, position, volume) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            if (typeof onComplete === "undefined") { onComplete = null; }
            if (typeof position === "undefined") { position = -1; }
            if (typeof volume === "undefined") { volume = -1; }
            var sound = this._sounds[name];
            if(!sound && this._cuePointSources[name]) {
                sound = this._cuePointSources[name].sound;
            }
            if(!sound) {
                if(LOGGING) {
                    this._log.warn("Unable to play sound: " + name);
                }
                this.errorSignal.dispatch(name);
                return;
            }
            if(sound.category && sound.category._playingSounds.length >= sound.category.channels) {
                if(sound.category.override) {
                    this.stopCategorySounds(sound.category.name);
                } else {
                    if(LOGGING) {
                        this._log.warn("Unable to play: " + sound.name + ", exceeds " + sound.category.name + " channels");
                    }
                    this.errorSignal.dispatch(name);
                    return;
                }
            }
            if(this._cuePointSources[name]) {
                sound.play(name);
            } else {
                sound.play(useFade, fadeDuration, position, volume);
            }
            sound.stopSignal.addOnce(this.onSoundComplete, this);
            if(onComplete != null) {
                sound.completeSignal.removeAll();
                sound.completeSignal.add(onComplete);
            }
            if(sound.category) {
                sound.category._playingSounds.push(sound);
            }
            this._playingSounds.push(sound);
            this.playSignal.dispatch(name);
            return sound;
        };
        SoundManager.prototype.stopSound = function (name, useFade, fadeDuration) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            var sound = this._sounds[name];
            if(!sound && this._cuePointSources[name]) {
                sound = this._cuePointSources[name].sound;
            }
            if(sound) {
                sound.stop(useFade, fadeDuration);
                this.stopSignal.dispatch(sound);
            } else {
                this.errorSignal.dispatch(name);
            }
        };
        SoundManager.prototype.pauseSound = function (name) {
            var sound = this._sounds[name];
            if(!sound && this._cuePointSources[name]) {
                sound = this._cuePointSources[name].sound;
            }
            if(sound) {
                sound.pause();
            }
        };
        SoundManager.prototype.stopCategorySounds = function (name, useFade, fadeDuration) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            var sound;
            for(var key in this._sounds) {
                sound = this._sounds[key];
                if(sound.category.name == name) {
                    sound.stop(useFade, fadeDuration);
                }
            }
        };
        SoundManager.prototype.stopAllSounds = function (useFade, fadeDuration) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            var sound;
            for(var key in this._sounds) {
                sound = this._sounds[key];
                sound.stop(useFade, fadeDuration);
            }
        };
        SoundManager.prototype.pauseAllSounds = function () {
            var sound;
            for(var key in this._sounds) {
                sound = this._sounds[key];
                sound.pause();
            }
        };
        SoundManager.prototype.resumeAllSounds = function () {
            var sound;
            for(var key in this._sounds) {
                sound = this._sounds[key];
                sound.resume();
            }
        };
        SoundManager.prototype.isSoundPlaying = function (name) {
            var sound;
            if(this.hasSound(name)) {
                sound = this._sounds[name];
                if(sound && sound.isPlaying) {
                    return true;
                }
                var cuepoint;
                if(!sound && this._cuePointSources[name]) {
                    sound = this._cuePointSources[name].sound;
                    cuepoint = sound.getCuePoint(name);
                    return Avota.MathUtil.isInRange(sound.position, cuepoint.start, cuepoint.start + cuepoint.duration);
                }
            }
            return false;
        };
        SoundManager.prototype.addSoundCuePoint = function (name, cuePointName, start, duration, loop, volume, category) {
            if (typeof duration === "undefined") { duration = -1; }
            if (typeof loop === "undefined") { loop = false; }
            if (typeof volume === "undefined") { volume = -1; }
            if (typeof category === "undefined") { category = null; }
            if(!this.hasSound(name)) {
                return;
            }
            var sound = this.getSound(name);
            sound.addCuePoint(cuePointName, start, duration, loop, volume, category);
            this._cuePointSources[cuePointName] = {
                sound: sound
            };
        };
        SoundManager.prototype.addSoundFilter = function (name, type, params, position) {
            if(!this.hasSound(name)) {
                return;
            }
            this.getSound(name).addFilter(type, params, position);
        };
        SoundManager.prototype.removeSoundFilter = function (name, type, id) {
            if(!this.hasSound(name)) {
                return;
            }
            this.getSound(name).removeFilter(type, id);
        };
        SoundManager.prototype.getSoundDuration = function (name) {
            var sound = this.getSound(name);
            if(!sound) {
                return 0;
            }
            return (sound.hasCuePoint(name)) ? sound.getCuePoint(name).duration : sound.duration;
        };
        SoundManager.prototype.setSoundVolume = function (name, volume, useFade, fadeDuration) {
            if (typeof useFade === "undefined") { useFade = false; }
            if (typeof fadeDuration === "undefined") { fadeDuration = 1000; }
            if(!this.hasSound(name)) {
                return;
            }
            if(useFade) {
                TweenMax.to(this.getSound(name), fadeDuration / 1000, {
                    volume: volume
                });
            } else {
                this.getSound(name).volume = volume;
            }
        };
        SoundManager.prototype.setSoundRepeat = function (name, value) {
            if(!this.hasSound(name)) {
                return;
            }
            this.getSound(name).repeat = value;
        };
        SoundManager.prototype.setCategoryVolume = function (name, volume) {
            var category = this._categories[name];
            category.volume = volume;
            if(LOGGING) {
                this._log.info("Category " + name + " Volume: " + volume);
            }
        };
        SoundManager.prototype.muteCategory = function (name) {
            var category = this._categories[name];
            category.mute = !category.mute;
            if(LOGGING) {
                this._log.info("Category " + name + " Mute " + ((category.mute) ? "On" : "Off"));
            }
        };
        SoundManager.prototype.onSoundComplete = function (sound) {
            var index = this._playingSounds.indexOf(sound);
            if(index != -1) {
                this._playingSounds.splice(index, 1);
                if(sound.category) {
                    index = sound.category._playingSounds.indexOf(sound);
                    if(index != -1) {
                        sound.category._playingSounds.splice(index, 1);
                    }
                }
            }
        };
        SoundManager.prototype.destroy = function () {
            this.muteSignal.removeAll();
            this.volumeSignal.removeAll();
            this.playSignal.removeAll();
            this.stopSignal.removeAll();
            this.errorSignal.removeAll();
            _super.prototype.destroy.call(this);
            for(var key in this._sounds) {
                this._sounds[key] = null;
                delete this._sounds[key];
            }
            for(var key in this._categories) {
                this._categories[key] = null;
                delete this._categories[key];
            }
            this.muteSignal = null;
            this.volumeSignal = null;
            this.playSignal = null;
            this.stopSignal = null;
            this.errorSignal = null;
            this._sounds = null;
            this._categories = null;
            this._playingSounds = null;
            this._cuePointSources = null;
            this._volumeNode = null;
            this._compressorNode = null;
            this._audioContext = null;
            this._timeManager = null;
        };
        return SoundManager;
    })(Avota.Group);
    Avota.SoundManager = SoundManager;    
    var SoundSupport = (function () {
        function SoundSupport() { }
        SoundSupport.NONE = 0;
        SoundSupport.WEBAUDIO = 1;
        SoundSupport.AUDIOTAG = 2;
        return SoundSupport;
    })();
    Avota.SoundSupport = SoundSupport;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Timer = (function (_super) {
        __extends(Timer, _super);
        function Timer(timeManager, delay, repeatCount, onTimer, onComplete, destroyOnComplete) {
            if (typeof delay === "undefined") { delay = 1000; }
            if (typeof repeatCount === "undefined") { repeatCount = -1; }
            if (typeof destroyOnComplete === "undefined") { destroyOnComplete = false; }
                _super.call(this, Timer.NAME);
            this._ms = 0;
            this._count = 0;
            this._timeManager = timeManager;
            this.delay = delay;
            this.repeatCount = repeatCount;
            this.timerSignal = new Avota.Signal();
            this.completeSignal = new Avota.Signal();
            if(onTimer != null) {
                this.timerSignal.add(onTimer);
            }
            if(onComplete != null) {
                this.completeSignal.add(onComplete);
            }
            this._running = false;
        }
        Timer.schedule = function schedule(timeManager, delay, onComplete, destroyOnComplete) {
            if (typeof destroyOnComplete === "undefined") { destroyOnComplete = true; }
            var timer = new Timer(timeManager, delay, 0, null, onComplete, destroyOnComplete);
            timer.start();
            return timer;
        };
        Timer.NAME = "Timer";
        Object.defineProperty(Timer.prototype, "running", {
            get: function () {
                return this._running;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Timer.prototype, "currentCount", {
            get: function () {
                return this._count;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Timer.prototype, "timeRemaining", {
            get: function () {
                return this.delay - this._ms;
            },
            enumerable: true,
            configurable: true
        });
        Timer.prototype.start = function () {
            if(!this._running) {
                this._timeManager.addTickedObject(this, 0);
                this._running = true;
            }
        };
        Timer.prototype.stop = function () {
            if(this._running) {
                this._timeManager.removeTickedObject(this);
                this._running = false;
            }
        };
        Timer.prototype.reset = function () {
            this.stop();
            this._ms = 0;
            this._count = 0;
        };
        Timer.prototype.onTick = function (delta) {
            if(!this._running) {
                return;
            }
            this._ms += delta * 1000;
            if(this._ms >= this.delay) {
                if(this._count++ < this.repeatCount || this.repeatCount == -1) {
                    this._ms = this.delay - this._ms;
                    if(this.timerSignal) {
                        this.timerSignal.dispatch();
                    }
                } else {
                    this.reset();
                    if(this.timerSignal && !this.completeSignal) {
                        this.timerSignal.dispatch();
                    }
                    if(this.completeSignal) {
                        this.completeSignal.dispatch();
                    }
                    if(this._destroyOnComplete) {
                        this.destroy();
                    }
                }
            }
        };
        Timer.prototype.destroy = function () {
            if(this._running) {
                this.reset();
            }
            if(this.timerSignal) {
                this.timerSignal.removeAll();
            }
            if(this.completeSignal) {
                this.completeSignal.removeAll();
            }
            this.timerSignal = null;
            this.completeSignal = null;
            this._timeManager = null;
            _super.prototype.destroy.call(this);
        };
        return Timer;
    })(Avota.Element);
    Avota.Timer = Timer;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ArrayUtil = (function () {
        function ArrayUtil() { }
        ArrayUtil.randomize = function randomize(array) {
            var randomized = [];
            var temp = array.concat();
            var randomInt;
            for(var i = 0; i < temp.length; i++) {
                randomInt = Avota.Random.integer(0, temp.length - 1);
                randomized.push(temp[randomInt]);
                temp.splice(randomInt, 1);
                i--;
            }
            return randomized;
        };
        ArrayUtil.compare = function compare(array1, array2) {
            if(array1.length != array2.length) {
                return false;
            }
            for(var i = 0, n = array1.length; i < n; i++) {
                if(array1[i] instanceof Array && array2[i] instanceof Array) {
                    if(!ArrayUtil.compare(array1[i], array2[i])) {
                        return false;
                    }
                } else if(array1[i] != array2[i]) {
                    return false;
                }
            }
            return true;
        };
        ArrayUtil.createNumericalArray = function createNumericalArray(startIndex, endIndex) {
            var i = 0;
            var n = 0;
            var result = [];
            if(startIndex <= endIndex) {
                for(i = startIndex; i <= endIndex; i++) {
                    result[n++] = i;
                }
            } else {
                for(i = startIndex; i >= endIndex; i--) {
                    result[n++] = i;
                }
            }
            return result;
        };
        ArrayUtil.removeDuplicates = function removeDuplicates(value) {
            for(var i = value.length; i > 0; i--) {
                if(value.indexOf(value[i - 1]) != i - 1) {
                    value.splice(i - 1, 1);
                }
            }
        };
        ArrayUtil.toArray = function toArray(iterable) {
            var result = [];
            for(var item in iterable) {
                result.push(item);
            }
            return result;
        };
        return ArrayUtil;
    })();
    Avota.ArrayUtil = ArrayUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var ColorUtil = (function () {
        function ColorUtil() { }
        ColorUtil.RGBToHex = function RGBToHex(r, g, b) {
            return (r << 16) | (g << 8) | b;
        };
        ColorUtil.ARGBToHex = function ARGBToHex(a, r, g, b) {
            return (a << 24) | (r << 16) | (g << 8) | b;
        };
        ColorUtil.RGBAToHex = function RGBAToHex(r, g, b, a) {
            return (a << 24) | (r << 16) | (g << 8) | b;
        };
        ColorUtil.hexToRGB = function hexToRGB(hex) {
            return [
                (hex >>> 16) & 255, 
                (hex >>> 8) & 255, 
                hex & 255
            ];
        };
        ColorUtil.hexToARGB = function hexToARGB(hex) {
            return [
                (hex >>> 24) & 255, 
                (hex >>> 16) & 255, 
                (hex >>> 8) & 255, 
                hex & 255
            ];
        };
        ColorUtil.hexToRGBA = function hexToRGBA(hex) {
            return [
                (hex >>> 16) & 255, 
                (hex >>> 8) & 255, 
                hex & 255, 
                (hex >>> 24) & 255
            ];
        };
        ColorUtil.CSSToHex = function CSSToHex(value) {
            value = value.slice(1);
            return parseInt(value, 16);
        };
        ColorUtil.interpolateRGB = function interpolateRGB(color1, color2, ratio) {
            var remaining = 1 - ratio;
            var color1RGB = ColorUtil.hexToRGB(color1);
            var color2RGB = ColorUtil.hexToRGB(color2);
            return ColorUtil.RGBToHex(color1RGB[0] * ratio, color1RGB[1] * ratio, color1RGB[2] * ratio) + ColorUtil.RGBToHex(color2RGB[0] * remaining, color2RGB[1] * remaining, color2RGB[2] * remaining);
        };
        ColorUtil.interpolateARGB = function interpolateARGB(color1, color2, ratio) {
            var remaining = 1 - ratio;
            var color1ARGB = ColorUtil.hexToARGB(color1);
            var color2ARGB = ColorUtil.hexToARGB(color2);
            return ColorUtil.ARGBToHex(color1ARGB[0] * ratio, color1ARGB[1] * ratio, color1ARGB[2] * ratio, color1ARGB[3] * ratio) + ColorUtil.ARGBToHex(color2ARGB[0] * remaining, color2ARGB[1] * remaining, color2ARGB[2] * remaining, color2ARGB[3] * remaining);
        };
        ColorUtil.interpolateRGBA = function interpolateRGBA(color1, color2, ratio) {
            var remaining = 1 - ratio;
            var color1RGBA = ColorUtil.hexToRGBA(color1);
            var color2RGBA = ColorUtil.hexToRGBA(color2);
            return ColorUtil.RGBAToHex(color1RGBA[0] * ratio, color1RGBA[1] * ratio, color1RGBA[2] * ratio, color1RGBA[3] * ratio) + ColorUtil.RGBAToHex(color2RGBA[0] * remaining, color2RGBA[1] * remaining, color2RGBA[2] * remaining, color2RGBA[3] * remaining);
        };
        ColorUtil.getAlpha = function getAlpha(color) {
            return (color >>> 24) & 255;
        };
        ColorUtil.getRed = function getRed(color) {
            return (color >>> 16) & 255;
        };
        ColorUtil.getGreen = function getGreen(color) {
            return (color >>> 8) & 255;
        };
        ColorUtil.getBlue = function getBlue(color) {
            return color & 255;
        };
        ColorUtil.getAverageColor = function getAverageColor(source) {
            var r = 0;
            var g = 0;
            var b = 0;
            var count = 0;
            var context = source.getContext("2d");
            var pixels;
            for(var x = 0; x < source.width; x++) {
                for(var y = 0; y < source.height; y++) {
                    pixels = context.getImageData(x, y, 1, 1).data;
                    r += pixels[0] >>> 16 & 255;
                    g += pixels[1] >>> 8 & 255;
                    b += pixels[2] & 255;
                    count++;
                }
            }
            r /= count;
            g /= count;
            b /= count;
            return r << 16 | g << 8 | b;
        };
        ColorUtil.darken = function darken(color, amount) {
            var rgb = ColorUtil.hexToRGB(color);
            return ColorUtil.RGBToHex(rgb[0] * amount, rgb[1] * amount, rgb[2] * amount);
        };
        return ColorUtil;
    })();
    Avota.ColorUtil = ColorUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CanvasUtil = (function () {
        function CanvasUtil() { }
        CanvasUtil.convertFromImage = function convertFromImage(image, scale, buffer) {
            if (typeof scale === "undefined") { scale = 1; }
            var canvas = (buffer != null) ? buffer : document.createElement('canvas');
            canvas.width = image.width * scale;
            canvas.height = image.height * scale;
            canvas.getContext('2d').drawImage(image, 0, 0, image.width * scale, image.height * scale);
            return canvas;
        };
        CanvasUtil.tint = function tint(image, value, buffer) {
            var colors = Avota.ColorUtil.hexToARGB(value);
            var tintedCanvas = (buffer != null) ? buffer : document.createElement('canvas');
            var tintedContext = tintedCanvas.getContext('2d');
            tintedCanvas.width = image.width;
            tintedCanvas.height = image.height;
            tintedContext.clearRect(0, 0, tintedCanvas.width, tintedCanvas.height);
            tintedContext.fillStyle = "rgba(" + colors[1] + ", " + colors[2] + ", " + colors[3] + ", " + colors[0] / 255 + ")";
            tintedContext.fillRect(0, 0, image.width, image.height);
            tintedContext.globalCompositeOperation = "multiply";
            tintedContext.drawImage(image, 0, 0, image.width, image.height);
            tintedContext.globalCompositeOperation = "destination-atop";
            tintedContext.drawImage(image, 0, 0, image.width, image.height);
            tintedContext.globalCompositeOperation = "source-over";
            return tintedCanvas;
        };
        return CanvasUtil;
    })();
    Avota.CanvasUtil = CanvasUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Color = (function () {
        function Color() { }
        Color.ALICE_BLUE = 0xF0F8FF;
        Color.ANTIQUE_WHITE = 0xFAEBD7;
        Color.AQUA = 0x00FFFF;
        Color.AQUAMARINE = 0x7FFFD4;
        Color.AZURE = 0xF0FFFF;
        Color.BEIGE = 0xF5F5DC;
        Color.BISQUE = 0xFFE4C4;
        Color.BLACK = 0x000000;
        Color.BLANCHED_ALMOND = 0xFFEBCD;
        Color.BLUE = 0x0000FF;
        Color.BLUE_VIOLET = 0x8A2BE2;
        Color.BROWN = 0xA52A2A;
        Color.BURLY_WOOD = 0xDEB887;
        Color.CADET_BLUE = 0x5F9EA0;
        Color.CHARTREUSE = 0x7FFF00;
        Color.CHOCOLATE = 0xD2691E;
        Color.CORAL = 0xFF7F50;
        Color.CORNFLOWER_BLUE = 0x6495ED;
        Color.CORNSILK = 0xFFF8DC;
        Color.CRIMSON = 0xDC143C;
        Color.CYAN = 0x00FFFF;
        Color.DARK_BLUE = 0x00008B;
        Color.DARK_CYAN = 0x008B8B;
        Color.DARK_GOLDEN_ROD = 0xB8860B;
        Color.DARK_GRAY = 0xA9A9A9;
        Color.DARK_GREY = 0xA9A9A9;
        Color.DARK_GREEN = 0x006400;
        Color.DARK_KHAKI = 0xBDB76B;
        Color.DARK_MAGENTA = 0x8B008B;
        Color.DARK_OLIVE_GREEN = 0x556B2F;
        Color.DARK_ORANGE = 0xFF8C00;
        Color.DARK_ORCHID = 0x9932CC;
        Color.DARK_RED = 0x8B0000;
        Color.DARK_SALMON = 0xE9967A;
        Color.DARK_SEA_GREEN = 0x8FBC8F;
        Color.DARK_SLATE_BLUE = 0x483D8B;
        Color.DARK_SLATE_GRAY = 0x2F4F4F;
        Color.DARK_SLATE_GREY = 0x2F4F4F;
        Color.DARK_TURQUOISE = 0x00CED1;
        Color.DARK_VIOLET = 0x9400D3;
        Color.DEEP_PINK = 0xFF1493;
        Color.DEEP_SKY_BLUE = 0x00BFFF;
        Color.DIM_GRAY = 0x696969;
        Color.DIM_GREY = 0x696969;
        Color.DODGER_BLUE = 0x1E90FF;
        Color.FIRE_BRICK = 0xB22222;
        Color.FLORAL_WHITE = 0xFFFAF0;
        Color.FOREST_GREEN = 0x228B22;
        Color.FUCHSIA = 0xFF00FF;
        Color.GAINSBORO = 0xDCDCDC;
        Color.GHOST_WHITE = 0xF8F8FF;
        Color.GOLD = 0xFFD700;
        Color.GOLDEN_ROD = 0xDAA520;
        Color.GRAY = 0x808080;
        Color.GREY = 0x808080;
        Color.GREEN = 0x008000;
        Color.GREEN_YELLOW = 0xADFF2F;
        Color.HONEY_DEW = 0xF0FFF0;
        Color.HOT_PINK = 0xFF69B4;
        Color.INDIAN_RED = 0xCD5C5C;
        Color.INDIGO = 0x4B0082;
        Color.IVORY = 0xFFFFF0;
        Color.KHAKI = 0xF0E68C;
        Color.LAVENDER = 0xE6E6FA;
        Color.LAVENDER_BLUSH = 0xFFF0F5;
        Color.LAWN_GREEN = 0x7CFC00;
        Color.LEMON_CHIFFON = 0xFFFACD;
        Color.LIGHT_BLUE = 0xADD8E6;
        Color.LIGHT_CORAL = 0xF08080;
        Color.LIGHT_CYAN = 0xE0FFFF;
        Color.LIGHT_GOLDEN_ROD_YELLOW = 0xFAFAD2;
        Color.LIGHT_GRAY = 0xD3D3D3;
        Color.LIGHT_GREY = 0xD3D3D3;
        Color.LIGHT_GREEN = 0x90EE90;
        Color.LIGHT_PINK = 0xFFB6C1;
        Color.LIGHT_SALMON = 0xFFA07A;
        Color.LIGHT_SEA_GREEN = 0x20B2AA;
        Color.LIGHT_SKY_BLUE = 0x87CEFA;
        Color.LIGHT_SLATE_GRAY = 0x778899;
        Color.LIGHT_SLATE_GREY = 0x778899;
        Color.LIGHT_STEEL_BLUE = 0xB0C4DE;
        Color.LIGHT_YELLOW = 0xFFFFE0;
        Color.LIME = 0x00FF00;
        Color.LIME_GREEN = 0x32CD32;
        Color.LINEN = 0xFAF0E6;
        Color.MAGENTA = 0xFF00FF;
        Color.MAROON = 0x800000;
        Color.MEDIUM_AQUA_MARINE = 0x66CDAA;
        Color.MEDIUM_BLUE = 0x0000CD;
        Color.MEDIUM_ORCHID = 0xBA55D3;
        Color.MEDIUM_PURPLE = 0x9370D8;
        Color.MEDIUM_SEA_GREEN = 0x3CB371;
        Color.MEDIUM_SLATE_BLUE = 0x7B68EE;
        Color.MEDIUM_SPRING_GREEN = 0x00FA9A;
        Color.MEDIUM_TURQUOISE = 0x48D1CC;
        Color.MEDIUM_VIOLET_RED = 0xC71585;
        Color.MIDNIGHT_BLUE = 0x191970;
        Color.MINT_CREAM = 0xF5FFFA;
        Color.MISTY_ROSE = 0xFFE4E1;
        Color.MOCCASIN = 0xFFE4B5;
        Color.NAVAJO_WHITE = 0xFFDEAD;
        Color.NAVY = 0x000080;
        Color.OLD_LACE = 0xFDF5E6;
        Color.OLIVE = 0x808000;
        Color.OLIVE_DRAB = 0x6B8E23;
        Color.ORANGE = 0xFFA500;
        Color.ORANGE_RED = 0xFF4500;
        Color.ORCHID = 0xDA70D6;
        Color.PALE_GOLDEN_ROD = 0xEEE8AA;
        Color.PALE_GREEN = 0x98FB98;
        Color.PALE_TURQUOISE = 0xAFEEEE;
        Color.PALE_VIOLET_RED = 0xD87093;
        Color.PAPAYA_WHIP = 0xFFEFD5;
        Color.PEACH_PUFF = 0xFFDAB9;
        Color.PERU = 0xCD853F;
        Color.PINK = 0xFFC0CB;
        Color.PLUM = 0xDDA0DD;
        Color.POWDER_BLUE = 0xB0E0E6;
        Color.PURPLE = 0x800080;
        Color.RED = 0xFF0000;
        Color.ROSY_BROWN = 0xBC8F8F;
        Color.ROYAL_BLUE = 0x4169E1;
        Color.SADDLE_BROWN = 0x8B4513;
        Color.SALMON = 0xFA8072;
        Color.SANDY_BROWN = 0xF4A460;
        Color.SEA_GREEN = 0x2E8B57;
        Color.SEA_SHELL = 0xFFF5EE;
        Color.SIENNA = 0xA0522D;
        Color.SILVER = 0xC0C0C0;
        Color.SKY_BLUE = 0x87CEEB;
        Color.SLATE_BLUE = 0x6A5ACD;
        Color.SLATE_GRAY = 0x708090;
        Color.SLATE_GREY = 0x708090;
        Color.SNOW = 0xFFFAFA;
        Color.SPRING_GREEN = 0x00FF7F;
        Color.STEEL_BLUE = 0x4682B4;
        Color.TAN = 0xD2B48C;
        Color.TEAL = 0x008080;
        Color.THISTLE = 0xD8BFD8;
        Color.TOMATO = 0xFF6347;
        Color.TURQUOISE = 0x40E0D0;
        Color.VIOLET = 0xEE82EE;
        Color.WHEAT = 0xF5DEB3;
        Color.WHITE = 0xFFFFFF;
        Color.WHITE_SMOKE = 0xF5F5F5;
        Color.YELLOW = 0xFFFF00;
        Color.YELLOW_GREEN = 0x9ACD32;
        return Color;
    })();
    Avota.Color = Color;    
    var CSSColor = (function () {
        function CSSColor() { }
        CSSColor.ALICE_BLUE = "#F0F8FF";
        CSSColor.ANTIQUE_WHITE = "#FAEBD7";
        CSSColor.AQUA = "#00FFFF";
        CSSColor.AQUAMARINE = "#7FFFD4";
        CSSColor.AZURE = "#F0FFFF";
        CSSColor.BEIGE = "#F5F5DC";
        CSSColor.BISQUE = "#FFE4C4";
        CSSColor.BLACK = "#000000";
        CSSColor.BLANCHED_ALMOND = "#FFEBCD";
        CSSColor.BLUE = "#0000FF";
        CSSColor.BLUE_VIOLET = "#8A2BE2";
        CSSColor.BROWN = "#A52A2A";
        CSSColor.BURLY_WOOD = "#DEB887";
        CSSColor.CADET_BLUE = "#5F9EA0";
        CSSColor.CHARTREUSE = "#7FFF00";
        CSSColor.CHOCOLATE = "#D2691E";
        CSSColor.CORAL = "#FF7F50";
        CSSColor.CORNFLOWER_BLUE = "#6495ED";
        CSSColor.CORNSILK = "#FFF8DC";
        CSSColor.CRIMSON = "#DC143C";
        CSSColor.CYAN = "#00FFFF";
        CSSColor.DARK_BLUE = "#00008B";
        CSSColor.DARK_CYAN = "#008B8B";
        CSSColor.DARK_GOLDEN_ROD = "#B8860B";
        CSSColor.DARK_GRAY = "#A9A9A9";
        CSSColor.DARK_GREY = "#A9A9A9";
        CSSColor.DARK_GREEN = "#006400";
        CSSColor.DARK_KHAKI = "#BDB76B";
        CSSColor.DARK_MAGENTA = "#8B008B";
        CSSColor.DARK_OLIVE_GREEN = "#556B2F";
        CSSColor.DARK_ORANGE = "#FF8C00";
        CSSColor.DARK_ORCHID = "#9932CC";
        CSSColor.DARK_RED = "#8B0000";
        CSSColor.DARK_SALMON = "#E9967A";
        CSSColor.DARK_SEA_GREEN = "#8FBC8F";
        CSSColor.DARK_SLATE_BLUE = "#483D8B";
        CSSColor.DARK_SLATE_GRAY = "#2F4F4F";
        CSSColor.DARK_SLATE_GREY = "#2F4F4F";
        CSSColor.DARK_TURQUOISE = "#00CED1";
        CSSColor.DARK_VIOLET = "#9400D3";
        CSSColor.DEEP_PINK = "#FF1493";
        CSSColor.DEEP_SKY_BLUE = "#00BFFF";
        CSSColor.DIM_GRAY = "#696969";
        CSSColor.DIM_GREY = "#696969";
        CSSColor.DODGER_BLUE = "#1E90FF";
        CSSColor.FIRE_BRICK = "#B22222";
        CSSColor.FLORAL_WHITE = "#FFFAF0";
        CSSColor.FOREST_GREEN = "#228B22";
        CSSColor.FUCHSIA = "#FF00FF";
        CSSColor.GAINSBORO = "#DCDCDC";
        CSSColor.GHOST_WHITE = "#F8F8FF";
        CSSColor.GOLD = "#FFD700";
        CSSColor.GOLDEN_ROD = "#DAA520";
        CSSColor.GRAY = "#808080";
        CSSColor.GREY = "#808080";
        CSSColor.GREEN = "#008000";
        CSSColor.GREEN_YELLOW = "#ADFF2F";
        CSSColor.HONEY_DEW = "#F0FFF0";
        CSSColor.HOT_PINK = "#FF69B4";
        CSSColor.INDIAN_RED = "#CD5C5C";
        CSSColor.INDIGO = "#4B0082";
        CSSColor.IVORY = "#FFFFF0";
        CSSColor.KHAKI = "#F0E68C";
        CSSColor.LAVENDER = "#E6E6FA";
        CSSColor.LAVENDER_BLUSH = "#FFF0F5";
        CSSColor.LAWN_GREEN = "#7CFC00";
        CSSColor.LEMON_CHIFFON = "#FFFACD";
        CSSColor.LIGHT_BLUE = "#ADD8E6";
        CSSColor.LIGHT_CORAL = "#F08080";
        CSSColor.LIGHT_CYAN = "#E0FFFF";
        CSSColor.LIGHT_GOLDEN_ROD_YELLOW = "#FAFAD2";
        CSSColor.LIGHT_GRAY = "#D3D3D3";
        CSSColor.LIGHT_GREY = "#D3D3D3";
        CSSColor.LIGHT_GREEN = "#90EE90";
        CSSColor.LIGHT_PINK = "#FFB6C1";
        CSSColor.LIGHT_SALMON = "#FFA07A";
        CSSColor.LIGHT_SEA_GREEN = "#20B2AA";
        CSSColor.LIGHT_SKY_BLUE = "#87CEFA";
        CSSColor.LIGHT_SLATE_GRAY = "#778899";
        CSSColor.LIGHT_SLATE_GREY = "#778899";
        CSSColor.LIGHT_STEEL_BLUE = "#B0C4DE";
        CSSColor.LIGHT_YELLOW = "#FFFFE0";
        CSSColor.LIME = "#00FF00";
        CSSColor.LIME_GREEN = "#32CD32";
        CSSColor.LINEN = "#FAF0E6";
        CSSColor.MAGENTA = "#FF00FF";
        CSSColor.MAROON = "#800000";
        CSSColor.MEDIUM_AQUA_MARINE = "#66CDAA";
        CSSColor.MEDIUM_BLUE = "#0000CD";
        CSSColor.MEDIUM_ORCHID = "#BA55D3";
        CSSColor.MEDIUM_PURPLE = "#9370D8";
        CSSColor.MEDIUM_SEA_GREEN = "#3CB371";
        CSSColor.MEDIUM_SLATE_BLUE = "#7B68EE";
        CSSColor.MEDIUM_SPRING_GREEN = "#00FA9A";
        CSSColor.MEDIUM_TURQUOISE = "#48D1CC";
        CSSColor.MEDIUM_VIOLET_RED = "#C71585";
        CSSColor.MIDNIGHT_BLUE = "#191970";
        CSSColor.MINT_CREAM = "#F5FFFA";
        CSSColor.MISTY_ROSE = "#FFE4E1";
        CSSColor.MOCCASIN = "#FFE4B5";
        CSSColor.NAVAJO_WHITE = "#FFDEAD";
        CSSColor.NAVY = "#000080";
        CSSColor.OLD_LACE = "#FDF5E6";
        CSSColor.OLIVE = "#808000";
        CSSColor.OLIVE_DRAB = "#6B8E23";
        CSSColor.ORANGE = "#FFA500";
        CSSColor.ORANGE_RED = "#FF4500";
        CSSColor.ORCHID = "#DA70D6";
        CSSColor.PALE_GOLDEN_ROD = "#EEE8AA";
        CSSColor.PALE_GREEN = "#98FB98";
        CSSColor.PALE_TURQUOISE = "#AFEEEE";
        CSSColor.PALE_VIOLET_RED = "#D87093";
        CSSColor.PAPAYA_WHIP = "#FFEFD5";
        CSSColor.PEACH_PUFF = "#FFDAB9";
        CSSColor.PERU = "#CD853F";
        CSSColor.PINK = "#FFC0CB";
        CSSColor.PLUM = "#DDA0DD";
        CSSColor.POWDER_BLUE = "#B0E0E6";
        CSSColor.PURPLE = "#800080";
        CSSColor.RED = "#FF0000";
        CSSColor.ROSY_BROWN = "#BC8F8F";
        CSSColor.ROYAL_BLUE = "#4169E1";
        CSSColor.SADDLE_BROWN = "#8B4513";
        CSSColor.SALMON = "#FA8072";
        CSSColor.SANDY_BROWN = "#F4A460";
        CSSColor.SEA_GREEN = "#2E8B57";
        CSSColor.SEA_SHELL = "#FFF5EE";
        CSSColor.SIENNA = "#A0522D";
        CSSColor.SILVER = "#C0C0C0";
        CSSColor.SKY_BLUE = "#87CEEB";
        CSSColor.SLATE_BLUE = "#6A5ACD";
        CSSColor.SLATE_GRAY = "#708090";
        CSSColor.SLATE_GREY = "#708090";
        CSSColor.SNOW = "#FFFAFA";
        CSSColor.SPRING_GREEN = "#00FF7F";
        CSSColor.STEEL_BLUE = "#4682B4";
        CSSColor.TAN = "#D2B48C";
        CSSColor.TEAL = "#008080";
        CSSColor.THISTLE = "#D8BFD8";
        CSSColor.TOMATO = "#FF6347";
        CSSColor.TURQUOISE = "#40E0D0";
        CSSColor.VIOLET = "#EE82EE";
        CSSColor.WHEAT = "#F5DEB3";
        CSSColor.WHITE = "#FFFFFF";
        CSSColor.WHITE_SMOKE = "#F5F5F5";
        CSSColor.YELLOW = "#FFFF00";
        CSSColor.YELLOW_GREEN = "#9ACD32";
        return CSSColor;
    })();
    Avota.CSSColor = CSSColor;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var CookieUtil = (function () {
        function CookieUtil() { }
        CookieUtil.write = function write(name, value, expiresIn) {
            if (typeof expiresIn === "undefined") { expiresIn = -1; }
            var expires = "";
            if(expiresIn != -1) {
                var date = new Date();
                date.setTime(date.getTime() + (expiresIn * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        };
        CookieUtil.read = function read(name) {
            name += "=";
            var char;
            var data = document.cookie.split(';');
            for(var i = 0; i < data.length; i++) {
                char = data[i];
                while(char.charAt(0) == " ") {
                    char = char.substring(1, char.length);
                }
                if(char.indexOf(name) == 0) {
                    return char.substring(name.length, char.length);
                }
            }
            return null;
        };
        CookieUtil.remove = function remove(name) {
            CookieUtil.write(name, "", -1);
        };
        return CookieUtil;
    })();
    Avota.CookieUtil = CookieUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var Dictionary = (function () {
        function Dictionary() {
            this._hash = [];
        }
        Dictionary.prototype.put = function (key, value) {
            this._hash.push({
                key: key,
                value: value
            });
        };
        Dictionary.prototype.get = function (key) {
            for(var i = 0; i < this._hash.length; i++) {
                if(this._hash[i].key === key) {
                    return this._hash[i].value;
                }
            }
        };
        Dictionary.prototype.remove = function (key) {
            for(var i = this._hash.length - 1; i >= 0; i--) {
                if(this._hash[i].key === key) {
                    delete this._hash[i].key;
                    delete this._hash[i].value;
                    this._hash.splice(i, 1);
                }
            }
        };
        Dictionary.prototype.clear = function () {
            var data;
            for(var i = 0; i < this._hash.length; i++) {
                delete this._hash[i].key;
                delete this._hash[i].value;
                this._hash[i] = null;
            }
            this._hash = [];
        };
        return Dictionary;
    })();
    Avota.Dictionary = Dictionary;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var DOMUtil = (function () {
        function DOMUtil() { }
        DOMUtil.getOffset = function getOffset(element) {
            var box = element.getBoundingClientRect();
            var clientTop = element.clientTop || document.body.clientTop || 0;
            var clientLeft = element.clientLeft || document.body.clientLeft || 0;
            var scrollTop = window.pageYOffset || element.scrollTop;
            var scrollLeft = window.pageXOffset || element.scrollLeft;
            return new Avota.Point(box.left + scrollLeft - clientLeft, box.top + scrollTop - clientTop);
        };
        DOMUtil.getStyle = function getStyle(selector) {
            var cssRules;
            for(var i = 0; i < document.styleSheets.length; i++) {
                cssRules = (document.styleSheets[i]).cssRules || (document.styleSheets[i]).rules;
                for(var n = 0; n < cssRules.length; n++) {
                    if(cssRules[n].selectorText === selector) {
                        return cssRules[n].style;
                    }
                }
            }
            return null;
        };
        return DOMUtil;
    })();
    Avota.DOMUtil = DOMUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var GeomUtil = (function () {
        function GeomUtil() { }
        GeomUtil.DEGTORAD = Math.PI / 180;
        GeomUtil.RADTODEG = 180 / Math.PI;
        GeomUtil.degreesToRadians = function degreesToRadians(value) {
            return value * GeomUtil.DEGTORAD;
        };
        GeomUtil.radiansToDegrees = function radiansToDegrees(value) {
            return value * GeomUtil.RADTODEG;
        };
        GeomUtil.getDistance = function getDistance(x1, y1, x2, y2) {
            var distX = x2 - x1;
            var distY = y2 - y1;
            return Math.sqrt(distX * distX + distY * distY);
        };
        GeomUtil.getDistanceSquared = function getDistanceSquared(x1, y1, x2, y2) {
            var distX = x2 - x1;
            var distY = y2 - y1;
            return (distX * distX + distY * distY);
        };
        GeomUtil.getAngle = function getAngle(x1, y1, x2, y2) {
            var angle = Math.atan2(y2 - y1, x2 - x1) * GeomUtil.RADTODEG;
            return (angle < 0) ? angle + 360 : angle;
        };
        GeomUtil.rotatePoint = function rotatePoint(point, anchor, rotation) {
            var result = new Avota.Point();
            var r = rotation * GeomUtil.DEGTORAD;
            var dx = point.x - anchor.x;
            var dy = point.y - anchor.y;
            var cos = Math.cos(r);
            var sin = Math.sin(r);
            result.x = anchor.x + dx * cos - dy * sin | 0;
            result.y = anchor.y + dy * cos + dx * sin | 0;
            return result;
        };
        GeomUtil.plotLine = function plotLine(start, end) {
            var i;
            var yLonger = false;
            var shortLen = end.y - start.y;
            var longLen = end.x - start.x;
            var points = [];
            if((shortLen ^ (shortLen >> 31)) - (shortLen >> 31) > (longLen ^ (longLen >> 31)) - (longLen >> 31)) {
                shortLen ^= longLen;
                longLen ^= shortLen;
                shortLen ^= longLen;
                yLonger = true;
            }
            var inc = longLen < 0 ? -1 : 1;
            var multDiff = longLen == 0 ? shortLen : shortLen / longLen;
            if(yLonger) {
                for(i = 0; i != longLen; i += inc) {
                    points.push(new Avota.Point(start.x + i * multDiff, start.y + i));
                }
            } else {
                for(i = 0; i != longLen; i += inc) {
                    points.push(new Avota.Point(start.x + i, start.y + i * multDiff));
                }
            }
            return points;
        };
        return GeomUtil;
    })();
    Avota.GeomUtil = GeomUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var MathUtil = (function () {
        function MathUtil() { }
        MathUtil.sign = function sign(value) {
            return value > 0 ? 1 : (value < 0 ? -1 : 0);
        };
        MathUtil.clamp = function clamp(value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            if(value < min) {
                return min;
            }
            if(value > max) {
                return max;
            }
            return value;
        };
        MathUtil.roundToNearest = function roundToNearest(roundTo, value) {
            return Math.round(value / roundTo) * roundTo;
        };
        MathUtil.isInRange = function isInRange(value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            return (value >= min && value <= max);
        };
        MathUtil.normalize = function normalize(value, min, max) {
            if (typeof min === "undefined") { min = 0; }
            if (typeof max === "undefined") { max = 1; }
            return (value - min) / (max - min);
        };
        MathUtil.interpolate = function interpolate(value, min, max) {
            return min + (max - min) * value;
        };
        MathUtil.map = function map(value, min1, max1, min2, max2) {
            return MathUtil.interpolate(MathUtil.normalize(value, min1, max1), min2, max2);
        };
        MathUtil.getNextPowerOfTwo = function getNextPowerOfTwo(value) {
            var result = 1;
            while(result < value) {
                result *= 2;
            }
            return result;
        };
        return MathUtil;
    })();
    Avota.MathUtil = MathUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var NumberUtil = (function () {
        function NumberUtil() { }
        NumberUtil.addCommas = function addCommas(value) {
            var result = "";
            var myString = "" + value;
            var length = myString.length;
            for(var i = 0; i < length; i++) {
                if((length - i) % 3 == 0 && i != 0) {
                    result += ",";
                }
                result += myString.charAt(i);
            }
            return result;
        };
        NumberUtil.addLeadingZeros = function addLeadingZeros(value, length, insertCommas) {
            if (typeof insertCommas === "undefined") { insertCommas = false; }
            var result = value.toString();
            while(result.length < length) {
                result = "0" + result;
            }
            return (insertCommas) ? NumberUtil.addCommas(result) : result;
        };
        NumberUtil.getOrdinalSuffix = function getOrdinalSuffix(value) {
            if(value >= 10 && value <= 20) {
                return "th";
            }
            switch(value % 10) {
                case 0:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    return "th";
                case 3:
                    return "rd";
                case 2:
                    return "nd";
                case 1:
                    return "st";
                default:
                    return "";
            }
        };
        return NumberUtil;
    })();
    Avota.NumberUtil = NumberUtil;    
})(Avota || (Avota = {}));
var Avota;
(function (Avota) {
    var StorageUtil = (function () {
        function StorageUtil() { }
        StorageUtil.write = function write(name, value, sessionOnly, id) {
            if (typeof sessionOnly === "undefined") { sessionOnly = false; }
            if (typeof id === "undefined") { id = Avota.Context.getAllContexts()[0].name; }
            if(!StorageUtil.readRaw(id)) {
                StorageUtil.writeRaw(id, JSON.stringify({
                }), sessionOnly);
            }
            var data = JSON.parse(StorageUtil.readRaw(id));
            data[name] = value;
            StorageUtil.writeRaw(id, JSON.stringify(data), sessionOnly);
        };
        StorageUtil.read = function read(name, id) {
            if (typeof id === "undefined") { id = Avota.Context.getAllContexts()[0].name; }
            if(!StorageUtil.readRaw(id)) {
                return null;
            }
            return JSON.parse(StorageUtil.readRaw(id))[name];
        };
        StorageUtil.remove = function remove(name, sessionOnly, id) {
            if (typeof sessionOnly === "undefined") { sessionOnly = false; }
            if (typeof id === "undefined") { id = Avota.Context.getAllContexts()[0].name; }
            if(!StorageUtil.readRaw(id)) {
                return;
            }
            var data = JSON.parse(StorageUtil.readRaw(id));
            delete data[name];
            StorageUtil.writeRaw(id, JSON.stringify(data), sessionOnly);
        };
        StorageUtil.removeAll = function removeAll(sessionOnly, id) {
            if (typeof sessionOnly === "undefined") { sessionOnly = false; }
            if (typeof id === "undefined") { id = Avota.Context.getAllContexts()[0].name; }
            if(!StorageUtil.readRaw(id)) {
                return;
            }
            StorageUtil.removeRaw(id, sessionOnly);
        };
        StorageUtil.writeRaw = function writeRaw(name, value, sessionOnly) {
            if (typeof sessionOnly === "undefined") { sessionOnly = false; }
            sessionStorage.setItem(name, value);
            if(!sessionOnly) {
                localStorage.setItem(name, value);
            }
        };
        StorageUtil.readRaw = function readRaw(name) {
            return sessionStorage.getItem(name) || localStorage.getItem(name);
        };
        StorageUtil.removeRaw = function removeRaw(name, sessionOnly) {
            if (typeof sessionOnly === "undefined") { sessionOnly = false; }
            sessionStorage.removeItem(name);
            if(!sessionOnly) {
                localStorage.removeItem(name);
            }
        };
        return StorageUtil;
    })();
    Avota.StorageUtil = StorageUtil;    
})(Avota || (Avota = {}));
var Skylanders;
(function (Skylanders) {
    var SuperChargersGame = (function (_super) {
        __extends(SuperChargersGame, _super);
        function SuperChargersGame(params) {
                _super.call(this, SuperChargersGame.NAME, params);
            this.bootSignal.addOnce(this.onBoot, this);
            this.startupSignal.addOnce(this.onStart, this);
        }
        SuperChargersGame.NAME = "SuperChargersGame";
        SuperChargersGame.prototype.onBoot = function () {
            var config = this.config;
            var resources = this.config.resources;
            if(Avota.EnvUtil.isMobile) {
                for(var i = 0; i < resources.length; i++) {
                    var resource = resources[i];
                    if(resource.path.match("high_res")) {
                        resource.path = resource.path.replace("high_res", "low_res");
                    }
                }
            }
        };
        SuperChargersGame.prototype.startGame = function () {
            Skylanders.GameData.DEVICE_FRAME_RATE = this.settings.tickRate;
            Skylanders.GameData.setup(this);
            Skylanders.SpriteConfig.setup(Skylanders.GameData.getSpriteConfig());
            Skylanders.PlayerData.setup();
            Skylanders.PlayerData.logTracks(Skylanders.GameData.getTrackList());
            if(!Skylanders.PlayerData.validateSaveData()) {
                Skylanders.PlayerData.selectVehicle(Skylanders.GameData.getSelectableVehicleList()[0]);
                Skylanders.PlayerData.selectCharacter(Skylanders.GameData.getSelectableCharacterList()[0]);
                Skylanders.PlayerData.selectTrack(Skylanders.GameData.getTrackList()[0]);
                for(var k in Skylanders.GameData.getUpgradeData()) {
                    if(Skylanders.GameData.getUpgradeData()[k].forceUnlock) {
                        Skylanders.PlayerData.unlockUpgrade(k);
                    }
                }
            }
            this.setScene(Skylanders.GameMenu);
        };
        SuperChargersGame.prototype.onStart = function () {
            this.startGame();
        };
        return SuperChargersGame;
    })(Avota.Game);
    Skylanders.SuperChargersGame = SuperChargersGame;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var SuperChargersLevel = (function (_super) {
        __extends(SuperChargersLevel, _super);
        function SuperChargersLevel() {
                _super.call(this, Avota.Context.getContext(Skylanders.SuperChargersGame.NAME), SuperChargersLevel.NAME);
            this.frameSkip = 0;
            this.enteredSignal.addOnce(this._onEnter, this);
        }
        SuperChargersLevel.NAME = "SuperChargersLevel";
        SuperChargersLevel.MAX_FRAME_ADVANCE = 5;
        SuperChargersLevel.prototype._onEnter = function () {
            var trackData = Skylanders.GameData.getTrackData(Skylanders.PlayerData.getSelectedTrack());
            this.menuOverlay = this.create(Skylanders.GameMenuOverlay, this);
            this.world = new Skylanders.RacerWorld();
            this.gameboard = new Skylanders.Gameboard();
            this.inventory = new Skylanders.InventoryData();
            this.screenFX = this.create(Skylanders.ScreenFX, this, this.timeManager, this.renderManager, this.globalStrings, this.screenWidth, this.screenHeight);
            this.screenFX.zIndex = 400;
            this.boardSoundstage = new Skylanders.BoardSoundStage(this.soundManager, this.gameboard, this.inventory);
            this.racerSoundstage = new Skylanders.RacerSoundStage(this.world, this.soundManager, this._game, this.globalConfig.assets);
            Skylanders.ScreenUtil.makeImage(this, "LevelBG", "LevelBG", {
                x: 0,
                y: 0
            });
            this.entityController = new Skylanders.TrackEntityController(this.world, this.gameboard, this.inventory, this.inputManager);
            this.eventController = new Skylanders.TrackEventController(this.world);
            this.physics = new Skylanders.RacerPhysics(this.world);
            this.boardDisplay = this.create(Skylanders.BoardDisplay, this.gameboard, this, this.screenFX, this.timeManager, "display1");
            this.boardDisplay.setup({
                displayX: 255,
                displayY: 130,
                pieceData: Skylanders.GameData.getData("gamePieces")
            });
            this.raceDisplay = this.create(Skylanders.RaceDisplay, this.world, this, Skylanders.GameData.getSpriteConfig(), this.timeManager);
            this.raceDisplay.setupBG(trackData.bgSettings);
            this.world.addBuilder(new Skylanders.SCTrackBuilder());
            this.world.newTrack(trackData);
            this.gameboard.init({
                rows: 9,
                columns: 8,
                pieceData: Skylanders.GameData.getData("gamePieces")
            });
            this.gui = this.create(Skylanders.LevelGUI, this, this.world, this.inventory, this.boardDisplay, this.touchInput);
            this.gui.menuOverlay = this.menuOverlay;
            this.eventController.addTrackEvents(trackData.events);
            this.eventController.startQueue();
            this.eventController.addModule("screenFX", this.screenFX);
            this.eventController.addModule("sound", this.soundManager);
            this.eventController.addModule("menuOverlay", this.menuOverlay);
            this.eventController.addModule("strings", this.globalStrings);
        };
        SuperChargersLevel.prototype.pause = function (value) {
            _super.prototype.pause.call(this, value);
        };
        SuperChargersLevel.prototype.onTick = function (delta) {
            this.updateGame(delta);
            this.boardDisplay.update();
            this.raceDisplay.update();
        };
        SuperChargersLevel.prototype.updateGame = function (delta) {
            this.world.update();
            this.eventController.update();
            this.entityController.update();
            this.physics.update();
            this.racerSoundstage.update();
        };
        SuperChargersLevel.prototype.destroy = function () {
            TweenMax.killAll();
            this.menuOverlay.destroy();
            _super.prototype.destroy.call(this);
        };
        return SuperChargersLevel;
    })(Avota.Level);
    Skylanders.SuperChargersLevel = SuperChargersLevel;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TrackEventController = (function () {
        function TrackEventController(racerWorld) {
            this._events = {
            };
            this._eventHandlers = {
            };
            this._activeEvents = {
            };
            this._eventQueue = [];
            this._modules = {
            };
            this._racerWorld = racerWorld;
            this._racerWorld.eventSignal.add(this.eventSignalHandler, this);
            this.addEventHandler(TrackEvent.RACE_BEGIN, this.raceBegin);
            this.addEventHandler(TrackEvent.COUNTDOWN, this.countDown);
            this.addEventHandler(TrackEvent.START, this.startRace);
            this.addEventHandler(TrackEvent.LAP_COMPLETED, this.lapCompleted);
            this.addEventHandler(TrackEvent.RACE_END, this.raceEnd);
        }
        TrackEventController.NAME = "TrackEventController";
        TrackEventController.prototype.addModule = function (name, module) {
            this._modules[name] = module;
        };
        TrackEventController.prototype.getModule = function (name) {
            return this._modules[name];
        };
        TrackEventController.prototype.addEventHandler = function (eventID, handler) {
            this._eventHandlers[eventID] = handler;
        };
        TrackEventController.prototype.eventSignalHandler = function (signalID) {
            switch(signalID) {
                case Skylanders.EventSignals.LAP_COMPLETED:
                    if(!this._events["lapCompleted"]) {
                        this.addEvent("lapCompleted", TrackEvent.LAP_COMPLETED);
                    }
                    this.startEvent("lapCompleted");
                    break;
                case Skylanders.EventSignals.RACE_END:
                    if(!this._events["raceEnd"]) {
                        this.addEvent("raceEnd", TrackEvent.RACE_END);
                    }
                    this.startEvent("raceEnd");
                    break;
            }
        };
        TrackEventController.prototype.update = function () {
            for(var k in this._activeEvents) {
                var evt = this._events[k];
                if(this._eventHandlers[evt.eventID]) {
                    this._eventHandlers[evt.eventID].call(this, evt);
                }
            }
        };
        TrackEventController.prototype.addTrackEvents = function (events) {
            for(var i = 0; i < events.length; i++) {
                var evt = events[i];
                this.addEvent(evt.id, evt.event, evt.target);
                this.queueEvent(evt.id);
            }
        };
        TrackEventController.prototype.addEvent = function (uid, eventID, target) {
            var evt = {
            };
            evt.uid = uid;
            evt.eventID = eventID;
            evt.target = target;
            this._events[uid] = evt;
        };
        TrackEventController.prototype.queueEvent = function (uid) {
            this._eventQueue.push(uid);
        };
        TrackEventController.prototype.startEvent = function (uid) {
            this._activeEvents[uid] = true;
        };
        TrackEventController.prototype.endEvent = function (uid) {
            this._activeEvents[uid] = null;
            delete this._activeEvents[uid];
            if(this._queueActive) {
                this.startNextEvent();
            }
        };
        TrackEventController.prototype.startQueue = function () {
            this._queueActive = true;
            this.startNextEvent();
        };
        TrackEventController.prototype.pauseQueue = function () {
            this._queueActive = false;
        };
        TrackEventController.prototype.startNextEvent = function () {
            if(this._eventQueue.length == 0) {
                return;
            }
            var evt = this._events[this._eventQueue.shift()];
            this.startEvent(evt.uid);
        };
        TrackEventController.prototype.raceBegin = function (evt) {
            var _this = this;
            var sound = this.getModule("sound");
            var screenFX = this.getModule("screenFX");
            var trackdata = Skylanders.GameData.getTrackData(Skylanders.PlayerData.getSelectedTrack());
            if(!evt.started) {
                if(sound) {
                    sound.playSound("BGMLevel");
                }
                if(screenFX) {
                    screenFX.showPreraceMessage(0.3, trackdata.preRaceMessage);
                }
                TweenMax.delayedCall(5, function () {
                    return _this.endEvent(evt.uid);
                });
                evt.started = true;
            }
        };
        TrackEventController.prototype.countDown = function (evt) {
            if(evt.started) {
                return;
            }
            var screenFX = this.getModule("screenFX");
            var sound = this.getModule("sound");
            var ctx = this;
            TweenMax.delayedCall(0.1, function () {
                return count();
            });
            evt.count = 3;
            evt.started = true;
            var count = function () {
                if(evt.count > 0) {
                    if(screenFX) {
                        screenFX.showCountdownNumber(evt.count);
                    }
                    if(sound) {
                        sound.playSound("VOCount" + evt.count);
                    }
                    evt.count--;
                    TweenMax.delayedCall(1, function () {
                        return count();
                    });
                } else {
                    ctx.endEvent(evt.uid);
                }
            };
        };
        TrackEventController.prototype.startRace = function (evt) {
            var screenFX = this.getModule("screenFX");
            var sound = this.getModule("sound");
            if(screenFX) {
                screenFX.showGoMessage();
            }
            if(sound) {
                sound.playSound("VOGo");
            }
            var player = this._racerWorld.getEntity("player");
            this._racerWorld.raceStarted = true;
            this._racerWorld.raceStartFrame = this._racerWorld.frameCount;
            this._racerWorld.eventSignal.dispatch(Skylanders.EventSignals.RACE_BEGIN);
            this.endEvent(evt.uid);
        };
        TrackEventController.prototype.lapCompleted = function (evt) {
            var screenFX = this.getModule("screenFX");
            var menu = this.getModule("menuOverlay");
            var sound = this.getModule("sound");
            var hud = this.getModule("hud");
            var strings = this.getModule("strings");
            var ctx = this;
            var player = this._racerWorld.getEntity("player");
            if(player.lapsCompleted < this._racerWorld.track.laps) {
                if(screenFX) {
                    screenFX.showMessage(strings.game.lap.toUpperCase() + " " + (player.lapsCompleted + 1));
                }
                this.endEvent(evt.uid);
            } else {
                this._racerWorld.eventSignal.dispatch(Skylanders.EventSignals.RACE_END);
                this.endEvent(evt.uid);
            }
        };
        TrackEventController.prototype.raceEnd = function (evt) {
            var screenFX = this.getModule("screenFX");
            var menu = this.getModule("menuOverlay");
            var sound = this.getModule("sound");
            var hud = this.getModule("hud");
            var strings = this.getModule("strings");
            var ctx = this;
            var player = this._racerWorld.getEntity("player");
            if(evt.complete) {
                return;
            }
            if(screenFX) {
                screenFX.showBeneficialPlacement(player.place);
            }
            var trackData = Skylanders.GameData.getTrackData(Skylanders.PlayerData.getSelectedTrack());
            if(player.place < 2) {
                if(sound && player.place == 1) {
                    sound.playSound("VOYouWin");
                }
                if(trackData.unlocks) {
                    Skylanders.PlayerData.unlockTrack(trackData.unlocks);
                }
            }
            var multipliers = [
                Skylanders.ScoreMultiplier.FIRST_PLACE, 
                Skylanders.ScoreMultiplier.SECOND_PLACE, 
                Skylanders.ScoreMultiplier.THIRD_PLACE, 
                Skylanders.ScoreMultiplier.FORTH_PLACE, 
                
            ];
            if(player.place - 1 < multipliers.length) {
                this._racerWorld.scoreData.logMultipier(multipliers[player.place - 1]);
            }
            this._racerWorld.raceEndFrame = this._racerWorld.frameCount;
            evt.complete = true;
            Skylanders.PlayerData.recordTrackStats(Skylanders.PlayerData.getSelectedTrack(), this._racerWorld.scoreData.getTotalScore(), this._racerWorld.raceEndFrame - this._racerWorld.raceStartFrame);
            Skylanders.PlayerData.save();
            this._racerWorld.end();
            TweenMax.delayedCall(5, function () {
                Skylanders.PlayerData.recordRaceResults(ctx._racerWorld);
                if(menu) {
                    menu.showResultsScreen();
                }
                ctx.endEvent(evt.uid);
            });
        };
        return TrackEventController;
    })();
    Skylanders.TrackEventController = TrackEventController;    
    var TrackEvent = (function () {
        function TrackEvent() { }
        TrackEvent.RACE_BEGIN = "raceBegin";
        TrackEvent.COUNTDOWN = "countdown";
        TrackEvent.START = "start";
        TrackEvent.LAP_COMPLETED = "lapCompleted";
        TrackEvent.RACE_END = "raceEnd";
        return TrackEvent;
    })();
    Skylanders.TrackEvent = TrackEvent;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var Gameboard = (function () {
        function Gameboard() {
            this._pieces = {
            };
            this._pieceList = [];
            this._pieceData = {
            };
            this._rows = [];
            this._columns = [];
            this._pieceCategories = {
            };
            this._pieceAddCount = 0;
            this._selectedPieces = [];
            this._encounterRates = [
                "sword", 
                15, 
                "explosion", 
                15, 
                "engine", 
                37, 
                "gearbit", 
                18, 
                "treasure", 
                12, 
                "wild", 
                3, 
                
            ];
            this._bank = [];
            this._matchCount = 3;
            this._matches = {
            };
            this._matchData = new MatchData();
            this._bonuses = [];
            this._numMoves = 0;
            this._moves = [];
            this._numTypes = 0;
            this.initialized = false;
            this.empty = false;
            this.eventSignal = new Avota.Signal();
            this.patternTypes = [
                [
                    1, 
                    3
                ], 
                [
                    3, 
                    1
                ], 
                [
                    1, 
                    4
                ], 
                [
                    4, 
                    1
                ], 
                [
                    3, 
                    2
                ], 
                [
                    2, 
                    3
                ], 
                [
                    4, 
                    2
                ], 
                [
                    2, 
                    4
                ], 
                [
                    1, 
                    1
                ], 
                [
                    2, 
                    2
                ], 
                [
                    3, 
                    3
                ], 
                [
                    4, 
                    4
                ]
            ];
        }
        Gameboard.NAME = "Gameboard";
        Gameboard.loopSum = function loopSum(v, inc, max, min) {
            if (typeof min === "undefined") { min = 0; }
            var result = v + inc;
            while(result > max) {
                result = min + (result - max);
            }
            while(result <= min) {
                result = max + (result - min);
            }
            return result;
        };
        Gameboard.findClosestDivisable = function findClosestDivisable(value, divisor) {
            if(value <= divisor) {
                return divisor;
            }
            if(value % divisor > divisor / 2) {
                return value + (divisor - (value % divisor));
            } else {
                return value - (value % divisor);
            }
        };
        Gameboard.findNextDivisable = function findNextDivisable(value, divisor) {
            if(value <= divisor) {
                return divisor;
            }
            return value + (divisor - (value % divisor));
        };
        Object.defineProperty(Gameboard.prototype, "maxBonuses", {
            get: function () {
                return 4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gameboard.prototype, "numRows", {
            get: function () {
                return this._rows.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gameboard.prototype, "numColumns", {
            get: function () {
                return this._columns.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gameboard.prototype, "numSelected", {
            get: function () {
                return this._matchData.numSelected;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gameboard.prototype, "numMoves", {
            get: function () {
                return this._numMoves;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gameboard.prototype, "moves", {
            get: function () {
                return this._moves;
            },
            enumerable: true,
            configurable: true
        });
        Gameboard.prototype.init = function (params) {
            this._rows.length = params.rows;
            this._columns.length = params.columns;
            this._pieceCategories["type"] = {
            };
            for(var i = 0; i < this._rows.length; i++) {
                var row = [];
                row.length = this.numColumns;
                this._rows[i] = row;
            }
            for(var i = 0; i < this._columns.length; i++) {
                var column = [];
                column.length = this.numRows;
                this._columns[i] = column;
            }
            this._pieceData = params.pieceData;
            this._encounterRates = params.encounterRates || this._encounterRates;
            this.createPieceBank();
            this.fill(true);
            this.initialized = true;
        };
        Gameboard.prototype.createPieceBank = function () {
            var totalPieces = this.numRows * this.numColumns * 2;
            this._numTypes = 0;
            for(var k in this._pieceData) {
                var data = this._pieceData[k];
                var amount = Math.floor((data.rate / 100) * totalPieces);
                for(var i = 0; i < amount; i++) {
                    this._bank.push(k);
                }
                this._numTypes++;
            }
            this.shuffleBank();
        };
        Gameboard.prototype.shuffleBank = function () {
            this._bank = Avota.ArrayUtil.randomize(this._bank);
        };
        Gameboard.prototype.fill = function (avoidMatches) {
            if (typeof avoidMatches === "undefined") { avoidMatches = false; }
            for(var i = 0; i < this.numColumns; i++) {
                var column = this._columns[i];
                for(var j = column.length - 1; j >= 0 && column.length > 0; j--) {
                    if(!column[j] || column[j] == "") {
                        var type;
                        if(avoidMatches) {
                            for(var h = 0; h < this._bank.length; h++) {
                                type = this._bank[h];
                                if(!this.checkMatch(type, j + 1, i + 1)) {
                                    this._bank.splice(h, 1);
                                    break;
                                }
                                if(h == this._bank.length - 1) {
                                    this._bank.splice(h, 1);
                                    break;
                                }
                            }
                        } else {
                            type = this._bank.shift();
                        }
                        this.addPiece(type, j + 1, i + 1);
                    }
                }
            }
            this.empty = false;
        };
        Gameboard.prototype.shiftRow = function (row, amount) {
            var r = this.getRow(row);
            for(var i = 0; i < r.length; i++) {
                var pieceID = r[i];
                var piece = this.getPiece(pieceID);
                piece.column = Gameboard.loopSum(piece.column, amount, this.numColumns);
                var nextColumn = this._columns[piece.column - 1];
                nextColumn[row - 1] = piece.id;
            }
            for(var i = 0; i < Math.abs(amount); i++) {
                amount > 0 ? r.unshift(r.pop()) : r.push(r.shift());
            }
        };
        Gameboard.prototype.shiftColumn = function (column, amount) {
            var c = this.getColumn(column);
            for(var i = 0; i < c.length; i++) {
                var pieceID = c[i];
                var piece = this.getPiece(pieceID);
                piece.row = Gameboard.loopSum(piece.row, amount, this.numRows);
            }
            for(var i = 0; i < Math.abs(amount); i++) {
                amount > 0 ? c.unshift(c.pop()) : c.push(c.shift());
            }
        };
        Gameboard.prototype.changeRandomPiecesTo = function (type, perc) {
            if (typeof perc === "undefined") { perc = 0.2; }
            var numPieces = Math.floor(this.numRows * this.numColumns * perc);
            var replaceList = [];
            var pieceList = Avota.ArrayUtil.randomize(this._pieceList.concat());
            var index;
            while(replaceList.length < numPieces) {
                index = this._bank.indexOf(type);
                if(index == -1) {
                    break;
                }
                replaceList.push(this._bank.splice(index, 1)[0]);
            }
            for(var i = replaceList.length - 1; i >= 0 && replaceList.length > 0; i--) {
                var pieceType = replaceList[i];
                var replacement = null;
                while(!replacement && pieceList.length != 0) {
                    replacement = this.getPiece(pieceList.shift());
                }
                if(!replacement) {
                    break;
                }
                this.changePieceType(replacement.id, pieceType);
            }
        };
        Gameboard.prototype.changePieceType = function (pieceID, newType) {
            var piece = this.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var oldType = piece.type;
            piece.type = newType;
            if(this._bank.indexOf(newType) != -1) {
                this._bank.splice(this._bank.indexOf(newType), 1);
            }
            this._bank.push(oldType);
            this.eventSignal.dispatch(GameboardEvents.PIECE_CHANGED, {
                id: pieceID,
                oldType: oldType,
                newType: newType
            });
        };
        Gameboard.prototype.selectPiece = function (pieceID, matchData, notify) {
            if (typeof notify === "undefined") { notify = true; }
            if(!matchData) {
                matchData = this._matchData;
            }
            var piece = this.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var canSelect = false;
            if(matchData.numSelected == 0) {
                canSelect = true;
            } else {
                var lastPiece = this.getPiece(matchData.selectedPieces[matchData.numSelected - 1]);
                if((matchData.selectionType == piece.type || piece.type == GamePiece.WILD || matchData.selectionType == GamePiece.WILD) && (lastPiece.column == piece.column || lastPiece.row == piece.row) && (Math.abs(lastPiece.column - piece.column) <= 1 && Math.abs(lastPiece.row - piece.row) <= 1)) {
                    canSelect = true;
                    if(matchData.selectionType == GamePiece.WILD && piece.type != GamePiece.WILD) {
                        matchData.selectionType = piece.type;
                    }
                }
            }
            if(!piece.selected && canSelect) {
                matchData.addSelectedPiece(piece.id, piece.type);
                if(notify) {
                    piece.selected = true;
                    this.eventSignal.dispatch(GameboardEvents.PIECE_SELECTED, piece.id);
                }
            }
        };
        Gameboard.prototype.checkMoves = function () {
            this._numMoves = 0;
            this._moves = [];
            this.traversePieces(this.findMoves, this);
        };
        Gameboard.prototype.findMoves = function (piece) {
            var numMoves = 0;
            var matchData = new MatchData();
            for(var i = 0; i < this.patternTypes.length; i++) {
                var pattern = this.patternTypes[i];
                var row = piece.row;
                var column = piece.column;
                matchData = new MatchData();
                this.selectPiece(this.getPieceAt(row, column).id, matchData, false);
                for(var j = 0; j < pattern.length; j++) {
                    var move = pattern[j];
                    switch(move) {
                        case 1:
                            row -= 1;
                            break;
                        case 2:
                            row += 1;
                            break;
                        case 3:
                            column -= 1;
                            break;
                        case 4:
                            column += 1;
                            break;
                    }
                    if(row > 0 && row <= this.numRows && column > 0 && column <= this.numColumns) {
                        this.selectPiece(this.getPieceAt(row, column).id, matchData, false);
                    }
                }
                if(matchData.numSelected > 2) {
                    numMoves++;
                    this._moves.push(matchData);
                }
            }
            this._numMoves += numMoves;
        };
        Gameboard.prototype.deselectPiece = function (pieceID) {
            var piece = this.getPiece(pieceID);
            if(!piece) {
                return;
            }
            if(piece.selected) {
                piece.selected = false;
                this._matchData.removeSelectedPiece(piece.id);
                this.eventSignal.dispatch(GameboardEvents.PIECE_DESELECTED, piece.id);
            }
        };
        Gameboard.prototype.deselectAllAfter = function (pieceID) {
            var pieces = this._matchData.selectedPieces.slice(this._matchData.selectedPieces.indexOf(pieceID) + 1);
            for(var i = 0; i < pieces.length; i++) {
                var pID = pieces[i];
                this.deselectPiece(pID);
            }
        };
        Gameboard.prototype.removeBoard = function () {
            for(var k in this._pieces) {
                this._bank.push(this._pieces[k].type);
                this.deselectPiece(k);
            }
            this.eventSignal.dispatch(GameboardEvents.BOARD_REMOVED);
            this.removeAllPieces();
        };
        Gameboard.prototype.executeSelection = function () {
            if(this._matchData.selectedPieces.length > 2) {
                this.eventSignal.dispatch(GameboardEvents.SELECTION_EXECUTED, this._matchData);
                for(var i = this._matchData.selectedPieces.length - 1; i >= 0 && this._matchData.selectedPieces.length > 0; i--) {
                    var piece = this.getPiece(this._matchData.selectedPieces[i]);
                    if(!piece) {
                        continue;
                    }
                    this.clearPiece(piece.id);
                }
                this._matchData.clear();
                this.shuffleBank();
                this.fill();
            } else {
                for(var i = this._matchData.selectedPieces.length - 1; i >= 0 && this._matchData.selectedPieces.length > 0; i--) {
                    var piece = this.getPiece(this._matchData.selectedPieces[i]);
                    if(!piece) {
                        continue;
                    }
                    this.deselectPiece(piece.id);
                }
            }
        };
        Gameboard.prototype.getAllMatches = function () {
            for(var k in this._matches) {
                delete this._matches[k];
            }
            for(var k in this._pieces) {
                var piece = this._pieces[k];
                this.checkMatch(piece.type, piece.row, piece.column, this._matches);
            }
            var numPieces = 0;
            for(var k in this._matches) {
                if(this._matches[k]) {
                    numPieces++;
                }
            }
            this._matches["numPieces"] = numPieces;
            return this._matches;
        };
        Gameboard.prototype.getMatchesFromMove = function (moveAxis, num, amount) {
            var matches;
            if(moveAxis == "column") {
                this.shiftColumn(num, amount);
                matches = this.getAllMatches();
                this.shiftColumn(num, -amount);
            } else {
                this.shiftRow(num, amount);
                matches = this.getAllMatches();
                this.shiftRow(num, -amount);
            }
            return matches;
        };
        Gameboard.prototype.executeMatches = function () {
            var matches = this.getAllMatches();
            if(matches.numPieces == 0) {
                return;
            }
            for(var k in matches) {
                var piece = this.getPiece(k);
                if(!piece) {
                    continue;
                }
                piece.matched = true;
            }
            this.eventSignal.dispatch(GameboardEvents.MATCH, matches);
            for(var k in matches) {
                var piece = this.getPiece(k);
                if(!piece) {
                    continue;
                }
                this.clearPiece(piece.id);
            }
            this.shuffleBank();
            this.fill();
        };
        Gameboard.prototype.checkMatch = function (type, row, column, matchList) {
            var match = false;
            if(this.checkDir(type, row, column, "up", matchList)) {
                match = true;
            }
            if(this.checkDir(type, row, column, "down", matchList)) {
                match = true;
            }
            if(this.checkDir(type, row, column, "left", matchList)) {
                match = true;
            }
            if(this.checkDir(type, row, column, "right", matchList)) {
                match = true;
            }
            return match;
        };
        Gameboard.prototype.checkDir = function (type, row, column, direction, matchList) {
            var c = this.getColumn(column);
            var r = this.getRow(row);
            var matchAmount, piece, baseIndex, elements, inc, match;
            switch(direction) {
                case "up":
                case "down":
                    baseIndex = row - 1;
                    elements = c;
                    break;
                case "left":
                case "right":
                    baseIndex = column - 1;
                    elements = r;
                    break;
            }
            inc = direction == "up" || direction == "left" ? -1 : 1;
            matchAmount = 0;
            for(var i = 1; i < elements.length; i++) {
                var index = baseIndex + (inc * i);
                if(index < 0 || index >= elements.length) {
                    break;
                }
                piece = this.getPiece(elements[index]);
                if(piece && type == GamePiece.WILD) {
                    type = piece.type;
                }
                if(piece && (piece.type == type || piece.type == GamePiece.WILD)) {
                    matchAmount++;
                } else {
                    break;
                }
            }
            match = matchAmount >= this._matchCount - 1;
            if(matchList && match) {
                for(var i = 0; i < matchAmount + 1; i++) {
                    var index = baseIndex + (inc * i);
                    piece = this.getPiece(elements[index]);
                    matchList[piece.id] = true;
                }
            }
            return match;
        };
        Gameboard.prototype.addPiece = function (type, row, column) {
            var piece = new GamePiece();
            piece.id = type + this._pieceAddCount;
            piece.type = type;
            piece.row = row > this.numRows ? this.numRows : row < 1 ? 1 : row;
            piece.column = column > this.numColumns ? this.numColumns : column < 1 ? 1 : column;
            var c = this._columns[piece.column - 1];
            c[piece.row - 1] = piece.id;
            if(!this._pieceCategories["type"][piece.type]) {
                this._pieceCategories["type"][piece.type] = [];
            }
            this._pieceList.push(piece.id);
            this._pieceCategories["type"][piece.type].push(piece.id);
            this._pieces[piece.id] = piece;
            this._pieceAddCount++;
            this.eventSignal.dispatch(GameboardEvents.PIECE_ADDED, piece.id);
        };
        Gameboard.prototype.clearPiece = function (id) {
            var piece = this.getPiece(id);
            if(!piece) {
                return;
            }
            var column = this.getColumn(piece.column);
            column.splice(piece.row - 1, 1);
            for(var i = 0; i < column.length; i++) {
                var p = this.getPiece(column[i]);
                if(!p) {
                    continue;
                }
                p.row = i + 1;
            }
            column.length = this.numRows;
            this._bank.push(piece.type);
            this.removePiece(piece.id);
            this.eventSignal.dispatch(GameboardEvents.PIECE_CLEARED, piece.id);
        };
        Gameboard.prototype.removePiece = function (pieceID) {
            this._pieces[pieceID] = null;
            delete this._pieces[pieceID];
        };
        Gameboard.prototype.removeAllPieces = function () {
            this._pieces = {
            };
            for(var i = 0; i < this.numColumns; i++) {
                var column = this.getColumn(i + 1);
                column.splice(0, column.length);
                column.length = this.numRows;
            }
            this.empty = true;
        };
        Gameboard.prototype.getPiece = function (pieceID) {
            return this._pieces[pieceID];
        };
        Gameboard.prototype.getPieceAt = function (row, column) {
            return this.getPiece(this._columns[column - 1][row - 1]);
        };
        Gameboard.prototype.traversePieces = function (command, context, category) {
            var list = category ? this._pieceCategories[category] : this._pieceList;
            for(var i = list.length; i >= 0 && list.length > 0; i--) {
                var piece = this.getPiece(list[i]);
                if(!piece) {
                    list.splice(i, 1);
                    continue;
                }
                command.call(context, piece);
            }
        };
        Gameboard.prototype.getRow = function (row) {
            var r = this._rows[row - 1];
            for(var i = 0; i < this.numColumns; i++) {
                var c = this.getColumn(i + 1);
                r[i] = c[row - 1];
            }
            return r;
        };
        Gameboard.prototype.getColumn = function (column) {
            return this._columns[column - 1];
        };
        return Gameboard;
    })();
    Skylanders.Gameboard = Gameboard;    
    var GameboardEvents = (function () {
        function GameboardEvents() { }
        GameboardEvents.PIECE_ADDED = 0;
        GameboardEvents.MATCH = 1;
        GameboardEvents.PIECE_CLEARED = 2;
        GameboardEvents.PIECE_SELECTED = 3;
        GameboardEvents.PIECE_DESELECTED = 4;
        GameboardEvents.SELECTION_EXECUTED = 5;
        GameboardEvents.BOARD_REMOVED = 6;
        GameboardEvents.PIECE_CHANGED = 7;
        return GameboardEvents;
    })();
    Skylanders.GameboardEvents = GameboardEvents;    
    var GamePiece = (function () {
        function GamePiece() { }
        GamePiece.HEAL = "heal";
        GamePiece.SWORD = "sword";
        GamePiece.EXPLOSION = "explosion";
        GamePiece.ENGINE = "engine";
        GamePiece.BOOTS = "boots";
        GamePiece.KEY = "key";
        GamePiece.GEARBIT = "gearbit";
        GamePiece.TREASURE = "treasure";
        GamePiece.WILD = "wild";
        return GamePiece;
    })();
    Skylanders.GamePiece = GamePiece;    
    var MatchData = (function () {
        function MatchData() {
            this.selectedPieces = [];
            this.selectedTypes = [];
        }
        Object.defineProperty(MatchData.prototype, "numSelected", {
            get: function () {
                return this.selectedPieces.length;
            },
            enumerable: true,
            configurable: true
        });
        MatchData.prototype.clear = function () {
            this.selectedPieces.length = 0;
            this.selectedTypes.length = 0;
            this.selectionType = "";
        };
        MatchData.prototype.addSelectedPiece = function (pieceID, pieceType) {
            this.selectedPieces.push(pieceID);
            this.selectedTypes.push(pieceType);
            if(this.selectedPieces.length == 1) {
                this.selectionType = pieceType;
            }
        };
        MatchData.prototype.removeSelectedPiece = function (pieceID) {
            this.selectedTypes.splice(this.selectedPieces.indexOf(pieceID), 1);
            this.selectedPieces.splice(this.selectedPieces.indexOf(pieceID), 1);
            if(this.selectedPieces.length == 0) {
                this.selectionType = "";
            }
        };
        MatchData.prototype.hasType = function (type) {
            return this.selectedTypes.indexOf(type) != -1;
        };
        MatchData.prototype.numType = function (type) {
            var index = this.selectedTypes.indexOf(type);
            var count = 0;
            while(index != -1) {
                count++;
                index = this.selectedTypes.indexOf(type, index + 1);
            }
            return count;
        };
        MatchData.prototype.getPiecesOfType = function (type) {
            var index = this.selectedTypes.indexOf(type);
            var arr = [];
            while(index != -1) {
                arr.push(this.selectedPieces[index]);
                index = this.selectedTypes.indexOf(type, index + 1);
            }
            return arr;
        };
        return MatchData;
    })();
    Skylanders.MatchData = MatchData;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var BoardDisplay = (function (_super) {
        __extends(BoardDisplay, _super);
        function BoardDisplay(gameboard, scene, screenFX, timeManager, name) {
            if (typeof name === "undefined") { name = BoardDisplay.NAME; }
            var _this = this;
                _super.call(this, timeManager, name);
            this._displayX = 0;
            this._displayY = 0;
            this._inputData = {
            };
            this._cellWidth = -1;
            this._cellHeight = -1;
            this._moveThreshold = 10;
            this._animations = {
            };
            this._animCount = 0;
            this._inputEnabled = false;
            this._checkMatch = false;
            this._locked = true;
            this._gameboard = gameboard;
            this._scene = scene;
            this._screenFX = screenFX;
            this._timeline = new TimelineMax({
                onComplete: function () {
                    return _this.onAnimComplete();
                },
                paused: true
            });
        }
        BoardDisplay.NAME = "BoardDisplay";
        BoardDisplay.prototype.setup = function (params) {
            this._displayX = params.displayX || 0;
            this._displayY = params.displayY || 0;
            this._pieceData = params.pieceData;
            this._gameboard.eventSignal.add(this.boardHandler, this);
            Skylanders.ScreenUtil.makeImage(this._scene, "TileBG", "TileBG", {
                x: this._displayX - 10,
                y: this._displayY - 5,
                zIndex: 2
            });
        };
        BoardDisplay.prototype.lock = function () {
            this.disableHint();
            this._locked = true;
        };
        BoardDisplay.prototype.unlock = function () {
            this.enableHint();
            this._locked = false;
        };
        BoardDisplay.prototype.enableInput = function () {
            if(this._locked) {
                return;
            }
            this._inputEnabled = true;
        };
        BoardDisplay.prototype.disableInput = function () {
            if(this._inputData.isDown) {
                this.onUp(this._inputRect, this._inputData.current.x, this._inputData.current.y);
            }
            this._inputEnabled = false;
        };
        BoardDisplay.prototype.update = function () {
            this.updateInputs();
            this.updateSelection();
        };
        BoardDisplay.prototype.getPieceLocation = function (pieceID) {
            var piece = this._gameboard.getPiece(pieceID);
            if(!piece) {
                return null;
            }
            var x = this.getCellX(piece.column);
            var y = this.getCellY(piece.row);
            return new Avota.Point(x, y);
        };
        BoardDisplay.prototype.boardHandler = function (eventID, data) {
            switch(eventID) {
                case Skylanders.GameboardEvents.PIECE_ADDED:
                    this.showPiece(data);
                    break;
                case Skylanders.GameboardEvents.MATCH:
                    this.showMatches(data);
                    break;
                case Skylanders.GameboardEvents.PIECE_CLEARED:
                    this.movePieces();
                    break;
                case Skylanders.GameboardEvents.PIECE_SELECTED:
                    this.showSelected(data);
                    break;
                case Skylanders.GameboardEvents.PIECE_DESELECTED:
                    this.showDeselected(data);
                    break;
                case Skylanders.GameboardEvents.SELECTION_EXECUTED:
                    this.clearSelection(data);
                    break;
                case Skylanders.GameboardEvents.BOARD_REMOVED:
                    this.removeBoard();
                    break;
                case Skylanders.GameboardEvents.PIECE_CHANGED:
                    this.changePiece(data.id, data.oldType, data.newType);
                    break;
            }
        };
        BoardDisplay.prototype.showPiece = function (pieceID) {
            var piece = this._gameboard.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var pieceData = this._pieceData[piece.type];
            if(!pieceData) {
                throw "Data not found for " + piece.type;
            }
            var img = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id, pieceData.display, {
                zIndex: 10
            });
            if(this._cellWidth < 0 || this._cellHeight < 0) {
                this._cellWidth = img.width;
                this._cellHeight = img.height;
                this.setInputRect();
            }
            img.x = this.getCellX(piece.column);
            img.y = this.getCellY(piece.row);
            img.registrationX = img.width / 2;
            img.registrationY = img.height / 2;
            var glowImage = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id + "glow", "PieceGlow", {
                zIndex: 11,
                x: -this._cellWidth,
                y: -this._cellHeight,
                visible: false
            });
            glowImage.registrationX = glowImage.width / 2;
            glowImage.registrationY = glowImage.height / 2;
            var hintImage = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id + "hint", "PieceHint", {
                zIndex: 11,
                x: -this._cellWidth,
                y: -this._cellHeight,
                visible: false
            });
            hintImage.registrationX = hintImage.width / 2;
            hintImage.registrationY = hintImage.height / 2;
            this._timeline.insert(TweenMax.from(img, 0.65, {
                scale: 0,
                ease: Elastic.easeOut,
                delay: !this._gameboard.initialized || this._gameboard.empty ? Avota.Random.float(0, 0.75) : 0.5
            }));
            this.playAnim(true, true);
        };
        BoardDisplay.prototype.changePiece = function (pieceID, oldType, newType) {
            var piece = this._gameboard.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var img = this._scene.get("piece" + pieceID);
            var piece = this._gameboard.getPiece(pieceID);
            var pieceData = Skylanders.GameData.getData("gamePieces")[piece.type];
            var definition = Skylanders.SpriteConfig.getDisplayDefinition(pieceData.matchFX);
            var animData = Skylanders.SpriteConfig.getAnimationData(definition.data);
            var spritesheet = Skylanders.SpriteConfig.makeSpriteSheet(this._scene, animData.spritesheet);
            var glow = this._scene.get("piece" + pieceID + "glow");
            TweenMax.killTweensOf(glow);
            glow.destroy();
            var anim = Skylanders.ScreenUtil.makeSprite(this._scene, "pieceMatch" + pieceID, spritesheet, [
                animData
            ], {
                zIndex: img.zIndex + 1
            });
            anim.centerX = img.centerX;
            anim.centerY = img.centerY;
            anim.play(animData.name, 0, 1, (function () {
                var _this = this;
                TweenMax.delayedCall(0.1, function () {
                    return _this.destroy();
                });
            }).bind(anim));
            TweenMax.killTweensOf(img);
            img.destroy();
            img = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id, pieceData.display, {
                zIndex: 10
            });
            img.x = this.getCellX(piece.column);
            img.y = this.getCellY(piece.row);
            img.registrationX = img.width / 2;
            img.registrationY = img.height / 2;
            var glowImage = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id + "glow", "PieceGlow", {
                zIndex: 11,
                x: -this._cellWidth,
                y: -this._cellHeight,
                visible: false
            });
            glowImage.registrationX = glowImage.width / 2;
            glowImage.registrationY = glowImage.height / 2;
            var hintImage = Skylanders.ScreenUtil.makeImage(this._scene, "piece" + piece.id + "hint", "PieceHint", {
                zIndex: 11,
                x: -this._cellWidth,
                y: -this._cellHeight,
                visible: false
            });
            hintImage.registrationX = hintImage.width / 2;
            hintImage.registrationY = hintImage.height / 2;
            this._timeline.insert(TweenMax.from(img, 0.65, {
                scale: 0,
                ease: Elastic.easeOut,
                delay: !this._gameboard.initialized || this._gameboard.empty ? Avota.Random.float(0, 0.75) : 0.5
            }));
            this.playAnim(true, true);
        };
        BoardDisplay.prototype.destroyPieceImageFX = function (pieceID) {
            var glow = this._scene.get("piece" + pieceID + "glow");
            TweenMax.killTweensOf(glow);
            glow.destroy();
            var hint = this._scene.get("piece" + pieceID + "hint");
            TweenMax.killTweensOf(hint);
            hint.destroy();
        };
        BoardDisplay.prototype.showMatches = function (matches) {
            for(var k in matches) {
                var img = this._scene.get("piece" + k);
                if(!img) {
                    continue;
                }
                this.destroyPieceImageFX(k);
                this._timeline.insert(TweenMax.to(img, 0.65, {
                    scale: 1.5,
                    alpha: 0
                }));
            }
            this.playAnim();
        };
        BoardDisplay.prototype.clearSelection = function (selection) {
            for(var i = 0; i < selection.selectedPieces.length; i++) {
                var pieceID = selection.selectedPieces[i];
                var img = this._scene.get("piece" + selection.selectedPieces[i]);
                var piece = this._gameboard.getPiece(pieceID);
                var pieceData = Skylanders.GameData.getData("gamePieces")[piece.type];
                var definition = Skylanders.SpriteConfig.getDisplayDefinition(pieceData.matchFX);
                var animData = Skylanders.SpriteConfig.getAnimationData(definition.data);
                var spritesheet = Skylanders.SpriteConfig.makeSpriteSheet(this._scene, animData.spritesheet);
                if(!img) {
                    continue;
                }
                this.destroyPieceImageFX(selection.selectedPieces[i]);
                var anim = Skylanders.ScreenUtil.makeSprite(this._scene, "pieceMatch" + selection.selectedPieces[i], spritesheet, [
                    animData
                ], {
                    zIndex: img.zIndex + 1
                });
                anim.centerX = img.centerX;
                anim.centerY = img.centerY;
                anim.play(animData.name, 0, 1, (function () {
                    var _this = this;
                    TweenMax.delayedCall(0.1, function () {
                        return _this.destroy();
                    });
                }).bind(anim));
                this._timeline.insert(TweenMax.to(img, 0.65, {
                    scale: 1.5,
                    alpha: 0,
                    onComplete: img.destroy,
                    onCompleteScope: img
                }));
            }
            this.playAnim();
        };
        BoardDisplay.prototype.removeBoard = function () {
            this._gameboard.traversePieces(function (piece) {
                var img = this._scene.get("piece" + piece.id);
                if(!img) {
                    return;
                }
                this.destroyPieceImageFX(piece.id);
                var delay = Avota.Random.float(0, 0.45);
                this._timeline.insert(TweenMax.to(img, 0.15, {
                    y: "-=25",
                    ease: Power2.easeOut,
                    delay: delay
                }));
                this._timeline.insert(TweenMax.to(img, 0.45, {
                    y: "+=600",
                    ease: Power2.easeIn,
                    onComplete: img.destroy,
                    onCompleteScope: img,
                    delay: delay + 0.16
                }));
            }, this);
            this.playAnim();
        };
        BoardDisplay.prototype.showSelected = function (pieceID) {
            var piece = this._gameboard.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var img = this._scene.get("piece" + piece.id);
            var glow = this._scene.get("piece" + piece.id + "glow");
            glow.visible = true;
            glow.active = false;
            glow.centerX = img.centerX;
            glow.centerY = img.centerY;
            if(piece.selected) {
                this._timeline.insert(TweenMax.to(img, 0.35, {
                    scale: 1.2
                }));
                this._timeline.insert(TweenMax.to(glow, 0.35, {
                    scale: 1.2
                }));
                this.playAnim(false);
            }
        };
        BoardDisplay.prototype.showDeselected = function (pieceID) {
            var piece = this._gameboard.getPiece(pieceID);
            if(!piece) {
                return;
            }
            var img = this._scene.get("piece" + piece.id);
            var glow = this._scene.get("piece" + piece.id + "glow");
            if(!glow) {
                return;
            }
            glow.visible = false;
            glow.active = false;
            glow.x = -glow.width;
            glow.y = -glow.height;
            if(!piece.selected) {
                this._timeline.insert(TweenMax.to(img, 0.35, {
                    scale: 1
                }));
                this.playAnim(false);
            }
        };
        BoardDisplay.prototype.showHint = function () {
            var moves = this._gameboard.moves;
            for(var i = 0; i < moves.length; i++) {
                var moveData = moves[i];
                for(var j = 0; j < moveData.numSelected; j++) {
                    var pieceID = moveData.selectedPieces[j];
                    var piece = this._gameboard.getPiece(pieceID);
                    if(!piece) {
                        return;
                    }
                    var img = this._scene.get("piece" + piece.id);
                    var hint = this._scene.get("piece" + piece.id + "hint");
                    hint.visible = true;
                    hint.active = false;
                    hint.alpha = 1;
                    hint.scale = 1;
                    hint.centerX = img.centerX;
                    hint.centerY = img.centerY;
                    if(!TweenMax.isTweening(hint)) {
                        TweenMax.from(hint, 0.35, {
                            alpha: 0,
                            scale: 1.5
                        });
                        TweenMax.to(hint, 0.35, {
                            scale: 1.05,
                            delay: 0.5,
                            yoyo: true,
                            repeat: -1
                        });
                    }
                }
            }
            this._scene.soundManager.playSound("SUIHint");
        };
        BoardDisplay.prototype.disableHint = function () {
            this._gameboard.traversePieces(function (piece) {
                var hint = this._scene.get("piece" + piece.id + "hint");
                TweenMax.killTweensOf(hint);
                hint.visible = false;
                hint.active = false;
            }, this);
            if(this._hintTween) {
                TweenMax.killTweensOf(this._hintTween.target);
            }
        };
        BoardDisplay.prototype.enableHint = function () {
            var _this = this;
            if(this._hintTween) {
                TweenMax.killTweensOf(this._hintTween.target);
            }
            this._hintTween = TweenMax.delayedCall(7, function () {
                return _this.showHint();
            });
        };
        BoardDisplay.prototype.movePieces = function () {
            this._gameboard.traversePieces(this.movePiece, this);
        };
        BoardDisplay.prototype.movePiece = function (piece) {
            var img = this._scene.get("piece" + piece.id);
            if(!img || piece.matched || piece.selected) {
                return;
            }
            var destX = this.getCellX(piece.column);
            var destY = this.getCellY(piece.row);
            this._timeline.kill(null, img);
            this._timeline.insert(TweenMax.to(img, 0.2 * (Math.abs(destY - img.y) / this._cellHeight), {
                x: destX,
                y: destY,
                ease: Power3.easeIn
            }));
            this.playAnim();
        };
        BoardDisplay.prototype.playAnim = function (disableInput, checkMatch) {
            if (typeof disableInput === "undefined") { disableInput = true; }
            if (typeof checkMatch === "undefined") { checkMatch = false; }
            if(disableInput) {
                this.disableInput();
            }
            if(!this._timeline.isActive()) {
                this._timeline.play(0);
            }
            if(checkMatch) {
                this._checkMatch = checkMatch;
            }
        };
        BoardDisplay.prototype.animate = function (obj, type, time, params) {
            var callback = params.onComplete;
            params.onComplete = onComplete;
            params.onCompleteParams = [
                "{self}", 
                callback
            ];
            params.onCompleteScope = this;
            var anim = TweenMax[type](obj, time, params);
            anim.data = "anim" + this._animCount;
            this._animations[anim.data] = anim;
            ;
            this._animCount++;
            function onComplete(tween, callback) {
                this._animations[tween.data] = null;
                delete this._animations[tween.data];
                var num = 0;
                for(var k in this._animations) {
                    if(this._animations[k].data) {
                        num++;
                    }
                }
                if(callback) {
                    callback();
                }
                if(num == 0) {
                    this.enableInput();
                }
            }
        };
        BoardDisplay.prototype.onAnimComplete = function () {
            var _this = this;
            this._timeline.clear();
            this._gameboard.checkMoves();
            if(this._checkMatch) {
                if(this._gameboard.numMoves == 0) {
                    this._gameboard.removeBoard();
                    this._screenFX.showMessage(this._scene.globalStrings.game.messages.outOfMoves);
                    TweenMax.delayedCall(0.5, function () {
                        return _this._gameboard.fill();
                    });
                } else {
                    this.enableInput();
                    this.enableHint();
                }
                this._checkMatch = false;
            } else {
                this.enableInput();
                this.enableHint();
            }
        };
        BoardDisplay.prototype.removeImage = function (imgID) {
            var img = this._scene.get(imgID);
            if(img) {
                img.destroy();
            }
        };
        BoardDisplay.prototype.getRowAt = function (y) {
            return Math.min(this._gameboard.numRows, this._gameboard.numRows - Math.ceil((y - this._displayY) / this._cellHeight) + 1);
        };
        BoardDisplay.prototype.getColumnAt = function (x) {
            return Math.min(this._gameboard.numColumns, Math.ceil((x - this._displayX) / this._cellWidth));
        };
        BoardDisplay.prototype.getCellX = function (column) {
            return this._displayX + (column - 1) * this._cellWidth;
        };
        BoardDisplay.prototype.getCellY = function (row) {
            return this._displayY + (this._gameboard.numRows - row) * this._cellHeight;
        };
        BoardDisplay.prototype.updateSelection = function () {
            if(this._inputEnabled && this._inputData.isDown) {
                var current = this._inputData.current;
                var start = this._inputData.start;
                var row = Math.max(this.getRowAt(current.y), 1);
                var column = Math.max(this.getColumnAt(current.x), 1);
                var piece = this._gameboard.getPieceAt(row, column);
                if(piece) {
                    if(!piece.selected) {
                        this._gameboard.selectPiece(piece.id);
                    } else {
                        this._gameboard.deselectAllAfter(piece.id);
                    }
                }
            }
        };
        BoardDisplay.prototype.updateGraphics = function () {
            if(this._inputEnabled && this._inputData.isDown) {
                var current = this._inputData.current;
                var start = this._inputData.start;
                var row = this.getRowAt(start.y);
                var column = this.getColumnAt(start.x);
                if(this._inputData.moveDir == "hor") {
                    this.shiftRow(row, current.x - start.x);
                } else if(this._inputData.moveDir == "vert") {
                    this.shiftColumn(column, current.y - start.y);
                }
            }
        };
        BoardDisplay.prototype.shiftRow = function (row, value, snap) {
            if (typeof snap === "undefined") { snap = false; }
            var r = this._gameboard.getRow(row);
            for(var i = 0; i < r.length; i++) {
                var pieceID = r[i];
                var piece = this._gameboard.getPiece(pieceID);
                var img = this._scene.get("piece" + pieceID);
                var dup = this._scene.get("piece" + pieceID + "copy");
                if(!img) {
                    continue;
                }
                var leftBound = this._displayX;
                var rightBound = this._displayX + this._gameboard.numColumns * this._cellWidth;
                var origX = this._displayX + (piece.column - 1) * this._cellWidth;
                var newX = Skylanders.Gameboard.loopSum(origX, value, rightBound - 1, leftBound - 1);
                var onLeft = newX + this._cellWidth > leftBound && newX < leftBound;
                var onRight = newX + this._cellWidth > rightBound && newX < rightBound;
                img.scale = 1;
                img.alpha = 1;
                img.zIndex = 10;
                dup.scale = 1;
                dup.alpha = 1;
                dup.x = -this._cellWidth;
                dup.y = -this._cellHeight;
                dup.visible = false;
                if(onLeft || onRight) {
                    var bound = onLeft ? leftBound : rightBound;
                    var opposing = bound == leftBound ? rightBound : leftBound;
                    var overage = newX + this._cellWidth - bound;
                    newX = bound - (onLeft ? 0 : this._cellWidth);
                    img.scale = onLeft ? overage / this._cellWidth : 1 - overage / this._cellWidth;
                    img.alpha = onLeft ? overage / this._cellWidth : 1 - overage / this._cellWidth;
                    img.zIndex = 9;
                    if(img.scale < 0) {
                        img.scale = 0;
                    }
                    if(img.alpha < 0) {
                        img.alpha = 0;
                    }
                    dup.scale = 1 - img.scale;
                    dup.alpha = 1 - img.alpha;
                    dup.visible = true;
                    dup.x = opposing;
                    dup.y = img.y;
                }
                img.x = newX;
            }
        };
        BoardDisplay.prototype.shiftColumn = function (column, value, snap) {
            if (typeof snap === "undefined") { snap = false; }
            var c = this._gameboard.getColumn(column);
            for(var i = 0; i < c.length; i++) {
                var pieceID = c[i];
                var piece = this._gameboard.getPiece(pieceID);
                var img = this._scene.get("piece" + pieceID);
                var dup = this._scene.get("piece" + pieceID + "copy");
                if(!img) {
                    continue;
                }
                var topBound = this._displayY;
                var bottomBound = this._displayY + this._gameboard.numRows * this._cellHeight;
                var origY = this._displayY + (this._gameboard.numRows - piece.row) * this._cellHeight;
                var newY = Skylanders.Gameboard.loopSum(origY, value, bottomBound - 1, topBound - 1);
                var onTop = newY + this._cellWidth > topBound && newY < topBound;
                var onBottom = newY + this._cellWidth > bottomBound && newY < bottomBound;
                img.scale = 1;
                img.alpha = 1;
                img.zIndex = 10;
                dup.scale = 1;
                dup.alpha = 1;
                dup.x = -this._cellWidth;
                dup.y = -this._cellHeight;
                dup.visible = false;
                if(onTop || onBottom) {
                    var bound = onTop ? topBound : bottomBound;
                    var opposing = bound == topBound ? bottomBound : topBound;
                    var overage = newY + this._cellHeight - bound;
                    newY = bound - (onTop ? 0 : this._cellHeight);
                    img.zIndex = 9;
                    img.scale = onTop ? overage / this._cellHeight : 1 - overage / this._cellHeight;
                    img.alpha = onTop ? overage / this._cellHeight : 1 - overage / this._cellHeight;
                    if(img.scale < 0) {
                        img.scale = 0;
                    }
                    if(img.alpha < 0) {
                        img.alpha = 0;
                    }
                    dup.scale = 1 - img.scale;
                    dup.alpha = 1 - img.alpha;
                    dup.visible = true;
                    dup.x = img.x;
                    dup.y = opposing;
                }
                img.y = newY;
            }
        };
        BoardDisplay.prototype.setInputRect = function () {
            if(!this._inputRect) {
                this._inputRect = Skylanders.ScreenUtil.makeRect(this._scene, "inputRect" + this.name, "#FF0000", this._cellWidth * this._gameboard.numColumns, this._cellHeight * this._gameboard.numRows, {
                    alpha: 0,
                    zIndex: 100,
                    x: this._displayX,
                    y: this._displayY
                });
                this._inputComponent = this._inputRect.create(Avota.InputComponent, this._scene.inputManager);
                this._inputComponent.inputDown.add(this.onDown, this);
                this._inputComponent.inputUp.add(this.onUp, this);
                this._inputComponent.inputOut.add(this.onOut, this);
                this._inputRect.addComponent(this._inputComponent, Avota.EngineConstants.INPUT);
            }
        };
        BoardDisplay.prototype.updateInputs = function () {
            if(!this._inputEnabled) {
                return;
            }
            var input = this._scene.inputManager;
            if(this._inputData.isDown) {
                var current = this._inputData.current;
                var start = this._inputData.start;
                current.setTo(input.inputX, input.inputY);
                if(!this._inputData.moveDir && current.distanceTo(start) > this._moveThreshold) {
                    this._inputData.thresholdCrossed = true;
                    if(Math.abs(current.x - start.x) > Math.abs(current.y - start.y)) {
                        this._inputData.moveDir = "hor";
                    } else {
                        this._inputData.moveDir = "vert";
                    }
                }
                if(!input.isInputDown) {
                }
            }
        };
        BoardDisplay.prototype.onDown = function (sprite, x, y, id) {
            if(!this._inputEnabled) {
                return;
            }
            if(!this._inputData.isDown) {
                this.disableHint();
                this._inputData.isDown = true;
                this._inputData.start = new Avota.Point(x, y);
                this._inputData.current = new Avota.Point(x, y);
                this._inputData.moveDir = null;
                this._inputData.thresholdCrossed = false;
            }
        };
        BoardDisplay.prototype.onOut = function (sprite, x, y, id) {
            if(!this._inputEnabled) {
                return;
            }
            if(this._inputData.isDown) {
                this.onUp(sprite, x, y, id);
            }
        };
        BoardDisplay.prototype.onUp = function (sprite, x, y, id) {
            if(!this._inputEnabled) {
                return;
            }
            this._inputData.isDown = false;
            var start = this._inputData.start;
            var current = this._inputData.current;
            current.setTo(x, y);
            if(this._inputData.thresholdCrossed) {
            }
            this.enableHint();
            this.confirmSelection();
        };
        BoardDisplay.prototype.confirmSelection = function () {
            this._gameboard.executeSelection();
        };
        BoardDisplay.prototype.confirmShift = function () {
            var start = this._inputData.start;
            var current = this._inputData.current;
            var row = this.getRowAt(start.y);
            var column = this.getColumnAt(start.x);
            var topBound = this._displayY;
            var bottomBound = this._displayY + this._gameboard.numRows * this._cellHeight;
            var leftBound = this._displayX;
            var rightBound = this._displayX + this._gameboard.numColumns * this._cellWidth;
            var endRow = this.getRowAt(Skylanders.Gameboard.loopSum(start.y, current.y - start.y, bottomBound, topBound));
            var endColumn = this.getColumnAt(Skylanders.Gameboard.loopSum(start.x, current.x - start.x, rightBound, leftBound));
            var dr = endRow - row;
            var dc = endColumn - column;
            if(this._inputData.moveDir == "hor") {
                if(this._gameboard.getMatchesFromMove("row", row, dc).numPieces > 0) {
                    this.shiftRow(row, dc * this._cellWidth);
                    this._gameboard.shiftRow(row, dc);
                    this._gameboard.executeMatches();
                } else {
                    this.shiftRow(row, 0);
                }
            } else if(this._inputData.moveDir == "vert") {
                if(this._gameboard.getMatchesFromMove("column", column, dr).numPieces > 0) {
                    this.shiftColumn(column, -dr * this._cellHeight);
                    this._gameboard.shiftColumn(column, dr);
                    this._gameboard.executeMatches();
                } else {
                    this.shiftColumn(column, 0);
                }
            }
        };
        return BoardDisplay;
    })(Avota.GameEntity);
    Skylanders.BoardDisplay = BoardDisplay;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var RaceDisplay = (function (_super) {
        __extends(RaceDisplay, _super);
        function RaceDisplay(racerWorld, scene, spriteConfig, timeManager, name) {
            if (typeof name === "undefined") { name = RaceDisplay.NAME; }
                _super.call(this, timeManager, name);
            this._worldX = 0;
            this._focusOffset = 20;
            this._spritesheets = {
            };
            this._imagebank = {
            };
            this._bgLayers = [];
            this._behaviors = {
            };
            this._racerWorld = racerWorld;
            this._scene = scene;
            this._spriteConfig = spriteConfig;
            this._racerWorld.entitySignal.add(this.entityHandler, this);
            this._racerWorld.addCategory("display", function (ent) {
                return ent.display != null && ent.display != "";
            });
            this.addBehavior("bonus", this.bonus);
            this.addBehavior("js_special", this.js_special);
            this.addBehavior("pilotedVehicle", this.pilotedVehicle);
            this.addBehavior("removeOnEnd", this.removeOnEnd);
        }
        RaceDisplay.NAME = "RaceDisplay";
        RaceDisplay.prototype.setupBG = function (layers) {
            for(var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                this.setBGLayer(layer.image, layer.amount, layer.spacing, layer.scrollWidth, layer.scrollSpeed, layer.startX, layer.startY, layer.zIndex);
            }
        };
        RaceDisplay.prototype.setBGLayer = function (imageID, amount, spacing, scrollWidth, scrollSpeed, startX, startY, zIndex) {
            if (typeof scrollSpeed === "undefined") { scrollSpeed = 1; }
            if (typeof startX === "undefined") { startX = 0; }
            if (typeof startY === "undefined") { startY = 0; }
            if (typeof zIndex === "undefined") { zIndex = 10; }
            if(Avota.EnvUtil.isMobile && this._bgLayers.length >= 4) {
                return;
            }
            var layer = {
            };
            layer.scrollSpeed = scrollSpeed;
            layer.images = [];
            layer.scrollWidth = scrollWidth;
            layer.spacing = spacing;
            for(var i = 0; i < amount; i++) {
                var name = "BGLayer" + imageID + i;
                var image = Skylanders.ScreenUtil.makeImage(this._scene, name, imageID, {
                    zIndex: zIndex,
                    x: startX + i * (layer.spacing || 0),
                    y: startY
                });
                layer.images.push(name);
                layer.scrollWidth = !layer.scrollWidth ? image.width : layer.scrollWidth;
                layer.spacing = !layer.spacing ? image.width : layer.spacing;
            }
            this._bgLayers.push(layer);
        };
        RaceDisplay.prototype.entityHandler = function (eventID, entityID) {
            switch(eventID) {
                case Skylanders.EntitySignals.ADDED:
                    var entity = this._racerWorld.getEntity(entityID);
                    if(entity.display && entity.display != "") {
                        var definition = this._spriteConfig.displayDefinitions[entity.display];
                        if(!definition) {
                            console.error("No definition found for", entity.display, "on entity", entity.id);
                            return;
                        }
                        this.makeSprite(entity.id, definition, {
                            x: entity.id == "player" ? this._focusOffset : entity.x,
                            y: entity.y,
                            zIndex: 20 - (entity.lane || entity.z)
                        });
                    }
                    break;
                case Skylanders.EntitySignals.REMOVED:
                    var sprite = this._scene.get(entityID);
                    if(!sprite) {
                        return;
                    }
                    sprite.destroy();
                    break;
            }
        };
        RaceDisplay.prototype.update = function () {
            var player = this._racerWorld.getEntity("player");
            var track = this._racerWorld.track;
            if(player) {
                this._worldX = Skylanders.Gameboard.loopSum(player.x - this._focusOffset, 0, track.trackLength);
            }
            this._racerWorld.traverseEntities(this.updateGraphic, this, "display");
            this.scrollBGLayers();
        };
        RaceDisplay.prototype.scrollBGLayers = function () {
            var layers = this._bgLayers;
            var player = this._racerWorld.getEntity("player");
            for(var i = 0; i < layers.length; i++) {
                var layer = layers[i];
                for(var j = 0; j < layer.images.length; j++) {
                    var image = this._scene.get(layer.images[j]);
                    image.x = Skylanders.Gameboard.loopSum(image.x, Math.round(-player.vx * layer.scrollSpeed), this._scene.screenWidth, -layer.scrollWidth);
                }
            }
        };
        RaceDisplay.prototype.updateGraphic = function (entity) {
            var img = this._scene.get(entity.id);
            if(!img) {
                return;
            }
            var definition = this._spriteConfig.displayDefinitions[entity.display];
            if(this.isOnScreen(entity)) {
                img.x = this.getScreenPosFor(entity);
                img.y = entity.y;
                img.visible = true;
                img.active = true;
            } else {
                img.visible = false;
                img.active = false;
            }
            if(definition.options) {
                img.x += definition.options.offsetX || 0;
                img.y += definition.options.offsetY || 0;
            }
            if(entity.state == Skylanders.EntityState.UNLOCKED || entity.state == Skylanders.EntityState.COLLECTED || entity.state == Skylanders.EntityState.DESTROYED || entity.state == Skylanders.EntityState.INACTIVE) {
                img.visible = false;
            }
            if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                img.visible = this._racerWorld.frameCount % 5 == 0;
            }
            if(definition.behavior) {
                this.executeBehavior(entity, definition.behavior);
            }
        };
        RaceDisplay.prototype.bonus = function (entity) {
            var img = this._scene.get(entity.id);
            if(!img) {
                return;
            }
            var definition = this._spriteConfig.displayDefinitions[entity.display];
            var anim = img;
            if(!anim.isAnimating) {
                anim.play(definition.data[1]);
            }
        };
        RaceDisplay.prototype.pilotedVehicle = function (entity) {
            var img = this._scene.get(entity.id);
            if(!img) {
                return;
            }
            if(!this._scene.get(entity.id + "driver")) {
                var racerID = entity.id == "player" ? Skylanders.PlayerData.getSelectedCharacter() : entity.id == "rival" ? Skylanders.PlayerData.getRivalCharacter() : Skylanders.PlayerData.getRivalCharacter(2);
                var vehicleID = entity.type;
                var vehicleData = Skylanders.GameData.getData("vehicles")[vehicleID];
                var racerData = Skylanders.GameData.getData("characters")[racerID];
                var definitionID = vehicleData.code + "_driver_" + racerData.code;
                var definition = Skylanders.SpriteConfig.getDisplayDefinition(definitionID);
                if(!definition) {
                    return;
                }
                var sprite = this.makeSprite(entity.id + "driver", definition, {
                    zIndex: img.zIndex - 1
                });
                img.addChild(sprite);
            }
        };
        RaceDisplay.prototype.removeOnEnd = function (entity) {
            var img = this._scene.get(entity.id);
            var anim = img;
            if(!anim.isAnimating) {
                this._racerWorld.removeEntity(entity.id);
            }
        };
        RaceDisplay.prototype.js_special = function (entity) {
            var img = this._scene.get(entity.id);
            if(!img) {
                return;
            }
            var definition = this._spriteConfig.displayDefinitions[entity.display];
            var anim = img;
            if(!anim.isAnimating) {
                anim.play(definition.data[1]);
            }
            var deathFrame = entity.getEndFrame("lifeSpan");
            if(anim.currentAnimation.name != definition.data[2] && deathFrame - this._racerWorld.frameCount < entity.getDuration("lifeSpan") / 3) {
                anim.play(definition.data[2]);
                anim.currentAnimation.duration = Skylanders.GameData.framesToSeconds(deathFrame - this._racerWorld.frameCount);
            }
        };
        RaceDisplay.prototype.addBehavior = function (behavior, command) {
            this._behaviors[behavior] = command;
        };
        RaceDisplay.prototype.executeBehavior = function (entity, behavior) {
            if(!this._behaviors[behavior]) {
                return;
            }
            this._behaviors[behavior].call(this, entity);
        };
        RaceDisplay.prototype.makeSprite = function (id, definition, params) {
            var sprite;
            switch(definition.type) {
                case "image":
                    if(Array.isArray(definition.data)) {
                        sprite = Skylanders.ScreenUtil.makeGroup(this._scene, id, params);
                        for(var i = 0; i < definition.data.length; i++) {
                            var imageID = definition.data[i];
                            var imagedata = Skylanders.SpriteConfig.getImageData(id);
                            var child = Skylanders.ScreenUtil.makeImage(this._scene, sprite.name + imageID, imagedata ? imagedata.image : imageID, {
                                zIndex: sprite.zIndex + i
                            });
                            sprite.addChild(child);
                        }
                    } else {
                        var imageData = this.search("name", definition.data, this._spriteConfig.images);
                        sprite = Skylanders.ScreenUtil.makeImage(this._scene, id, imageData ? imageData.image : definition.data, params);
                    }
                    break;
                case "anim":
                    var animations = [];
                    var spritesheets = [];
                    if(Array.isArray(definition.data)) {
                        for(var i = 0; i < definition.data.length; i++) {
                            var anim = definition.data[i];
                            var animdata = Skylanders.SpriteConfig.getAnimationData(anim);
                            if(!animdata) {
                                console.error("Cannot find anim data for ", anim);
                                continue;
                            }
                            var ssdata = Skylanders.SpriteConfig.getSpriteSheetData(animdata.spritesheet);
                            animations.push(animdata);
                            var spritesheet = Skylanders.SpriteConfig.makeSpriteSheet(this._scene, ssdata.name);
                            spritesheets.push(spritesheet);
                        }
                    } else {
                        var animdata = Skylanders.SpriteConfig.getAnimationData(definition.data);
                        if(animdata) {
                            var ssdata = Skylanders.SpriteConfig.getSpriteSheetData(animdata.spritesheet);
                            animations.push(animdata);
                            spritesheets.push(Skylanders.SpriteConfig.makeSpriteSheet(this._scene, ssdata.name));
                        } else {
                            console.error("Cannot find anim data for ", definition.data);
                        }
                    }
                    sprite = Skylanders.ScreenUtil.makeSprite(this._scene, id, spritesheets, animations, params);
                    break;
            }
            if(definition.options) {
                sprite.x += definition.options.offsetX || 0;
                sprite.y += definition.options.offsetY || 0;
                sprite.scale = definition.options.scale || 1;
            }
            return sprite;
        };
        RaceDisplay.prototype.isOnScreen = function (entity) {
            var track = this._racerWorld.track;
            var img = this._scene.get(entity.id);
            if(!img) {
                return false;
            }
            var x = entity.x;
            var imgBound = Skylanders.Gameboard.loopSum(x, img.width, track.trackLength);
            var screenBound = Skylanders.Gameboard.loopSum(this._worldX, this._scene.screenWidth, track.trackLength);
            var screenDistToEnd = track.getDistanceToPoint(this._worldX, track.trackLength);
            var imageDistToEnd = track.getDistanceToPoint(x, track.trackLength);
            if(screenDistToEnd < this._scene.screenWidth) {
                if(imageDistToEnd < img.width) {
                    return true;
                } else {
                    return track.getDistanceToPoint(screenBound, track.trackLength) < imageDistToEnd || track.getDistanceToPoint(imgBound, track.trackLength) < screenDistToEnd;
                }
            } else {
                if(imageDistToEnd < img.width) {
                    return this._worldX < imgBound || screenBound > x;
                } else {
                    return imgBound > this._worldX && x < this._worldX + this._scene.screenWidth;
                }
            }
        };
        RaceDisplay.prototype.getScreenPosFor = function (entity) {
            var track = this._racerWorld.track;
            var img = this._scene.get(entity.id);
            if(!img) {
                return;
            }
            var x = entity.x;
            var imgBound = Skylanders.Gameboard.loopSum(x, img.width, track.trackLength);
            var screenBound = Skylanders.Gameboard.loopSum(this._worldX, this._scene.screenWidth, track.trackLength);
            var screenDistToEnd = track.getDistanceToPoint(this._worldX, track.trackLength);
            var imageDistToEnd = track.getDistanceToPoint(x, track.trackLength);
            var screenX = -1000;
            if(screenDistToEnd < this._scene.screenWidth) {
                if(imageDistToEnd < img.width) {
                    screenX = x - this._worldX;
                } else {
                    screenX = track.getDistanceToPoint(screenBound, track.trackLength) < imageDistToEnd ? screenDistToEnd + x : x - this._worldX;
                }
            } else {
                if(imageDistToEnd < img.width) {
                    screenX = screenBound > x ? x - this._worldX : imgBound - this._worldX - img.width;
                } else {
                    screenX = x - this._worldX;
                }
            }
            return screenX;
        };
        RaceDisplay.prototype.search = function (property, value, array) {
            for(var i = 0; i < array.length; i++) {
                var obj = array[i];
                if(obj[property] && obj[property] === value) {
                    return obj;
                }
            }
            return null;
        };
        return RaceDisplay;
    })(Avota.GameEntity);
    Skylanders.RaceDisplay = RaceDisplay;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var RacerWorld = (function () {
        function RacerWorld(params) {
            this.entities = {
            };
            this.entityList = [];
            this.categoryLists = {
            };
            this.categoryChecks = {
            };
            this.entitySignal = new Avota.Signal();
            this.eventSignal = new Avota.Signal();
            this.entitySignal.add(this.onEntitySignal, this);
            this.entityCount = 0;
            this.raceStarted = false;
            this.scoreData = new Skylanders.ScoreData();
        }
        RacerWorld.NAME = "RacerWorld";
        RacerWorld.DEFAULT_CAMERA = "camera000";
        RacerWorld.prototype.onEntitySignal = function (eventID, entityID) {
            switch(eventID) {
                case EntitySignals.RELIST:
                    this.listEntity(this.getEntity(entityID));
                    break;
            }
        };
        RacerWorld.prototype.addBuilder = function (builder) {
            this.builder = builder;
        };
        RacerWorld.prototype.newTrack = function (params) {
            this.track = new Skylanders.Track(params);
            if(this.builder) {
                this.builder.build(this);
            }
        };
        RacerWorld.prototype.addCategory = function (name, check, context) {
            this.categoryLists[name] = [];
            this.categoryChecks[name] = {
                check: check,
                context: context
            };
            this.traverseEntities(this.listEntity, this);
        };
        RacerWorld.prototype.addEntity = function (type, id, params) {
            params.trackLength = this.track.trackLength;
            var entity = new type(id, params);
            if(entity.lane && !params.x) {
                entity.x = this.track.getLaneCenterX(entity.lane);
            }
            this.entities[id] = entity;
            this.entityList.push(entity.id);
            this.listEntity(entity);
            this.updateSegment(entity);
            this.entityCount++;
            entity.entitySignal = this.entitySignal;
            this.entitySignal.dispatch(EntitySignals.ADDED, entity.id);
            return entity;
        };
        RacerWorld.prototype.addEffectEntity = function (target, display, params) {
            var properties = {
            };
            properties.display = display;
            properties.target = target.id;
            properties.x = target.x;
            properties.y = target.y;
            properties.z = target.z;
            properties.behavior = "decay";
            properties.lifeSpan = 60;
            for(var k in params) {
                properties[k] = params[k];
            }
            var effect = this.addEntity(Skylanders.TrackEntity, display + this.entityCount, properties);
            target.addChild(effect.id);
            return effect;
        };
        RacerWorld.prototype.listEntity = function (entity) {
            for(var k in this.categoryLists) {
                var data = this.categoryChecks[k];
                if(data.check.call(data.context, entity)) {
                    var add = true;
                    for(var i = 0; i < this.categoryLists[k].length; i++) {
                        if(this.categoryLists[k][i] == entity.id) {
                            add = false;
                            break;
                        }
                    }
                    if(add) {
                        this.categoryLists[k].push(entity.id);
                    }
                }
            }
        };
        RacerWorld.prototype.getEntitiesInCategory = function (category) {
            var entities = this.categoryLists[category] || [];
            for(var i = entities.length - 1; i >= 0 && entities.length > 0; i--) {
                var entity = this.getEntity(entities[i]);
                if(!entity) {
                    entities.splice(i, 1);
                }
            }
            return entities;
        };
        RacerWorld.prototype.removeEntity = function (id) {
            if(!this.entities[id]) {
                return;
            }
            var entity = this.getEntity(id);
            var segment = this.track.getSegment(entity.segmentIndex);
            delete segment.entities[entity.id];
            delete this.entities[id];
            this.entitySignal.dispatch(EntitySignals.REMOVED, id);
        };
        RacerWorld.prototype.getEntity = function (id) {
            return this.entities[id];
        };
        RacerWorld.prototype.updateSegment = function (entity) {
            if(entity.segmentIndex != null) {
                delete this.track.segmentData[entity.segmentIndex].entities[entity.id];
            }
            var segment = this.track.findSegment(entity.z);
            segment.entities[entity.id] = true;
            entity.segmentIndex = segment.index;
        };
        RacerWorld.prototype.traverseEntities = function (command, context, category) {
            var list = this.categoryLists[category] || this.entityList;
            for(var i = 0; i < list.length; i++) {
                var entity = this.getEntity(list[i]);
                if(entity) {
                    command.call(context, entity);
                } else {
                    list.splice(i, 1);
                    i--;
                    continue;
                }
            }
        };
        RacerWorld.prototype.getEntitiesForSegment = function (segmentIndex) {
            var segment = this.track.segmentData[segmentIndex];
            return segment.entities;
        };
        RacerWorld.prototype.update = function (delta) {
            if (typeof delta === "undefined") { delta = 0; }
            this.uptime = (this.uptime || 0) + delta;
            this.frameCount = (this.frameCount || 0) + 1;
        };
        RacerWorld.prototype.end = function () {
            this._ended = true;
        };
        RacerWorld.prototype.hasEnded = function () {
            return this._ended;
        };
        RacerWorld.prototype.destroy = function () {
            this.entities = null;
            this.categoryChecks = null;
            this.categoryLists = null;
            this.eventSignal.removeAll();
            this.entitySignal.removeAll;
            this.entitySignal = null;
            this.eventSignal = null;
            this.track.destroy();
            this.builder = null;
        };
        return RacerWorld;
    })();
    Skylanders.RacerWorld = RacerWorld;    
    var EntitySignals = (function () {
        function EntitySignals() { }
        EntitySignals.ADDED = "added";
        EntitySignals.REMOVED = "removed";
        EntitySignals.RELIST = "relist";
        EntitySignals.GET_BONUS = "getbonus";
        EntitySignals.GET_ITEM = "getitem";
        EntitySignals.PROGRESS_PLACEMENT = "progress_placement";
        EntitySignals.DAMAGED = "damaged";
        EntitySignals.CRASHED = "crashed";
        EntitySignals.SHIELDED = "shielded";
        EntitySignals.COLLIDED = "collided";
        EntitySignals.ATTACK = "attack";
        EntitySignals.SHOT_FIRED = "shotFired";
        EntitySignals.SHOT_HIT = "shotHit";
        EntitySignals.DESTROYED = "destroyed";
        EntitySignals.BOOST = "boost";
        EntitySignals.SLOWED = "slowed";
        return EntitySignals;
    })();
    Skylanders.EntitySignals = EntitySignals;    
    var EventSignals = (function () {
        function EventSignals() { }
        EventSignals.RACE_BEGIN = "race_begin";
        EventSignals.RACE_END = "race_end";
        EventSignals.LAP_COMPLETED = "lapCompleted";
        EventSignals.ENEMY_APPROACH = "enemyApproach";
        return EventSignals;
    })();
    Skylanders.EventSignals = EventSignals;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var Track = (function () {
        function Track(params) {
            this.segmentData = [];
            this.name = params.name || "NAME NOT SPECIFIED";
            this.laps = params.laps || 2;
            this.lanes = params.lanes || 3;
            this.roadWidth = params.roadWidth || 2000;
            this.segmentLength = params.segmentLength || 5;
            this.rumbleLength = params.rumbleLength || 3;
            this.mapImage = params.mapImage || "HUDMap1";
            this.colors = params.colors || {
                LIGHT: {
                    road: '#6b6b6b',
                    rumble: '#10AA10',
                    offroad: '#10AA10',
                    lane: '#FFFFFF'
                },
                DARK: {
                    road: '#696969',
                    rumble: '#009A00',
                    offroad: '#009A00'
                }
            };
            this.roadSettings = params.roadSettings || {
                length: {
                    none: 0,
                    short: 25,
                    medium: 50,
                    long: 100
                },
                curve: {
                    none: 0,
                    easy: 2,
                    medium: 4,
                    hard: 6
                },
                elevation: {
                    none: 0,
                    low: 20,
                    medium: 40,
                    high: 60
                }
            };
            this.roadData = params.roadData;
            this.elementDefinitions = this.parseElementDefinitions(params.elementDefinitions);
            this.elementPositions = this.parseElementPositioning(params.elementPositioning);
            this.bgDefinitions = this.parseElementDefinitions(params.bgDefinitions);
            this.bgPositions = this.parseElementPositioning(params.bgPositioning);
            this.parseMapData(params.mapNodeList || []);
            this.build();
        }
        Track.NAME = "Track";
        Object.defineProperty(Track.prototype, "trackLength", {
            get: function () {
                return this.segmentData.length * this.segmentLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Track.prototype, "laneWidth", {
            get: function () {
                return this.roadWidth / this.lanes;
            },
            enumerable: true,
            configurable: true
        });
        Track.prototype.easeIn = function (a, b, percent) {
            return a + (b - a) * Math.pow(percent, 2);
        };
        Track.prototype.easeOut = function (a, b, percent) {
            return a + (b - a) * (1 - Math.pow(1 - percent, 2));
        };
        Track.prototype.easeInOut = function (a, b, percent) {
            return a + (b - a) * ((-Math.cos(percent * Math.PI) / 2) + 0.5);
        };
        Track.prototype.toInt = function (obj, def) {
            if(obj !== null) {
                var x = parseInt(obj, 10);
                if(!isNaN(x)) {
                    return x;
                }
            }
            return this.toInt(def, 0);
        };
        Object.defineProperty(Track.prototype, "lastY", {
            get: function () {
                return (this.segmentData.length == 0) ? 0 : this.segmentData[this.segmentData.length - 1].p2.world.y;
            },
            enumerable: true,
            configurable: true
        });
        Track.prototype.parseMapData = function (nodeList) {
            this.mapData = {
            };
            var nodes = [];
            var totalDist = 0;
            for(var i = 0; i < nodeList.length; i++) {
                var data = {
                };
                var node = nodeList[i];
                data.point = new Avota.Point(node.x, node.y);
                if(i != 0) {
                    data.distToPrev = Avota.Point.distanceBetween(data.point, nodes[i - 1].point);
                    totalDist += data.distToPrev;
                    data.dist = totalDist;
                } else {
                    data.distToPrev = 0;
                    data.dist = 0;
                }
                nodes.push(data);
            }
            this.mapData.nodes = nodes;
            this.mapData.totalDist = totalDist;
        };
        Track.prototype.parseElementDefinitions = function (definitions) {
            var data = {
            };
            if(!definitions) {
                return;
            }
            for(var k in definitions) {
                var definition = definitions[k];
                data[k] = [];
                for(var i = 0; i < definition.length; i++) {
                    data[k].push(new TrackElementDefinition(definition[i]));
                }
            }
            return data;
        };
        Track.prototype.parseElementPositioning = function (positioning) {
            var data = [];
            if(!positioning) {
                return;
            }
            for(var i = 0; i < positioning.length; i++) {
                data.push(new TrackElementPositioning(positioning[i]));
            }
            return data;
        };
        Track.prototype.getLaneCenterX = function (lane) {
            return -(this.roadWidth) + (lane * this.laneWidth) * 2 - this.laneWidth;
        };
        Track.prototype.getShortestDistanceBetween = function (z1, z2) {
            var a = z1 > z2 ? z1 : z2;
            var b = z1 < z2 ? z1 : z2;
            var dist1 = a - b;
            var dist2 = this.trackLength - a + b;
            return dist1 < dist2 ? dist1 : dist2;
        };
        Track.prototype.getLongestDistanceBetween = function (z1, z2) {
            var a = z1 > z2 ? z1 : z2;
            var b = z1 < z2 ? z1 : z2;
            var dist1 = a - b;
            var dist2 = this.trackLength - a + b;
            return dist1 > dist2 ? dist1 : dist2;
        };
        Track.prototype.getDistanceToPoint = function (z, pointZ) {
            return z > pointZ ? pointZ + this.trackLength - z : pointZ - z;
        };
        Track.prototype.getDistanceToEnd = function (z, markerZ, lapsCompleted) {
            var totalDistance = this.getTotalDistance();
            var distanceTraveled = this.getDistanceTraveled(z, markerZ, lapsCompleted);
            return totalDistance - distanceTraveled;
        };
        Track.prototype.getDistanceTraveled = function (z, markerZ, lapsCompleted) {
            var distanceFromMarker = z < markerZ ? this.trackLength + z : z;
            var distanceTraveled = Math.abs(markerZ - distanceFromMarker) + this.trackLength * lapsCompleted;
            return distanceTraveled;
        };
        Track.prototype.getTotalDistance = function () {
            return this.trackLength * this.laps;
        };
        Track.prototype.copySegmentData = function () {
            return this.segmentData.concat();
        };
        Track.prototype.addSegment = function (curve, height) {
            if (typeof curve === "undefined") { curve = 0; }
            if (typeof height === "undefined") { height = 0; }
            var n = this.segmentData.length;
            this.segmentData.push({
                index: n,
                p1: {
                    world: {
                        y: this.lastY,
                        z: n * this.segmentLength
                    },
                    camera: {
                    },
                    screen: {
                    }
                },
                p2: {
                    world: {
                        y: height || 0,
                        z: (n + 1) * this.segmentLength
                    },
                    camera: {
                    },
                    screen: {
                    }
                },
                curve: curve || 0,
                color: Math.floor(n / this.rumbleLength) % 2 ? this.colors.DARK : this.colors.LIGHT,
                entities: {
                }
            });
        };
        Track.prototype.findSegment = function (z) {
            if(z < 0) {
                z = this.trackLength + z;
            }
            return this.segmentData[Math.floor(z / this.segmentLength) % this.segmentData.length];
        };
        Track.prototype.getSegment = function (index) {
            if(index >= this.segmentData.length) {
                index = index - this.segmentData.length;
            }
            if(index < 0) {
                index = this.segmentData.length + index;
            }
            return this.segmentData[index];
        };
        Track.prototype.getSegmentHeight = function (index) {
            return this.getSegment(index).p1.world.y;
        };
        Track.prototype.build = function () {
            for(var n = 0; n < this.roadData.length; n++) {
                var data = this.roadData[n];
                this.addRoad(this.roadSettings.length[data.length], this.roadSettings.length[data.length], this.roadSettings.length[data.length], this.roadSettings.curve[data.curve] * (data.dirX == "left" ? -1 : 1) || 0, this.roadSettings.elevation[data.elevation] * (data.dirY == "up" ? 1 : -1) || 0);
            }
        };
        Track.prototype.addRoad = function (enter, hold, leave, curve, height) {
            var n;
            var startY = this.lastY;
            var endY = startY + this.toInt(height, 0) * this.segmentLength;
            var total = enter + hold + leave;
            for(n = 0; n < enter; n++) {
                this.addSegment(this.easeIn(0, curve, n / enter), this.easeInOut(startY, endY, n / total));
            }
            for(n = 0; n < hold; n++) {
                this.addSegment(curve, this.easeInOut(startY, endY, (enter + n) / total));
            }
            for(n = 0; n < leave; n++) {
                this.addSegment(this.easeInOut(curve, 0, n / leave), this.easeInOut(startY, endY, (enter + hold + n) / total));
            }
        };
        Track.prototype.destroy = function () {
            this.segmentData = null;
            this.name = null;
            this.laps = null;
            this.lanes = null;
            this.roadWidth = null;
            this.segmentLength = null;
            this.rumbleLength = null;
            this.colors = null;
            this.roadSettings = null;
            this.roadData = null;
            this.elementDefinitions = null;
            this.elementPositions = null;
            this.bgDefinitions = null;
            this.bgPositions = null;
        };
        return Track;
    })();
    Skylanders.Track = Track;    
    var TrackElementDefinition = (function () {
        function TrackElementDefinition(params) {
            this.id = params.id;
            this.type = params.type;
            this.lane = params.lane;
            this.amount = params.amount || 1;
            this.display = params.display;
            this.distance = params.distance || 1;
            this.spacing = params.spacing || 0;
            this.class = params.class;
            this.x = params.x || 0;
            this.y = params.y || 0;
            this.z = params.z || 0;
            this.scale = params.scale || 1;
        }
        TrackElementDefinition.RACER = "racer";
        TrackElementDefinition.ALLY = "ally";
        TrackElementDefinition.STRUCTURE = "structure";
        TrackElementDefinition.GEARBIT = "gearbit";
        TrackElementDefinition.POWERPOD = "powerpod";
        TrackElementDefinition.MYSTERY_BOX = "mysterybox";
        TrackElementDefinition.BOOST_PAD = "boostpad";
        TrackElementDefinition.ICE_FLOOR = "icefloor";
        TrackElementDefinition.ROUGH_FLOOR = "roughfloor";
        TrackElementDefinition.RACE_MARKER = "racemarker";
        TrackElementDefinition.ENEMY = "enemy";
        TrackElementDefinition.PROJECTILE = "projectile";
        TrackElementDefinition.EXPLOSION = "explosion";
        TrackElementDefinition.BG_ELEMENT = "bgElement";
        return TrackElementDefinition;
    })();
    Skylanders.TrackElementDefinition = TrackElementDefinition;    
    var TrackElementPositioning = (function () {
        function TrackElementPositioning(params) {
            this.definitionName = params.definition;
            this.padding = params.padding || 0;
        }
        return TrackElementPositioning;
    })();
    Skylanders.TrackElementPositioning = TrackElementPositioning;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TrackEntity = (function () {
        function TrackEntity(id, params, name) {
            if (typeof name === "undefined") { name = TrackEntity.NAME; }
            this.overlapX = 0;
            this.overlapY = 0;
            this.overlapZ = 0;
            this.name = name;
            this.id = id;
            this.setup(params);
        }
        TrackEntity.NAME = "TrackEntity";
        TrackEntity.INPUT_LEFT = 0;
        TrackEntity.INPUT_RIGHT = 1;
        TrackEntity.INPUT_UP = 2;
        TrackEntity.INPUT_DOWN = 3;
        TrackEntity.INPUT_FIRE = 4;
        TrackEntity.INPUT_FIRE2 = 5;
        Object.defineProperty(TrackEntity.prototype, "maxHP", {
            get: function () {
                return this._maxHP;
            },
            set: function (v) {
                this._maxHP = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TrackEntity.prototype, "hp", {
            get: function () {
                return this._hp;
            },
            set: function (v) {
                this._hp = v;
                this._hp = this.constrain(this._hp, 0, this._maxHP);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TrackEntity.prototype, "maxEnergy", {
            get: function () {
                return this._maxEnergy;
            },
            set: function (v) {
                this._maxEnergy = v;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TrackEntity.prototype, "energy", {
            get: function () {
                return this._energy;
            },
            set: function (v) {
                this._energy = v;
                this._energy = this.constrain(this._energy, 0, this._maxEnergy);
            },
            enumerable: true,
            configurable: true
        });
        TrackEntity.prototype.setup = function (params) {
            this.x = params.x || 0;
            this.y = params.y || 0;
            this.z = params.z || 0;
            this.travelDistance = this.z > 0 ? this.z : 0;
            this.behavior = params.behavior;
            this.physics = params.physics;
            this.vx = 0;
            this.vy = 0;
            this.vz = 0;
            this.offsetX = params.offsetX || 0;
            this.offsetY = params.offsetY || 0;
            this.offsetZ = params.offsetZ || 0;
            this.turnSpeed = params.turnSpeed || 10;
            this.maxSpeed = params.maxSpeed || 17;
            this.cruiseSpeed = params.cruiseSpeed || this.maxSpeed * 0.95;
            this.boostSpeed = params.boostSpeed || this.maxSpeed * 1.5;
            this.boostAccel = params.boostAccel || this.boostSpeed / 50;
            this.boostDuration = params.boostDuration || 60;
            this.accel = params.accel || this.maxSpeed / 100;
            this.breaking = params.breaking || -(this.maxSpeed / 50);
            this.decel = params.decel || -(this.maxSpeed / 200);
            this.trackLength = params.trackLength;
            this.class = params.class;
            this.owner = params.owner;
            this.target = params.target;
            this._maxHP = params.maxHP || 1000;
            this._hp = this._maxHP;
            this._maxEnergy = params.maxEnergy || 1000;
            this._energy = this._maxEnergy;
            this.weight = params.weight || 100;
            this.place = 0;
            this.maxEnginePower = 4;
            this.enginePower = this.maxEnginePower;
            this.engineDecay = this.maxEnginePower / 100;
            this.engineRecovery = this.engineDecay;
            this.primaryAttack = params.primaryAttack || "SFShoot";
            this.secondaryAttack = params.secondaryAttack || "SFCharge";
            this.display = params.display || "";
            this.lockToTrack = true;
            this.distanceModifier = 1;
            this.slowModifier = 1;
            this.bonusList = [];
            this.durationList = params.durationList || {
                boost: params.boostDuration || 60,
                lifeSpan: params.lifeSpan || 0,
                primaryWeaponDelay: params.primaryWeaponDelay || 8,
                crash: params.crashDuration || 180,
                skid: params.skidDuration || 100,
                rough: params.rough || 5,
                invincible: 25
            };
            this.endFrameList = {
            };
            this.speedList = params.speedList || {
                neutral: this.maxSpeed,
                boost: params.boostSpeed || this.maxSpeed * 1.5,
                skid: params.skidSpeed || 350,
                stun: params.stun || 120
            };
            this.friction = params.friction || 0;
            this.children = [];
            this.hitboxHeight = params.hitboxHeight || 200;
            this.hitboxWidth = params.hitboxWidth || 200;
            this.lapsCompleted = -1;
            this.lane = params.lane || 0;
            this.type = params.type;
            this.inputMap = [
                false, 
                false, 
                false, 
                false, 
                false
            ];
            this.commands = {
            };
            this.state = EntityState.NEUTRAL;
            this.startParams = params;
            this.removeAllCommands();
        };
        TrackEntity.prototype.refresh = function () {
            this.setup(this.startParams);
        };
        TrackEntity.prototype.accelerate = function () {
            if(this.vx < this.maxSpeed * this.distanceModifier * this.slowModifier) {
                this.vx += this.accel * this.distanceModifier * this.enginePower * this.slowModifier;
            }
            this.enginePower -= this.engineDecay;
            if(this.enginePower < 1) {
                this.enginePower = 1;
            }
        };
        TrackEntity.prototype.boost = function (accel, topSpeed) {
            if(this.vx < topSpeed * this.slowModifier) {
                this.vx += accel * this.slowModifier;
            }
        };
        TrackEntity.prototype.recoverEngine = function () {
            this.enginePower += this.engineRecovery;
            if(this.enginePower > this.maxEnginePower) {
                this.enginePower = this.maxEnginePower;
            }
        };
        TrackEntity.prototype.cutSpeed = function (value) {
            if (typeof value === "undefined") { value = 20; }
            this.vx -= value;
            if(this.vx < 0) {
                this.vx = 0;
            }
        };
        TrackEntity.prototype.shove = function (value) {
            if (typeof value === "undefined") { value = 100; }
            this.vx = value;
        };
        TrackEntity.prototype.ramOffTrack = function (vz, vy, vx) {
            if (typeof vz === "undefined") { vz = 100; }
            if (typeof vy === "undefined") { vy = 300; }
            if (typeof vx === "undefined") { vx = 0; }
            this.state = EntityState.DESTROYED;
            this.behavior = "decay";
            this.vy = vy;
            this.vz = vz;
            this.vx = vx;
            this.lockToTrack = false;
            this.entitySignal.dispatch(Skylanders.EntitySignals.RELIST, this.id);
        };
        TrackEntity.prototype.getSpeedCategory = function (speedID) {
            return this.speedList[speedID];
        };
        TrackEntity.prototype.setEndFrame = function (delayID, currentFrameCount, customAmount) {
            this.endFrameList[delayID] = currentFrameCount + (customAmount != null ? customAmount : this.durationList[delayID] || 0) / Skylanders.GameData.FRAME_BUFFER;
        };
        TrackEntity.prototype.getEndFrame = function (delayID) {
            return this.endFrameList[delayID];
        };
        TrackEntity.prototype.getDuration = function (delayID) {
            return this.durationList[delayID];
        };
        TrackEntity.prototype.hasEndFrame = function (delayID) {
            return this.endFrameList[delayID] != 0 && this.endFrameList[delayID] != null;
        };
        TrackEntity.prototype.clearEndFrame = function (delayID) {
            this.endFrameList[delayID] = null;
            delete this.endFrameList[delayID];
        };
        TrackEntity.prototype.pastEndFrame = function (delayID, currentFrameCount) {
            return !this.endFrameList[delayID] || this.endFrameList[delayID] < currentFrameCount;
        };
        TrackEntity.prototype.travel = function (v, trackLength) {
            this.z = this.loopSum(this.z, v, trackLength);
            this.travelDistance += v;
            if(this.travelDistance < 0) {
                this.travelDistance = 0;
            }
        };
        TrackEntity.prototype.loopSum = function (v, inc, max) {
            var result = v + inc;
            while(result >= max) {
                result -= max;
            }
            while(result < 0) {
                result += max;
            }
            return result;
        };
        TrackEntity.prototype.constrain = function (v, min, max) {
            var result = v;
            if(v < min) {
                result = min;
            }
            if(v > max) {
                result = max;
            }
            return result;
        };
        TrackEntity.prototype.addCommand = function (type) {
            if(this.hasCommand(type)) {
                return;
            }
            this.commands[type] = new EntityCommand(type);
        };
        TrackEntity.prototype.removeCommand = function (type) {
            delete this.commands[type];
        };
        TrackEntity.prototype.removeAllCommands = function () {
            for(var k in this.commands) {
                delete this.commands[k];
            }
        };
        TrackEntity.prototype.hasCommand = function (type) {
            return this.commands[type] != null;
        };
        TrackEntity.prototype.takeDamage = function (value) {
            this.hp -= value;
            this.entitySignal.dispatch(Skylanders.EntitySignals.DAMAGED, this.id, {
                amount: value
            });
        };
        TrackEntity.prototype.gainHP = function (value) {
            this.hp += value;
        };
        TrackEntity.prototype.getHPScale = function () {
            return this.hp / this.maxHP;
        };
        TrackEntity.prototype.refillHP = function () {
            this.hp = this._maxHP;
        };
        TrackEntity.prototype.canPerformAttack = function (cost) {
            return this._energy >= cost;
        };
        TrackEntity.prototype.useEnergy = function (amount) {
            this.energy -= amount;
        };
        TrackEntity.prototype.gainEnergy = function (amount) {
            this.energy += amount;
        };
        TrackEntity.prototype.getEnergyScale = function () {
            return this._energy / this._maxEnergy;
        };
        TrackEntity.prototype.addChild = function (entityID) {
            for(var i = 0; i < this.children.length; i++) {
                var child = this.children[i];
                if(child == entityID) {
                    return;
                }
            }
            this.children.push(entityID);
        };
        TrackEntity.prototype.removeChild = function (entityID) {
            for(var i = this.children.length - 1; i >= 0 && this.children.length > 0; i--) {
                var child = this.children[i];
                if(child == entityID) {
                    this.children.splice(i, 1);
                    break;
                }
            }
        };
        return TrackEntity;
    })();
    Skylanders.TrackEntity = TrackEntity;    
    var EntityState = (function () {
        function EntityState() { }
        EntityState.NEUTRAL = "neutral";
        EntityState.CRASH = "crash";
        EntityState.SKID = "skid";
        EntityState.COLLECTED = "collected";
        EntityState.DESTROYED = "destroyed";
        EntityState.UNLOCKED = "unlocked";
        EntityState.UNLOCKABLE = "unlockable";
        EntityState.APPROACHING = "approaching";
        EntityState.INACTIVE = "inactive";
        EntityState.ACTIVE = "active";
        return EntityState;
    })();
    Skylanders.EntityState = EntityState;    
    var EntityCommand = (function () {
        function EntityCommand(type) {
            this.type = type;
        }
        EntityCommand.ACCELERATE = "accelerate";
        EntityCommand.DECELERATE = "decelerate";
        EntityCommand.BREAK = "break";
        EntityCommand.UNLOCK = "unlock";
        EntityCommand.LINEAR_ADVANCE = "linearAdvance";
        EntityCommand.SKID = "skid";
        EntityCommand.STUN = "stun";
        EntityCommand.CRASH = "crash";
        EntityCommand.ROUGH_TERRAIN = "rough";
        EntityCommand.INVINCIBLE = "invincible";
        EntityCommand.SLOW = "slow";
        EntityCommand.MOVE_LEFT = "move_left";
        EntityCommand.MOVE_RIGHT = "move_right";
        EntityCommand.FIRE_PRIMARY = "fire_primary";
        EntityCommand.FIRE_SECONDARY = "fire_secondary";
        EntityCommand.BONUS_ELIXIR = "elixir";
        EntityCommand.BONUS_HOURGLASS = "hourglass";
        EntityCommand.BONUS_JUKEBOX = "jukebox";
        EntityCommand.BONUS_SHIELD = "shield";
        EntityCommand.BONUS_SHOE = "shoe";
        EntityCommand.BONUS_KEY = "key";
        EntityCommand.PAD_BOOST = "padboost";
        EntityCommand.BOOST_ATTACK = "boostattack";
        return EntityCommand;
    })();
    Skylanders.EntityCommand = EntityCommand;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TrackBuilder = (function () {
        function TrackBuilder() {
            this.buildHandlers = {
            };
        }
        TrackBuilder.NAME = "TrackBuilder";
        TrackBuilder.prototype.addBuildHandler = function (type, handler) {
            this.buildHandlers[type] = handler;
        };
        TrackBuilder.prototype.build = function (rw) {
            this.placeElements(rw, rw.track.elementDefinitions, rw.track.elementPositions);
            this.placeElements(rw, rw.track.bgDefinitions, rw.track.bgPositions);
        };
        TrackBuilder.prototype.placeElements = function (rw, definitions, positioning) {
            var segmentIndex = 0;
            var maxSegments = rw.track.segmentData.length;
            var track = rw.track;
            for(var i = 0; i < positioning.length; i++) {
                var elementPos = positioning[i];
                var definition = definitions[elementPos.definitionName];
                if(!definition) {
                    console.error("[TrackBuilder] Cannot find definition for", elementPos.definitionName);
                    continue;
                }
                var segmentInc = 0;
                segmentIndex += (elementPos.padding || 0);
                for(var j = 0; j < definition.length; j++) {
                    var element = definition[j];
                    var elementSegmentIndex = (segmentIndex + element.distance * track.rumbleLength);
                    if(this.buildHandlers[element.type]) {
                        this.buildHandlers[element.type].call(this, rw, element, elementSegmentIndex);
                    }
                    var maxDistance = element.distance * track.rumbleLength + element.amount * element.spacing * track.rumbleLength;
                    segmentInc = !segmentInc || maxDistance > segmentInc ? maxDistance : segmentInc;
                }
                segmentIndex += segmentInc;
                if(segmentIndex >= track.segmentData.length) {
                    break;
                }
            }
        };
        return TrackBuilder;
    })();
    Skylanders.TrackBuilder = TrackBuilder;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var SCTrackBuilder = (function (_super) {
        __extends(SCTrackBuilder, _super);
        function SCTrackBuilder() {
                _super.call(this);
            this.addBuildHandler(Skylanders.TrackElementDefinition.RACER, this.buildRacer);
            this.addBuildHandler(Skylanders.TrackElementDefinition.STRUCTURE, this.buildStructure);
            this.addBuildHandler(Skylanders.TrackElementDefinition.GEARBIT, this.buildGearbit);
            this.addBuildHandler(Skylanders.TrackElementDefinition.POWERPOD, this.buildPowerpod);
            this.addBuildHandler(Skylanders.TrackElementDefinition.BOOST_PAD, this.buildBoostPad);
            this.addBuildHandler(Skylanders.TrackElementDefinition.ICE_FLOOR, this.buildIceFloor);
            this.addBuildHandler(Skylanders.TrackElementDefinition.ROUGH_FLOOR, this.buildRoughFloor);
            this.addBuildHandler(Skylanders.TrackElementDefinition.RACE_MARKER, this.buildRacemarker);
            this.addBuildHandler(Skylanders.TrackElementDefinition.ENEMY, this.buildEnemy);
            this.addBuildHandler(Skylanders.TrackElementDefinition.MYSTERY_BOX, this.buildMysteryBox);
            this.addBuildHandler(Skylanders.TrackElementDefinition.BG_ELEMENT, this.buildBGElement);
            this.addBuildHandler(Skylanders.TrackElementDefinition.ALLY, this.buildAlly);
        }
        SCTrackBuilder.NAME = "SCTrackBuilder";
        SCTrackBuilder.prototype.buildBGElement = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var x = distance * rw.track.segmentLength;
                var params = {
                };
                params.type = element.type;
                params.class = element.class;
                params.display = element.display;
                params.x = x;
                params.z = element.z;
                params.y = rw.track.getSegmentHeight(distance) + element.y;
                var bgEntity = rw.addEntity(Skylanders.TrackEntity, element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildMysteryBox = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                var params = {
                };
                params.type = element.type;
                params.class = Skylanders.TrackElementDefinition.MYSTERY_BOX;
                params.display = "mysterybox";
                params.x = element.x;
                params.z = z;
                params.y = rw.track.getSegmentHeight(distance);
                params.behavior = "respawnItem";
                params.lane = element.lane;
                var bgEntity = rw.addEntity(Skylanders.TrackEntity, element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildPowerpod = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                var params = {
                };
                params.type = element.type;
                params.class = Skylanders.TrackElementDefinition.POWERPOD;
                params.display = "powerpod";
                params.x = element.x;
                params.z = z;
                params.y = rw.track.getSegmentHeight(distance);
                params.lane = element.lane;
                var bgEntity = rw.addEntity(Skylanders.TrackEntity, element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildRacer = function (rw, element, elementSegmentIndex) {
            var x = elementSegmentIndex * rw.track.segmentLength;
            var params = {
            };
            var vehicleID;
            var display;
            switch(element.id) {
                case "player":
                    vehicleID = Skylanders.PlayerData.getSelectedVehicle();
                    display = Skylanders.GameData.getDisplayIDForVehicleCombo(Skylanders.PlayerData.getSelectedVehicle(), Skylanders.PlayerData.getActiveUpgrades());
                    break;
                case "rival":
                    vehicleID = Skylanders.PlayerData.getRivalVehicle();
                    display = Skylanders.GameData.getDisplayIDForVehicleCombo(vehicleID, Skylanders.GameData.getOpponentData("rival").upgrades);
                    break;
                default:
                    vehicleID = Skylanders.PlayerData.getRivalVehicle(2);
                    display = Skylanders.GameData.getDisplayIDForVehicleCombo(vehicleID, Skylanders.GameData.getOpponentData("rival").upgrades);
                    break;
            }
            var vehicle = Skylanders.GameData.getVehicleData(vehicleID);
            if(!display) {
                display = vehicle.display;
            }
            for(var k in vehicle) {
                params[k] = vehicle[k];
            }
            if(element.id == "player" || element.id == "rival") {
                var upgrades = element.id == "player" ? Skylanders.PlayerData.getActiveUpgrades() : Skylanders.GameData.getOpponentData("rival").upgrades;
            }
            params.display = display;
            params.type = vehicleID;
            params.class = Skylanders.TrackElementDefinition.RACER;
            params.behavior = element.id == "player" ? "control" : "cpu";
            params.lane = element.lane;
            params.x = x;
            params.y = (rw.track.lanes - element.lane) * 2.5;
            params.physics = Skylanders.RacerPhysics.GENERIC_OBJECT;
            params.maxSpeed = element.id == "player" ? vehicle.maxSpeed : vehicle.maxSpeed / 2;
            params.cruiseSpeed = element.id == "player" ? params.maxSpeed * 0.68 : vehicle.maxSpeed * 0.83;
            var racer = rw.addEntity(Skylanders.TrackEntity, element.id, params);
            if(racer.id == "player") {
            }
            if(Skylanders.PlayerData.hasSuperChargedCombo() && (racer.id == "player" || racer.id == "rival")) {
            }
        };
        SCTrackBuilder.prototype.buildStructure = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                var params = {
                };
                var structureData = Skylanders.GameData.getData("structures")[element.class || Skylanders.GameData.getDataList("structures")[0]];
                params.type = element.class || Skylanders.GameData.getDataList("structures")[0];
                params.class = Skylanders.TrackElementDefinition.STRUCTURE;
                params.display = element.display || structureData.defaultDisplay;
                params.z = z;
                params.y = rw.track.getSegmentHeight(distance);
                params.lane = element.lane;
                var entity = rw.addEntity(Skylanders.TrackEntity, element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildGearbit = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var x = distance * rw.track.segmentLength;
                var itemData = Skylanders.GameData.getData("items")[element.class || "gearbit"];
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, {
                    display: itemData.display,
                    lane: element.lane,
                    x: x,
                    class: "gearbit",
                    type: element.class || "gearbit",
                    y: 50,
                    z: 0,
                    behavior: "gearbit"
                });
            }
        };
        SCTrackBuilder.prototype.buildAlly = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var x = distance * rw.track.segmentLength;
                var allyData = Skylanders.GameData.getData("allies")[element.class];
                var params = {
                };
                params.type = element.class;
                params.lane = element.lane;
                params.display = allyData.display || element.display || "ally";
                params.physics = Skylanders.RacerPhysics.GENERIC_OBJECT;
                params.x = x;
                params.y = 0;
                params.class = Skylanders.TrackElementDefinition.ALLY;
                params.behavior = "ally";
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildEnemy = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var x = distance * rw.track.segmentLength;
                var enemies = Skylanders.GameData.getData("vehicles");
                var enemy = enemies[element.class];
                var params = {
                };
                for(var k in enemy) {
                    params[k] = enemy[k];
                }
                params.type = element.class;
                params.lane = element.lane;
                params.x = x;
                params.y = 0;
                params.class = Skylanders.TrackElementDefinition.ENEMY;
                params.behavior = enemy.behavior || "hostile";
                params.physics = Skylanders.RacerPhysics.GENERIC_OBJECT;
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, params);
            }
        };
        SCTrackBuilder.prototype.buildBoostPad = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, {
                    display: "boostpad",
                    lane: element.lane,
                    z: z,
                    class: "boostpad",
                    y: rw.track.getSegmentHeight(distance)
                });
            }
        };
        SCTrackBuilder.prototype.buildIceFloor = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, {
                    display: "icefloor",
                    lane: element.lane,
                    z: z,
                    class: "icefloor",
                    y: rw.track.getSegmentHeight(distance)
                });
            }
        };
        SCTrackBuilder.prototype.buildRoughFloor = function (rw, element, elementSegmentIndex) {
            for(var num = 0; num < element.amount; num++) {
                var distance = elementSegmentIndex + num * element.spacing * rw.track.rumbleLength;
                var z = distance * rw.track.segmentLength;
                rw.addEntity(Skylanders.TrackEntity, element.id || element.type + rw.entityCount, {
                    display: "roughfloor",
                    lane: element.lane,
                    z: z,
                    class: "roughfloor",
                    y: rw.track.getSegmentHeight(distance)
                });
            }
        };
        SCTrackBuilder.prototype.buildRacemarker = function (rw, element, elementSegmentIndex) {
            var distance = elementSegmentIndex;
            var x = distance * rw.track.segmentLength;
            var params = {
            };
            params.x = x;
            params.class = "racemarker";
            params.display = "racemarker";
            rw.addEntity(Skylanders.TrackEntity, "racemarker", params);
        };
        return SCTrackBuilder;
    })(Skylanders.TrackBuilder);
    Skylanders.SCTrackBuilder = SCTrackBuilder;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var RacerPhysics = (function () {
        function RacerPhysics(racerWorld, collidableObjects, objectsOfInterest) {
            this._racerWorld = racerWorld;
            this._collisionList = {
            };
            this._updateList = {
            };
            this._collisionHandlers = {
            };
            this._racerList = [];
            this._positionTracker = {
            };
            this._collidableObjects = collidableObjects;
            if(!this._collidableObjects) {
                this._collidableObjects = {
                };
                this._collidableObjects[RacerPhysics.GENERIC_OBJECT] = true;
                this._collidableObjects[RacerPhysics.RIGID_OBJECT] = true;
                this._collidableObjects[RacerPhysics.PHASABLE_OBJECT] = true;
                this._collidableObjects[RacerPhysics.TEXTURE_OBJECT] = true;
                this._collidableObjects[RacerPhysics.DESTRUCTABLE_OBJECT] = true;
            }
            this._objectsOfInterest = collidableObjects;
            if(!this._objectsOfInterest) {
                this._objectsOfInterest = {
                };
                this._objectsOfInterest[RacerPhysics.GENERIC_OBJECT] = true;
                this._objectsOfInterest[RacerPhysics.PHASABLE_OBJECT] = true;
                this._objectsOfInterest[RacerPhysics.DESTRUCTABLE_OBJECT] = true;
            }
            racerWorld.addCategory("racemarker", function (entity) {
                return entity.id.match("racemarker");
            });
            racerWorld.addCategory("racers", function (entity) {
                return entity.class == Skylanders.TrackElementDefinition.RACER;
            });
            racerWorld.addCategory("objectsOfInterest", (function (entity) {
                return this._objectsOfInterest[entity.physics] == true;
            }).bind(this));
            this.addCollisionHandler(this.genericVgeneric, RacerPhysics.GENERIC_OBJECT, RacerPhysics.GENERIC_OBJECT);
        }
        RacerPhysics.NAME = "RacerPhysics";
        RacerPhysics.GENERIC_OBJECT = "generic";
        RacerPhysics.RIGID_OBJECT = "rigid";
        RacerPhysics.PHASABLE_OBJECT = "phasable";
        RacerPhysics.COLLECTABLE_OBJECT = "collectable";
        RacerPhysics.TEXTURE_OBJECT = "texture";
        RacerPhysics.DESTRUCTABLE_OBJECT = "destructable";
        RacerPhysics.prototype.addCollisionHandler = function (handler, physicsType1, physicsType2) {
            this._collisionHandlers[physicsType1 + "," + physicsType2] = handler;
        };
        RacerPhysics.prototype.shouldUpdate = function (entity) {
            return (!this._updateList[entity.id]) && (entity.physics != RacerPhysics.RIGID_OBJECT) && ((entity.x != entity.x + (entity.class == Skylanders.TrackElementDefinition.RACER && entity.vx > 0 ? entity.vx : entity.cruiseSpeed)) || (entity.y != entity.y + entity.vy) || (entity.z != entity.z + entity.vz));
        };
        RacerPhysics.prototype.update = function () {
            this._racerWorld.traverseEntities(this.physics, this, "objectsOfInterest");
            this.handleCollisions();
            this.applyVectors();
            this.updatePlacement();
        };
        RacerPhysics.prototype.physics = function (entity) {
            if(this._collidableObjects[entity.physics]) {
                this.detectCollisions(entity);
            }
        };
        RacerPhysics.prototype.detectCollisions = function (entity) {
            var prevPos = this._positionTracker[entity.id];
            if(prevPos) {
            }
            if(this.shouldUpdate(entity)) {
                this._updateList[entity.id] = true;
            }
        };
        RacerPhysics.prototype.handleCollisions = function () {
            for(var k in this._collisionList) {
                var entityIDs = k.split(",");
                var entity1 = this._racerWorld.getEntity(entityIDs[0]);
                var entity2 = this._racerWorld.getEntity(entityIDs[1]);
                if(entity1 && entity2) {
                    for(var handlerName in this._collisionHandlers) {
                        var definitions = handlerName.split(",");
                        if((definitions[0].match(entity1.physics) && definitions[1].match(entity2.physics)) || (definitions[0].match(entity2.physics) && definitions[1].match(entity1.physics))) {
                            this._collisionHandlers[handlerName].call(this, entity1, entity2);
                            break;
                        }
                    }
                    if(this.shouldUpdate(entity1)) {
                        this._updateList[entity1.id] = true;
                    }
                    if(this.shouldUpdate(entity2)) {
                        this._updateList[entity2.id] = true;
                    }
                }
                delete this._collisionList[k];
            }
        };
        RacerPhysics.prototype.refreshTrack = function () {
            var enemies = this._racerWorld.getEntitiesInCategory("enemies");
            var allies = this._racerWorld.getEntitiesInCategory("allies");
            for(var i = 0; i < allies.length; i++) {
                var ally = this._racerWorld.getEntity(allies[i]);
                if(!ally) {
                    continue;
                }
                if(ally.state != Skylanders.EntityState.UNLOCKED) {
                    ally.refresh();
                }
            }
        };
        RacerPhysics.prototype.applyVectors = function () {
            var track = this._racerWorld.track;
            var racemarker = this._racerWorld.getEntity(this._racerWorld.getEntitiesInCategory("racemarker")[0]);
            for(var k in this._updateList) {
                var entity = this._racerWorld.getEntity(k);
                if(entity) {
                    var trackPosition = entity.z > 0 ? entity.z : track.trackLength - entity.z;
                    var baseSegment = track.findSegment(entity.z);
                    var basePercent = RacerPhysics.percentRemaining(trackPosition, track.segmentLength);
                    if(!this._positionTracker[entity.id]) {
                        this._positionTracker[entity.id] = {
                            x: entity.x,
                            y: entity.y,
                            z: entity.z,
                            vx: entity.vx,
                            vy: entity.vy,
                            vz: entity.vz
                        };
                    }
                    var prevPos = this._positionTracker[entity.id];
                    prevPos.x = entity.x;
                    prevPos.y = entity.y;
                    prevPos.z = entity.z;
                    prevPos.vx = entity.vx;
                    prevPos.vy = entity.vy;
                    prevPos.vz = entity.vz;
                    if(entity.vx != 0) {
                        if(entity.vx > 0) {
                            entity.vx -= entity.friction;
                            if(entity.vx < 0) {
                                entity.vx = 0;
                            }
                        } else {
                            entity.vx += entity.friction;
                            if(entity.vx > 0) {
                                entity.vx = 0;
                            }
                        }
                    }
                    if((entity.class == Skylanders.TrackElementDefinition.RACER) && entity.vx < entity.cruiseSpeed && !entity.hasCommand(Skylanders.EntityCommand.SLOW) && !entity.hasCommand(Skylanders.EntityCommand.CRASH) && this._racerWorld.raceStarted) {
                        entity.vx = entity.cruiseSpeed;
                    }
                    entity.x = entity.loopSum(entity.x, entity.vx * Skylanders.GameData.FRAME_BUFFER, track.trackLength);
                    entity.x = entity.loopSum(entity.x, entity.overlapX, track.trackLength);
                    var segmentY = RacerPhysics.interpolate(baseSegment.p1.world.y, baseSegment.p2.world.y, basePercent);
                    if(entity.lockToTrack) {
                        entity.y += entity.vy * Skylanders.GameData.FRAME_BUFFER;
                        entity.y += entity.overlapY;
                    } else {
                        entity.vy -= 9.81;
                        entity.y += entity.vy * Skylanders.GameData.FRAME_BUFFER;
                        entity.y += entity.overlapY;
                        if(entity.y < segmentY) {
                            entity.y = segmentY;
                            entity.vy *= -0.86;
                        }
                    }
                    entity.overlapX = 0;
                    entity.overlapY = 0;
                    entity.overlapZ = 0;
                    this._racerWorld.updateSegment(entity);
                    var currRelZ = track.getDistanceToPoint(entity.x, racemarker.x);
                    var prevRelZ = track.getDistanceToPoint(prevPos.x, racemarker.x);
                    var markerRelZ = track.getDistanceToPoint(racemarker.x, prevPos.vx > 0 ? entity.x : prevPos.x);
                    var distTraversed = track.getShortestDistanceBetween(prevPos.x, entity.x);
                    if(markerRelZ < distTraversed) {
                        if(currRelZ > prevRelZ) {
                            entity.lapsCompleted++;
                            if(entity.id == "player") {
                                if(entity.lapsCompleted > 0) {
                                    this.refreshTrack();
                                    this._racerWorld.eventSignal.dispatch(Skylanders.EventSignals.LAP_COMPLETED);
                                }
                            }
                        } else if(prevRelZ > currRelZ) {
                            entity.lapsCompleted--;
                            if(entity.id == "player") {
                            }
                        }
                    }
                    if(entity.lapsCompleted >= track.laps && !entity.hasEndFrame("raceEnd")) {
                        entity.setEndFrame("raceEnd", this._racerWorld.frameCount, 0);
                    }
                    if(!entity.hasCommand(Skylanders.EntityCommand.ACCELERATE)) {
                        entity.recoverEngine();
                    }
                    if(this._racerWorld.raceEndFrame && !entity.hasEndFrame("raceEnd")) {
                        var distanceToEnd = track.getDistanceToEnd(entity.x, racemarker.x, entity.lapsCompleted);
                        var frames = distanceToEnd / (entity.vx * Skylanders.GameData.FRAME_BUFFER || 100);
                        entity.setEndFrame("raceEnd", this._racerWorld.frameCount, frames);
                    }
                    for(var i = entity.children.length - 1; i >= 0 && entity.children.length > 0; i--) {
                        var childID = entity.children[i];
                        var child = this._racerWorld.getEntity(childID);
                        if(!child) {
                            entity.children.splice(i, 1);
                            continue;
                        }
                        child.x = entity.x + child.offsetX;
                        child.y = entity.y + child.offsetY;
                        child.z = entity.z + child.offsetZ;
                        this._racerWorld.updateSegment(child);
                    }
                }
                delete this._updateList[k];
            }
        };
        RacerPhysics.prototype.updatePlacement = function () {
            if(this._racerWorld.raceEndFrame) {
                return;
            }
            var racers = this._racerWorld.getEntitiesInCategory("racers");
            this._racerList.length = 0;
            for(var i = 0; i < racers.length; i++) {
                var racer = this._racerWorld.getEntity(racers[i]);
                this._racerList.push(racer);
            }
            this._racerList.sort(this.sortRacersByPlace.bind(this));
            for(var i = 0; i < this._racerList.length; i++) {
                var racer = this._racerList[i];
                if(i + 1 < racer.place) {
                    racer.entitySignal.dispatch(Skylanders.EntitySignals.PROGRESS_PLACEMENT, racer.id);
                }
                racer.place = i + 1;
            }
        };
        RacerPhysics.prototype.sortRacersByPlace = function (a, b) {
            var racerWorld = this._racerWorld;
            var racemarker = racerWorld.getEntity(racerWorld.getEntitiesInCategory("racemarker")[0]);
            var aPos = racerWorld.track.getDistanceToEnd(a.x, racemarker.x, a.lapsCompleted);
            var bPos = racerWorld.track.getDistanceToEnd(b.x, racemarker.x, b.lapsCompleted);
            if(aPos > bPos) {
                return 1;
            }
            if(aPos < bPos) {
                return -1;
            }
            return 0;
        };
        RacerPhysics.prototype.genericVgeneric = function (entity1, entity2) {
            if(entity1.hasCommand(Skylanders.EntityCommand.INVINCIBLE) || entity2.hasCommand(Skylanders.EntityCommand.INVINCIBLE)) {
                return;
            }
            var aggressor = entity1.vz >= entity2.vz ? entity1 : entity2;
            var target = aggressor != entity1 ? entity1 : entity2;
        };
        RacerPhysics.prototype.genericVdestructable = function (entity1, entity2) {
            var destructable = entity1.physics == RacerPhysics.DESTRUCTABLE_OBJECT ? entity1 : entity2;
            var generic = entity1.physics == RacerPhysics.GENERIC_OBJECT ? entity1 : entity2;
        };
        RacerPhysics.prototype.genericVrigid = function (entity1, entity2) {
        };
        RacerPhysics.prototype.genericVphasable = function (entity1, entity2) {
            var phasable = entity1.physics == RacerPhysics.PHASABLE_OBJECT ? entity1 : entity2;
            var generic = phasable != entity1 ? entity1 : entity2;
            switch(phasable["class"]) {
                case Skylanders.TrackElementDefinition.ENEMY:
                    if(phasable.state != Skylanders.EntityState.DESTROYED && !generic.hasCommand(Skylanders.EntityCommand.CRASH) && !generic.hasCommand(Skylanders.EntityCommand.INVINCIBLE) && !generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD)) {
                        if(generic.hasCommand(Skylanders.EntityCommand.BOOST_ATTACK)) {
                            var attack1 = Skylanders.GameData.getAttackData(generic.primaryAttack);
                            var attack2 = Skylanders.GameData.getAttackData(generic.secondaryAttack);
                            var boostAttack = attack1.type == "boost" ? attack1 : attack2;
                            this._racerWorld.addEffectEntity(phasable, boostAttack.hitDisplay);
                            phasable.ramOffTrack(100, 200, 50);
                            phasable.setEndFrame("lifeSpan", this._racerWorld.frameCount, 120);
                        } else {
                            var enemyData = Skylanders.GameData.getData("enemies")[phasable.type];
                            generic.cutSpeed();
                            generic.takeDamage(enemyData.damage);
                            if(generic.id == "player") {
                                this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.DAMAGE_PENALTY);
                            }
                        }
                    } else {
                        if(generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD)) {
                            generic.entitySignal.dispatch(Skylanders.EntitySignals.SHIELDED, generic.id);
                        }
                    }
                    break;
                case Skylanders.TrackElementDefinition.PROJECTILE:
                    if(phasable.owner != generic.id) {
                        if(!generic.hasCommand(Skylanders.EntityCommand.MOVE_LEFT) && !generic.hasCommand(Skylanders.EntityCommand.MOVE_RIGHT) && !generic.hasCommand(Skylanders.EntityCommand.CRASH) && !generic.hasCommand(Skylanders.EntityCommand.INVINCIBLE)) {
                            var owner = this._racerWorld.getEntity(phasable.owner);
                            var attackData = Skylanders.GameData.getAttackData(phasable.type);
                            if(!generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD) && !generic.hasCommand(Skylanders.EntityCommand.BONUS_JUKEBOX)) {
                                generic.vz += phasable.vz * 0.02;
                                generic.cutSpeed();
                                generic.takeDamage(attackData.baseDamage);
                                if(phasable.owner == "player") {
                                    this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.HIT_OPPONENT);
                                }
                                if(generic.id == "player") {
                                    this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.DAMAGE_PENALTY);
                                }
                            } else if(generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD)) {
                                generic.entitySignal.dispatch(Skylanders.EntitySignals.SHIELDED, generic.id);
                            }
                            this._racerWorld.addEffectEntity(generic, Skylanders.GameData.getAttackData(phasable.type).hitDisplay);
                            if(attackData.explosive) {
                                var explosion = this._racerWorld.addEntity(Skylanders.TrackEntity, attackData.hitDisplay + this._racerWorld.entityCount, {
                                    display: attackData.hitDisplay,
                                    behavior: "decay",
                                    lifeSpan: attackData.explosionLifespan,
                                    x: generic.x,
                                    y: generic.y,
                                    z: generic.z,
                                    physics: RacerPhysics.PHASABLE_OBJECT,
                                    hitboxHeight: this._racerWorld.track.segmentLength * 3,
                                    class: Skylanders.TrackElementDefinition.EXPLOSION,
                                    owner: phasable.owner,
                                    type: phasable.type,
                                    friction: attackData.friction || 0
                                });
                            }
                        }
                        this._racerWorld.removeEntity(phasable.id);
                    }
                    break;
                case Skylanders.TrackElementDefinition.EXPLOSION:
                    if(phasable.owner != generic.id) {
                        if(!generic.hasCommand(Skylanders.EntityCommand.MOVE_LEFT) && !generic.hasCommand(Skylanders.EntityCommand.MOVE_RIGHT) && !generic.hasCommand(Skylanders.EntityCommand.CRASH) && !generic.hasCommand(Skylanders.EntityCommand.INVINCIBLE) && !generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD) && !generic.hasCommand(Skylanders.EntityCommand.BONUS_JUKEBOX)) {
                            var owner = this._racerWorld.getEntity(phasable.owner);
                            var attackData = Skylanders.GameData.getAttackData(phasable.type);
                            generic.vz += phasable.vz * 0.3;
                            generic.cutSpeed();
                            generic.takeDamage(attackData.baseDamage);
                            this._racerWorld.addEffectEntity(generic, Skylanders.GameData.getAttackData(phasable.type).hitDisplay);
                            if(phasable.owner == "player") {
                                this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.HIT_OPPONENT);
                            }
                            if(generic.id == "player") {
                                this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.DAMAGE_PENALTY);
                            }
                        } else {
                            if(generic.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD)) {
                                generic.entitySignal.dispatch(Skylanders.EntitySignals.SHIELDED, generic.id);
                            }
                        }
                    }
                    break;
            }
        };
        RacerPhysics.prototype.genericVcollectable = function (entity1, entity2) {
            var collectable = entity1.physics == RacerPhysics.COLLECTABLE_OBJECT ? entity1 : entity2;
            var generic = collectable != entity1 ? entity1 : entity2;
            switch(collectable["class"]) {
                case Skylanders.TrackElementDefinition.GEARBIT:
                    if(generic.id == "player" && collectable.state != Skylanders.EntityState.COLLECTED) {
                        var item = Skylanders.GameData.getData("items")[collectable.type];
                        collectable.state = Skylanders.EntityState.COLLECTED;
                        this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.GET_GEARBIT1);
                        this._racerWorld.scoreData.logGearbits("gearbit");
                        Skylanders.PlayerData.addCurrency(item.value);
                        generic.entitySignal.dispatch(Skylanders.EntitySignals.GET_ITEM, generic.id, {
                            item: collectable.type
                        });
                    }
                    break;
                case Skylanders.TrackElementDefinition.MYSTERY_BOX:
                    if(collectable.state != Skylanders.EntityState.COLLECTED) {
                        collectable.state = Skylanders.EntityState.COLLECTED;
                        this._racerWorld.addEffectEntity(generic, "prize_get", {
                            offsetY: -200
                        });
                        var bonuses = Avota.ArrayUtil.randomize(Skylanders.GameData.getBonusList().concat());
                        if(generic.bonusList.length == 0) {
                            generic.bonusList = Skylanders.GameData.getRandomizedBonusList();
                        }
                        generic.addCommand(generic.bonusList.pop());
                    }
                    break;
                case Skylanders.TrackElementDefinition.POWERPOD:
                    if(collectable.state != Skylanders.EntityState.COLLECTED) {
                        var item = Skylanders.GameData.getData("items")["powerpod"];
                        collectable.state = Skylanders.EntityState.COLLECTED;
                        this._racerWorld.addEffectEntity(generic, "powerpods_get_fx", {
                            offsetY: -200
                        });
                        generic.gainEnergy(item.value);
                        generic.entitySignal.dispatch(Skylanders.EntitySignals.GET_ITEM, generic.id, {
                            item: "powerpod"
                        });
                    }
                    break;
            }
        };
        RacerPhysics.prototype.genericVtexture = function (entity1, entity2) {
            var generic = entity1.physics == RacerPhysics.GENERIC_OBJECT ? entity1 : entity2;
            var texture = entity2 != generic ? entity2 : entity1;
            switch(texture["class"]) {
                case Skylanders.TrackElementDefinition.BOOST_PAD:
                    if(generic.hasCommand(Skylanders.EntityCommand.PAD_BOOST)) {
                        generic.boostEndFrame = this._racerWorld.frameCount + generic.boostDuration;
                    } else {
                        generic.addCommand(Skylanders.EntityCommand.PAD_BOOST);
                    }
                    break;
                case Skylanders.TrackElementDefinition.RACE_MARKER:
                    break;
                case Skylanders.TrackElementDefinition.ICE_FLOOR:
                    if(generic.hasCommand(Skylanders.EntityCommand.SKID)) {
                        generic.setEndFrame("skid", this._racerWorld.frameCount);
                    } else {
                        generic.addCommand(Skylanders.EntityCommand.SKID);
                    }
                    break;
                case Skylanders.TrackElementDefinition.ROUGH_FLOOR:
                    if(generic.hasCommand(Skylanders.EntityCommand.ROUGH_TERRAIN)) {
                        generic.setEndFrame("rough", this._racerWorld.frameCount);
                    } else {
                        generic.addCommand(Skylanders.EntityCommand.ROUGH_TERRAIN);
                    }
                    break;
            }
        };
        RacerPhysics.prototype.phasableVdestructable = function (entity1, entity2) {
            var phasable = entity1.physics == RacerPhysics.PHASABLE_OBJECT ? entity1 : entity2;
            var destructable = entity2 == phasable ? entity1 : entity2;
            switch(phasable["class"]) {
                case Skylanders.TrackElementDefinition.PROJECTILE:
                    var structureData = Skylanders.GameData.getData("structures")[destructable.type];
                    if(structureData.canShoot) {
                        this.projectileVEnemy(phasable, destructable);
                    } else {
                        this.projectileHit(phasable);
                        ;
                        this._racerWorld.removeEntity(phasable.id);
                    }
                    break;
            }
        };
        RacerPhysics.prototype.phaseableVphaseable = function (entity1, entity2) {
            switch(entity1["class"]) {
                case Skylanders.TrackElementDefinition.ENEMY:
                    switch(entity2.class) {
                        case Skylanders.TrackElementDefinition.PROJECTILE:
                            this.projectileVEnemy(entity2, entity1);
                            break;
                        case Skylanders.TrackElementDefinition.EXPLOSION:
                            this.explosionVEnemy(entity2, entity1);
                            break;
                    }
                    break;
                case Skylanders.TrackElementDefinition.PROJECTILE:
                    if(entity2.class == Skylanders.TrackElementDefinition.ENEMY) {
                        this.projectileVEnemy(entity1, entity2);
                    }
                    break;
                case Skylanders.TrackElementDefinition.EXPLOSION:
                    if(entity2.class == Skylanders.TrackElementDefinition.ENEMY) {
                        this.explosionVEnemy(entity1, entity2);
                    }
                    break;
            }
        };
        RacerPhysics.prototype.projectileVEnemy = function (projectile, enemy) {
            this.projectileHit(projectile);
            this.explosionVEnemy(projectile, enemy);
            this._racerWorld.removeEntity(projectile.id);
        };
        RacerPhysics.prototype.projectileHit = function (projectile) {
            var attackData = Skylanders.GameData.getAttackData(projectile.type);
            if(!attackData) {
                console.warn("[RacerPhysics] Attack data not found for:", projectile.type);
                return;
            }
            if(attackData.explosive) {
                var explosion = this._racerWorld.addEntity(Skylanders.TrackEntity, attackData.hitDisplay + this._racerWorld.entityCount, {
                    display: attackData.hitDisplay,
                    behavior: "decay",
                    lifeSpan: attackData.explosionLifespan,
                    hitboxHeight: this._racerWorld.track.segmentLength * 3,
                    x: projectile.x,
                    y: projectile.y,
                    z: projectile.z,
                    physics: RacerPhysics.PHASABLE_OBJECT,
                    class: Skylanders.TrackElementDefinition.EXPLOSION,
                    owner: projectile.owner,
                    type: projectile.type,
                    friction: attackData.friction || 0
                });
            }
        };
        RacerPhysics.prototype.explosionVEnemy = function (explosion, enemy) {
            enemy.ramOffTrack(explosion.vz + 100, 200, 0);
            enemy.setEndFrame("lifeSpan", this._racerWorld.frameCount, 120);
        };
        RacerPhysics.getOverlapX = function getOverlapX(staticObj, movingObj) {
            return -((movingObj.x + movingObj.hitboxWidth / 2) - (staticObj.x - staticObj.hitboxWidth / 2));
        };
        RacerPhysics.interpolate = function interpolate(a, b, percent) {
            return a + (b - a) * percent;
        };
        RacerPhysics.percentRemaining = function percentRemaining(n, total) {
            return (n % total) / total;
        };
        return RacerPhysics;
    })();
    Skylanders.RacerPhysics = RacerPhysics;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var RacerSoundStage = (function () {
        function RacerSoundStage(racerWorld, soundManager, game, assets) {
            this._soundClasses = {
            };
            this._soundData = {
            };
            this._signalHandlers = {
            };
            this._playingSounds = [];
            this._soundManager = soundManager;
            this._game = game;
            this._racerWorld = racerWorld;
            this._racerWorld.entitySignal.add(this.entityHandler, this);
            this.addSoundClass("racer", this.racer);
            this.logSounds(assets);
            this.addSignalHandler(Skylanders.EntitySignals.GET_ITEM, this.onGetItem);
            this.addSignalHandler(Skylanders.EntitySignals.GET_BONUS, this.onGetBonus);
            this.addSignalHandler(Skylanders.EntitySignals.PROGRESS_PLACEMENT, this.onProgressPlacement);
            this.addSignalHandler(Skylanders.EntitySignals.DAMAGED, this.onDamaged);
            this.addSignalHandler(Skylanders.EntitySignals.CRASHED, this.onCrashed);
            this.addSignalHandler(Skylanders.EntitySignals.SHIELDED, this.onShielded);
            this.addSignalHandler(Skylanders.EntitySignals.COLLIDED, this.onCollided);
            this.addSignalHandler(Skylanders.EntitySignals.BOOST, this.onBoost);
            this.addSignalHandler(Skylanders.EntitySignals.ATTACK, this.onAttack);
            this.addSignalHandler(Skylanders.EntitySignals.SLOWED, this.onSlow);
            this.addSignalHandler(Skylanders.EntitySignals.SHOT_FIRED, this.onShotFired);
            this.addSignalHandler(Skylanders.EntitySignals.SHOT_HIT, this.onShotHit);
            this.addSignalHandler(Skylanders.EntitySignals.DESTROYED, this.onDestroyed);
        }
        RacerSoundStage.NAME = "RacerSoundStage";
        RacerSoundStage.prototype.logSounds = function (assets) {
            for(var i = 0; i < assets.length; i++) {
                var asset = assets[i];
                if(asset.type == "Audio") {
                    var data = {
                    };
                    data.name = asset.name;
                    data.category = asset.category;
                    data.volume = asset.volume;
                    data.loop = asset.loop === true || asset.loop == "true";
                    this._soundData[asset.name] = data;
                }
            }
        };
        RacerSoundStage.prototype.entityHandler = function (eventID, entityID, data) {
            if(this._racerWorld.raceEndFrame) {
                return;
            }
            if(this._signalHandlers[eventID]) {
                this._signalHandlers[eventID].call(this, entityID, data);
            }
        };
        RacerSoundStage.prototype.onAttack = function (entityID, data) {
        };
        RacerSoundStage.prototype.onDestroyed = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var vehicleData = Skylanders.GameData.getVehicleData(entity.type);
            if(vehicleData && vehicleData.crashSFX) {
                this._soundManager.playSound(vehicleData.crashSFX);
            }
        };
        RacerSoundStage.prototype.onShotHit = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var attack = Skylanders.GameData.getData("attacks")[data.attack];
            if(attack.hitSFX) {
                this._soundManager.playSound(attack.hitSFX);
            }
        };
        RacerSoundStage.prototype.onShotFired = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var attack = Skylanders.GameData.getData("attacks")[data.attack];
            if(attack.shootSFX) {
                this._soundManager.playSound(attack.shootSFX);
            }
        };
        RacerSoundStage.prototype.onSlow = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            this._soundManager.stopSound("SFXSlow");
            this._soundManager.playSound("SFXSlow");
        };
        RacerSoundStage.prototype.onGetBonus = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var bonus = Skylanders.GameData.getData("bonuses")[data.bonus];
            if(bonus.sfx) {
                this.makeSound(bonus.sfx, entity);
            }
        };
        RacerSoundStage.prototype.onGetItem = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var item = Skylanders.GameData.getData("items")[data.item];
            if(item.sfx) {
                this._soundManager.stopSound(item.sfx);
                this.makeSound(item.sfx, entity);
            }
        };
        RacerSoundStage.prototype.onProgressPlacement = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var vehicle = Skylanders.GameData.getVehicleData(Skylanders.PlayerData.getVehicleIDForEntity(entityID));
            if(vehicle.hornSFX) {
                if(entity.id == "player" || entity.id == "rival") {
                    this.makeSound(vehicle.hornSFX, entity);
                } else {
                    var num = parseInt(entity.id.match(/\d+/)[0]);
                    this.makeSound(vehicle.hornSFX + num, entity);
                }
            }
        };
        RacerSoundStage.prototype.onDamaged = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            if(entity.class == Skylanders.TrackElementDefinition.ENEMY) {
                return;
            }
            var character = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getCharIDForEntity(entityID));
            if(character.hitVO) {
                this.makeSound(character.hitVO, entity);
            }
        };
        RacerSoundStage.prototype.onCrashed = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var character = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getCharIDForEntity(entityID));
            if(character.crashVO) {
                this.makeSound(character.crashVO, entity);
            }
        };
        RacerSoundStage.prototype.onShielded = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            this.makeSound("SFXBonusShieldBlock", entity);
        };
        RacerSoundStage.prototype.onCollided = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            this.makeSound("SFXBump", entity);
        };
        RacerSoundStage.prototype.onBoost = function (entityID, data) {
            var entity = this._racerWorld.getEntity(entityID);
            var vehicleID = Skylanders.PlayerData.getVehicleIDForEntity(entity.id);
            var vehicleData = Skylanders.GameData.getVehicleData(vehicleID);
            this.makeSound("SFXBoostPad", entity);
            if(vehicleData.boostRevSFX && entity.vz < entity.maxSpeed / 2) {
                this._soundManager.stopSound(vehicleData.revSFX);
                this.makeSound(vehicleData.boostRevSFX, entity);
            }
        };
        RacerSoundStage.prototype.addSoundClass = function (id, command) {
            this._soundClasses[id] = command;
        };
        RacerSoundStage.prototype.addSignalHandler = function (signalID, command) {
            this._signalHandlers[signalID] = command;
        };
        RacerSoundStage.prototype.makeSound = function (soundID, entity) {
            if(!this._soundManager.hasSound(soundID)) {
                return;
            }
            if(!this._soundManager.isSoundPlaying(soundID)) {
                var sound = this._soundManager.playSound(soundID);
                sound.completeSignal.addOnce(this.onSoundComplete, this);
                var data = {
                };
                data.sound = soundID;
                data.entity = entity.id;
                this._playingSounds.push(data);
            }
            var player = this._racerWorld.getEntity("player");
            var baseIntensity = this._soundData[soundID].volume;
            var dx = this._racerWorld.track.getShortestDistanceBetween(entity.x, player.x);
            var distanceFromPlayer = dx;
            var inverseSquare = 1 / Math.pow(distanceFromPlayer / 5, 2);
            var intensity = baseIntensity * (inverseSquare * 100000);
            if(intensity > baseIntensity) {
                intensity = baseIntensity;
            }
            this._soundManager.setSoundVolume(soundID, intensity);
        };
        RacerSoundStage.prototype.onSoundComplete = function (sound) {
            for(var i = this._playingSounds.length - 1; i >= 0 && this._playingSounds.length > 0; i--) {
                var data = this._playingSounds[i];
                if(data.sound == sound.name) {
                    this._playingSounds.splice(i, 1);
                    break;
                }
            }
        };
        RacerSoundStage.prototype.update = function () {
            this._racerWorld.traverseEntities(this.updateSounds, this, "racers");
            this.updatePlayingSounds();
        };
        RacerSoundStage.prototype.updateSounds = function (entity) {
            if(this._racerWorld.raceEndFrame) {
                this.stopAll();
                return;
            }
            if(this._soundClasses[entity.class]) {
                this._soundClasses[entity.class].call(this, entity);
            }
        };
        RacerSoundStage.prototype.updatePlayingSounds = function () {
            if(this._racerWorld.frameCount % 3 != 0) {
                return;
            }
            for(var i = this._playingSounds.length - 1; i >= 0 && this._playingSounds.length > 0; i--) {
                var data = this._playingSounds[i];
                var entity = this._racerWorld.getEntity(data.entity);
                if(!entity) {
                    this._playingSounds.splice(i, 1);
                    this._soundManager.stopSound(data.sound);
                    continue;
                }
                this.makeSound(data.sound, entity);
            }
        };
        RacerSoundStage.prototype.racer = function (entity) {
            if(!this.isInSoundRange(entity)) {
                return;
            }
            var vehicleID, charID, vehicleData, charData;
            vehicleID = entity.type;
            charID = Skylanders.PlayerData.getCharIDForEntity(entity.id);
            vehicleData = Skylanders.GameData.getVehicleData(vehicleID);
            charData = Skylanders.GameData.getCharacterData(charID);
            this.makeSound(vehicleData.engineSFX, entity);
        };
        RacerSoundStage.prototype.stopAll = function () {
            for(var i = this._playingSounds.length - 1; i >= 0 && this._playingSounds.length > 0; i--) {
                var data = this._playingSounds[i];
                this._playingSounds.splice(i, 1);
                this._soundManager.stopSound(data.sound);
            }
        };
        RacerSoundStage.prototype.isInSoundRange = function (entity) {
            var player = this._racerWorld.getEntity("player");
            var track = this._racerWorld.track;
            var distance = track.getShortestDistanceBetween(entity.x, player.x);
            return distance < 960;
        };
        return RacerSoundStage;
    })();
    Skylanders.RacerSoundStage = RacerSoundStage;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TrackEntityController = (function () {
        function TrackEntityController(racerWorld, gameboard, inventory, inputManager, touchInput) {
            this._attackable = {
                "racer": true,
                "enemy": true
            };
            this._racerWorld = racerWorld;
            this._inputManager = inputManager;
            this._touchInput = touchInput;
            this._gameboard = gameboard;
            this._inventory = inventory;
            this._gameboard.eventSignal.add(this.boardHandler, this);
            this._inventory.eventSignal.add(this.inventoryHandler, this, 2);
            this._racerWorld.addCategory("behavior", function (entity) {
                return entity.behavior != null;
            });
            this._racerWorld.addCategory("allies", function (entity) {
                return entity.class == Skylanders.TrackElementDefinition.ALLY;
            });
            this._racerWorld.addCategory("shootable", (function (entity) {
                return this._attackable[entity.class];
            }).bind(this));
            this._racerWorld.addCategory("enemies", (function (entity) {
                return entity.class == Skylanders.TrackElementDefinition.ENEMY;
            }).bind(this));
        }
        TrackEntityController.NAME = "TrackEntityController";
        TrackEntityController.prototype.update = function () {
            this._racerWorld.traverseEntities(this.behave, this, "behavior");
        };
        TrackEntityController.prototype.behave = function (entity) {
            if(this[entity.behavior]) {
                this[entity.behavior](entity);
            }
        };
        TrackEntityController.prototype.inventoryHandler = function (eventID, data) {
            switch(eventID) {
                case Skylanders.InventoryEvent.BONUS_USE:
                    this.useBonus(data.bonus);
                    break;
                case Skylanders.InventoryEvent.TREASURE_GET:
                    this.useTreasure(data.treasure);
                    break;
            }
        };
        TrackEntityController.prototype.useBonus = function (bonusID) {
            switch(bonusID) {
                case Skylanders.EntityCommand.BONUS_ELIXIR:
                    var player = this._racerWorld.getEntity("player");
                    player.addCommand(Skylanders.EntityCommand.BONUS_ELIXIR);
                    break;
                case Skylanders.EntityCommand.BONUS_SHOE:
                    var player = this._racerWorld.getEntity("player");
                    player.addCommand(Skylanders.EntityCommand.BONUS_SHOE);
                    break;
                case Skylanders.EntityCommand.BONUS_KEY:
                    this.unlock();
                    break;
                case Skylanders.EntityCommand.BONUS_SHIELD:
                    var player = this._racerWorld.getEntity("player");
                    player.addCommand(Skylanders.EntityCommand.BONUS_SHIELD);
                    break;
                case "attack_extra":
                    this.changePiecesTo(Skylanders.GamePiece.SWORD);
                    break;
                case "engine_extra":
                    this.changePiecesTo(Skylanders.GamePiece.ENGINE);
                    break;
                case "sattack_extra":
                    this.changePiecesTo(Skylanders.GamePiece.EXPLOSION);
                    break;
                case "gearbits03":
                    var bonus = Skylanders.GameData.getData("bonuses")[bonusID];
                    Skylanders.PlayerData.addCurrency(bonus.amount);
                    break;
            }
        };
        TrackEntityController.prototype.changePiecesTo = function (type) {
            this._gameboard.changeRandomPiecesTo(type, 0.2);
        };
        TrackEntityController.prototype.useTreasure = function (treasureID) {
            var treasure = Skylanders.GameData.getData("treasure")[treasureID];
            Skylanders.PlayerData.addCurrency(treasure.amount);
        };
        TrackEntityController.prototype.boardHandler = function (eventID, data) {
            switch(eventID) {
                case Skylanders.GameboardEvents.PIECE_ADDED:
                    break;
                case Skylanders.GameboardEvents.MATCH:
                    this.addPieceCommands(data);
                    break;
                case Skylanders.GameboardEvents.PIECE_CLEARED:
                    break;
                case Skylanders.GameboardEvents.PIECE_SELECTED:
                    break;
                case Skylanders.GameboardEvents.PIECE_DESELECTED:
                    break;
                case Skylanders.GameboardEvents.SELECTION_EXECUTED:
                    this.addPieceCommands(data);
                    break;
            }
        };
        TrackEntityController.prototype.addPieceCommands = function (matches) {
            if(matches.numSelected) {
                var data = matches;
                this.setPieceCommand(data.selectionType, data);
                if(data.hasType(Skylanders.GamePiece.WILD)) {
                    var numWild = data.numType(Skylanders.GamePiece.WILD);
                    this.setPieceCommand(Skylanders.GamePiece.WILD, data);
                }
            } else {
                var matchesMade = {
                };
                for(var k in matches) {
                    var piece = this._gameboard.getPiece(k);
                    if(!piece || matchesMade[piece.type]) {
                        continue;
                    }
                    this.setPieceCommand(piece.type);
                    matchesMade[piece.type] = true;
                }
            }
        };
        TrackEntityController.prototype.setPieceCommand = function (type, matchData) {
            var matchCount = matchData ? matchData.numSelected : 3;
            switch(type) {
                case Skylanders.GamePiece.ENGINE:
                    this.engine(matchCount);
                    break;
                case Skylanders.GamePiece.SWORD:
                    this.attack1(matchCount);
                    break;
                case Skylanders.GamePiece.EXPLOSION:
                    this.attack2(matchCount);
                    break;
                case Skylanders.GamePiece.KEY:
                    this.unlock();
                    break;
                case Skylanders.GamePiece.TREASURE:
                    this.getTreasure(matchCount);
                    break;
                case Skylanders.GamePiece.GEARBIT:
                    this.getGearbits(matchCount);
                    break;
                case Skylanders.GamePiece.WILD:
                    this.getBonus(matchData);
                    break;
            }
        };
        TrackEntityController.prototype.engine = function (matchCount) {
            if (typeof matchCount === "undefined") { matchCount = 3; }
            var player = this._racerWorld.getEntity("player");
            var pieceData = Skylanders.GameData.getData("gamePieces")[Skylanders.GamePiece.ENGINE];
            player.durationList["accelerateActive"] = pieceData.baseValue + ((matchCount - 3) * pieceData.increment);
            this._racerWorld.addEffectEntity(player, "boost");
            player.entitySignal.dispatch(Skylanders.EntitySignals.BOOST, player.id);
            if(!player.hasCommand(Skylanders.EntityCommand.ACCELERATE)) {
                player.addCommand(Skylanders.EntityCommand.ACCELERATE);
            } else {
                player.setEndFrame("accelerateActive", this._racerWorld.frameCount);
            }
        };
        TrackEntityController.prototype.attack1 = function (matchCount) {
            if (typeof matchCount === "undefined") { matchCount = 3; }
            var player = this._racerWorld.getEntity("player");
            var attackData = Skylanders.GameData.getData("attacks")[player.primaryAttack];
            player.durationList[player.primaryAttack + "activeTime"] = attackData.activeTime + (attackData.activeTime / 2 * (matchCount - 3));
            if(!player.hasCommand(Skylanders.EntityCommand.FIRE_PRIMARY)) {
                player.addCommand(Skylanders.EntityCommand.FIRE_PRIMARY);
            } else {
                player.setEndFrame(player.primaryAttack + "activeTime", this._racerWorld.frameCount);
            }
        };
        TrackEntityController.prototype.attack2 = function (matchCount) {
            if (typeof matchCount === "undefined") { matchCount = 3; }
            var player = this._racerWorld.getEntity("player");
            var attackData = Skylanders.GameData.getData("attacks")[player.secondaryAttack];
            player.durationList[player.secondaryAttack + "activeTime"] = attackData.activeTime + (attackData.activeTime / 2 * (matchCount - 3));
            if(!player.hasCommand(Skylanders.EntityCommand.FIRE_SECONDARY)) {
                player.addCommand(Skylanders.EntityCommand.FIRE_SECONDARY);
            } else {
                player.setEndFrame(player.secondaryAttack + "activeTime", this._racerWorld.frameCount);
            }
        };
        TrackEntityController.prototype.unlock = function () {
            var player = this._racerWorld.getEntity("player");
            player.addCommand(Skylanders.EntityCommand.BONUS_KEY);
        };
        TrackEntityController.prototype.getBonus = function (matchData) {
            var wildPieces = matchData.getPiecesOfType(Skylanders.GamePiece.WILD);
            for(var i = 0; i < wildPieces.length; i++) {
                this._inventory.getBonus(wildPieces[i]);
            }
        };
        TrackEntityController.prototype.getTreasure = function (matchCount) {
            if (typeof matchCount === "undefined") { matchCount = 3; }
            var scoreData = this._racerWorld.scoreData;
            scoreData.logScore("matchTreasure");
            for(var i = 0; i < matchCount - 3; i++) {
                scoreData.logScore("matchTreasureExtra");
            }
        };
        TrackEntityController.prototype.getGearbits = function (matchCount) {
            if (typeof matchCount === "undefined") { matchCount = 3; }
            var player = this._racerWorld.getEntity("player");
            var pieceData = Skylanders.GameData.getData("gamePieces")[Skylanders.GamePiece.GEARBIT];
            var gearbits = pieceData.baseValue + ((matchCount - 3) * pieceData.increment);
            Skylanders.PlayerData.addCurrency(gearbits);
            player.entitySignal.dispatch(Skylanders.EntitySignals.GET_ITEM, player.id, {
                item: "gearbit"
            });
        };
        TrackEntityController.prototype.lockToTarget = function (entity) {
            var target = this._racerWorld.getEntity(entity.target);
            if(!target) {
                return;
            }
            var dx = target.x - entity.x;
            var dy = target.y - entity.y;
            var dz = target.z - entity.z;
            entity.x = target.x + entity.offsetX;
            entity.y = target.y + entity.offsetY;
            entity.z = target.z + entity.offsetZ;
            this._racerWorld.updateSegment(entity);
        };
        TrackEntityController.prototype.skimTrack = function (entity) {
            entity.z = entity.loopSum(entity.z, 175, this._racerWorld.track.trackLength);
            this._racerWorld.updateSegment(entity);
        };
        TrackEntityController.prototype.cruise = function (entity) {
            if(!this._racerWorld.raceStarted) {
                return;
            }
            if(!entity.hasCommand(Skylanders.EntityCommand.ACCELERATE)) {
                entity.addCommand(Skylanders.EntityCommand.ACCELERATE);
            }
            this.executeCommands(entity);
        };
        TrackEntityController.prototype.fly = function (entity) {
        };
        TrackEntityController.prototype.gearbit = function (entity) {
            var player = this._racerWorld.getEntity("player");
            if(this._racerWorld.track.getShortestDistanceBetween(player.x, entity.x) < player.hitboxWidth / 2 && entity.state != Skylanders.EntityState.COLLECTED) {
                var item = Skylanders.GameData.getData("items")[entity.type];
                entity.state = Skylanders.EntityState.COLLECTED;
                this._racerWorld.scoreData.logScore(Skylanders.ScoreDefinition.GET_GEARBIT1);
                this._racerWorld.scoreData.logGearbits("gearbit");
                Skylanders.PlayerData.addCurrency(item.value);
                entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_ITEM, entity.id, {
                    item: entity.type
                });
            }
        };
        TrackEntityController.prototype.ally = function (entity) {
            var player = this._racerWorld.getEntity("player");
            if(entity.state != Skylanders.EntityState.UNLOCKED) {
                if(this._racerWorld.track.getDistanceToPoint(player.x, entity.x) < player.hitboxWidth * 2) {
                    entity.vx = player.vx * 0.9;
                    if(entity.state != Skylanders.EntityState.UNLOCKABLE) {
                        entity.state = Skylanders.EntityState.UNLOCKABLE;
                        this._inventory.eventSignal.dispatch(Skylanders.InventoryEvent.ALLY_UNLOCKABLE, {
                            ally: entity.id
                        });
                    }
                } else {
                    if(entity.state != Skylanders.EntityState.NEUTRAL) {
                        entity.state = Skylanders.EntityState.NEUTRAL;
                        this._inventory.eventSignal.dispatch(Skylanders.InventoryEvent.ALLY_OFFSCREEN, {
                            ally: entity.id
                        });
                    }
                    entity.vx = 0;
                }
            }
        };
        TrackEntityController.prototype.projectile = function (entity) {
            var target = this._racerWorld.getEntity(entity.target);
            var attackData = Skylanders.GameData.getAttackData(entity.type);
            entity.vx += entity.accel;
            if(target) {
                entity.vy = (target.y - entity.y) * (1 / entity.getDuration("lifeSpan"));
                if(this._racerWorld.track.getShortestDistanceBetween(entity.x, target.x) < target.hitboxWidth / 2) {
                    this._racerWorld.removeEntity(entity.id);
                    if(!target.hasCommand(Skylanders.EntityCommand.BONUS_SHIELD)) {
                        entity.entitySignal.dispatch(Skylanders.EntitySignals.SHOT_HIT, entity.id, {
                            attack: entity.type
                        });
                        target.takeDamage(attackData.baseDamage);
                        if(target.id != "player") {
                            target.cutSpeed(2);
                            target.addCommand(Skylanders.EntityCommand.SLOW);
                        } else {
                            target.removeCommand(Skylanders.EntityCommand.ACCELERATE);
                        }
                    } else {
                        target.entitySignal.dispatch(Skylanders.EntitySignals.SHIELDED, target.id);
                    }
                    this._racerWorld.addEffectEntity(target, attackData.hitDisplay);
                }
            }
            this.decay(entity);
        };
        TrackEntityController.prototype.staticProjectile = function (entity) {
            var shootable = this._racerWorld.getEntitiesInCategory("shootable");
            var attackData = Skylanders.GameData.getAttackData(entity.type);
            entity.vx += entity.accel;
            for(var i = 0; i < shootable.length; i++) {
                var target = this._racerWorld.getEntity(shootable[i]);
                if(!target) {
                    continue;
                }
                if(entity.owner != target.id && this._racerWorld.track.getShortestDistanceBetween(entity.x, target.x) < target.hitboxWidth / 2) {
                    entity.entitySignal.dispatch(Skylanders.EntitySignals.SHOT_HIT, entity.id, {
                        attack: entity.type
                    });
                    target.takeDamage(attackData.baseDamage);
                    target.cutSpeed(2);
                    target.addCommand(Skylanders.EntityCommand.SLOW);
                }
            }
            this.decay(entity);
        };
        TrackEntityController.prototype.respawnItem = function (entity) {
            if(entity.state == Skylanders.EntityState.COLLECTED) {
                if(!entity.hasEndFrame("respawnDelay")) {
                    entity.setEndFrame("respawnDelay", this._racerWorld.frameCount, 100);
                }
                if(entity.pastEndFrame("respawnDelay", this._racerWorld.frameCount)) {
                    entity.state = "";
                    entity.clearEndFrame("respawnDelay");
                }
            }
        };
        TrackEntityController.prototype.explosiveProjectile = function (entity) {
            entity.vz += entity.accel;
            if(!entity.hasEndFrame("lifeSpan")) {
                entity.setEndFrame("lifeSpan", this._racerWorld.frameCount);
            }
            if(entity.pastEndFrame("lifeSpan", this._racerWorld.frameCount)) {
                var attackData = Skylanders.GameData.getAttackData(entity.type);
                if(attackData) {
                    var explosion = this._racerWorld.addEntity(Skylanders.TrackEntity, attackData.hitDisplay + this._racerWorld.entityCount, {
                        display: attackData.hitDisplay,
                        behavior: "decay",
                        lifeSpan: attackData.explosionLifespan,
                        x: entity.x,
                        y: entity.y,
                        z: entity.z,
                        physics: Skylanders.RacerPhysics.PHASABLE_OBJECT,
                        "class": Skylanders.TrackElementDefinition.EXPLOSION,
                        owner: entity.owner,
                        type: entity.type,
                        friction: attackData.friction || 0
                    });
                }
                this._racerWorld.removeEntity(entity.id);
            }
        };
        TrackEntityController.prototype.decay = function (entity) {
            if(!entity.hasEndFrame("lifeSpan")) {
                entity.setEndFrame("lifeSpan", this._racerWorld.frameCount);
            }
            if(entity.pastEndFrame("lifeSpan", this._racerWorld.frameCount)) {
                this._racerWorld.removeEntity(entity.id);
            }
        };
        TrackEntityController.prototype.hostile = function (entity) {
            if(!this._racerWorld.raceStarted) {
                return;
            }
            var vehicle = Skylanders.GameData.getVehicleData(entity.type);
            if(this._racerWorld.hasEnded()) {
                if(entity.state != Skylanders.EntityState.INACTIVE && entity.state != Skylanders.EntityState.DESTROYED) {
                    entity.state = Skylanders.EntityState.DESTROYED;
                    entity.vx = 0;
                    entity.entitySignal.dispatch(Skylanders.EntitySignals.DESTROYED, entity.id);
                    if(vehicle.destroyDisplay) {
                        this._racerWorld.addEffectEntity(entity, vehicle.destroyDisplay);
                    }
                }
                return;
            }
            if(entity.state == Skylanders.EntityState.DESTROYED) {
                if(!entity.hasEndFrame("respawn")) {
                    entity.setEndFrame("respawn", this._racerWorld.frameCount, 180);
                }
                if(entity.pastEndFrame("respawn", this._racerWorld.frameCount)) {
                    entity.clearEndFrame("respawn");
                    entity.refresh();
                }
                return;
            }
            var track = this._racerWorld.track;
            var player = this._racerWorld.getEntity("player");
            var enemies = this._racerWorld.getEntitiesInCategory("enemies");
            var playerUnderAttack = false;
            for(var i = 0; i < enemies.length; i++) {
                var enemy = this._racerWorld.getEntity(enemies[i]);
                if(!enemy || enemy == entity) {
                    continue;
                }
                if(enemy.state == Skylanders.EntityState.APPROACHING) {
                    playerUnderAttack = true;
                    break;
                }
            }
            if(!playerUnderAttack && track.getShortestDistanceBetween(entity.x, player.x) < 960) {
                entity.addCommand(Skylanders.EntityCommand.ACCELERATE);
                if(entity.state == Skylanders.EntityState.INACTIVE) {
                    entity.state = Skylanders.EntityState.ACTIVE;
                }
                if(track.getShortestDistanceBetween(entity.x, player.x) < 300) {
                    if(entity.state != Skylanders.EntityState.APPROACHING) {
                        entity.state = Skylanders.EntityState.APPROACHING;
                        this._racerWorld.eventSignal.dispatch(Skylanders.EventSignals.ENEMY_APPROACH);
                    }
                    if(track.getShortestDistanceBetween(entity.x, player.x) < player.hitboxWidth) {
                        entity.x = player.x + player.hitboxWidth;
                    }
                    if(!player.hasCommand(Skylanders.EntityCommand.CRASH)) {
                        entity.addCommand(Skylanders.EntityCommand.FIRE_PRIMARY);
                    }
                }
            } else {
                if(entity.state != Skylanders.EntityState.INACTIVE) {
                    entity.state = Skylanders.EntityState.INACTIVE;
                }
            }
            if(entity.hp == 0 && entity.state != Skylanders.EntityState.DESTROYED) {
                entity.state = Skylanders.EntityState.DESTROYED;
                entity.vx = 0;
                entity.entitySignal.dispatch(Skylanders.EntitySignals.DESTROYED, entity.id);
                if(vehicle.destroyDisplay) {
                    this._racerWorld.addEffectEntity(entity, vehicle.destroyDisplay);
                }
            }
            this.executeCommands(entity);
        };
        TrackEntityController.prototype.charge = function (entity) {
            if(!this._racerWorld.raceStarted) {
                return;
            }
            this.executeCommands(entity);
        };
        TrackEntityController.prototype.cpu = function (entity) {
            if(!this._racerWorld.raceStarted) {
                return;
            }
            this.executeCommands(entity);
        };
        TrackEntityController.prototype.control = function (entity) {
            this.mapInputs(entity);
            if(!this._racerWorld.raceStarted) {
                return;
            }
            if(entity.hp == 0) {
                entity.addCommand(Skylanders.EntityCommand.CRASH);
            }
            this.executeCommands(entity);
        };
        TrackEntityController.prototype.mapInputs = function (entity) {
            if(!Avota.EnvUtil.isMobile) {
                entity.inputMap[Skylanders.TrackEntity.INPUT_DOWN] = this._inputManager.isKeyDown(40) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_UP] = this._inputManager.isKeyDown(38) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_LEFT] = this._inputManager.isKeyDown(37) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_RIGHT] = this._inputManager.isKeyDown(39) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_FIRE] = this._inputManager.isKeyDown(32) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_FIRE2] = this._inputManager.isKeyDown(69) ? true : false;
            } else if(this._touchInput) {
                entity.inputMap[Skylanders.TrackEntity.INPUT_DOWN] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_BRAKE) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_UP] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_ACCEL) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_LEFT] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_LEFT) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_RIGHT] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_RIGHT) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_FIRE] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_FIRE) ? true : false;
                entity.inputMap[Skylanders.TrackEntity.INPUT_FIRE2] = this._touchInput.hasInput(Skylanders.TouchInput.INPUT_FIRE2) ? true : false;
            }
        };
        TrackEntityController.prototype.performAttack = function (entity, attackID) {
            var attack = Skylanders.GameData.getAttackData(attackID);
            var attackCommand = attackID == entity.primaryAttack ? Skylanders.EntityCommand.FIRE_PRIMARY : Skylanders.EntityCommand.FIRE_SECONDARY;
            var modifier = Skylanders.PlayerData.hasSuperChargedCombo() ? Skylanders.GameData.getData("superchargedModifier") : 1;
            switch(attack.type) {
                case "shot":
                    if(entity.pastEndFrame(attackID + "fireCooldown", this._racerWorld.frameCount)) {
                        if(!entity.hasEndFrame(attackID + "activeTime")) {
                            entity.setEndFrame(attackID + "activeTime", this._racerWorld.frameCount, (entity.durationList[attackID + "activeTime"] || attack.activeTime) * modifier);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.ATTACK, entity.id, {
                                attack: attackID
                            });
                            entity.useEnergy(attack.energy / modifier);
                        }
                        if(entity.pastEndFrame(attackID + "shotDelay", this._racerWorld.frameCount)) {
                            var targets = this._racerWorld.getEntitiesInCategory("shootable");
                            var track = this._racerWorld.track;
                            var target, dist;
                            if(!attack.isStatic) {
                                for(var i = 0; i < targets.length; i++) {
                                    var t = this._racerWorld.getEntity(targets[i]);
                                    if(!t || t.id == entity.id) {
                                        continue;
                                    }
                                    var dx = entity.class == Skylanders.TrackElementDefinition.ENEMY ? track.getDistanceToPoint(t.x, entity.x) : track.getDistanceToPoint(entity.x, t.x);
                                    if(dx < 940 && (!target || dx < dist)) {
                                        target = t;
                                        dist = dx;
                                    }
                                }
                            }
                            if(attack.shootDisplay) {
                                this._racerWorld.addEffectEntity(entity, attack.shootDisplay, {
                                });
                            }
                            var projectile = this._racerWorld.addEntity(Skylanders.TrackEntity, attack.display + this._racerWorld.entityCount, {
                                display: attack.display,
                                behavior: attack.behavior,
                                lifeSpan: attack.shotLifespan * modifier,
                                accel: attack.shotAccel * modifier,
                                x: entity.x,
                                y: entity.y + 50,
                                physics: Skylanders.RacerPhysics.PHASABLE_OBJECT,
                                target: target ? target.id : null,
                                class: Skylanders.TrackElementDefinition.PROJECTILE,
                                owner: entity.id,
                                type: attackID,
                                friction: attack.friction || 0
                            });
                            projectile.vx = entity.vx;
                            entity.setEndFrame(attackID + "shotDelay", this._racerWorld.frameCount, attack.shotDelay / modifier);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.SHOT_FIRED, entity.id, {
                                attack: attackID
                            });
                        }
                        if(entity.pastEndFrame(attackID + "activeTime", this._racerWorld.frameCount)) {
                            entity.removeCommand(attackCommand);
                            entity.clearEndFrame(attackID + "activeTime");
                            entity.clearEndFrame(attackID + "shotDelay");
                            entity.clearEndFrame(attackID + "fireCooldown");
                            entity.setEndFrame(attackID + "fireCooldown", this._racerWorld.frameCount, attack.cooldown / modifier);
                        }
                    }
                    break;
                case "boost":
                    if(entity.pastEndFrame(attackID + "boostAttackCooldown", this._racerWorld.frameCount)) {
                        if(!entity.hasEndFrame(attackID + "boostActiveTime")) {
                            entity.setEndFrame(attackID + "boostActiveTime", this._racerWorld.frameCount, attack.activeTime);
                            var boostEffect = this._racerWorld.addEntity(Skylanders.TrackEntity, attack.display + this._racerWorld.entityCount, {
                                display: attack.display,
                                x: entity.x,
                                y: entity.y,
                                z: entity.z,
                                target: entity.id,
                                lifeSpan: attack.activeTime,
                                offsetX: attack.effectOffsetX,
                                offsetY: attack.effectOffsetY,
                                offsetZ: attack.effectOffsetZ,
                                behavior: "decay"
                            });
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.ATTACK, entity.id, {
                                attack: attackID
                            });
                            entity.addCommand(Skylanders.EntityCommand.BOOST_ATTACK);
                            entity.addChild(boostEffect.id);
                            entity.useEnergy(attack.energy / modifier);
                        }
                        if(!entity.hasEndFrame(attackID + "boostAccelTime")) {
                            entity.setEndFrame(attackID + "boostAccelTime", this._racerWorld.frameCount, attack.boostAccelTime * modifier);
                        }
                        if(!entity.pastEndFrame(attackID + "boostAccelTime", this._racerWorld.frameCount)) {
                            if(entity.vz < entity.getSpeedCategory("boost") * 1.25) {
                                entity.vz += attack.accel * modifier;
                            }
                        }
                        if(entity.pastEndFrame(attackID + "boostActiveTime", this._racerWorld.frameCount)) {
                            entity.removeCommand(attackCommand);
                            entity.removeCommand(Skylanders.EntityCommand.BOOST_ATTACK);
                            entity.clearEndFrame(attackID + "boostActiveTime");
                            entity.clearEndFrame(attackID + "boostAccelTime");
                            entity.clearEndFrame(attackID + "boostAttackCooldown");
                            entity.setEndFrame(attackID + "boostAttackCooldown", this._racerWorld.frameCount, attack.cooldown / modifier);
                        }
                    }
                    break;
            }
        };
        TrackEntityController.prototype.executeCommands = function (entity) {
            for(var k in entity.commands) {
                var command = entity.commands[k];
                switch(command.type) {
                    case Skylanders.EntityCommand.ACCELERATE:
                        if(entity.hasCommand(Skylanders.EntityCommand.PAD_BOOST)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.SKID)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.STUN)) {
                            break;
                        }
                        if(!entity.hasEndFrame("accelerateStartup")) {
                            entity.setEndFrame("accelerateStartup", this._racerWorld.frameCount, 1);
                        }
                        if(entity.pastEndFrame("accelerateStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("accelerateActive")) {
                                entity.setEndFrame("accelerateActive", this._racerWorld.frameCount);
                            }
                            if(!entity.pastEndFrame("accelerateActive", this._racerWorld.frameCount)) {
                                entity.accelerate();
                            } else {
                                entity.clearEndFrame("accelerateStartup");
                                entity.clearEndFrame("accelerateActive");
                                entity.removeCommand(Skylanders.EntityCommand.ACCELERATE);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.DECELERATE:
                        if(entity.hasCommand(Skylanders.EntityCommand.PAD_BOOST)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.SKID)) {
                            break;
                        }
                        if(entity.vz > 0) {
                            entity.vz += entity.decel;
                        }
                        break;
                    case Skylanders.EntityCommand.BREAK:
                        if(entity.hasCommand(Skylanders.EntityCommand.SKID)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.STUN)) {
                            break;
                        }
                        if(entity.vz > -entity.maxSpeed / 3) {
                            entity.vz += entity.breaking;
                        }
                        break;
                    case Skylanders.EntityCommand.LINEAR_ADVANCE:
                        if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                            break;
                        }
                        entity.vz = entity.maxSpeed;
                        break;
                    case Skylanders.EntityCommand.MOVE_LEFT:
                        if(entity.hasCommand(Skylanders.EntityCommand.SKID)) {
                            entity.vx = 0;
                            break;
                        }
                        if(entity.lane - 1 <= 0 || entity.hasCommand(Skylanders.EntityCommand.MOVE_RIGHT)) {
                            entity.removeCommand(Skylanders.EntityCommand.MOVE_LEFT);
                            break;
                        }
                        if(entity.x > this._racerWorld.track.getLaneCenterX(entity.lane - 1)) {
                            entity.vx = -(entity.turnSpeed * (Math.abs(entity.vz) / Math.abs(entity.getSpeedCategory("neutral")))) || -10;
                        } else {
                            entity.x = this._racerWorld.track.getLaneCenterX(entity.lane - 1);
                            entity.vx = 0;
                            entity.lane = entity.lane - 1;
                            entity.removeCommand(Skylanders.EntityCommand.MOVE_LEFT);
                        }
                        break;
                    case Skylanders.EntityCommand.MOVE_RIGHT:
                        if(entity.hasCommand(Skylanders.EntityCommand.SKID)) {
                            entity.vx = 0;
                            break;
                        }
                        if(entity.lane + 1 > this._racerWorld.track.lanes || entity.hasCommand(Skylanders.EntityCommand.MOVE_LEFT)) {
                            entity.removeCommand(Skylanders.EntityCommand.MOVE_RIGHT);
                            break;
                        }
                        if(entity.x < this._racerWorld.track.getLaneCenterX(entity.lane + 1)) {
                            entity.vx = entity.turnSpeed * (Math.abs(entity.vz) / Math.abs(entity.getSpeedCategory("neutral"))) || 10;
                        } else {
                            entity.x = this._racerWorld.track.getLaneCenterX(entity.lane + 1);
                            entity.vx = 0;
                            entity.lane = entity.lane + 1;
                            entity.removeCommand(Skylanders.EntityCommand.MOVE_RIGHT);
                        }
                        break;
                    case Skylanders.EntityCommand.PAD_BOOST:
                        if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                            break;
                        }
                        if(!entity.hasEndFrame("boost")) {
                            entity.vz = entity.boostSpeed;
                            this._racerWorld.addEffectEntity(entity, "speedboost_get", {
                                offsetY: -250
                            });
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.BOOST, entity.id);
                            entity.setEndFrame("boost", this._racerWorld.frameCount);
                        }
                        if(entity.vz < entity.boostSpeed) {
                            var boostAccel = Skylanders.GameData.getData("boostAccelModifier") * entity.accel;
                            var boostSpeed = Skylanders.GameData.getData("boostSpeedModifier") * entity.maxSpeed;
                            entity.boost(boostAccel, boostSpeed);
                        }
                        if(entity.pastEndFrame("boost", this._racerWorld.frameCount)) {
                            entity.clearEndFrame("boost");
                            entity.removeCommand(Skylanders.EntityCommand.PAD_BOOST);
                        }
                        break;
                    case Skylanders.EntityCommand.FIRE_PRIMARY:
                        if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.STUN)) {
                            break;
                        }
                        this.performAttack(entity, entity.primaryAttack);
                        break;
                    case Skylanders.EntityCommand.FIRE_SECONDARY:
                        if(entity.hasCommand(Skylanders.EntityCommand.CRASH)) {
                            break;
                        }
                        if(entity.hasCommand(Skylanders.EntityCommand.STUN)) {
                            break;
                        }
                        this.performAttack(entity, entity.secondaryAttack);
                        break;
                    case Skylanders.EntityCommand.CRASH:
                        if(!entity.hasEndFrame("crash")) {
                            entity.setEndFrame("crash", this._racerWorld.frameCount);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.CRASHED, entity.id);
                        }
                        entity.removeCommand(Skylanders.EntityCommand.PAD_BOOST);
                        if(!entity.hasCommand(Skylanders.EntityCommand.INVINCIBLE)) {
                            entity.addCommand(Skylanders.EntityCommand.INVINCIBLE);
                            entity.setEndFrame("invincible", this._racerWorld.frameCount, entity.getDuration("crash") + 60);
                        }
                        if(entity.vz < 0) {
                            entity.vz -= entity.decel * 1.25;
                        } else {
                            entity.vz += entity.decel * 1.25;
                        }
                        if(entity.pastEndFrame("crash", this._racerWorld.frameCount)) {
                            entity.clearEndFrame("crash");
                            entity.refillHP();
                            entity.removeCommand(Skylanders.EntityCommand.CRASH);
                        }
                        break;
                    case Skylanders.EntityCommand.INVINCIBLE:
                        if(!entity.hasEndFrame("invincible")) {
                            entity.setEndFrame("invincible", this._racerWorld.frameCount);
                        }
                        if(entity.pastEndFrame("invincible", this._racerWorld.frameCount)) {
                            entity.removeCommand(Skylanders.EntityCommand.INVINCIBLE);
                        }
                        break;
                    case Skylanders.EntityCommand.SKID:
                        if(!entity.hasEndFrame("skid")) {
                            entity.setEndFrame("skid", this._racerWorld.frameCount);
                        }
                        entity.vz = Avota.MathUtil.clamp(entity.vz, entity.getSpeedCategory("skid") / 5, entity.getSpeedCategory("skid"));
                        if(entity.pastEndFrame("skid", this._racerWorld.frameCount)) {
                            entity.clearEndFrame("skid");
                            entity.removeCommand(Skylanders.EntityCommand.SKID);
                        }
                        break;
                    case Skylanders.EntityCommand.STUN:
                        if(!entity.hasEndFrame("stun")) {
                            entity.setEndFrame("stun", this._racerWorld.frameCount);
                        }
                        if(entity.pastEndFrame("stun", this._racerWorld.frameCount)) {
                            entity.clearEndFrame("stun");
                            entity.removeCommand(Skylanders.EntityCommand.STUN);
                        }
                        break;
                    case Skylanders.EntityCommand.ROUGH_TERRAIN:
                        if(!entity.hasEndFrame("rough")) {
                            entity.setEndFrame("rough", this._racerWorld.frameCount);
                        }
                        entity.vz *= 0.975;
                        if(entity.pastEndFrame("rough", this._racerWorld.frameCount)) {
                            entity.clearEndFrame("rough");
                            entity.removeCommand(Skylanders.EntityCommand.ROUGH_TERRAIN);
                        }
                        break;
                    case Skylanders.EntityCommand.BONUS_ELIXIR:
                        var bonus = Skylanders.GameData.getData("bonuses")["elixir"];
                        if(!entity.hasEndFrame("elixirStartup")) {
                            entity.setEndFrame("elixirStartup", this._racerWorld.frameCount, bonus.startup);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_BONUS, entity.id, {
                                bonus: "elixir"
                            });
                        }
                        if(entity.pastEndFrame("elixirStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("elixirActive")) {
                                entity.setEndFrame("elixirActive", this._racerWorld.frameCount, bonus.activeFrames);
                                this._racerWorld.addEffectEntity(entity, bonus.fx, {
                                    lifeSpan: bonus.activeFrames
                                });
                                entity.refillHP();
                            }
                            if(entity.pastEndFrame("elixirActive", this._racerWorld.frameCount)) {
                                entity.clearEndFrame("elixirStartup");
                                entity.clearEndFrame("elixirActive");
                                entity.removeCommand(Skylanders.EntityCommand.BONUS_ELIXIR);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.BONUS_HOURGLASS:
                        var bonus = Skylanders.GameData.getData("bonuses")["hourglass"];
                        if(!entity.hasEndFrame("hourglassStartup")) {
                            entity.setEndFrame("hourglassStartup", this._racerWorld.frameCount, bonus.startup);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_BONUS, entity.id, {
                                bonus: "hourglass"
                            });
                        }
                        if(entity.pastEndFrame("hourglassStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("hourglassActive")) {
                                entity.setEndFrame("hourglassActive", this._racerWorld.frameCount, bonus.activeFrames);
                                this._racerWorld.addEffectEntity(entity, bonus.fx, {
                                    lifeSpan: bonus.activeFrames
                                });
                                var racers = this._racerWorld.getEntitiesInCategory("racers");
                                for(var i = 0; i < racers.length; i++) {
                                    if(racers[i] == entity.id) {
                                        continue;
                                    }
                                    var racer = this._racerWorld.getEntity(racers[i]);
                                    racer.addCommand(Skylanders.EntityCommand.SLOW);
                                }
                            }
                            if(entity.pastEndFrame("hourglassActive", this._racerWorld.frameCount)) {
                                entity.clearEndFrame("hourglassStartup");
                                entity.clearEndFrame("hourglassActive");
                                entity.removeCommand(Skylanders.EntityCommand.BONUS_HOURGLASS);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.BONUS_JUKEBOX:
                        var bonus = Skylanders.GameData.getData("bonuses")["jukebox"];
                        if(!entity.hasEndFrame("jukeboxStartup")) {
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_BONUS, entity.id, {
                                bonus: "jukebox"
                            });
                            entity.setEndFrame("jukeboxStartup", this._racerWorld.frameCount, bonus.startup);
                        }
                        if(entity.pastEndFrame("jukeboxStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("jukeboxActive")) {
                                entity.setEndFrame("jukeboxActive", this._racerWorld.frameCount, bonus.activeFrames);
                                this._racerWorld.addEffectEntity(entity, bonus.fx, {
                                    lifeSpan: bonus.activeFrames
                                });
                            }
                            if(entity.pastEndFrame("jukeboxActive", this._racerWorld.frameCount)) {
                                entity.clearEndFrame("jukeboxStartup");
                                entity.clearEndFrame("jukeboxActive");
                                entity.removeCommand(Skylanders.EntityCommand.BONUS_JUKEBOX);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.BONUS_SHIELD:
                        var bonus = Skylanders.GameData.getData("bonuses")["shield"];
                        if(!entity.hasEndFrame("shieldStartup")) {
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_BONUS, entity.id, {
                                bonus: "shield"
                            });
                            entity.setEndFrame("shieldStartup", this._racerWorld.frameCount, bonus.startup);
                        }
                        if(entity.pastEndFrame("shieldStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("shieldActive")) {
                                entity.setEndFrame("shieldActive", this._racerWorld.frameCount, bonus.activeFrames);
                                this._racerWorld.addEffectEntity(entity, bonus.fx, {
                                    lifeSpan: bonus.activeFrames
                                });
                            }
                            if(entity.pastEndFrame("shieldActive", this._racerWorld.frameCount)) {
                                entity.clearEndFrame("shieldStartup");
                                entity.clearEndFrame("shieldActive");
                                entity.removeCommand(Skylanders.EntityCommand.BONUS_SHIELD);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.BONUS_SHOE:
                        var bonus = Skylanders.GameData.getData("bonuses")["shoe"];
                        if(!entity.hasEndFrame("shoeStartup")) {
                            entity.setEndFrame("shoeStartup", this._racerWorld.frameCount, bonus.startup);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.GET_BONUS, entity.id, {
                                bonus: "shoe"
                            });
                        }
                        if(entity.pastEndFrame("shoeStartup", this._racerWorld.frameCount)) {
                            if(!entity.hasEndFrame("shoeActive")) {
                                entity.setEndFrame("shoeActive", this._racerWorld.frameCount, bonus.activeFrames);
                                this._racerWorld.addEffectEntity(entity, bonus.fx, {
                                    lifeSpan: bonus.activeFrames
                                });
                            }
                            if(!entity.pastEndFrame("shoeActive", this._racerWorld.frameCount)) {
                                entity.boost(entity.accel * bonus.accelModifier, entity.maxSpeed * bonus.speedModifier);
                            } else {
                                entity.clearEndFrame("shoeStartup");
                                entity.clearEndFrame("shoeActive");
                                entity.removeCommand(Skylanders.EntityCommand.BONUS_SHOE);
                            }
                        }
                        break;
                    case Skylanders.EntityCommand.SLOW:
                        var bonus = Skylanders.GameData.getData("bonuses")["hourglass"];
                        if(!entity.hasEndFrame("slowActive")) {
                            entity.setEndFrame("slowActive", this._racerWorld.frameCount, 60);
                            entity.entitySignal.dispatch(Skylanders.EntitySignals.SLOWED, entity.id, {
                            });
                        }
                        if(!entity.pastEndFrame("slowActive", this._racerWorld.frameCount)) {
                        } else {
                            entity.clearEndFrame("slowActive");
                            entity.slowModifier = 1;
                            entity.removeCommand(Skylanders.EntityCommand.SLOW);
                        }
                        break;
                    case Skylanders.EntityCommand.UNLOCK:
                    case Skylanders.EntityCommand.BONUS_KEY:
                        if(!entity.hasEndFrame("unlockActive")) {
                            entity.setEndFrame("unlockActive", this._racerWorld.frameCount, 60);
                        }
                        if(!entity.pastEndFrame("unlockActive", this._racerWorld.frameCount)) {
                            var allies = this._racerWorld.getEntitiesInCategory("allies");
                            for(var i = 0; i < allies.length; i++) {
                                var ally = this._racerWorld.getEntity(allies[i]);
                                if(!ally) {
                                    continue;
                                }
                                if(ally.state == Skylanders.EntityState.UNLOCKABLE) {
                                    ally.state = Skylanders.EntityState.UNLOCKED;
                                    this._inventory.unlockAlly(ally.type);
                                    this._racerWorld.addEffectEntity(ally, "ally_unlock", {
                                    });
                                    this._racerWorld.scoreData.logScore("rescuedFriend");
                                    if(this._inventory.numAlliesUnlocked == 3) {
                                        this._racerWorld.scoreData.logScore("rescuedAllFriends");
                                    }
                                }
                            }
                        } else {
                            entity.clearEndFrame("unlockActive");
                            entity.slowModifier = 1;
                            entity.removeCommand(Skylanders.EntityCommand.UNLOCK);
                            entity.removeCommand(Skylanders.EntityCommand.BONUS_KEY);
                        }
                        break;
                }
            }
        };
        return TrackEntityController;
    })();
    Skylanders.TrackEntityController = TrackEntityController;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var BoardSoundStage = (function () {
        function BoardSoundStage(sm, gb, inv) {
            this._gameboard = gb;
            this._sound = sm;
            this._inventory = inv;
            this._gameboard.eventSignal.add(this.boardHandler, this);
            this._inventory.eventSignal.add(this.inventoryHandler, this);
        }
        BoardSoundStage.NAME = "BoardSoundStage";
        BoardSoundStage.prototype.boardHandler = function (eventID, data) {
            switch(eventID) {
                case Skylanders.GameboardEvents.PIECE_ADDED:
                    break;
                case Skylanders.GameboardEvents.MATCH:
                    break;
                case Skylanders.GameboardEvents.PIECE_CLEARED:
                    break;
                case Skylanders.GameboardEvents.PIECE_SELECTED:
                    this.onPieceSelected();
                    break;
                case Skylanders.GameboardEvents.PIECE_DESELECTED:
                    break;
                case Skylanders.GameboardEvents.SELECTION_EXECUTED:
                    this.onSelectionExecuted(data);
                    break;
                case Skylanders.GameboardEvents.BOARD_REMOVED:
                    break;
                case Skylanders.GameboardEvents.PIECE_CHANGED:
                    break;
            }
        };
        BoardSoundStage.prototype.inventoryHandler = function (eventID, data) {
            switch(eventID) {
                case Skylanders.InventoryEvent.BONUS_GET:
                    this._sound.playSound("SUIBonusGet");
                    break;
                case Skylanders.InventoryEvent.BONUS_USE:
                    switch(data.bonus) {
                        case Skylanders.EntityCommand.BONUS_SHIELD:
                            break;
                        case Skylanders.EntityCommand.BONUS_ELIXIR:
                            break;
                        case Skylanders.EntityCommand.BONUS_SHOE:
                            break;
                        case "attack_extra":
                        case "sattack_extra":
                        case "engine_extra":
                            this._sound.playSound("SUIShuffle");
                            break;
                    }
                    break;
                case Skylanders.InventoryEvent.SLOT_FILLED:
                    break;
                case Skylanders.InventoryEvent.SLOT_EMPTIED:
                    break;
                case Skylanders.InventoryEvent.ALLY_UNLOCKED:
                    this._sound.playSound("SFXUnlock");
                    break;
                case Skylanders.InventoryEvent.ALLY_UNLOCKABLE:
                    break;
                case Skylanders.InventoryEvent.ALLY_OFFSCREEN:
                    break;
            }
        };
        BoardSoundStage.prototype.onPieceSelected = function () {
            this._sound.playSound("SUIPieceSelected");
        };
        BoardSoundStage.prototype.onSelectionExecuted = function (matchData) {
            this._sound.playSound("SUISelectionCleared");
        };
        return BoardSoundStage;
    })();
    Skylanders.BoardSoundStage = BoardSoundStage;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ScreenFX = (function (_super) {
        __extends(ScreenFX, _super);
        function ScreenFX(scene, timeManager, renderManager, globalStrings, width, height) {
                _super.call(this, timeManager, ScreenFX.NAME);
            this.game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
            this.renderManager = renderManager;
            this.scene = scene;
            this.width = width;
            this.height = height;
            this._graphics = {
            };
            this.globalStrings = globalStrings;
        }
        ScreenFX.NAME = "ScreenFX";
        ScreenFX.SCALE_FADE = 0;
        ScreenFX.FADE_INOUT = 1;
        Object.defineProperty(ScreenFX.prototype, "timeManager", {
            get: function () {
                return this._timeManager;
            },
            enumerable: true,
            configurable: true
        });
        ScreenFX.prototype.showBeneficialPlacement = function (place) {
            var message = this.globalStrings.game.messages["RaceGO"];
            var suffixes = this.globalStrings.game.placement;
            var text;
            for(var k in suffixes) {
                if(k.match(place.toString())) {
                    text = place + suffixes[k];
                }
            }
            if(!text) {
                text = place + suffixes["suffix4"];
            }
            var txt = Skylanders.ScreenUtil.makeText(this.scene, "Placement" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 10,
                style: ".screenFXWin",
                text: text,
                shadow: true,
                shadowColor: "#F3CC4E",
                shadowStrength: 2,
                shadowOffsetX: 3,
                shadowOffsetY: 3
            });
            var txtGlow1 = Skylanders.ScreenUtil.makeText(this.scene, "Placement" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 13,
                style: ".screenFXWin",
                text: text,
                alpha: 0
            });
            var txtGlow2 = Skylanders.ScreenUtil.makeText(this.scene, "Placement" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 12,
                style: ".screenFXWin",
                text: text,
                alpha: 0
            });
            var txtGlow3 = Skylanders.ScreenUtil.makeText(this.scene, "Placement" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 11,
                style: ".screenFXWin",
                text: text,
                alpha: 0
            });
            var img = Skylanders.ScreenUtil.makeImage(this.scene, "PlacementShine" + Math.round(Math.random() * 100000), "SelectGlow", {
                zIndex: this.zIndex + 9,
                alpha: 0.75
            });
            img.centerX = this.width / 2;
            img.centerY = this.height / 2;
            txt.left = this.width / 2 - txt.width / 2;
            txt.top = this.height / 2 - txt.height / 2;
            txt.registrationY = txt.height / 2;
            txt.registrationX = txt.width / 2;
            txtGlow1.left = txtGlow2.left = txtGlow3.left = txt.left;
            txtGlow1.top = txtGlow2.top = txtGlow3.top = txt.top;
            txtGlow1.registrationX = txtGlow2.registrationX = txtGlow3.registrationX = txt.registrationX;
            txtGlow1.registrationY = txtGlow2.registrationY = txtGlow3.registrationY = txt.registrationY;
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEnd();
                }
            });
            timeline.insert(TweenMax.from(txt, 0.5, {
                scaleX: 0,
                scaleY: 0.75,
                ease: Elastic.easeOut
            }));
            timeline.insert(TweenMax.to(txt, 0.35, {
                x: "+=700",
                ease: Back.easeIn,
                delay: 3.7
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.3, {
                scale: 3,
                delay: 0
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.05, {
                alpha: 0.25,
                delay: 0
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.3, {
                alpha: 0,
                delay: 0.07
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.3, {
                scale: 3,
                delay: 0.1
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.05, {
                alpha: 0.25,
                delay: 0.1
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.3, {
                alpha: 0,
                delay: 0.17
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.3, {
                scale: 3,
                delay: 0.2
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.05, {
                alpha: 0.25,
                delay: 0.2
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.3, {
                alpha: 0,
                delay: 0.27
            }));
            timeline.insert(TweenMax.from(img, 0.6, {
                scale: 0,
                delay: 0.05
            }));
            timeline.insert(TweenMax.to(img, 1.5, {
                rotation: 90,
                delay: 0.05,
                ease: Linear.easeInOut
            }));
            timeline.insert(TweenMax.to(img, 0.2, {
                alpha: 0,
                delay: 1.3
            }));
            function onEnd() {
                txt.destroy();
                txtGlow1.destroy();
                txtGlow2.destroy();
                txtGlow3.destroy();
                img.destroy();
            }
        };
        ScreenFX.prototype.showGoMessage = function () {
            var message = this.globalStrings.game.messages["RaceGO"];
            var txt = Skylanders.ScreenUtil.makeText(this.scene, "CountDownGo" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 10,
                style: message.style,
                text: message.value,
                shadow: true,
                shadowColor: "#F3CC4E",
                shadowStrength: 2,
                shadowOffsetX: 3,
                shadowOffsetY: 3
            });
            var txtGlow1 = Skylanders.ScreenUtil.makeText(this.scene, "CountDownGo" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 13,
                style: message.style,
                text: message.value,
                alpha: 0
            });
            var txtGlow2 = Skylanders.ScreenUtil.makeText(this.scene, "CountDownGo" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 12,
                style: message.style,
                text: message.value,
                alpha: 0
            });
            var txtGlow3 = Skylanders.ScreenUtil.makeText(this.scene, "CountDownGo" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 11,
                style: message.style,
                text: message.value,
                alpha: 0
            });
            var img = Skylanders.ScreenUtil.makeImage(this.scene, "CountDownGoShine" + Math.round(Math.random() * 100000), "SelectGlow", {
                zIndex: this.zIndex + 9,
                alpha: 0.75
            });
            img.centerX = this.width / 2;
            img.centerY = this.height / 2;
            txt.left = this.width / 2 - txt.width / 2;
            txt.top = this.height / 2 - txt.height / 2;
            txt.registrationY = txt.height / 2;
            txt.registrationX = txt.width / 2;
            txtGlow1.left = txtGlow2.left = txtGlow3.left = txt.left;
            txtGlow1.top = txtGlow2.top = txtGlow3.top = txt.top;
            txtGlow1.registrationX = txtGlow2.registrationX = txtGlow3.registrationX = txt.registrationX;
            txtGlow1.registrationY = txtGlow2.registrationY = txtGlow3.registrationY = txt.registrationY;
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEnd();
                }
            });
            timeline.insert(TweenMax.from(txt, 0.5, {
                scaleX: 0,
                scaleY: 0.75,
                ease: Elastic.easeOut
            }));
            timeline.insert(TweenMax.to(txt, 0.35, {
                x: "+=700",
                ease: Back.easeIn,
                delay: 0.7
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.3, {
                scale: 3,
                delay: 0
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.05, {
                alpha: 0.25,
                delay: 0
            }));
            timeline.insert(TweenMax.to(txtGlow1, 0.3, {
                alpha: 0,
                delay: 0.07
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.3, {
                scale: 3,
                delay: 0.1
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.05, {
                alpha: 0.25,
                delay: 0.1
            }));
            timeline.insert(TweenMax.to(txtGlow2, 0.3, {
                alpha: 0,
                delay: 0.17
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.3, {
                scale: 3,
                delay: 0.2
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.05, {
                alpha: 0.25,
                delay: 0.2
            }));
            timeline.insert(TweenMax.to(txtGlow3, 0.3, {
                alpha: 0,
                delay: 0.27
            }));
            timeline.insert(TweenMax.from(img, 0.6, {
                scale: 0,
                delay: 0.05
            }));
            timeline.insert(TweenMax.to(img, 1.5, {
                rotation: 90,
                delay: 0.05,
                ease: Linear.easeInOut
            }));
            timeline.insert(TweenMax.to(img, 0.2, {
                alpha: 0,
                delay: 1.3
            }));
            function onEnd() {
                txt.destroy();
                txtGlow1.destroy();
                txtGlow2.destroy();
                txtGlow3.destroy();
                img.destroy();
            }
        };
        ScreenFX.prototype.showCountdownNumber = function (count) {
            var txt = Skylanders.ScreenUtil.makeText(this.scene, "CountDownNumber" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 10,
                style: ".screenFXCountdown",
                text: count.toString(),
                shadow: true,
                shadowColor: "#F3CC4E",
                shadowStrength: 2,
                shadowOffsetX: 3,
                shadowOffsetY: 3
            });
            txt.left = this.width / 2 - txt.width / 2;
            txt.top = this.height / 2 - txt.height / 2;
            txt.registrationY = txt.height / 2;
            txt.registrationX = txt.width;
            var img = Skylanders.ScreenUtil.makeImage(this.scene, "CountDownShine" + Math.round(Math.random() * 100000), "TrackSelectGlow", {
                zIndex: this.zIndex + 15,
                scale: 0.25
            });
            img.centerX = this.width / 2 - 50;
            img.centerY = this.height / 2 - 50;
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEnd();
                }
            });
            timeline.insert(TweenMax.from(txt, 0.5, {
                scaleX: 0,
                scaleY: 0.75,
                ease: Elastic.easeOut
            }));
            timeline.insert(TweenMax.to(txt, 0.35, {
                x: "+=700",
                ease: Back.easeIn,
                delay: 0.7
            }));
            timeline.insert(TweenMax.from(img, 0.35, {
                alpha: 0,
                scale: 0,
                yoyo: true,
                repeat: 1
            }));
            timeline.insert(TweenMax.to(img, 0.6, {
                x: "+=75"
            }));
            var ctx = this;
            function onEnd() {
                txt.destroy();
                img.destroy();
            }
        };
        ScreenFX.prototype.showMessage = function (message, x, y, duration) {
            var txt = Skylanders.ScreenUtil.makeText(this.scene, "CountDownNumber" + Math.round(Math.random() * 100000), {
                zIndex: this.zIndex + 34,
                style: message instanceof Object ? message.style : ".screenFXCountdown",
                text: message instanceof Object ? message.value : message,
                shadow: true,
                shadowColor: "#444444",
                shadowStrength: 2,
                shadowOffsetX: 3,
                shadowOffsetY: 3
            });
            txt.left = x != null ? x : this.width / 2 - txt.width / 2;
            txt.top = y != null ? y : this.height / 2 - txt.height / 2;
            txt.registrationY = txt.height / 2;
            txt.registrationX = txt.width;
            var img = Skylanders.ScreenUtil.makeImage(this.scene, "CountDownShine" + Math.round(Math.random() * 100000), "TrackSelectGlow", {
                zIndex: this.zIndex + 35,
                scale: 0.25
            });
            img.centerX = x != null ? x : this.width / 2 - 50;
            img.centerY = y != null ? y : this.height / 2 - 50;
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEnd();
                }
            });
            timeline.insert(TweenMax.from(txt, 0.5, {
                scaleX: 0,
                scaleY: 0.75,
                ease: Elastic.easeOut
            }));
            timeline.insert(TweenMax.to(txt, 0.35, {
                x: "+=700",
                ease: Back.easeIn,
                delay: 0.7 + (duration || 0)
            }));
            timeline.insert(TweenMax.from(img, 0.35, {
                alpha: 0,
                scale: 0,
                yoyo: true,
                repeat: 1
            }));
            timeline.insert(TweenMax.to(img, 0.6, {
                x: "+=75"
            }));
            var ctx = this;
            function onEnd() {
                txt.destroy();
                img.destroy();
            }
        };
        ScreenFX.prototype.showPreraceMessage = function (delay, trackMessageID) {
            if (typeof delay === "undefined") { delay = 0; }
            var message = this.globalStrings.game.messages[trackMessageID];
            var group = Skylanders.ScreenUtil.makeGroup(this.scene, "ScreenMessageBoxGroup", {
                zIndex: this.zIndex + 10
            });
            var image = Skylanders.ScreenUtil.makeImage(this.scene, "ScreenBox", "QueenBox", {
                zIndex: this.zIndex + 10
            });
            var text = Skylanders.ScreenUtil.makeText(this.scene, "ScreenBoxText", {
                left: 0,
                top: 0,
                zIndex: this.zIndex + 11,
                style: message.style,
                text: message.value,
                lineWidth: 190
            });
            group.addChild(image);
            group.addChild(text);
            text.onTick(0);
            text.left = image.width / 2 - text.width / 2 - 10;
            text.top = image.height / 2 - text.height / 2 + 70;
            group.x = this.width / 2 - image.width / 2;
            group.y = this.height / 2 - image.height / 2;
            group.registrationX = image.width / 2;
            group.registrationY = image.height / 2;
            group.scale = 1;
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEndAnim();
                }
            });
            timeline.insert(TweenMax.from(group, 1, {
                scale: 0,
                ease: Elastic.easeOut,
                delay: delay
            }));
            timeline.insert(TweenMax.to(group, 1, {
                y: "+=10",
                repeat: 5,
                yoyo: true,
                delay: 1 + delay
            }));
            timeline.insert(TweenMax.to(group, 1, {
                scale: 0.1,
                alpha: 0,
                ease: Elastic.easeIn,
                delay: 4 + delay
            }));
            function onEndAnim() {
                text.destroy();
                image.destroy();
                group.destroy();
            }
        };
        ScreenFX.prototype.getAsset = function (assetID, node) {
            return this.game.getAsset(assetID, node);
        };
        ScreenFX.prototype.showText = function (msg, x, y, duration, effect) {
            if (typeof duration === "undefined") { duration = 1; }
            if (typeof effect === "undefined") { effect = ScreenFX.SCALE_FADE; }
            var txt = Skylanders.ScreenUtil.makeText(this, "txt" + Math.round(Math.random() * 1000), {
                text: msg,
                zIndex: this.zIndex + 50
            });
            txt.setStyle(".screenFX");
            var ctx = this;
            function destroy() {
                ctx.removeChild(txt);
                txt.destroy();
            }
            switch(effect) {
                case ScreenFX.SCALE_FADE:
                    TweenMax.to(txt, duration, {
                        scale: 2,
                        alpha: 0,
                        onComplete: function () {
                            return destroy();
                        }
                    });
                    break;
                case ScreenFX.FADE_INOUT:
                    TweenMax.from(txt, duration / 4, {
                        alpha: 0
                    });
                    TweenMax.delayedCall(duration / 4 * 2, function () {
                        TweenMax.to(txt, duration / 4, {
                            alpha: 0,
                            onComplete: function () {
                                return destroy();
                            }
                        });
                    });
                    break;
            }
            txt.x = x;
            txt.y = y;
        };
        return ScreenFX;
    })(Avota.GameEntity);
    Skylanders.ScreenFX = ScreenFX;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ScoreData = (function () {
        function ScoreData() {
            this._gearbitCount = 0;
            this.setDefinitions(Skylanders.GameData.getScoreData());
            this._scoreList = [];
            this._activeMultipliers = {
            };
        }
        ScoreData.NAME = "ScoreData";
        ScoreData.prototype.setDefinitions = function (params) {
            this._scoreDefinitions = params.scoreDefinitions;
            this._scoreMultipliers = params.scoreMultipliers;
        };
        ScoreData.prototype.logScore = function (scoreID) {
            if(this._scoreDefinitions[scoreID]) {
                this._scoreList.push(scoreID);
            }
        };
        ScoreData.prototype.logGearbits = function (itemID) {
            var itemData = Skylanders.GameData.getData("items")[itemID];
            if(!itemData) {
                return;
            }
            this._gearbitCount += itemData.value;
        };
        ScoreData.prototype.getGearbitCount = function () {
            return this._gearbitCount;
        };
        ScoreData.prototype.logMultipier = function (multiplierID) {
            if(this._scoreMultipliers[multiplierID]) {
                this._activeMultipliers[multiplierID] = true;
            }
        };
        ScoreData.prototype.getBaseScore = function () {
            var score = 0;
            for(var i = 0; i < this._scoreList.length; i++) {
                var scoreID = this._scoreList[i];
                score += this._scoreDefinitions[scoreID];
            }
            if(score < 0) {
                score = 0;
            }
            return score;
        };
        ScoreData.prototype.getTotalScore = function () {
            var score = this.getBaseScore();
            for(var k in this._activeMultipliers) {
                if(!this._activeMultipliers) {
                    continue;
                }
                score *= this._scoreMultipliers[k];
            }
            return score;
        };
        return ScoreData;
    })();
    Skylanders.ScoreData = ScoreData;    
    var ScoreDefinition = (function () {
        function ScoreDefinition() { }
        ScoreDefinition.GET_POWERUP = "getPowerUp";
        ScoreDefinition.GET_GEARBIT1 = "getGearbit1";
        ScoreDefinition.GET_GEARBIT2 = "getGearbit2";
        ScoreDefinition.HIT_ENEMY = "hitEnemy";
        ScoreDefinition.HIT_OPPONENT = "hitOpponent";
        ScoreDefinition.DAMAGE_PENALTY = "damagePenalty";
        ScoreDefinition.HAZARD_PENALTY = "hazardPenalty";
        return ScoreDefinition;
    })();
    Skylanders.ScoreDefinition = ScoreDefinition;    
    var ScoreMultiplier = (function () {
        function ScoreMultiplier() { }
        ScoreMultiplier.FIRST_PLACE = "firstPlace";
        ScoreMultiplier.SECOND_PLACE = "secondPlace";
        ScoreMultiplier.THIRD_PLACE = "thirdPlace";
        ScoreMultiplier.FORTH_PLACE = "fourthPlace";
        return ScoreMultiplier;
    })();
    Skylanders.ScoreMultiplier = ScoreMultiplier;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var InventoryData = (function () {
        function InventoryData() {
            this._allies = [];
            this.eventSignal = new Avota.Signal();
            this._bonusSlots = [];
            this._bonusSlots.length = this.maxBonuses;
            this.setBonuses();
            this.setTreasure();
        }
        InventoryData.NAME = "InventoryData";
        Object.defineProperty(InventoryData.prototype, "maxBonuses", {
            get: function () {
                return 4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InventoryData.prototype, "numAlliesUnlocked", {
            get: function () {
                var num = 0;
                for(var k in this._allies) {
                    if(this._allies[k]) {
                        num++;
                    }
                }
                return num;
            },
            enumerable: true,
            configurable: true
        });
        InventoryData.prototype.unlockAlly = function (allyID) {
            if(!this._allies[allyID]) {
                this._allies[allyID] = true;
                this.eventSignal.dispatch(InventoryEvent.ALLY_UNLOCKED, {
                    ally: allyID
                });
                if(this.numAlliesUnlocked == 3) {
                    var index = this._bonusList.indexOf(Skylanders.GamePiece.KEY);
                    while(index != -1) {
                        this._bonusList.splice(index, 1);
                        index = this._bonusList.indexOf(Skylanders.GamePiece.KEY);
                    }
                }
            }
        };
        InventoryData.prototype.isAllyUnlocked = function (allyID) {
            return this._allies[allyID] === true;
        };
        InventoryData.prototype.setBonuses = function () {
            this._bonusList = Skylanders.GameData.getRandomizedBonusList({
                "key": this.numAlliesUnlocked == 3
            });
        };
        InventoryData.prototype.setTreasure = function () {
            this._treasureList = Skylanders.GameData.getRandomizedTreasureList();
        };
        InventoryData.prototype.hasBonusInSlot = function (slotIndex) {
            return slotIndex < this._bonusSlots.length && this._bonusSlots[slotIndex] != null;
        };
        InventoryData.prototype.hasBonus = function (bonusID) {
            return this._bonusSlots.indexOf(bonusID) != -1;
        };
        InventoryData.prototype.getBonusInSlot = function (slotIndex) {
            return this._bonusSlots[slotIndex];
        };
        InventoryData.prototype.getBonus = function (sourceID) {
            var bonus = this._bonusList.shift();
            var bonusData = Skylanders.GameData.getData("bonuses")[bonus];
            this.eventSignal.dispatch(InventoryEvent.BONUS_GET, {
                bonus: bonus
            });
            if(bonusData.canStore) {
                this.storeBonus(bonus, sourceID);
            } else {
                this.useBonus(bonus);
            }
            if(this._bonusList.length == 0) {
                this.setBonuses();
            }
        };
        InventoryData.prototype.getTreasure = function () {
            var treasure = this._treasureList.shift();
            this.eventSignal.dispatch(InventoryEvent.TREASURE_GET, {
                treasure: treasure
            });
            if(this._treasureList.length == 0) {
                this.setTreasure();
            }
        };
        InventoryData.prototype.storeBonus = function (bonusID, sourceID) {
            for(var i = 0; i < this.maxBonuses; i++) {
                if(!this._bonusSlots[i]) {
                    this._bonusSlots[i] = bonusID;
                    this.eventSignal.dispatch(InventoryEvent.SLOT_FILLED, {
                        bonus: bonusID,
                        slotIndex: i,
                        sourceID: sourceID
                    });
                    break;
                }
            }
        };
        InventoryData.prototype.useBonus = function (bonusID) {
            this.eventSignal.dispatch(InventoryEvent.BONUS_USE, {
                bonus: bonusID
            });
        };
        InventoryData.prototype.useBonusInSlot = function (slotIndex) {
            if(slotIndex >= this._bonusSlots.length) {
                return;
            }
            var bonus = this._bonusSlots[slotIndex];
            this._bonusSlots[slotIndex] = null;
            this.useBonus(bonus);
            this.eventSignal.dispatch(InventoryEvent.SLOT_EMPTIED, {
                bonus: bonus,
                slotIndex: slotIndex
            });
        };
        return InventoryData;
    })();
    Skylanders.InventoryData = InventoryData;    
    var InventoryEvent = (function () {
        function InventoryEvent() { }
        InventoryEvent.BONUS_GET = 0;
        InventoryEvent.BONUS_USE = 1;
        InventoryEvent.SLOT_FILLED = 2;
        InventoryEvent.SLOT_EMPTIED = 3;
        InventoryEvent.ALLY_UNLOCKED = 4;
        InventoryEvent.ALLY_UNLOCKABLE = 5;
        InventoryEvent.ALLY_OFFSCREEN = 6;
        InventoryEvent.TREASURE_GET = 7;
        return InventoryEvent;
    })();
    Skylanders.InventoryEvent = InventoryEvent;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var GameData = (function () {
        function GameData() { }
        GameData.NAME = "GameData";
        GameData.BASE_FRAME_RATE = 60;
        GameData.DEVICE_FRAME_RATE = 60;
        Object.defineProperty(GameData, "FRAME_BUFFER", {
            get: function () {
                return GameData.BASE_FRAME_RATE / GameData.DEVICE_FRAME_RATE;
            },
            enumerable: true,
            configurable: true
        });
        GameData.setup = function setup(game) {
            var gameConfig = game.getAsset("GameConfig");
            var spriteConfig = game.getAsset("SpriteConfig");
            var config = game.config;
            var tracks = {
            };
            var trackList = gameConfig.tracks;
            for(var i = 0; i < trackList.length; i++) {
                var track = game.getAsset(trackList[i]);
                if(!track) {
                    continue;
                }
                tracks[trackList[i]] = track;
            }
            GameData._tracks = tracks;
            GameData._gameData = gameConfig;
            GameData._spriteData = spriteConfig;
            GameData._vehicleList = [];
            GameData._characterList = [];
            GameData._trackList = [];
            GameData._upgradeList = [];
            GameData._bonusList = [];
            GameData._dataLists = {
            };
            GameData._version = config.version;
            for(var k in GameData._gameData.vehicles) {
                GameData._vehicleList.push(k);
            }
            for(var k in GameData._gameData.characters) {
                GameData._characterList.push(k);
            }
            for(var k in GameData._gameData.upgrades) {
                GameData._upgradeList.push(k);
            }
            for(var k in GameData._gameData.bonuses) {
                GameData._bonusList.push(k);
            }
            for(var k in tracks) {
                GameData._trackList.push(k);
            }
        };
        GameData.getVersionNumber = function getVersionNumber() {
            return GameData._version;
        };
        GameData.getData = function getData(property) {
            return GameData._gameData[property];
        };
        GameData.getDataList = function getDataList(property) {
            if(!GameData._dataLists[property]) {
                var list = [];
                for(var k in GameData._gameData[property]) {
                    list.push(k);
                }
                GameData._dataLists[property] = list;
            }
            return GameData._dataLists[property];
        };
        GameData.getVehicleData = function getVehicleData(id) {
            return GameData._gameData.vehicles[id];
        };
        GameData.getVehicleList = function getVehicleList() {
            return GameData._vehicleList;
        };
        GameData.getSelectableVehicleList = function getSelectableVehicleList() {
            var list = [];
            var fullList = GameData.getVehicleList();
            for(var i = 0; i < fullList.length; i++) {
                var data = GameData.getVehicleData(fullList[i]);
                if(data.selectable) {
                    list.push(fullList[i]);
                }
            }
            return list;
        };
        GameData.getCharacterData = function getCharacterData(id) {
            return GameData._gameData.characters[id];
        };
        GameData.getCharacterList = function getCharacterList() {
            return GameData._characterList;
        };
        GameData.getStarsForScore = function getStarsForScore(score, trackID) {
            var track = GameData.getTrackData(trackID);
            var stars = 0;
            for(var i = 0; i < 3; i++) {
                if(score >= track.scoring[i]) {
                    stars++;
                } else {
                    break;
                }
            }
            return stars;
        };
        GameData.getSelectableCharacterList = function getSelectableCharacterList() {
            var list = [];
            var fullList = GameData.getCharacterList();
            for(var i = 0; i < fullList.length; i++) {
                var data = GameData.getCharacterData(fullList[i]);
                if(data.selectable) {
                    list.push(fullList[i]);
                }
            }
            return list;
        };
        GameData.getTrackData = function getTrackData(id) {
            return GameData._tracks[id];
        };
        GameData.getTrackList = function getTrackList() {
            return GameData._trackList;
        };
        GameData.getScoreData = function getScoreData() {
            return GameData._gameData.scoring;
        };
        GameData.getUpgradeData = function getUpgradeData() {
            return GameData._gameData.upgrades;
        };
        GameData.getSortedUpgradeList = function getSortedUpgradeList(property, value) {
            var list = [];
            for(var k in GameData._gameData.upgrades) {
                var upgrade = GameData._gameData.upgrades[k];
                if(upgrade[property] == value) {
                    list.push(k);
                }
            }
            return list;
        };
        GameData.getUpgradeList = function getUpgradeList() {
            return GameData._upgradeList;
        };
        GameData.getBonusList = function getBonusList() {
            return GameData._bonusList;
        };
        GameData.getSpriteConfig = function getSpriteConfig() {
            return GameData._spriteData;
        };
        GameData.getOpponentData = function getOpponentData(id) {
            return GameData._gameData.opponents[id];
        };
        GameData.getAttackData = function getAttackData(id) {
            return GameData._gameData.attacks[id];
        };
        GameData.framesToSeconds = function framesToSeconds(frames) {
            return frames * (1000 / 60) * GameData.FRAME_BUFFER;
        };
        GameData.formatTimeFromFrames = function formatTimeFromFrames(frames, milliseconds) {
            if (typeof milliseconds === "undefined") { milliseconds = false; }
            var elapsed = GameData.framesToSeconds(frames);
            var mil = Math.floor(elapsed % 1000 / 10);
            var sec = Math.floor(elapsed / 1000) % 60;
            var min = Math.floor(elapsed / 1000 / 60);
            var text = "";
            text += min < 10 ? "0" + min : "" + min;
            text += ":";
            text += sec < 10 ? "0" + sec : "" + sec;
            if(milliseconds) {
                text += ".";
                text += mil < 10 ? "0" + mil : "" + mil;
            }
            return text;
        };
        GameData.getRandomizedBonusList = function getRandomizedBonusList(ignoreList) {
            var list = [];
            var bonusList = GameData.getBonusList();
            for(var i = 0; i < bonusList.length; i++) {
                if(ignoreList && ignoreList[bonusList[i]]) {
                    continue;
                }
                var bonus = GameData.getData("bonuses")[bonusList[i]];
                for(var j = 0; j < bonus.encounter; j++) {
                    list.push(bonusList[i]);
                }
            }
            list = Avota.ArrayUtil.randomize(list);
            return list;
        };
        GameData.getRandomizedTreasureList = function getRandomizedTreasureList() {
            var list = [];
            var dataList = GameData.getDataList("treasure");
            for(var i = 0; i < dataList.length; i++) {
                var bonus = GameData.getData("treasure")[dataList[i]];
                for(var j = 0; j < bonus.encounter; j++) {
                    list.push(dataList[i]);
                }
            }
            list = Avota.ArrayUtil.randomize(list);
            return list;
        };
        GameData.getVehicleStatScale = function getVehicleStatScale(stat, vehclID, upgradeList) {
            var statValue = GameData.getVehicleStat(stat, vehclID, upgradeList);
            var maxValue = GameData.getData("maxStats")[stat] || 1;
            return statValue / maxValue;
        };
        GameData.getVehicleStat = function getVehicleStat(stat, vehclID, upgradeList) {
            var vehicleData = GameData.getVehicleData(vehclID);
            var value = vehicleData[stat] || 0;
            if(upgradeList) {
                for(var i = 0; i < upgradeList.length; i++) {
                    var upgradeID = upgradeList[i];
                    var upgrade = GameData.getUpgradeData()[upgradeID];
                    if(!upgrade) {
                        continue;
                    }
                    if(upgrade.vehicle != vehclID) {
                        continue;
                    }
                    if(upgrade.stats && upgrade.stats[stat]) {
                        value += upgrade.stats[stat];
                    }
                }
            }
            return value;
        };
        GameData.getDisplayIDForVehicleCombo = function getDisplayIDForVehicleCombo(vehclID, upgradeList) {
            var vehicleData = GameData.getVehicleData(vehclID);
            var definitionString = "";
            definitionString += vehicleData.code;
            definitionString += "_";
            var specialtyCode = "";
            var performanceCode = "";
            for(var i = 0; i < upgradeList.length; i++) {
                var upgradeID = upgradeList[i];
                var upgradeData = GameData.getUpgradeData()[upgradeID];
                if(upgradeData.vehicle != vehclID) {
                    continue;
                }
                if(upgradeData.type == "special") {
                    specialtyCode = upgradeData.code;
                }
                if(upgradeData.type == "performance") {
                    performanceCode = upgradeData.code;
                }
            }
            definitionString += specialtyCode;
            definitionString += "_";
            definitionString += performanceCode;
            return definitionString;
        };
        GameData.getAssetListForVehicleCombo = function getAssetListForVehicleCombo(charID, vehclID, upgradeList) {
            var assetLoadList = [];
            var spriteConfig = GameData.getSpriteConfig();
            var definitionString = GameData.getDisplayIDForVehicleCombo(vehclID, upgradeList);
            var displayDefinition = spriteConfig.displayDefinitions[definitionString];
            var spriteSheetList = {
            };
            for(var i = 0; i < displayDefinition.data.length; i++) {
                var animID = displayDefinition.data[i];
                var animData;
                for(var j = 0; j < spriteConfig.animations.length; j++) {
                    if(spriteConfig.animations[j].name == animID) {
                        animData = spriteConfig.animations[j];
                        break;
                    }
                }
                if(!animData) {
                    continue;
                }
                for(var j = 0; j < spriteConfig.spritesheets.length; j++) {
                    if(spriteConfig.spritesheets[j].name == animData.spritesheet && !spriteSheetList[spriteConfig.spritesheets[j].name]) {
                        spriteSheetList[spriteConfig.spritesheets[j].name] = true;
                        assetLoadList.push(spriteConfig.spritesheets[j].image);
                        assetLoadList.push(spriteConfig.spritesheets[j].json);
                        break;
                    }
                }
            }
            return assetLoadList;
        };
        GameData.reloadTrack = function reloadTrack(trackID) {
            var game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
            var resources = game.config.resources;
            for(var i = 0; i < resources.length; i++) {
                var resource = resources[i];
                if(resource.name == trackID) {
                    try  {
                        game.resourceManager.unload(game.resourceManager.getResource(resource.path));
                        game.resourceManager.load(resource.path);
                        game.resourceManager.completeSignal.addOnce(onComplete, this);
                    } catch (e) {
                        console.error(e);
                    }
                }
            }
            function onComplete() {
                GameData.setup(game);
                var level = game.sceneManager._state;
                if(level) {
                    level.setScene(Skylanders.SuperChargersLevel);
                }
            }
        };
        GameData.reloadSpriteData = function reloadSpriteData() {
            var game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
            var resources = game.config.resources;
            for(var i = 0; i < resources.length; i++) {
                var resource = resources[i];
                if(resource.name == "SpriteConfig") {
                    try  {
                        game.resourceManager.unload(game.resourceManager.getResource(resource.path));
                        game.resourceManager.load(resource.path);
                        game.resourceManager.completeSignal.addOnce(onComplete, this);
                    } catch (e) {
                        console.error(e);
                    }
                }
            }
            function onComplete() {
                GameData.setup(game);
                var level = game.sceneManager._state;
                if(level) {
                    level.setScene(Skylanders.SuperChargersLevel);
                }
            }
        };
        GameData.endRace = function endRace() {
            var game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
            var level = game.get("SuperChargersLevel");
            level.world.eventSignal.dispatch(Skylanders.EventSignals.RACE_END);
        };
        GameData.reloadGameData = function reloadGameData() {
            var game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
            var resources = game.config.resources;
            for(var i = 0; i < resources.length; i++) {
                var resource = resources[i];
                if(resource.name == "GameConfig") {
                    try  {
                        game.resourceManager.unload(game.resourceManager.getResource(resource.path));
                        game.resourceManager.load(resource.path);
                        game.resourceManager.completeSignal.addOnce(onComplete, this);
                    } catch (e) {
                        console.error(e);
                    }
                }
            }
            function onComplete() {
                GameData.setup(game);
                var level = game.sceneManager._state;
                if(level) {
                    level.setScene(Skylanders.SuperChargersLevel);
                }
            }
        };
        return GameData;
    })();
    Skylanders.GameData = GameData;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var SpriteConfig = (function () {
        function SpriteConfig() { }
        SpriteConfig.NAME = "SpriteConfig";
        SpriteConfig.setup = function setup(spriteData) {
            SpriteConfig.spriteData = spriteData;
        };
        SpriteConfig.getDisplayDefinition = function getDisplayDefinition(id) {
            return SpriteConfig.spriteData.displayDefinitions[id];
        };
        SpriteConfig.makeSpriteSheet = function makeSpriteSheet(scene, spritesheetID) {
            var spritesheetData = SpriteConfig.getSpriteSheetData(spritesheetID);
            return scene.get(spritesheetID) || scene.create(Avota.SpriteSheet, scene.getAsset(spritesheetData.sheet), scene.getAsset(spritesheetData.json), spritesheetID);
        };
        SpriteConfig.getAnimationData = function getAnimationData(animID) {
            return SpriteConfig._search("name", animID, SpriteConfig.spriteData.animations);
        };
        SpriteConfig.getImageData = function getImageData(imageID) {
            return SpriteConfig._search("name", imageID, SpriteConfig.spriteData.images);
        };
        SpriteConfig.getSpriteSheetData = function getSpriteSheetData(ssID) {
            return SpriteConfig._search("name", ssID, SpriteConfig.spriteData.spritesheets);
        };
        SpriteConfig._search = function _search(property, value, array) {
            for(var i = 0; i < array.length; i++) {
                var obj = array[i];
                if(obj[property] && obj[property] === value) {
                    return obj;
                }
            }
        };
        return SpriteConfig;
    })();
    Skylanders.SpriteConfig = SpriteConfig;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var PlayerData = (function () {
        function PlayerData() { }
        PlayerData.NAME = "PlayerData";
        PlayerData._activeUpgrades = [];
        PlayerData._raceResults = {
        };
        PlayerData.instructionsFlag = true;
        PlayerData.setup = function setup() {
            PlayerData._upgradeInventory = {
            };
            PlayerData._trackStats = [];
            PlayerData._currency = 0;
            PlayerData.reload();
        };
        PlayerData.hasSavedData = function hasSavedData() {
            var base64 = Avota.CookieUtil.read("playerdatascgame2");
            return (base64 && base64 != "");
        };
        PlayerData.save = function save() {
            Avota.CookieUtil.write("playerdatascgame2", PlayerData.encode());
        };
        PlayerData.reload = function reload() {
            var base64 = Avota.CookieUtil.read("playerdatascgame2");
            if(base64 && base64 != "") {
                PlayerData.decode(base64);
            }
        };
        PlayerData.deleteAll = function deleteAll() {
            Avota.CookieUtil.remove("playerdatascgame2");
        };
        PlayerData.validateSaveData = function validateSaveData() {
            var base64 = Avota.CookieUtil.read("playerdatascgame2");
            if(!base64 || base64 == "") {
                return false;
            }
            var data = PlayerData.decodeURLSafeBase64(base64);
            var elements = data.split("|");
            var version = elements[0];
            if(version != Skylanders.GameData.getVersionNumber()) {
                PlayerData.deleteAll();
                return false;
            }
            return true;
        };
        PlayerData.encode = function encode() {
            var data = "";
            data += Skylanders.GameData.getVersionNumber() + "|";
            data += PlayerData._selectedCharacter + "|";
            data += PlayerData._selectedVehicle + "|";
            data += PlayerData._selectedTrack + "|";
            data += PlayerData._currency.toString() + "|";
            for(var k in PlayerData._upgradeInventory) {
                var ud = PlayerData._upgradeInventory[k];
                data += k + ":" + ud.active.toString() + ";";
            }
            data += "|";
            for(var k in PlayerData._trackStats) {
                var td = PlayerData._trackStats[k];
                data += k + ":" + td.unlocked + "," + td.highScore + "," + td.bestTime + "," + td.frameCount + ";";
            }
            return PlayerData.encodeURLSafeBase64(data);
        };
        PlayerData.encodeURLSafeBase64 = function encodeURLSafeBase64(data) {
            var base64Data = window["LZString"].compressToBase64(data);
            return base64Data.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=+$/, '');
        };
        PlayerData.decodeURLSafeBase64 = function decodeURLSafeBase64(str) {
            str = (str + '===').slice(0, str.length + (str.length % 4));
            var base64Data = str.replace(/-/g, '+').replace(/_/g, '/');
            return window["LZString"].decompressFromBase64(base64Data);
        };
        PlayerData.decode = function decode(base64) {
            var data = PlayerData.decodeURLSafeBase64(base64);
            var elements = data.split("|");
            var version = elements[0];
            if(version != Skylanders.GameData.getVersionNumber()) {
                return;
            }
            PlayerData._selectedCharacter = elements[1];
            PlayerData._selectedVehicle = elements[2];
            PlayerData._selectedTrack = elements[3];
            PlayerData._currency = parseInt(elements[4]);
            PlayerData._upgradeInventory = {
            };
            var upgrades = elements[5].split(";");
            for(var i = 0; i < upgrades.length; i++) {
                var split = upgrades[i].split(":");
                if(!split || split.length == 1) {
                    continue;
                }
                var name = split[0];
                var value = split[1] == "true";
                var udata = {
                };
                udata.active = value;
                PlayerData._upgradeInventory[name] = udata;
            }
            PlayerData._activeUpgrades = [];
            for(var k in PlayerData._upgradeInventory) {
                if(PlayerData._upgradeInventory[k].active) {
                    PlayerData._activeUpgrades.push(k);
                }
            }
            PlayerData._trackStats = {
            };
            var tracks = elements[6].split(";");
            for(var i = 0; i < tracks.length; i++) {
                var split = tracks[i].split(":");
                if(!split || split.length == 1) {
                    continue;
                }
                var name = split[0];
                var prop = split[1].split(",");
                var unlocked = prop[0] == "true";
                var highScore = parseInt(prop[1]);
                var bestTime = parseInt(prop[2]);
                var frameCount = parseInt(prop[3]);
                var tdata = {
                };
                tdata.unlocked = unlocked;
                tdata.highScore = highScore;
                tdata.bestTime = bestTime;
                tdata.frameCount = frameCount;
                PlayerData._trackStats[name] = tdata;
            }
        };
        PlayerData.purchase = function purchase(upgradeID) {
            var upgrade = Skylanders.GameData.getUpgradeData()[upgradeID];
            if(!upgrade) {
                return;
            }
            if(!PlayerData.canAfford(upgradeID)) {
                return;
            }
            PlayerData.deductCurrency(upgrade.cost);
            PlayerData.unlockUpgrade(upgradeID);
        };
        PlayerData.logTracks = function logTracks(tracks) {
            for(var i = 0; i < tracks.length; i++) {
                var track = tracks[i];
                if(PlayerData._trackStats[track]) {
                    continue;
                }
                var data = {
                };
                data.unlocked = (i == 0);
                data.highScore = 0;
                data.bestTime = 0;
                data.frameCount = 0;
                PlayerData._trackStats[track] = data;
            }
        };
        PlayerData.selectTrack = function selectTrack(id) {
            var track = Skylanders.GameData.getTrackData(id);
            if(!track) {
                return;
            }
            PlayerData._selectedTrack = id;
        };
        PlayerData.getSelectedTrack = function getSelectedTrack() {
            return PlayerData._selectedTrack;
        };
        PlayerData.getDataForTrack = function getDataForTrack(id) {
            return PlayerData._trackStats[id];
        };
        PlayerData.clearTrackData = function clearTrackData(id) {
            var data = {
            };
            data.unlocked = PlayerData._trackStats[id].unlocked;
            data.highScore = 0;
            data.bestTime = 0;
            data.frameCount = 0;
            PlayerData._trackStats[id] = data;
        };
        PlayerData.isTrackUnlocked = function isTrackUnlocked(id) {
            return PlayerData._trackStats[id].unlocked;
        };
        PlayerData.unlockTrack = function unlockTrack(id, activate) {
            if (typeof activate === "undefined") { activate = true; }
            var track = PlayerData._trackStats[id];
            if(!track) {
                return;
            }
            track.unlocked = true;
        };
        PlayerData.unlockNextTrack = function unlockNextTrack() {
            var trackList = Skylanders.GameData.getTrackList();
            for(var i = 0; i < trackList.length; i++) {
                var track = trackList[i];
                if(!PlayerData.isTrackUnlocked(track)) {
                    PlayerData.unlockTrack(track);
                    return;
                }
            }
        };
        PlayerData.recordTrackStats = function recordTrackStats(id, score, time) {
            var track = PlayerData._trackStats[id];
            if(!track) {
                return;
            }
            if(score > track.highScore) {
                track.highScore = score;
            }
            if(track.bestTime == 0 || time < track.bestTime) {
                track.bestTime = time;
            }
        };
        PlayerData.recordRaceResults = function recordRaceResults(racerWorld) {
            var data = PlayerData._raceResults;
            data.time = racerWorld.raceEndFrame - racerWorld.raceStartFrame;
            data.score = racerWorld.scoreData.getTotalScore();
            data.gearbits = racerWorld.scoreData.getGearbitCount();
            data.trackID = PlayerData.getSelectedTrack();
            var racers = racerWorld.getEntitiesInCategory("racers");
            var charData = [];
            for(var i = 0; i < racers.length; i++) {
                var racer = racerWorld.getEntity(racers[i]);
                var racerData = {
                };
                var characterID;
                switch(racer.id) {
                    case "player":
                        characterID = PlayerData.getSelectedCharacter();
                        if(racer.place == 1) {
                            data.placed = true;
                        }
                        break;
                    case "rival":
                        characterID = PlayerData.getRivalCharacter(1);
                        break;
                    default:
                        characterID = PlayerData.getRivalCharacter(2);
                        break;
                }
                racerData.id = racer.id;
                racerData.characterID = characterID;
                racerData.time = racer.getEndFrame("raceEnd") - racerWorld.raceStartFrame;
                charData.push(racerData);
            }
            charData.sort(function (a, b) {
                if(a.time < b.time) {
                    return -1;
                }
                if(a.time > b.time) {
                    return 1;
                }
                return 0;
            });
            data.charData = charData;
        };
        PlayerData.getRaceResults = function getRaceResults() {
            return PlayerData._raceResults;
        };
        PlayerData.unlockUpgrade = function unlockUpgrade(id, activate) {
            if (typeof activate === "undefined") { activate = true; }
            var uinv = PlayerData._upgradeInventory;
            var upgrades = Skylanders.GameData.getUpgradeData();
            if(!upgrades[id]) {
                return;
            }
            uinv[id] = {
                active: false
            };
            if(activate) {
                PlayerData.toggleUpgrade(id, true);
            }
        };
        PlayerData.toggleUpgrade = function toggleUpgrade(id, active) {
            var uinv = PlayerData._upgradeInventory;
            var upgrades = Skylanders.GameData.getUpgradeData();
            var upgrade = upgrades[id];
            if(!uinv[id]) {
                return;
            }
            if(active) {
                for(var k in uinv) {
                    var udata = upgrades[k];
                    if(k == id) {
                        uinv[k].active = true;
                    } else {
                        if(udata.type == upgrade.type && udata.vehicle == upgrade.vehicle) {
                            uinv[k].active = false;
                        }
                    }
                }
            } else {
                uinv[id].active = false;
            }
            PlayerData._activeUpgrades = [];
            for(var k in uinv) {
                if(uinv[k].active) {
                    PlayerData._activeUpgrades.push(k);
                }
            }
        };
        PlayerData.getActiveUpgradeForVehicle = function getActiveUpgradeForVehicle(vehicleID, type) {
            var upgradeID;
            for(var i = 0; i < PlayerData.getActiveUpgrades().length; i++) {
                upgradeID = PlayerData.getActiveUpgrades()[i];
                if(Skylanders.GameData.getUpgradeData()[upgradeID].type == type && Skylanders.GameData.getUpgradeData()[upgradeID].vehicle == vehicleID) {
                    return upgradeID;
                }
            }
            return null;
        };
        PlayerData.getActiveUpgrades = function getActiveUpgrades() {
            return PlayerData._activeUpgrades;
        };
        PlayerData.isUpgradeUnlocked = function isUpgradeUnlocked(id) {
            var uinv = PlayerData._upgradeInventory;
            return uinv[id] != null;
        };
        PlayerData.isUpgradeActive = function isUpgradeActive(id) {
            var uinv = PlayerData._upgradeInventory;
            return uinv[id] && uinv[id].active;
        };
        PlayerData.selectVehicle = function selectVehicle(id) {
            var vehicle = Skylanders.GameData.getVehicleData(id);
            if(!vehicle || !vehicle.selectable) {
                return;
            }
            PlayerData._selectedVehicle = id;
        };
        PlayerData.getSelectedVehicle = function getSelectedVehicle() {
            return PlayerData._selectedVehicle;
        };
        PlayerData.selectCharacter = function selectCharacter(id) {
            var character = Skylanders.GameData.getCharacterData(id);
            if(!character || !character.selectable) {
                return;
            }
            PlayerData._selectedCharacter = id;
        };
        PlayerData.getSelectedCharacter = function getSelectedCharacter() {
            return PlayerData._selectedCharacter;
        };
        PlayerData.hasSuperChargedCombo = function hasSuperChargedCombo() {
            var characterData = Skylanders.GameData.getCharacterData(PlayerData.getSelectedCharacter());
            return characterData.comboVehicle == PlayerData.getSelectedVehicle();
        };
        PlayerData.getRivalCharacter = function getRivalCharacter(rivalNum) {
            if (typeof rivalNum === "undefined") { rivalNum = 1; }
            var characterList = Skylanders.GameData.getSelectableCharacterList();
            var rival = "char_chompy";
            var count = 1;
            for(var i = 0; i < characterList.length; i++) {
                if(characterList[i] != PlayerData._selectedCharacter) {
                    if(rivalNum == 0 || count == rivalNum) {
                        rival = characterList[i];
                        break;
                    } else {
                        count++;
                    }
                }
            }
            return rival;
        };
        PlayerData.getRivalVehicle = function getRivalVehicle(rivalNum) {
            if (typeof rivalNum === "undefined") { rivalNum = 1; }
            var vehicleList = Skylanders.GameData.getSelectableVehicleList();
            var rival;
            var count = 1;
            for(var i = 0; i < vehicleList.length; i++) {
                if(vehicleList[i] != PlayerData._selectedVehicle) {
                    if(rivalNum == 0 || count == rivalNum) {
                        rival = vehicleList[i];
                        break;
                    } else {
                        count++;
                    }
                }
            }
            return rival;
        };
        PlayerData.getCharIDForEntity = function getCharIDForEntity(entityID) {
            var id = "";
            switch(entityID) {
                case "player":
                    id = PlayerData.getSelectedCharacter();
                    break;
                case "rival":
                    id = PlayerData.getRivalCharacter();
                    break;
                default:
                    id = PlayerData.getRivalCharacter(2);
                    break;
            }
            return id;
        };
        PlayerData.getVehicleIDForEntity = function getVehicleIDForEntity(entityID) {
            var id = "";
            switch(entityID) {
                case "player":
                    id = PlayerData.getSelectedVehicle();
                    break;
                case "rival":
                    id = PlayerData.getRivalVehicle();
                    break;
                default:
                    id = PlayerData.getRivalVehicle(2);
                    break;
            }
            return id;
        };
        PlayerData.executeCommand = function executeCommand(type, data) {
            switch(type) {
                case "unlock":
                    var uinv = PlayerData._upgradeInventory;
                    var upgrades = Skylanders.GameData.getUpgradeData();
                    if(typeof data == 'string') {
                        if(data == "all") {
                            for(var k in upgrades) {
                                PlayerData.unlockUpgrade(k);
                            }
                        }
                    } else {
                        for(var i = 0; i < data.length; i++) {
                            PlayerData.unlockUpgrade(data[i]);
                        }
                    }
                    break;
            }
        };
        PlayerData.addCurrency = function addCurrency(v) {
            PlayerData._currency += v;
        };
        PlayerData.deductCurrency = function deductCurrency(v) {
            PlayerData._currency -= v;
            if(PlayerData._currency < 0) {
                PlayerData._currency = 0;
            }
        };
        PlayerData.getCurrency = function getCurrency() {
            return PlayerData._currency;
        };
        PlayerData.canAfford = function canAfford(upgradeID) {
            var upgrade = Skylanders.GameData.getUpgradeData()[upgradeID];
            return upgrade.cost <= PlayerData._currency;
        };
        return PlayerData;
    })();
    Skylanders.PlayerData = PlayerData;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TouchInput = (function () {
        function TouchInput() {
            this.inputs = {
            };
            this.minSwipeDistance = 100;
            this.swipeWindow = Math.round(40 / Skylanders.GameData.FRAME_BUFFER);
            this.elapsed = 0;
            this.currentDistance = 0;
            this.currTouchPoint = new Avota.Point();
            this.setupTouchQueue();
        }
        TouchInput.NAME = "TouchInput";
        TouchInput.INPUT_FIRE = "fire";
        TouchInput.INPUT_FIRE2 = "fire2";
        TouchInput.INPUT_RIGHT = "right";
        TouchInput.INPUT_LEFT = "left";
        TouchInput.INPUT_BRAKE = "brake";
        TouchInput.INPUT_ACCEL = "accel";
        TouchInput.prototype.setupTouchQueue = function () {
            this.touchQueue = [];
            for(var i = 0; i < Skylanders.GameData.DEVICE_FRAME_RATE; i++) {
                var data = {
                };
                data.point = new Avota.Point();
                data.touchDown = false;
                this.touchQueue.push(data);
            }
        };
        TouchInput.prototype.onTouchMove = function (sprite, x, y, id) {
            var curr = this.touchQueue[0];
            curr.point.x = x;
            curr.point.y = y;
            this.checkGestures();
        };
        TouchInput.prototype.onTouchDown = function (sprite, x, y, id) {
            var curr = this.touchQueue[0];
            curr.point.x = x;
            curr.point.y = y;
            curr.touchDown = true;
            this.checkGestures();
        };
        TouchInput.prototype.onTouchUp = function (sprite, x, y, id) {
            var curr = this.touchQueue[0];
            curr.point.x = x;
            curr.point.y = y;
            curr.touchDown = false;
            this.clearSwipe();
        };
        TouchInput.prototype.detectGestures = function (delta) {
            this.elapsed += delta * 1000;
            var curr = this.touchQueue.pop();
            var prev = this.touchQueue[0];
            curr.point.x = prev.point.x;
            curr.point.y = prev.point.y;
            curr.touchDown = prev.touchDown;
            this.touchQueue.unshift(curr);
            if(!curr.touchDown) {
                this.clearSwipe();
            }
        };
        TouchInput.prototype.checkGestures = function () {
            var curr = this.touchQueue[0];
            var swipeFrame = this.touchQueue[this.swipeWindow];
            var isDown = true;
            for(var i = 0; i < this.swipeWindow; i++) {
                var data = this.touchQueue[i];
                if(!data.touchDown) {
                    isDown = false;
                    this.clearSwipe();
                    break;
                } else {
                    var dx = data.point.x - curr.point.x;
                    if(Math.abs(dx) > this.minSwipeDistance) {
                        this.onSwipe(dx > 0 ? 1 : -1);
                        break;
                    }
                }
            }
        };
        TouchInput.prototype.onSwipe = function (dir) {
            console.log("SWIPE!", dir > 0 ? "left" : "right");
            if(dir > 0) {
                this.inputs[TouchInput.INPUT_LEFT] = true;
            } else if(dir < 0) {
                this.inputs[TouchInput.INPUT_RIGHT] = true;
            }
        };
        TouchInput.prototype.hasInput = function (inputID) {
            return this.inputs[inputID];
        };
        TouchInput.prototype.clearSwipe = function () {
            this.inputs[TouchInput.INPUT_LEFT] = false;
            this.inputs[TouchInput.INPUT_RIGHT] = false;
        };
        TouchInput.prototype.onPressFire = function () {
            this.inputs[TouchInput.INPUT_FIRE] = true;
        };
        TouchInput.prototype.onReleaseFire = function () {
            this.inputs[TouchInput.INPUT_FIRE] = false;
        };
        TouchInput.prototype.onPressFire2 = function () {
            this.inputs[TouchInput.INPUT_FIRE2] = true;
        };
        TouchInput.prototype.onReleaseFire2 = function () {
            this.inputs[TouchInput.INPUT_FIRE2] = false;
        };
        TouchInput.prototype.onPressAccel = function () {
            this.inputs[TouchInput.INPUT_ACCEL] = true;
        };
        TouchInput.prototype.onReleaseAccel = function () {
            this.inputs[TouchInput.INPUT_ACCEL] = false;
        };
        TouchInput.prototype.onPressBrake = function () {
            this.inputs[TouchInput.INPUT_BRAKE] = true;
        };
        TouchInput.prototype.onReleaseBrake = function () {
            this.inputs[TouchInput.INPUT_BRAKE] = false;
        };
        return TouchInput;
    })();
    Skylanders.TouchInput = TouchInput;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var MenuController = (function () {
        function MenuController(menu) {
            this._tweenTypes = {
                "Power4.easeIn": Power4.easeIn,
                "Power4.easeInOut": Power4.easeInOut,
                "Bounce.easeOut": Bounce.easeOut,
                "Bounce.easeIn": Bounce.easeIn,
                "Bounce.easeInOut": Bounce.easeInOut,
                "Back.easeIn": Back.easeIn,
                "Back.easeOut": Back.easeOut,
                "Back.easeInOut": Back.easeInOut,
                "Elastic.easeIn": Elastic.easeIn,
                "Elastic.easeOut": Elastic.easeOut,
                "Elastic.easeInOut": Elastic.easeInOut,
                "Linear.easeIn": Linear.easeIn,
                "Linear.easeOut": Linear.easeOut,
                "Linear.easeInOut": Linear.easeInOut
            };
            this.prebuild = false;
            this.destroyOnExit = true;
            this._menu = menu;
        }
        MenuController.NAME = "MenuController";
        MenuController.prototype.buttonHandler = function (button, action, id) {
            switch(action) {
                case Avota.Button.OVER:
                    if(this._menu.buttonSFX.over) {
                        this._menu.soundManager.playSound(this._menu.buttonSFX.over);
                    }
                    break;
                case Avota.Button.DOWN:
                    if(this._menu.buttonSFX.down) {
                        this._menu.soundManager.playSound(this._menu.buttonSFX.down);
                    }
                    break;
                case Avota.Button.UP:
                    if(this._menu.buttonSFX.up) {
                        this._menu.soundManager.playSound(this._menu.buttonSFX.up);
                    }
                    this.executeCommandsFor(button.name);
                    break;
                case Avota.Button.OUT:
                    break;
            }
        };
        MenuController.prototype.executeCommandsFor = function (name) {
            var screenConfig = this._menu.getAsset("ScreenConfig");
            var commands = screenConfig.commands[this._menu.activeScreen];
            if(!commands) {
                return;
            }
            for(var i = 0; i < commands.length; i++) {
                var command = commands[i];
                if(command.name == name) {
                    this.executeCommand(command);
                }
            }
        };
        MenuController.prototype.executeCommand = function (command) {
            var commandsList = this._menu.getCommands(this._menu.activeScreen);
            var defaultCommands = this._menu.getCommands("default");
            if(commandsList) {
                for(var i = 0; i < commandsList.length; i++) {
                    var commands = commandsList[i];
                    var success = commands.execute(command);
                    if(success) {
                        if(command.sfx) {
                            this._menu.soundManager.playSound(command.sfx);
                        }
                        return;
                    }
                }
            }
            for(var i = 0; i < defaultCommands.length; i++) {
                var commands = defaultCommands[i];
                var success = commands.execute(command);
                if(success) {
                    if(command.sfx) {
                        this._menu.soundManager.playSound(command.sfx);
                    }
                    return;
                }
            }
            console.warn("Failed to execute command:", command.command, "for screen", this._menu.activeScreen);
        };
        MenuController.prototype.addElements = function (screens) {
            var globalStrings = this._menu.globalStrings;
            for(var k in screens) {
                var elements = screens[k];
                var screenStrings = globalStrings.screens[k];
                this._menu.menuData[k] = {
                };
                this._menu.elements[k] = elements;
                if(this.prebuild) {
                    this.buildElements(k);
                }
            }
        };
        MenuController.prototype.buildElements = function (screen) {
            var globalStrings = this._menu.globalStrings;
            var elements = this._menu.elements[screen];
            var screenStrings = globalStrings.screens[screen];
            var screenVars = this._menu.getMenuDataForScreen(screen);
            if(screenVars._built) {
                return;
            }
            Skylanders.ScreenUtil.buildElements(this._menu, elements, screenStrings);
            for(var j = 0; j < elements.length; j++) {
                var element = elements[j];
                var graphic = this._menu.get(element.name);
                if(!graphic) {
                    continue;
                }
                graphic.visible = false;
                graphic.zIndex += this._menu.baseZIndex;
            }
            this._menu.localizeButtons(globalStrings.buttons);
            screenVars._built = true;
        };
        MenuController.prototype.removeElements = function (screen) {
            var elements = this._menu.elements[screen];
            var screenVars = this._menu.getMenuDataForScreen(screen);
            for(var j = 0; j < elements.length; j++) {
                var element = elements[j];
                var graphic = this._menu.get(element.name);
                if(!graphic) {
                    continue;
                }
                TweenMax.killTweensOf(graphic);
                graphic.removeAllChildren();
                graphic.destroy();
            }
            screenVars._built = false;
        };
        MenuController.prototype.hideAll = function () {
            for(var k in this._menu.elements) {
                var elements = this._menu.elements[k];
                var screenVars = this._menu.getMenuDataForScreen(k);
                if(!screenVars._built) {
                    continue;
                }
                for(var j = 0; j < elements.length; j++) {
                    var element = elements[j];
                    var graphic = this._menu.get(element.name);
                    if(!graphic) {
                        continue;
                    }
                    graphic.visible = false;
                }
            }
        };
        MenuController.prototype.setGlobalZIndex = function (zIndexInc) {
            this._menu.baseZIndex = zIndexInc;
            var elements = this._menu.elements[this._menu.activeScreen];
            if(!elements) {
                return;
            }
            for(var j = 0; j < elements.length; j++) {
                var element = elements[j];
                var graphic = this._menu.get(element.name);
                if(!graphic) {
                    continue;
                }
                graphic.zIndex = (element.params ? element.params.zIndex || 0 : 0) + zIndexInc;
            }
        };
        MenuController.prototype.showScreen = function (name, callback) {
            var _this = this;
            if(this._menu.activeScreen != null && this._menu.activeScreen != "") {
                this.exitScreen(this._menu.activeScreen, function () {
                    return _this.showScreen(name, callback);
                });
                return;
            }
            var screenConfig = this._menu.getAsset("ScreenConfig");
            var elements = this._menu.elements[name];
            var enterTransitions = screenConfig.transitions.enter[name];
            var idleTransitions = screenConfig.transitions.idle[name];
            var ctx = this;
            var onEnter = function () {
                ctx._menu.enableButtons();
                if(idleTransitions) {
                    ctx.transitionScreen(idleTransitions);
                }
                ctx.executeCommandsFor("start");
                if(callback) {
                    callback();
                }
            };
            this.buildElements(name);
            this._menu.activeScreen = name;
            this._menu.disableButtons();
            this.resetPositions(true);
            this.executeCommandsFor("enter");
            if(!enterTransitions) {
                onEnter();
            } else {
                this.transitionScreen(enterTransitions, function () {
                    return onEnter();
                });
            }
        };
        MenuController.prototype.exitScreen = function (name, callback) {
            var screenConfig = this._menu.getAsset("ScreenConfig");
            var elements = this._menu.elements[this._menu.activeScreen];
            var exitTransitions = screenConfig.transitions.exit[this._menu.activeScreen];
            var ctx = this;
            var onExit = function () {
                ctx.executeCommandsFor("exit");
                ctx.resetPositions(false);
                if(ctx.destroyOnExit) {
                    ctx.removeElements(ctx._menu.activeScreen);
                }
                ctx._menu.activeScreen = "";
                if(callback) {
                    callback();
                }
            };
            this._menu.disableButtons();
            this.executeCommandsFor("end");
            if(!exitTransitions) {
                onExit();
            } else {
                this.transitionScreen(exitTransitions, function () {
                    return onExit();
                });
            }
        };
        MenuController.prototype.transitionScreen = function (transitions, callback) {
            var ctx = this;
            var onEnd = function () {
                if(callback) {
                    callback();
                }
            };
            var timeline = new TimelineMax({
                onComplete: function () {
                    return onEnd();
                }
            });
            for(var i = 0; i < transitions.length; i++) {
                var transition = transitions[i];
                var graphic = this._menu.get(transition.name);
                if(!graphic) {
                    continue;
                }
                for(var j = 0; j < transition.tweens.length; j++) {
                    var tween = transition.tweens[j];
                    var params = {
                    };
                    for(var k in tween.params) {
                        if(k == "ease") {
                            params[k] = this._tweenTypes[tween.params[k]];
                        } else {
                            params[k] = tween.params[k];
                        }
                    }
                    timeline.insert(TweenMax[tween.type](graphic, tween.time, params));
                }
            }
        };
        MenuController.prototype.resetPositions = function (visible, elements, useBaseZIndex) {
            if (typeof useBaseZIndex === "undefined") { useBaseZIndex = true; }
            var screenConfig = this._menu.getAsset("ScreenConfig");
            elements = elements || this._menu.elements[this._menu.activeScreen];
            var fixText = function (text, v) {
                text.shadow = true;
                text.visible = v;
                text.active = visible;
            };
            var tfCount = 0;
            for(var i = 0; i < elements.length; i++) {
                var element = elements[i];
                var graphic = this._menu.get(element.name);
                if(!graphic) {
                    continue;
                }
                graphic.set(element.params);
                if(useBaseZIndex) {
                    graphic.zIndex += this._menu.baseZIndex;
                }
                if(visible != null) {
                    if(Avota.ClassUtil.getClassName(graphic) == "TextGraphic") {
                        var text = (graphic);
                        if(text.shadow && visible == true) {
                            text.shadow = false;
                            var params = [
                                text, 
                                visible
                            ];
                            TweenMax.delayedCall(3 * tfCount, fixText, params, null, true);
                        } else {
                            text.shadow = false;
                            text.visible = visible;
                            text.active = visible;
                        }
                        tfCount++;
                    } else {
                        graphic.visible = visible;
                        graphic.active = visible;
                    }
                }
            }
        };
        MenuController.prototype.resetImage = function (name) {
            var screenConfig = this._menu.getAsset("ScreenConfig");
            var elements = this._menu.elements[this._menu.activeScreen];
            for(var i = 0; i < elements.length; i++) {
                var element = elements[i];
                if(element.name == name) {
                    var graphic = this._menu.get(element.name);
                    if(!graphic) {
                        break;
                    }
                    graphic.set(element.params);
                    graphic.zIndex += this._menu.baseZIndex;
                    break;
                }
            }
        };
        return MenuController;
    })();
    Skylanders.MenuController = MenuController;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var MenuCommands = (function () {
        function MenuCommands(menu) {
            this.menu = menu;
        }
        MenuCommands.NAME = "MenuCommands";
        MenuCommands.COMMANDS_MODULE = "Skylanders";
        MenuCommands.COMMAND_AUTOLOAD = true;
        MenuCommands.SCREENS = [
            "default"
        ];
        MenuCommands.prototype.execute = function (command) {
            if(this[command.command]) {
                this[command.command](command);
                return true;
            }
            return false;
        };
        MenuCommands.prototype.showScreen = function (command) {
            this.menu.controller.showScreen(command.args.screen);
        };
        MenuCommands.prototype.setScene = function (command) {
            var _this = this;
            this.menu.disableButtons();
            this.menu.endBGM();
            var args = command.args.args ? command.args.args.concat() : [];
            args.unshift(Skylanders[command.args.scene]);
            this.menu.transitionOut(Avota.CSSColor.BLACK, 1, Avota.Transition.TYPE_FADE, Avota.Transition.OUT, null, 0, function () {
                return _this.menu.setScene.apply(_this.menu, args);
            }, null, null);
        };
        return MenuCommands;
    })();
    Skylanders.MenuCommands = MenuCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var Menu = (function (_super) {
        __extends(Menu, _super);
        function Menu() {
                _super.call(this, Avota.Context.getContext(Skylanders.SuperChargersGame.NAME), Skylanders.SuperChargersGame.NAME, Avota.Context.getContext(Skylanders.SuperChargersGame.NAME).config, Avota.Context.getContext(Skylanders.SuperChargersGame.NAME).strings.screens.GameMenu);
            this.activeScreen = "";
            this.buttonSFX = {
            };
            this.baseZIndex = 0;
            this.menuData = {
            };
            this.elements = {
            };
            this.controller = new Skylanders.MenuController(this);
            this.setupCommands();
            this._requests = {
            };
        }
        Menu.NAME = "Menu";
        Object.defineProperty(Menu.prototype, "game", {
            get: function () {
                return this._game;
            },
            enumerable: true,
            configurable: true
        });
        Menu.prototype.localizeButtons = function (node) {
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(buttons[i].name.match(node[j].name)) {
                        buttons[i].textLabel.text = node[j].value;
                        if(node[j].style) {
                            buttons[i].textLabel.setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        Menu.prototype.enableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var preAlpha = button.alpha;
            _super.prototype.enableButton.call(this, button, alpha);
            var screenConfig = this.getAsset("ScreenConfig");
            var elements = this.elements[this.activeScreen];
            var visiblility = false;
            if(elements) {
                for(var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if(element.name == button.name) {
                        visiblility = true;
                        break;
                    }
                }
            }
            button.visible = visiblility;
            button.alpha = preAlpha;
        };
        Menu.prototype.disableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            _super.prototype.disableButton.call(this, button, button.alpha);
        };
        Menu.prototype.setupCommands = function () {
            var mdl = window[Skylanders.MenuCommands.COMMANDS_MODULE];
            this._commands = {
            };
            this._defaultCommands = new Skylanders.MenuCommands(this);
            for(var k in mdl) {
                var cls = mdl[k];
                if(cls.COMMAND_AUTOLOAD) {
                    var cmds = new cls(this);
                    for(var i = 0; i < cls.SCREENS.length; i++) {
                        var screen = cls.SCREENS[i];
                        this.addCommands(cmds, screen);
                    }
                }
            }
        };
        Menu.prototype.addCommands = function (commands, screen) {
            if(!this._commands[screen]) {
                this._commands[screen] = [];
            }
            this._commands[screen].push(commands);
        };
        Menu.prototype.getCommands = function (screen) {
            return this._commands[screen];
        };
        Menu.prototype.setDefaultCommand = function (commands) {
            this._defaultCommands = commands;
        };
        Menu.prototype.getActiveMenuData = function () {
            return this.menuData[this.activeScreen];
        };
        Menu.prototype.getMenuDataForScreen = function (screen) {
            return this.menuData[screen];
        };
        Menu.prototype.setRequest = function (id, call, context) {
            var request = {
            };
            request.call = call;
            request.context = context;
            this._requests[id] = request;
        };
        Menu.prototype.setupBaseElements = function (elements) {
            this.menuBaseElements = elements;
            Skylanders.ScreenUtil.buildElements(this, this.menuBaseElements);
        };
        Menu.prototype.sendRequest = function (id) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var request = this._requests[id];
            if(!request) {
                console.error("Cannot complete request. Request:", id, "doesn't exist");
                return;
            }
            request.call.apply(request.context, args);
        };
        Menu.prototype.setButtonSFX = function (up, over, down) {
            this.buttonSFX.up = up || this.buttonSFX.up;
            this.buttonSFX.down = down || this.buttonSFX.down;
            this.buttonSFX.over = over || this.buttonSFX.over;
        };
        Menu.prototype.startBGM = function (bgm, useFade) {
            if (typeof useFade === "undefined") { useFade = false; }
            this.bgm = bgm || this.bgm;
            if(!this.soundManager.isSoundPlaying(this.bgm)) {
                this.soundManager.playSound(bgm, useFade);
            }
        };
        Menu.prototype.endBGM = function () {
            this.soundManager.stopSound(this.bgm, true);
        };
        Menu.prototype.destroy = function () {
            TweenMax.killAll();
            _super.prototype.destroy.call(this);
        };
        return Menu;
    })(Avota.Screen);
    Skylanders.Menu = Menu;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var MenuOverlay = (function (_super) {
        __extends(MenuOverlay, _super);
        function MenuOverlay(scene, strings, name) {
            if (typeof name === "undefined") { name = MenuOverlay.NAME; }
                _super.call(this, scene, strings, name);
            this.activeScreen = "";
            this.buttonSFX = {
            };
            this.baseZIndex = 0;
            this.menuData = {
            };
            this.elements = {
            };
            this.controller = new Skylanders.MenuController(this);
            this.setupCommands();
            this._requests = {
            };
        }
        MenuOverlay.NAME = "MenuOverlay";
        Object.defineProperty(MenuOverlay.prototype, "game", {
            get: function () {
                return this._scene._game;
            },
            enumerable: true,
            configurable: true
        });
        MenuOverlay.prototype.localizeButtons = function (node) {
            var buttons = this.getByType(Avota.Button);
            for(var i = 0, n = buttons.length; i < n; i++) {
                for(var j = 0, k = node.length; j < k; j++) {
                    if(buttons[i].name.match(node[j].name)) {
                        buttons[i].textLabel.text = node[j].value;
                        if(node[j].style) {
                            buttons[i].textLabel.setStyle(node[j].style);
                        }
                    }
                }
            }
        };
        MenuOverlay.prototype.getAsset = function (id) {
            return this._scene.getAsset(id);
        };
        MenuOverlay.prototype.setScene = function (scene) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            args.unshift(scene);
            this._scene.setScene.apply(this._scene, args);
        };
        MenuOverlay.prototype.enableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            var preAlpha = button.alpha;
            _super.prototype.enableButton.call(this, button, alpha);
            var elements = this.elements[this.activeScreen];
            var visiblility = false;
            if(elements) {
                for(var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if(element.name == button.name) {
                        visiblility = true;
                        break;
                    }
                }
            }
            button.visible = visiblility;
            button.alpha = preAlpha;
        };
        MenuOverlay.prototype.disableButton = function (button, alpha) {
            if (typeof alpha === "undefined") { alpha = 1; }
            _super.prototype.disableButton.call(this, button, button.alpha);
        };
        MenuOverlay.prototype.showOverlay = function (callback, useFade, duration) {
            if (typeof callback === "undefined") { callback = null; }
            if (typeof useFade === "undefined") { useFade = true; }
            if (typeof duration === "undefined") { duration = .5; }
            _super.prototype.showOverlay.call(this, callback, false, duration);
            this.controller.hideAll();
        };
        MenuOverlay.prototype.hideOverlay = function (callback, useFade, duration) {
            if (typeof callback === "undefined") { callback = null; }
            if (typeof useFade === "undefined") { useFade = true; }
            if (typeof duration === "undefined") { duration = .5; }
            _super.prototype.hideOverlay.call(this, callback, false, duration);
        };
        MenuOverlay.prototype.setupCommands = function () {
            var mdl = window[Skylanders.MenuCommands.COMMANDS_MODULE];
            this._commands = {
            };
            this._defaultCommands = new Skylanders.MenuCommands(this);
            for(var k in mdl) {
                var cls = mdl[k];
                if(cls.COMMAND_AUTOLOAD) {
                    var cmds = new cls(this);
                    for(var i = 0; i < cls.SCREENS.length; i++) {
                        var screen = cls.SCREENS[i];
                        this.addCommands(cmds, screen);
                    }
                }
            }
        };
        MenuOverlay.prototype.addCommands = function (commands, screen) {
            if(!this._commands[screen]) {
                this._commands[screen] = [];
            }
            this._commands[screen].push(commands);
        };
        MenuOverlay.prototype.getCommands = function (screen) {
            return this._commands[screen];
        };
        MenuOverlay.prototype.setDefaultCommand = function (commands) {
            this._defaultCommands = commands;
        };
        MenuOverlay.prototype.getActiveMenuData = function () {
            return this.menuData[this.activeScreen];
        };
        MenuOverlay.prototype.getMenuDataForScreen = function (screen) {
            return this.menuData[screen];
        };
        MenuOverlay.prototype.setupBaseElements = function (elements) {
            this.menuBaseElements = elements;
            Skylanders.ScreenUtil.buildElements(this, this.menuBaseElements);
        };
        MenuOverlay.prototype.setRequest = function (id, call, context) {
            var request = {
            };
            request.call = call;
            request.context = context;
            this._requests[id] = request;
        };
        MenuOverlay.prototype.sendRequest = function (id) {
            var args = [];
            for (var _i = 0; _i < (arguments.length - 1); _i++) {
                args[_i] = arguments[_i + 1];
            }
            var request = this._requests[id];
            if(!request) {
                console.error("Cannot complete request. Request:", id, "doesn't exist");
                return;
            }
            request.call.apply(request.context, args);
        };
        MenuOverlay.prototype.setButtonSFX = function (up, over, down) {
            this.buttonSFX.up = up || this.buttonSFX.up;
            this.buttonSFX.down = down || this.buttonSFX.down;
            this.buttonSFX.over = over || this.buttonSFX.over;
        };
        MenuOverlay.prototype.startBGM = function (bgm, useFade) {
            if (typeof useFade === "undefined") { useFade = false; }
            this.bgm = bgm || this.bgm;
            if(!this.soundManager.isSoundPlaying(this.bgm)) {
                this.soundManager.playSound(bgm, useFade);
            }
        };
        MenuOverlay.prototype.endBGM = function () {
            this.soundManager.stopSound(this.bgm, true);
        };
        return MenuOverlay;
    })(Avota.GameUIOverlay);
    Skylanders.MenuOverlay = MenuOverlay;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var SuperChargersLoader = (function (_super) {
        __extends(SuperChargersLoader, _super);
        function SuperChargersLoader(game) {
                _super.call(this, game, game.strings.screens.PreloadScreen, SuperChargersLoader.NAME);
        }
        SuperChargersLoader.NAME = "SuperChargersLoader";
        SuperChargersLoader.prototype._createLoader = function () {
            var gameCenterX = this._game.width / 2;
            var gameCenterY = this._game.height / 2;
            this.screenWidth = this._game.width;
            this.screenHeight = this._game.height;
            var activision = this.makeImage("ActivisionLogo", "LogoActivision", {
                zIndex: 2,
                x: 84,
                y: 250
            });
            var jetMorgan = this.makeImage("JetMorganLogo", "LogoJetMorgan", {
                zIndex: 2,
                x: 567,
                y: 250
            });
            var group = this.create(Avota.ImageSprite, this._game.timeManager, this._game.renderManager, this._game.spatialManager, null, "LoaderGroup");
            var loaderBox = this.makeImage("LoaderBox", "LoaderBox", {
                zIndex: 2,
                x: 0,
                y: 0
            });
            var barBG = this.makeImage("BarBG", "LoaderBarBG", {
                zIndex: 3,
                x: 0,
                y: 18
            });
            var bar = this.makeImage("LoaderBar", "LoaderBar", {
                zIndex: 4,
                x: 0,
                y: 20
            });
            var text = this.makeText("Loading", {
                zIndex: 5
            });
            text.text = this._game.strings.screens.PreloadScreen[0].value;
            text.setStyle(this._game.strings.screens.PreloadScreen[0].style);
            text.onTick(0);
            var copyright = this.makeText("Copyright", {
                zIndex: 5,
                lineWidth: 400
            });
            copyright.text = this._game.strings.screens.PreloadScreen[1].value;
            copyright.setStyle(this._game.strings.screens.PreloadScreen[1].style);
            copyright.onTick(0);
            group.x = this.screenWidth / 2 - loaderBox.width / 2;
            bar.x = loaderBox.width / 2 - bar.width / 2 - 1;
            barBG.x = loaderBox.width / 2 - barBG.width / 2;
            text.x = loaderBox.width / 2 - text.width / 2;
            copyright.x = loaderBox.width / 2 - copyright.width / 2;
            text.y = -45;
            copyright.y = 150;
            group.addChild(loaderBox);
            group.addChild(barBG);
            group.addChild(bar);
            group.addChild(text);
            group.addChild(copyright);
            group.y = 448;
            bar.registrationX = 0;
            bar.registrationY = bar.height / 2;
            this.loaderBar = bar;
            this.barWidth = bar.width;
            var bg = this.makeImage("LoaderBG", "LoaderBG", {
                zIndex: 1
            });
        };
        SuperChargersLoader.prototype._onProgressUpdate = function (itemsLoaded, itemsTotal) {
            this.loaderBar.scaleX = (itemsLoaded / itemsTotal);
        };
        SuperChargersLoader.prototype.makeText = function (name, params) {
            var text = this.create(Avota.TextGraphic, this._game.timeManager, this._game.renderManager, null, name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = params.active == null || params.active;
            properties.visible = params.visible == null || params.visible;
            text.set(properties);
            return text;
        };
        SuperChargersLoader.prototype.makeSingleFrameSprite = function (name, spritesheetPrefix, frame, params) {
            var spritesheet = this.create(Avota.SpriteSheet, this._game.getAsset(spritesheetPrefix + "Image", this._game.config.loader), this._game.getAsset(spritesheetPrefix + "Data", this._game.config.loader));
            var sprite = this.create(Avota.SingleFrameGraphic, this._game.timeManager, this._game.renderManager, spritesheet, frame, name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            sprite.set(properties);
            return sprite;
        };
        SuperChargersLoader.prototype.makeRect = function (name, color, width, height, params) {
            var img = this.create(Avota.RectSprite, this._game.timeManager, this._game.renderManager, this._game.spatialManager, width, height, color, name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            img.set(properties);
            if(params.x != null) {
                img.x = params.x;
            }
            if(params.y != null) {
                img.y = params.y;
            }
            return img;
        };
        SuperChargersLoader.prototype.makeImage = function (name, assetID, params) {
            var img = this.create(Avota.ImageGraphic, this._game.timeManager, this._game.renderManager, this._game.getAsset(assetID, this._game.config.loader), name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            img.set(properties);
            return img;
        };
        return SuperChargersLoader;
    })(Avota.GameLoader);
    Skylanders.SuperChargersLoader = SuperChargersLoader;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var GameMenu = (function (_super) {
        __extends(GameMenu, _super);
        function GameMenu(startScreen) {
                _super.call(this);
            this.nodeList = [];
            this.enteredSignal.addOnce(this.onEnter, this);
            this._startScreen = startScreen;
        }
        GameMenu.NAME = "GameMenu";
        GameMenu.prototype.onEnter = function () {
            this.setupBaseElements(this.getAsset("ScreenConfig").menus.GameMenu);
            if(!this._startScreen) {
                this._startScreen = this.getAsset("ScreenConfig").startScreen;
            }
            this.controller.addElements(this.getAsset("ScreenConfig").screens);
            this.onComplete();
            this.setButtonSFX(null, "SUIMouseOver");
            this._menuOverlay = this.create(Skylanders.GameMenuOverlay, this);
            this.buttonSignal.add(this.controller.buttonHandler, this.controller);
            this.setRequest("showPurchaseConfirm", this.showPurchaseConfirm, this);
            var screenFX = this.create(Skylanders.ScreenFX, this, this.timeManager, this.renderManager, this.globalStrings, this.screenWidth, this.screenHeight);
            if(this._startScreen != "TitleScreen") {
                this.controller.transitionScreen(this.getAsset("ScreenConfig").transitions.idle.GameMenu);
            }
            if(this._startScreen != "EndScreen") {
                this.startBGM("BGMMenu");
            }
        };
        GameMenu.prototype.onMove = function (sprite, x, y, id) {
        };
        GameMenu.prototype.onDown = function (sprite, x, y, id) {
            console.log("input down", x, y, id);
        };
        GameMenu.prototype.onUp = function (sprite, x, y, id) {
            console.log("input up", x, y, id);
            this.nodeList.push({
                x: x,
                y: y
            });
            Skylanders.ScreenUtil.makeRect(this, "node" + this.nodeList.length, "#00FF00", 5, 5, {
                zIndex: 22,
                x: x,
                y: y
            });
        };
        GameMenu.prototype.printNodeList = function () {
            var str = "";
            str += '"mapNodeList" : [';
            for(var i = 0; i < this.nodeList.length; i++) {
                var node = this.nodeList[i];
                str += "\n";
                str += "{ ";
                str += '"x" : ';
                str += node.x + ", ";
                str += '"y" : ';
                str += node.y;
                str += "}";
                if(i != this.nodeList.length - 1) {
                    str += ",";
                }
            }
            str += "\n";
            str += "]";
            console.log(str);
        };
        GameMenu.prototype.loadAssets = function () {
            var assetsToLoad = Skylanders.ScreenUtil.getAssetListForElements(this.elements);
            var assetPathList = [];
            var resources = this._game.config.resources;
            for(var i = 0; i < resources.length; i++) {
                var resource = resources[i];
                for(var j = 0; j < assetsToLoad.length; j++) {
                    if(resource.name == assetsToLoad[j] && !this.resourceManager.isLoaded(resource.path)) {
                        assetPathList.push(resource.path);
                    }
                }
                if(resource.autoload && !this.resourceManager.isLoaded(resource.path)) {
                    assetPathList.push(resource.path);
                }
            }
            if(assetPathList.length == 0) {
                this.onComplete();
            } else {
                this.controller.showScreen(this.getAsset("ScreenConfig").loadingScreen);
                this.resourceManager.loadItems(assetPathList);
                this.resourceManager.completeSignal.addOnce(this.onComplete, this);
            }
        };
        GameMenu.prototype.onComplete = function () {
            this.controller.showScreen(this._startScreen || this.getAsset("ScreenConfig").startScreen);
        };
        GameMenu.prototype.unloadAssets = function () {
            var characterID = Skylanders.PlayerData.getSelectedCharacter();
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var upgradeList = Skylanders.PlayerData.getActiveUpgrades();
            var rivalCharID = Skylanders.PlayerData.getRivalCharacter();
            var rivalVehclID = Skylanders.PlayerData.getRivalVehicle();
            var rivalUpgrades = Skylanders.GameData.getOpponentData("rival").upgrades;
            var playerAssets = Skylanders.GameData.getAssetListForVehicleCombo(characterID, vehicleID, upgradeList);
            var rivalAssets = Skylanders.GameData.getAssetListForVehicleCombo(rivalCharID, rivalVehclID, rivalUpgrades);
            var assetPathList = [];
            var resources = this._game.config.resources;
            for(var i = 0; i < resources.length; i++) {
                var resource = resources[i];
                for(var j = 0; j < playerAssets.length; j++) {
                    if(resource.name == playerAssets[j]) {
                        assetPathList.push(resource.path);
                    }
                }
                for(var j = 0; j < rivalAssets.length; j++) {
                    if(resource.name == rivalAssets[j]) {
                        assetPathList.push(resource.path);
                    }
                }
            }
            for(var i = 0; i < assetPathList.length; i++) {
                var path = assetPathList[i];
                this.resourceManager.unload(this.resourceManager.getResource(path));
            }
        };
        GameMenu.prototype.showPurchaseConfirm = function (upgradeID, onConfirm, onDecline) {
            this._menuOverlay.showPurchaseConfirm(upgradeID, onConfirm, onDecline);
        };
        return GameMenu;
    })(Skylanders.Menu);
    Skylanders.GameMenu = GameMenu;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var GameMenuOverlay = (function (_super) {
        __extends(GameMenuOverlay, _super);
        function GameMenuOverlay(scene) {
                _super.call(this, scene, scene.globalStrings.ui.overlays.ResultsOverlay, GameMenuOverlay.NAME);
            var screenConfig = this.getAsset("ScreenConfig");
            var elements = {
            };
            elements.PauseScreen = screenConfig.overlays.PauseScreen;
            elements.HowToPlayScreen = screenConfig.screens.HowToPlayScreen;
            elements.HowToPlayScreen2 = screenConfig.screens.HowToPlayScreen2;
            elements.ResultsOverlay = screenConfig.overlays.ResultsOverlay;
            elements.ConfirmOverlay = screenConfig.overlays.ConfirmOverlay;
            elements.PurchaseConfirmOverlay = screenConfig.overlays.PurchaseConfirmOverlay;
            this.setButtonSFX(null, "SUIMouseOver");
            this.setupBaseElements(screenConfig.menus.GameMenuOverlay);
            this.controller.prebuild = false;
            this.controller.destroyOnExit = true;
            this.controller.addElements(elements);
            this.setRequest("hideOverlay", this.hideOverlay, this);
            this.buttonSignal.add(this.controller.buttonHandler, this.controller);
            this.controller.setGlobalZIndex(2000);
            this.bgm = "BGMLevel";
        }
        GameMenuOverlay.NAME = "ResultsOverlay";
        GameMenuOverlay.prototype.showOverlayTransition = function () {
            var screenConfig = this.getAsset("ScreenConfig");
            var transitions = screenConfig.transitions.idle.GameMenuOverlay;
            if(transitions) {
                this.controller.resetPositions(true, screenConfig.menus.GameMenuOverlay, false);
                this.controller.transitionScreen(transitions);
            }
        };
        GameMenuOverlay.prototype.showPurchaseConfirm = function (upgradeID, onConfirm, onDecline) {
            var screenVars = this.menuData["PurchaseConfirmOverlay"];
            screenVars.upgradeID = upgradeID;
            screenVars.onConfirm = onConfirm;
            screenVars.onDecline = onDecline;
            var ctx = this;
            this.showOverlay();
            this.showOverlayTransition();
            this.controller.showScreen("PurchaseConfirmOverlay");
        };
        GameMenuOverlay.prototype.showPauseScreen = function (onResume) {
            this.showOverlay();
            var screenVars = this.getMenuDataForScreen("PauseScreen");
            screenVars.onResume = onResume;
            this.showOverlayTransition();
            this.controller.showScreen("PauseScreen");
            this.soundManager.playSound("SUIPause");
        };
        GameMenuOverlay.prototype.showResultsScreen = function () {
            var data = Skylanders.PlayerData.getRaceResults();
            var screenVars = this.getMenuDataForScreen("ResultsOverlay");
            for(var k in data) {
                screenVars[k] = data[k];
            }
            this.showOverlay();
            this.showOverlayTransition();
            this.controller.showScreen("ResultsOverlay");
        };
        return GameMenuOverlay;
    })(Skylanders.MenuOverlay);
    Skylanders.GameMenuOverlay = GameMenuOverlay;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ReadyScreenCommands = (function (_super) {
        __extends(ReadyScreenCommands, _super);
        function ReadyScreenCommands(menu) {
                _super.call(this, menu);
        }
        ReadyScreenCommands.NAME = "ReadyScreenCommands";
        ReadyScreenCommands.COMMAND_AUTOLOAD = true;
        ReadyScreenCommands.SCREENS = [
            "ReadyScreen"
        ];
        ReadyScreenCommands.prototype.startReadyScreen = function (command) {
            var _this = this;
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var playButton = this.menu.get("PlayButtonRS");
            var spriteConfig = this.menu.getAsset("SpriteConfig");
            var characterID = Skylanders.PlayerData.getSelectedCharacter();
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var upgradeList = Skylanders.PlayerData.getActiveUpgrades();
            var rivalCharID = Skylanders.PlayerData.getRivalCharacter();
            var rivalVehclID = Skylanders.PlayerData.getRivalVehicle();
            var rivalUpgrades = Skylanders.GameData.getOpponentData("rival").upgrades;
            var selectedTrack = Skylanders.PlayerData.getSelectedTrack();
            var trackStats = Skylanders.PlayerData.getDataForTrack(selectedTrack);
            var trackData = Skylanders.GameData.getTrackData(selectedTrack);
            var highScoreText = this.menu.get("HighScore");
            highScoreText.text = trackStats.highScore == 0 ? Avota.NumberUtil.addLeadingZeros(trackStats.highScore, 6, true) : Avota.NumberUtil.addCommas(trackStats.highScore);
            for(var i = 0; i < trackData.scoring.length; i++) {
                var txt = this.menu.get("GoalScore" + (i + 1));
                txt.text = Avota.NumberUtil.addCommas(trackData.scoring[i]);
            }
            var stars = Skylanders.GameData.getStarsForScore(trackStats.highScore, selectedTrack);
            for(var i = 0; i < 3; i++) {
                var num = i + 1;
                var starWhite = this.menu.get("ReadyScreenStarWhite" + num);
                var starBlack = this.menu.get("ReadyScreenStarBlack" + num);
                starWhite.alpha = 0;
                starBlack.alpha = 0;
                if(num <= stars) {
                    starWhite.alpha = 1;
                } else {
                    starBlack.alpha = 1;
                }
            }
            TweenMax.delayedCall(0.2, function () {
                return _this.onLoad();
            });
        };
        ReadyScreenCommands.prototype.onLoad = function () {
            var _this = this;
            var playButton = this.menu.get("PlayButtonRS");
            var loadingText = this.menu.get("ReadyScreenLoading");
            this.menu.controller.resetImage(playButton.name);
            TweenMax.killTweensOf(loadingText);
            loadingText.alpha = 0;
            playButton.alpha = 1;
            TweenMax.killTweensOf(playButton);
            TweenMax.from(playButton, 0.3, {
                x: "+=500",
                onComplete: function () {
                    return _this.menu.enableButtons();
                }
            });
        };
        return ReadyScreenCommands;
    })(Skylanders.MenuCommands);
    Skylanders.ReadyScreenCommands = ReadyScreenCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var UpgradeScreenCommands = (function (_super) {
        __extends(UpgradeScreenCommands, _super);
        function UpgradeScreenCommands(menu) {
                _super.call(this, menu);
        }
        UpgradeScreenCommands.NAME = "UpgradeScreenCommands";
        UpgradeScreenCommands.COMMAND_AUTOLOAD = true;
        UpgradeScreenCommands.SCREENS = [
            "UpgradeScreen"
        ];
        UpgradeScreenCommands.prototype.startUpgradeScreen = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var vehicleData = Skylanders.GameData.getVehicleData(vehicleID);
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var upgradeData = Skylanders.GameData.getUpgradeData();
            var vehicleGroup = this.menu.get("UpgradeVehicleGroup");
            var textBehind = this.menu.get("USTextBehind");
            if(Avota.EnvUtil.isMobile) {
                textBehind.scale = 4;
                textBehind.x += textBehind.width / 4 + 50;
                textBehind.y += textBehind.height / 4 + 20;
            }
            screenVars.numItems = 8;
            screenVars.inputComponents = {
            };
            screenVars.inputEnabled = false;
            var vehicleSprite = this.menu.create(Skylanders.VehicleSprite, this.menu.timeManager, this.menu.renderManager, this.menu.spatialManager, "UpgradeVehicle");
            var groupHeight = 250;
            var groupWidth = 300;
            vehicleSprite.setup();
            vehicleSprite.showVehicle(vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            vehicleSprite.set({
                zIndex: 5,
                x: 0,
                y: 0,
                visible: true
            });
            vehicleGroup.addChild(vehicleSprite);
            var icon1 = this.menu.get("UpgradeVehicleIcon1") || Skylanders.ScreenUtil.makeImage(this.menu, "UpgradeVehicleIcon1", vehicleData.icon, {
                zIndex: 8
            });
            var icon2 = this.menu.get("UpgradeVehicleIcon2") || Skylanders.ScreenUtil.makeImage(this.menu, "UpgradeVehicleIcon2", vehicleData.icon, {
                zIndex: 8
            });
            var iconGroup1 = this.menu.get("IconGroupUVehicle1");
            var iconGroup2 = this.menu.get("IconGroupUVehicle2");
            iconGroup1.addChild(icon1);
            iconGroup2.addChild(icon2);
            var vehclText = this.menu.get("UpgradeVehclName");
            vehclText.text = String(this.menu.globalStrings.game.vehicles[vehicleID]).toUpperCase();
            vehclText.onTick(0);
            vehclText.top = vehclText.lines.length > 1 ? vehclText.top - vehclText.lineHeight / 2 : vehclText.top;
            var currencyText = this.menu.get("CurrencyAmount");
            currencyText.text = Avota.NumberUtil.addCommas(Skylanders.PlayerData.getCurrency());
            this.updateScreen();
            screenVars.performance = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "performance");
            screenVars.specialty = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "special");
            this.previewStats();
            for(var i = 0; i < screenVars.numItems; i++) {
                var inputComponent = this.menu.create(Avota.InputComponent, this.menu.inputManager);
                var hitArea = this.menu.get("ItemHit" + (i + 1));
                screenVars.inputComponents[hitArea.name] = inputComponent;
                inputComponent.inputUp.add(this.clickUpgrade, this);
                inputComponent.inputOver.add(this.overUpgrade, this);
                inputComponent.inputOut.add(this.outUpgrade, this);
                hitArea.addComponent(inputComponent, Avota.EngineConstants.INPUT);
            }
            TweenMax.delayedCall(1.7, function () {
                screenVars.inputEnabled = true;
            });
        };
        UpgradeScreenCommands.prototype.endUpgradeScreen = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            for(var k in screenVars.inputComponents) {
                var hitbox = this.menu.get(k);
                var input = screenVars.inputComponents[k];
                hitbox.removeComponent(input);
                input.destroy();
            }
        };
        UpgradeScreenCommands.prototype.exitUpgradeScreen = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehclGroup = this.menu.get("UpgradeVehicleGroup");
            var vehicleSprite = this.menu.get("UpgradeVehicle");
            vehclGroup.removeAllChildren();
            vehicleSprite.visible = false;
            vehicleSprite.destroy();
            Skylanders.PlayerData.save();
            screenVars.inputComponents = null;
        };
        UpgradeScreenCommands.prototype.overUpgrade = function (sprite, x, y, id) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            if(!screenVars.inputEnabled) {
                return;
            }
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var itemNum = parseInt(sprite.name.match(/\d+/)[0]);
            var upgradeID = upgradeList[itemNum - 1];
            var itemGroup = this.menu.get("ItemGroup" + itemNum);
            var upgradeData = Skylanders.GameData.getUpgradeData()[upgradeID];
            if(Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) && !Skylanders.PlayerData.isUpgradeActive(upgradeID)) {
                itemGroup.scale = 1;
                TweenMax.killTweensOf(itemGroup);
                TweenMax.to(itemGroup, 0.1, {
                    scale: 1.05
                });
                this.menu.soundManager.playSound("SUIMouseOver");
            }
            if(!Skylanders.PlayerData.isUpgradeActive(upgradeID)) {
                if(upgradeData.type == "special") {
                    screenVars.specialty = upgradeID;
                    screenVars.performance = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "performance");
                } else {
                    screenVars.performance = upgradeID;
                    screenVars.specialty = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "special");
                }
                this.previewStats();
            }
        };
        UpgradeScreenCommands.prototype.outUpgrade = function (sprite, x, y, id) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            if(!screenVars.inputEnabled) {
                return;
            }
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var itemNum = parseInt(sprite.name.match(/\d+/)[0]);
            var upgradeID = upgradeList[itemNum - 1];
            var itemGroup = this.menu.get("ItemGroup" + itemNum);
            if(Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) && !Skylanders.PlayerData.isUpgradeActive(upgradeID)) {
                TweenMax.killTweensOf(itemGroup);
                TweenMax.to(itemGroup, 0.1, {
                    scale: 1
                });
            }
            screenVars.performance = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "performance");
            screenVars.specialty = Skylanders.PlayerData.getActiveUpgradeForVehicle(vehicleID, "special");
            this.previewStats();
        };
        UpgradeScreenCommands.prototype.clickUpgrade = function (sprite, x, y, id) {
            var _this = this;
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            if(!screenVars.inputEnabled) {
                return;
            }
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var itemNum = parseInt(sprite.name.match(/\d+/)[0]);
            var upgradeID = upgradeList[itemNum - 1];
            var upgradeData = Skylanders.GameData.getUpgradeData()[upgradeID];
            var tween = false;
            var itemGroup = this.menu.get("ItemGroup" + itemNum);
            screenVars.selectedUpgradeIndex = itemNum - 1;
            if(!Skylanders.PlayerData.isUpgradeUnlocked(upgradeID)) {
                if(Skylanders.PlayerData.canAfford(upgradeID)) {
                    this.menu.soundManager.playSound("SUIMouseOver");
                    screenVars.inputEnabled = false;
                    this.menu.disableButtons();
                    this.menu.sendRequest("showPurchaseConfirm", upgradeID, function () {
                        return _this.onConfirm();
                    }, function () {
                        return _this.onDecline();
                    });
                    tween = true;
                } else {
                    this.menu.controller.resetImage(itemGroup.name);
                    TweenMax.killTweensOf(itemGroup);
                    TweenMax.to(itemGroup, 0.05, {
                        x: "+=3",
                        yoyo: true,
                        repeat: 5,
                        ease: Back.easeInOut
                    });
                    this.menu.soundManager.playSound("SUIPurchaseFail");
                }
            } else if(!Skylanders.PlayerData.isUpgradeActive(upgradeID)) {
                this.menu.soundManager.playSound("SUIUpgradeApply");
                Skylanders.PlayerData.toggleUpgrade(upgradeID, true);
                Skylanders.PlayerData.save();
                this.updateScreen();
                if(upgradeData.vo) {
                    this.menu.soundManager.playSound(upgradeData.vo);
                }
                tween = true;
            }
            itemGroup.scale = 1;
            if(tween) {
                TweenMax.killTweensOf(itemGroup);
                TweenMax.to(itemGroup, 0.1, {
                    scale: 0.95,
                    yoyo: true,
                    repeat: 1
                });
            }
        };
        UpgradeScreenCommands.prototype.onConfirm = function () {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var itemNum = screenVars.selectedUpgradeIndex + 1;
            var upgradeID = upgradeList[itemNum - 1];
            var upgradeData = Skylanders.GameData.getUpgradeData()[upgradeID];
            Skylanders.PlayerData.purchase(upgradeID);
            this.menu.enableButtons();
            if(upgradeData.vo) {
                this.menu.soundManager.playSound(upgradeData.vo);
            }
            screenVars.inputEnabled = true;
            Skylanders.PlayerData.save();
            this.updateScreen();
        };
        UpgradeScreenCommands.prototype.onDecline = function () {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            this.menu.enableButtons();
            screenVars.inputEnabled = true;
        };
        UpgradeScreenCommands.prototype.showStats = function () {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var armorBar = this.menu.get("UpgradeScreenStatsAmount1");
            var speedBar = this.menu.get("UpgradeScreenStatsAmount2");
            var accelBar = this.menu.get("UpgradeScreenStatsAmount3");
            var handleBar = this.menu.get("UpgradeScreenStatsAmount4");
            var weightBar = this.menu.get("UpgradeScreenStatsAmount5");
            var armorScale = Skylanders.GameData.getVehicleStatScale("maxHP", vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            var speedScale = Skylanders.GameData.getVehicleStatScale("maxSpeed", vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            var accelScale = Skylanders.GameData.getVehicleStatScale("accel", vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            var handleScale = Skylanders.GameData.getVehicleStatScale("turnSpeed", vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            var weightScale = Skylanders.GameData.getVehicleStatScale("weight", vehicleID, Skylanders.PlayerData.getActiveUpgrades());
            var scaleTime = 0.5;
            TweenMax.killTweensOf(armorBar);
            TweenMax.killTweensOf(speedBar);
            TweenMax.killTweensOf(accelBar);
            TweenMax.killTweensOf(handleBar);
            TweenMax.killTweensOf(weightBar);
            TweenMax.to(armorBar, scaleTime, {
                scaleX: armorScale
            });
            TweenMax.to(speedBar, scaleTime, {
                scaleX: speedScale
            });
            TweenMax.to(accelBar, scaleTime, {
                scaleX: accelScale
            });
            TweenMax.to(handleBar, scaleTime, {
                scaleX: handleScale
            });
            TweenMax.to(weightBar, scaleTime, {
                scaleX: weightScale
            });
        };
        UpgradeScreenCommands.prototype.previewStats = function () {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var upgrades = [
                screenVars.specialty, 
                screenVars.performance
            ];
            var armorBar = this.menu.get("UpgradeScreenStatsPreview1");
            var speedBar = this.menu.get("UpgradeScreenStatsPreview2");
            var accelBar = this.menu.get("UpgradeScreenStatsPreview3");
            var handleBar = this.menu.get("UpgradeScreenStatsPreview4");
            var weightBar = this.menu.get("UpgradeScreenStatsPreview5");
            var armorScale = Skylanders.GameData.getVehicleStatScale("maxHP", vehicleID, upgrades);
            var speedScale = Skylanders.GameData.getVehicleStatScale("maxSpeed", vehicleID, upgrades);
            var accelScale = Skylanders.GameData.getVehicleStatScale("accel", vehicleID, upgrades);
            var handleScale = Skylanders.GameData.getVehicleStatScale("turnSpeed", vehicleID, upgrades);
            var weightScale = Skylanders.GameData.getVehicleStatScale("weight", vehicleID, upgrades);
            armorBar.scaleX = armorScale;
            speedBar.scaleX = speedScale;
            accelBar.scaleX = accelScale;
            handleBar.scaleX = handleScale;
            weightBar.scaleX = weightScale;
        };
        UpgradeScreenCommands.prototype.updateScreen = function () {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var vehicleID = Skylanders.PlayerData.getSelectedVehicle();
            var vehicleData = Skylanders.GameData.getVehicleData(vehicleID);
            var upgradeList = Skylanders.GameData.getSortedUpgradeList("vehicle", vehicleID);
            var upgradeData = Skylanders.GameData.getUpgradeData();
            for(var i = 0; i < screenVars.numItems; i++) {
                var num = i + 1;
                var checkmark = this.menu.get("UpgradeScreenCheck" + num);
                var lock = this.menu.get("UpgradeScreenLock" + num);
                var gearbit = this.menu.get("UpgradeScreenGearbitSmall" + num);
                var activeBG = this.menu.get("UpgradeScreenBarActive" + num);
                var inactiveBG = this.menu.get("UpgradeScreenBarInactive" + num);
                var iconNode = this.menu.get("IconNodeItem" + num);
                var itemName = this.menu.get("UNameText" + num);
                var itemPrice = this.menu.get("UPriceText" + num);
                var upgradeID = upgradeList[i];
                var upgrade = upgradeData[upgradeID];
                checkmark.alpha = Skylanders.PlayerData.isUpgradeActive(upgradeID) ? 1 : 0;
                activeBG.alpha = Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) ? 1 : 0;
                lock.alpha = !Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) ? 1 : 0;
                inactiveBG.alpha = !Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) ? 1 : 0;
                itemPrice.alpha = !Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) ? 1 : 0;
                gearbit.alpha = !Skylanders.PlayerData.isUpgradeUnlocked(upgradeID) ? 1 : 0;
                itemName.text = String(this.menu.globalStrings.game.upgrades[upgradeID]);
                itemPrice.text = Avota.NumberUtil.addCommas(upgrade.cost);
                iconNode.removeAllChildren();
                if(this.menu.get("UpgradeIcon" + num)) {
                    var oldIcon = this.menu.get("UpgradeIcon" + num);
                    oldIcon.destroy();
                }
                if(upgrade.icon) {
                    var uicon = Skylanders.ScreenUtil.makeImage(this.menu, "UpgradeIcon" + num, upgrade.icon, {
                        zIndex: 10
                    });
                    iconNode.addChild(uicon);
                }
            }
            var currencyText = this.menu.get("CurrencyAmount");
            currencyText.text = Avota.NumberUtil.addCommas(Skylanders.PlayerData.getCurrency());
            var vehicleSprite = this.menu.get("UpgradeVehicle");
            vehicleSprite.showVehicle(Skylanders.PlayerData.getSelectedVehicle(), Skylanders.PlayerData.getActiveUpgrades());
            var vehclGroup = this.menu.get("UpgradeVehicle");
            vehclGroup.alpha = 1;
            vehclGroup.y = 0;
            TweenMax.killTweensOf(vehclGroup);
            TweenMax.from(vehclGroup, 0.3, {
                y: "-=50",
                alpha: 0
            });
            this.showStats();
        };
        return UpgradeScreenCommands;
    })(Skylanders.MenuCommands);
    Skylanders.UpgradeScreenCommands = UpgradeScreenCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var LevelSelectCommands = (function (_super) {
        __extends(LevelSelectCommands, _super);
        function LevelSelectCommands(menu) {
                _super.call(this, menu);
        }
        LevelSelectCommands.NAME = "LevelSelectCommands";
        LevelSelectCommands.COMMAND_AUTOLOAD = true;
        LevelSelectCommands.SCREENS = [
            "TrackSelectScreen"
        ];
        LevelSelectCommands.prototype.startLevelSelect = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var hitbox1 = this.menu.get("TrackSelectHitArea1");
            var hitbox2 = this.menu.get("TrackSelectHitArea2");
            var hitbox3 = this.menu.get("TrackSelectHitArea3");
            var trackList = Skylanders.GameData.getTrackList();
            Skylanders.PlayerData.selectTrack(trackList[0]);
            for(var i = trackList.length - 1; i >= 0; i--) {
                var track = trackList[i];
                if(Skylanders.PlayerData.isTrackUnlocked(track)) {
                    Skylanders.PlayerData.selectTrack(track);
                    break;
                }
            }
            this.updateScreen();
            if(!screenVars.inputComponents) {
                screenVars.inputComponents = {
                };
                var input1 = hitbox1.create(Avota.InputComponent, this.menu.inputManager);
                var input2 = hitbox2.create(Avota.InputComponent, this.menu.inputManager);
                var input3 = hitbox3.create(Avota.InputComponent, this.menu.inputManager);
                screenVars.inputComponents["TrackSelectHitArea1"] = input1;
                screenVars.inputComponents["TrackSelectHitArea2"] = input2;
                screenVars.inputComponents["TrackSelectHitArea3"] = input3;
                screenVars.inputEnabled = false;
                TweenMax.delayedCall(1, function () {
                    screenVars.inputEnabled = true;
                });
                var onDown = function (sprite, x, y, id) {
                };
                var onUp = function (sprite, x, y, id) {
                    if(!screenVars.inputEnabled) {
                        return;
                    }
                    var levelGroup;
                    var levelNum = 1;
                    if(sprite.name.match("1")) {
                        levelNum = 1;
                    } else if(sprite.name.match("2")) {
                        levelNum = 2;
                    } else {
                        levelNum = 3;
                    }
                    var trackStats = Skylanders.PlayerData.getDataForTrack(trackList[levelNum - 1]);
                    if(!trackStats.unlocked) {
                        return;
                    }
                    Skylanders.PlayerData.selectTrack(trackList[levelNum - 1]);
                    for(var i = 0; i < 3; i++) {
                        var checkGraphic = this.menu.get("TrackSelectCheck" + (i + 1));
                        checkGraphic.alpha = (levelNum - 1 == i) ? 1 : 0;
                    }
                    this.menu.soundManager.playSound("SUIUnlock");
                    levelGroup = this.menu.get("LevelGroup" + levelNum);
                    levelGroup.scale = 1;
                    TweenMax.killTweensOf(levelGroup);
                    TweenMax.to(levelGroup, 0.15, {
                        scale: 0.95,
                        yoyo: true,
                        repeat: 1
                    });
                };
                for(var k in screenVars.inputComponents) {
                    var component = screenVars.inputComponents[k];
                    component.inputDown.add(onDown, this);
                    component.inputUp.add(onUp, this);
                    (this.menu.get(k)).addComponent(component, Avota.EngineConstants.INPUT);
                }
            }
        };
        LevelSelectCommands.prototype.clearProgress = function (command) {
            var trackList = Skylanders.GameData.getTrackList();
            var index = command.args.index;
            Skylanders.PlayerData.clearTrackData(trackList[index]);
            Skylanders.PlayerData.save();
            this.updateScreen();
        };
        LevelSelectCommands.prototype.updateScreen = function () {
            var trackList = Skylanders.GameData.getTrackList();
            for(var i = 0; i < 3; i++) {
                var levelGroup = this.menu.get("LevelGroup" + (i + 1));
                var checkGraphic = this.menu.get("TrackSelectCheck" + (i + 1));
                var lockGraphic = this.menu.get("TrackSelectLock" + (i + 1));
                var glowGraphic = this.menu.get("TrackSelectGlow" + (i + 1));
                var scoreText = this.menu.get("TrackScore" + (i + 1));
                var timeText = this.menu.get("TrackTime" + (i + 1));
                var trackStats = Skylanders.PlayerData.getDataForTrack(trackList[i]);
                lockGraphic.alpha = trackStats.unlocked ? 0 : 1;
                glowGraphic.alpha = !trackStats.unlocked ? 0 : 1;
                glowGraphic.rotation = 0;
                checkGraphic.alpha = Skylanders.PlayerData.getSelectedTrack() == trackList[i] ? 1 : 0;
                scoreText.text = trackStats.highScore == 0 ? Avota.NumberUtil.addLeadingZeros(0, 6, true) : Avota.NumberUtil.addCommas(trackStats.highScore);
                timeText.text = Skylanders.GameData.formatTimeFromFrames(trackStats.bestTime);
                TweenMax.killTweensOf(glowGraphic);
                TweenMax.to(glowGraphic, 29, {
                    rotation: "+=360",
                    repeat: -1,
                    ease: Power0.easeInOut
                });
                var stars = Skylanders.GameData.getStarsForScore(trackStats.highScore, trackList[i]);
                for(var j = 0; j < 3; j++) {
                    var num = j + 1;
                    var starGroup = this.menu.get("StarGroup" + (i + 1));
                    var starWhite = this.menu.get("StarGroup" + (i + 1) + "White" + num);
                    var starBlack = this.menu.get("StarGroup" + (i + 1) + "Black" + num);
                    starWhite.alpha = 0;
                    starBlack.alpha = 0;
                    if(num <= stars) {
                        starWhite.alpha = 1;
                    } else {
                        starBlack.alpha = 1;
                    }
                }
            }
        };
        LevelSelectCommands.prototype.gotoNextScreen = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            if(Skylanders.PlayerData.instructionsFlag) {
                this.menu.controller.showScreen("HowToPlayScreen");
            } else {
                this.menu.controller.showScreen(command.args.screen);
            }
        };
        LevelSelectCommands.prototype.exitLevelSelect = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var hitbox1 = this.menu.get("TrackSelectHitArea1");
            var hitbox2 = this.menu.get("TrackSelectHitArea2");
            var hitbox3 = this.menu.get("TrackSelectHitArea3");
            var input1 = screenVars.inputComponents["TrackSelectHitArea1"];
            var input2 = screenVars.inputComponents["TrackSelectHitArea2"];
            var input3 = screenVars.inputComponents["TrackSelectHitArea3"];
            hitbox1.removeComponent(input1);
            hitbox2.removeComponent(input2);
            hitbox3.removeComponent(input3);
            input1.destroy();
            input2.destroy();
            input3.destroy();
            screenVars.inputComponents = null;
            Skylanders.PlayerData.save();
        };
        return LevelSelectCommands;
    })(Skylanders.MenuCommands);
    Skylanders.LevelSelectCommands = LevelSelectCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var VehicleSelectCommands = (function (_super) {
        __extends(VehicleSelectCommands, _super);
        function VehicleSelectCommands(menu) {
                _super.call(this, menu);
        }
        VehicleSelectCommands.NAME = "VehicleSelectCommands";
        VehicleSelectCommands.COMMAND_AUTOLOAD = true;
        VehicleSelectCommands.SCREENS = [
            "VehicleSelectScreen"
        ];
        VehicleSelectCommands.prototype.startSelectScreen = function (command) {
            var _this = this;
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var characterList = Skylanders.GameData.getSelectableCharacterList();
            var vehicleList = Skylanders.GameData.getSelectableVehicleList();
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var charText = this.menu.get("CharName");
            var vehclText = this.menu.get("VehclName");
            var charDesc = this.menu.get("CharDesc");
            var vehclDesc = this.menu.get("VehicleDesc");
            var starBanner = this.menu.get("StarBanner");
            var starBannerGlow = this.menu.get("StarBannerGlow");
            var selectGlowChar = this.menu.get("SelectGlowChar");
            var selectGlowVehcl = this.menu.get("SelectGlowVehcl");
            var comboText = this.menu.get("ComboText");
            var vSpriteGroup = this.menu.get("VSpriteGroup");
            var textBehind1 = this.menu.get("VSTextBehind1");
            var textBehind2 = this.menu.get("VSTextBehind2");
            var charIconGroup1 = this.menu.get("IconGroupChar1");
            var charIconGroup2 = this.menu.get("IconGroupChar2");
            var vehclIconGroup1 = this.menu.get("IconGroupVehicle1");
            var vehclIconGroup2 = this.menu.get("IconGroupVehicle2");
            var superChargeAnim1 = this.menu.get("SuperChargedAnim1");
            var superChargeAnim2 = this.menu.get("SuperChargedAnim2");
            starBanner.alpha = 0;
            starBannerGlow.alpha = 0;
            comboText.alpha = 0;
            selectGlowChar.alpha = 0;
            selectGlowVehcl.alpha = 0;
            selectGlowChar.rotation = 0;
            selectGlowVehcl.rotation = 0;
            superChargeAnim1.alpha = 0;
            superChargeAnim2.alpha = 0;
            if(Avota.EnvUtil.isMobile) {
                superChargeAnim1.scale = 4;
                superChargeAnim2.scale = 4;
                textBehind1.scale = 4;
                textBehind2.scale = 4;
                superChargeAnim1.x += superChargeAnim1.width / 4 + 50;
                superChargeAnim1.y += superChargeAnim1.height / 4 + 20;
                superChargeAnim2.x += superChargeAnim2.width / 4 + 50;
                superChargeAnim2.y += superChargeAnim2.height / 4 + 20;
                textBehind1.x += textBehind1.width / 4 + 50;
                textBehind1.y += textBehind1.height / 4 + 20;
                textBehind2.x += textBehind2.width / 4 + 50;
                textBehind2.y += textBehind2.height / 4 + 20;
            }
            TweenMax.killTweensOf(selectGlowChar);
            TweenMax.killTweensOf(selectGlowVehcl);
            TweenMax.to(selectGlowChar, 29, {
                rotation: 360,
                repeat: -1,
                ease: Power0.easeInOut
            });
            TweenMax.to(selectGlowVehcl, 20, {
                rotation: 360,
                repeat: -1,
                ease: Power0.easeInOut
            });
            screenVars.characterIndex = 0;
            screenVars.vehicleIndex = 0;
            for(var i = 0; i < characterList.length; i++) {
                screenVars[characterList[i]] = {
                };
                screenVars[characterList[i]].voIndex = 0;
                if(characterList[i] == Skylanders.PlayerData.getSelectedCharacter()) {
                    screenVars.characterIndex = i;
                }
            }
            for(var i = 0; i < vehicleList.length; i++) {
                if(vehicleList[i] == Skylanders.PlayerData.getSelectedVehicle()) {
                    screenVars.vehicleIndex = i;
                }
            }
            for(var i = 0; i < characterList.length; i++) {
                var characterData = Skylanders.GameData.getCharacterData(characterList[i]);
                var img = this.menu.get(characterData.image);
                var icon1 = this.menu.get(characterList[i] + characterData.icon + "1") || Skylanders.ScreenUtil.makeImage(this.menu, characterData.icon + "1", characterData.icon, {
                    zIndex: 10
                });
                var icon2 = this.menu.get(characterList[i] + characterData.icon + "2") || Skylanders.ScreenUtil.makeImage(this.menu, characterData.icon + "2", characterData.icon, {
                    zIndex: 10
                });
                charIconGroup1.addChild(icon1);
                charIconGroup2.addChild(icon2);
                if(screenVars.characterIndex != i) {
                    img.alpha = 0;
                    icon1.alpha = 0;
                    icon2.alpha = 0;
                }
            }
            for(var i = 0; i < vehicleList.length; i++) {
                var vehicleData = Skylanders.GameData.getVehicleData(vehicleList[i]);
                var icon1 = Skylanders.ScreenUtil.makeImage(this.menu, vehicleList[i] + vehicleData.icon + "1", vehicleData.icon, {
                    zIndex: 10
                });
                var icon2 = Skylanders.ScreenUtil.makeImage(this.menu, vehicleList[i] + vehicleData.icon + "2", vehicleData.icon, {
                    zIndex: 10
                });
                var sprite = this.menu.create(Skylanders.VehicleSprite, this.menu.timeManager, this.menu.renderManager, this.menu.spatialManager, vehicleData.image);
                sprite.zIndex = 10;
                sprite.setup();
                sprite.showVehicle(vehicleList[i], Skylanders.PlayerData.getActiveUpgrades());
                vehclIconGroup1.addChild(icon1);
                vehclIconGroup2.addChild(icon2);
                vSpriteGroup.addChild(sprite);
                screenVars[sprite.name] = {
                    x: sprite.x,
                    y: sprite.y,
                    scale: sprite.scale
                };
                if(screenVars.vehicleIndex != i) {
                    sprite.alpha = 0;
                    icon1.alpha = 0;
                    icon2.alpha = 0;
                }
            }
            charText.text = String(this.menu.globalStrings.game.characters[characterList[screenVars.characterIndex]]).toUpperCase();
            vehclText.text = String(this.menu.globalStrings.game.vehicles[vehicleList[screenVars.vehicleIndex]]).toUpperCase();
            charDesc.text = String(this.menu.globalStrings.game.descriptions[characterList[screenVars.characterIndex]]);
            vehclDesc.text = String(this.menu.globalStrings.game.descriptions[vehicleList[screenVars.vehicleIndex]]);
            charText.onTick(0);
            vehclText.onTick(0);
            charDesc.onTick(0);
            vehclDesc.onTick(0);
            charText.top = charText.lines.length > 1 ? charText.top - charText.lineHeight / 2 : charText.top;
            vehclText.top = vehclText.lines.length > 1 ? vehclText.top - vehclText.lineHeight / 2 : vehclText.top;
            var currVehicle = Skylanders.GameData.getSelectableVehicleList()[screenVars.vehicleIndex];
            var charData = Skylanders.GameData.getCharacterData(Skylanders.GameData.getSelectableCharacterList()[screenVars.characterIndex]);
            if(charData.comboVehicle == currVehicle) {
                this.menu.controller.resetImage(starBanner.name);
                this.menu.controller.resetImage(starBannerGlow.name);
                this.menu.controller.resetImage(comboText.name);
                starBanner.alpha = 1;
                starBannerGlow.alpha = 0;
                starBannerGlow.scale = 1;
                comboText.alpha = 1;
                selectGlowChar.alpha = 1;
                selectGlowVehcl.alpha = 1;
                var timeline = new TimelineMax({
                    onComplete: function () {
                        return _this.menu.enableButtons();
                    }
                });
                timeline.insert(TweenMax.from(selectGlowChar, 0.4, {
                    alpha: 0,
                    scale: 0.5
                }));
                timeline.insert(TweenMax.from(selectGlowVehcl, 0.4, {
                    alpha: 0,
                    scale: 0.5
                }));
                timeline.insert(TweenMax.from(starBanner, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.2,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.from(comboText, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.2,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.to(starBannerGlow, 0.01, {
                    alpha: 1,
                    delay: 0.6
                }));
                timeline.insert(TweenMax.to(starBannerGlow, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.62
                }));
            }
        };
        VehicleSelectCommands.prototype.exitVehicleSelect = function (command) {
            var vehicleList = Skylanders.GameData.getSelectableVehicleList();
            for(var i = 0; i < vehicleList.length; i++) {
                var sprite = this.menu.get(Skylanders.GameData.getVehicleData(vehicleList[i]).image);
                sprite.destroy();
            }
            Skylanders.PlayerData.save();
        };
        VehicleSelectCommands.prototype.change = function (command) {
            var _this = this;
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var category = command.args.category;
            var list = category == "vehicle" ? Skylanders.GameData.getSelectableVehicleList() : Skylanders.GameData.getSelectableCharacterList();
            var index = category == "vehicle" ? screenVars.vehicleIndex : screenVars.characterIndex;
            var name = (category == "vehicle" ? this.menu.get("VehclName") : this.menu.get("CharName"));
            var desc = (category == "vehicle" ? this.menu.get("VehicleDesc") : this.menu.get("CharDesc"));
            var iconGroup1 = this.menu.get("IconGroup" + (category == "vehicle" ? "Vehicle" : "Char") + "1");
            var iconGroup2 = this.menu.get("IconGroup" + (category == "vehicle" ? "Vehicle" : "Char") + "2");
            var starBanner = this.menu.get("StarBanner");
            var starBannerGlow = this.menu.get("StarBannerGlow");
            var comboText = this.menu.get("ComboText");
            var selectGlowChar = this.menu.get("SelectGlowChar");
            var selectGlowVehcl = this.menu.get("SelectGlowVehcl");
            var superChargeAnim1 = this.menu.get("SuperChargedAnim1");
            var superChargeAnim2 = this.menu.get("SuperChargedAnim2");
            var screenGroup = this.menu.get("VSScreenGroup");
            starBanner.alpha = 0;
            starBannerGlow.alpha = 0;
            comboText.alpha = 0;
            selectGlowChar.alpha = 0;
            selectGlowVehcl.alpha = 0;
            superChargeAnim1.alpha = 0;
            superChargeAnim2.alpha = 0;
            var prev = category == "vehicle" ? Skylanders.GameData.getVehicleData(list[index]) : Skylanders.GameData.getCharacterData(list[index]);
            index += command.args.increment;
            if(index >= list.length) {
                index = 0;
            }
            if(index < 0) {
                index = list.length - 1;
            }
            var next = category == "vehicle" ? Skylanders.GameData.getVehicleData(list[index]) : Skylanders.GameData.getCharacterData(list[index]);
            category == "vehicle" ? Skylanders.PlayerData.selectVehicle(list[index]) : Skylanders.PlayerData.selectCharacter(list[index]);
            var prevImg = this.menu.get(prev.image);
            var nextImg = this.menu.get(next.image);
            nextImg.alpha = 1;
            nextImg.scale = 1;
            for(var i = 0; i < iconGroup1._children.length; i++) {
                var child = iconGroup1._children[i];
                if(child.name.match(next.icon)) {
                    child.alpha = 1;
                } else {
                    child.alpha = 0;
                }
            }
            for(var i = 0; i < iconGroup2._children.length; i++) {
                var child = iconGroup2._children[i];
                if(child.name.match(next.icon)) {
                    child.alpha = 1;
                } else {
                    child.alpha = 0;
                }
            }
            var onComplete = function () {
                if(screenVars[prevImg.name]) {
                    prevImg.set(screenVars[prevImg.name]);
                } else {
                    this.menu.controller.resetImage(prev.image);
                }
                this.menu.enableButtons();
            };
            var timeline = new TimelineMax({
                onComplete: onComplete.bind(this)
            });
            timeline.insert(TweenMax.from(nextImg, 0.4, {
                x: "-=" + command.args.increment * 100,
                scale: 0.75,
                alpha: 0
            }));
            timeline.insert(TweenMax.from(name, 0.4, {
                alpha: 0
            }));
            timeline.insert(TweenMax.from(desc, 0.4, {
                alpha: 0
            }));
            timeline.insert(TweenMax.from(iconGroup1, 0.4, {
                x: "-=50",
                alpha: 0
            }));
            timeline.insert(TweenMax.from(iconGroup2, 0.4, {
                x: "+=50",
                alpha: 0
            }));
            timeline.insert(TweenMax.to(prevImg, 0.4, {
                x: "+=" + command.args.increment * 100,
                scale: 0.75,
                alpha: 0
            }));
            this.menu.disableButtons();
            category == "vehicle" ? screenVars.vehicleIndex = index : screenVars.characterIndex = index;
            var vo;
            vo = next.selectVO;
            var banterVO;
            if(category == "character") {
                banterVO = next.banterVO;
            }
            this.menu.soundManager.playSound(vo);
            if(screenVars.banterCall) {
                TweenMax.killTweensOf(screenVars.banterCall.target);
            }
            if(banterVO) {
                screenVars.banterCall = TweenMax.delayedCall(1, function () {
                    return _this.menu.soundManager.playSound(banterVO);
                });
            }
            this.menu.controller.resetImage(name.name);
            name.text = String(this.menu.globalStrings.game[category + "s"][list[index]]).toUpperCase();
            name.onTick(0);
            name.top = name.lines.length > 1 ? name.top - name.lineHeight / 2 : name.top;
            this.menu.controller.resetImage(desc.name);
            desc.text = String(this.menu.globalStrings.game.descriptions[list[index]]);
            desc.onTick(0);
            var currVehicle = Skylanders.GameData.getSelectableVehicleList()[screenVars.vehicleIndex];
            var charData = Skylanders.GameData.getCharacterData(Skylanders.GameData.getSelectableCharacterList()[screenVars.characterIndex]);
            if(charData.comboVehicle == currVehicle) {
                this.menu.controller.resetImage(starBanner.name);
                this.menu.controller.resetImage(starBannerGlow.name);
                this.menu.controller.resetImage(comboText.name);
                starBanner.alpha = 1;
                starBannerGlow.alpha = 0;
                starBannerGlow.scale = 1;
                comboText.alpha = 1;
                selectGlowChar.alpha = 1;
                selectGlowVehcl.alpha = 1;
                superChargeAnim1.alpha = 1;
                superChargeAnim2.alpha = 1;
                TweenMax.killTweensOf(superChargeAnim1);
                TweenMax.killTweensOf(superChargeAnim2);
                timeline.insert(TweenMax.from(selectGlowChar, 0.2, {
                    alpha: 0,
                    scale: 0.5,
                    delay: 0.5,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.from(selectGlowVehcl, 0.2, {
                    alpha: 0,
                    scale: 0.5,
                    delay: 0.5,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.from(superChargeAnim1, 0.2, {
                    alpha: 0,
                    delay: 0.5,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.from(superChargeAnim2, 0.2, {
                    alpha: 0,
                    delay: 0.5,
                    ease: Power4.easeIn
                }));
                TweenMax.to(superChargeAnim1, 1.2, {
                    alpha: 0,
                    delay: 1.5,
                    ease: Power4.easeIn
                });
                TweenMax.to(superChargeAnim2, 1.2, {
                    alpha: 0,
                    delay: 1.5,
                    ease: Power4.easeIn
                });
                timeline.insert(TweenMax.from(starBanner, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.2,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.from(comboText, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.2,
                    ease: Power4.easeIn
                }));
                timeline.insert(TweenMax.to(starBannerGlow, 0.01, {
                    alpha: 1,
                    delay: 0.6
                }));
                timeline.insert(TweenMax.to(starBannerGlow, 0.4, {
                    alpha: 0,
                    scale: 1.5,
                    delay: 0.62
                }));
                timeline.insert(TweenMax.to(screenGroup, 0.025, {
                    y: "+=5",
                    delay: 0.62,
                    yoyo: true,
                    repeat: 17,
                    ease: Back.easeInOut
                }));
                timeline.insert(TweenMax.delayedCall(0.6, function () {
                    return _this.menu.soundManager.playSound("VOSuperCharged");
                }));
                timeline.insert(TweenMax.delayedCall(0.4, function () {
                    return _this.menu.soundManager.playSound("SUISuperCharged");
                }));
            }
        };
        return VehicleSelectCommands;
    })(Skylanders.MenuCommands);
    Skylanders.VehicleSelectCommands = VehicleSelectCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var PurchaseConfirmCommands = (function (_super) {
        __extends(PurchaseConfirmCommands, _super);
        function PurchaseConfirmCommands(menu) {
                _super.call(this, menu);
        }
        PurchaseConfirmCommands.NAME = "PurchaseConfirmCommands";
        PurchaseConfirmCommands.COMMAND_AUTOLOAD = true;
        PurchaseConfirmCommands.SCREENS = [
            "PurchaseConfirmOverlay"
        ];
        PurchaseConfirmCommands.prototype.startPurchaseConfirm = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var upgrade = Skylanders.GameData.getUpgradeData()[screenVars.upgradeID];
            if(upgrade) {
                var imageGroup = this.menu.get("PConfirmImageGroup");
                var costText = this.menu.get("PConfirmItemCost");
                var nameText = this.menu.get("PConfirmItemName");
                var upgradeStrings = this.menu.globalStrings.game.upgrades;
                costText.text = upgrade.cost.toString();
                nameText.text = upgradeStrings[screenVars.upgradeID].toUpperCase();
                imageGroup.removeAllChildren();
                var image = this.menu.get("PConfirmItemImage");
                if(image) {
                    image.destroy();
                }
                image = Skylanders.ScreenUtil.makeImage(this.menu, "PConfirmItemImage", upgrade.storeImage, {
                    zIndex: imageGroup.zIndex
                });
                image.x = -image.width / 2;
                image.y = -image.height / 2;
                imageGroup.addChild(image);
            }
        };
        PurchaseConfirmCommands.prototype.confirmPurchase = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var onConfirm = screenVars.onConfirm;
            var ctx = this;
            this.menu.controller.exitScreen(this.menu.activeScreen, function () {
                onConfirm.apply();
                ctx.menu.sendRequest("hideOverlay");
            });
        };
        PurchaseConfirmCommands.prototype.declinePurchase = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            var onDecline = screenVars.onDecline;
            var ctx = this;
            this.menu.controller.exitScreen(this.menu.activeScreen, function () {
                onDecline.apply();
                ctx.menu.sendRequest("hideOverlay");
            });
        };
        PurchaseConfirmCommands.prototype.closeScreen = function (command) {
            var ctx = this;
            this.menu.controller.exitScreen(this.menu.activeScreen, function () {
                ctx.menu.sendRequest("hideOverlay");
            });
        };
        return PurchaseConfirmCommands;
    })(Skylanders.MenuCommands);
    Skylanders.PurchaseConfirmCommands = PurchaseConfirmCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var HowToPlayCommands = (function (_super) {
        __extends(HowToPlayCommands, _super);
        function HowToPlayCommands(menu) {
                _super.call(this, menu);
        }
        HowToPlayCommands.NAME = "HowToPlayCommands";
        HowToPlayCommands.COMMAND_AUTOLOAD = true;
        HowToPlayCommands.SCREENS = [
            "HowToPlayScreen", 
            "HowToPlayScreen2"
        ];
        HowToPlayCommands.prototype.endHowToPlay = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            if(this.menu.activeScreen == "HowToPlayScreen2") {
                Skylanders.PlayerData.instructionsFlag = false;
            }
            if(screenVars.pause) {
                this.menu.controller.showScreen("PauseScreen");
            } else {
                this.menu.controller.showScreen(command.args.screen);
            }
        };
        return HowToPlayCommands;
    })(Skylanders.MenuCommands);
    Skylanders.HowToPlayCommands = HowToPlayCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var PauseScreenCommands = (function (_super) {
        __extends(PauseScreenCommands, _super);
        function PauseScreenCommands(menu) {
                _super.call(this, menu);
        }
        PauseScreenCommands.NAME = "PauseScreenCommands";
        PauseScreenCommands.COMMAND_AUTOLOAD = true;
        PauseScreenCommands.SCREENS = [
            "PauseScreen"
        ];
        PauseScreenCommands.prototype.resume = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            var onResume = screenVars.onResume;
            var ctx = this;
            this.menu.controller.exitScreen(this.menu.activeScreen, function () {
                onResume.apply();
                ctx.menu.sendRequest("hideOverlay");
            });
        };
        PauseScreenCommands.prototype.restart = function (command) {
            var _this = this;
            var confirmVars = this.menu.getMenuDataForScreen("ConfirmOverlay");
            confirmVars.returnScreenOnDecline = "PauseScreen";
            confirmVars.onConfirm = function () {
                return _this.onRestart();
            };
            this.menu.controller.showScreen("ConfirmOverlay");
        };
        PauseScreenCommands.prototype.howToPlay = function (command) {
            var htpVars = this.menu.getMenuDataForScreen("HowToPlayScreen");
            var htp2Vars = this.menu.getMenuDataForScreen("HowToPlayScreen2");
            htpVars.pause = true;
            htp2Vars.pause = true;
            this.menu.controller.showScreen("HowToPlayScreen");
        };
        PauseScreenCommands.prototype.levelSelect = function (command) {
            var _this = this;
            var confirmVars = this.menu.getMenuDataForScreen("ConfirmOverlay");
            confirmVars.returnScreenOnDecline = "PauseScreen";
            confirmVars.onConfirm = function () {
                return _this.onLevelSelect();
            };
            this.menu.controller.showScreen("ConfirmOverlay");
        };
        PauseScreenCommands.prototype.quit = function (command) {
            var _this = this;
            var confirmVars = this.menu.getMenuDataForScreen("ConfirmOverlay");
            confirmVars.returnScreenOnDecline = "PauseScreen";
            confirmVars.onConfirm = function () {
                return _this.onQuit();
            };
            this.menu.controller.showScreen("ConfirmOverlay");
        };
        PauseScreenCommands.prototype.onRestart = function () {
            this.setScene({
                args: {
                    scene: "SuperChargersLevel"
                }
            });
        };
        PauseScreenCommands.prototype.onLevelSelect = function () {
            this.setScene({
                args: {
                    scene: "GameMenu",
                    args: [
                        "TrackSelectScreen"
                    ]
                }
            });
        };
        PauseScreenCommands.prototype.onQuit = function () {
            this.setScene({
                args: {
                    scene: "GameMenu",
                    args: [
                        "TitleScreen"
                    ]
                }
            });
        };
        return PauseScreenCommands;
    })(Skylanders.MenuCommands);
    Skylanders.PauseScreenCommands = PauseScreenCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ConfirmOverlayCommands = (function (_super) {
        __extends(ConfirmOverlayCommands, _super);
        function ConfirmOverlayCommands(menu) {
                _super.call(this, menu);
        }
        ConfirmOverlayCommands.NAME = "ConfirmOverlayCommands";
        ConfirmOverlayCommands.COMMAND_AUTOLOAD = true;
        ConfirmOverlayCommands.SCREENS = [
            "ConfirmOverlay"
        ];
        ConfirmOverlayCommands.prototype.confirm = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            var onConfirm = screenVars.onConfirm;
            var returnScreenOnConfirm = screenVars.returnScreenOnConfirm;
            onConfirm.apply();
            if(returnScreenOnConfirm) {
                this.menu.controller.showScreen(returnScreenOnConfirm);
            }
        };
        ConfirmOverlayCommands.prototype.decline = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            var onDecline = screenVars.onDecline;
            var returnScreenOnDecline = screenVars.returnScreenOnDecline;
            if(onDecline) {
                onDecline.apply();
            }
            if(returnScreenOnDecline) {
                this.menu.controller.showScreen(returnScreenOnDecline);
            }
        };
        return ConfirmOverlayCommands;
    })(Skylanders.MenuCommands);
    Skylanders.ConfirmOverlayCommands = ConfirmOverlayCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ResultsOverlayCommands = (function (_super) {
        __extends(ResultsOverlayCommands, _super);
        function ResultsOverlayCommands(menu) {
                _super.call(this, menu);
        }
        ResultsOverlayCommands.NAME = "ResultsOverlayCommands";
        ResultsOverlayCommands.COMMAND_AUTOLOAD = true;
        ResultsOverlayCommands.SCREENS = [
            "ResultsOverlay"
        ];
        ResultsOverlayCommands.prototype.enterResultsScreen = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            screenVars.tweens = {
            };
            screenVars.tweens.gearbits = {
            };
            screenVars.tweens.gearbits.value = 0;
            screenVars.tweens.time = {
            };
            screenVars.tweens.time.value = 0;
            screenVars.tweens.score = {
            };
            screenVars.tweens.score.value = 0;
            this.menu.disableButtons();
            if(screenVars.placed) {
                this.menu.soundManager.stopSound("BGMLevel", true);
                this.menu.soundManager.playSound("BGMMenu");
                this.menu.bgm = "BGMMenu";
            } else {
                this.menu.soundManager.stopSound("BGMLevel", true);
                this.menu.soundManager.playSound("BGMStinger");
            }
            var nextBtn = this.menu.get("NextButtonRSLTS");
            var playAgainBtn = this.menu.get("PlayAgainButtonRSLTS");
            nextBtn.alpha = 0;
            playAgainBtn.alpha = 0;
            var stars = Skylanders.GameData.getStarsForScore(screenVars.score, screenVars.trackID);
            for(var i = 0; i < 3; i++) {
                var num = i + 1;
                var starGroup = this.menu.get("ResultsStarGroup" + num);
                var starWhite = this.menu.get("ResultsStarWhite" + num);
                var starBlack = this.menu.get("ResultsStarBlack" + num);
                starGroup.alpha = 0;
                starWhite.alpha = 0;
                starBlack.alpha = 0;
                if(num <= stars) {
                    starWhite.alpha = 1;
                } else {
                    starBlack.alpha = 1;
                }
            }
            var charData = screenVars.charData;
            for(var i = 0; i < 3; i++) {
                var num = i + 1;
                var iconGroup = this.menu.get("ResultsIconGroup" + num);
                var charName = this.menu.get("ResultsCharName" + num);
                var charTime = this.menu.get("ResultsCharTime" + num);
                var charPlace = this.menu.get("ResultsPlaceText" + num);
                if(i >= charData.length) {
                    break;
                }
                var chr = charData[i];
                var character = Skylanders.GameData.getCharacterData(chr.characterID);
                var icon = Skylanders.ScreenUtil.makeImage(this.menu, "ResultsCharIcon" + num, character.mapIcon, {
                    zIndex: iconGroup.zIndex
                });
                iconGroup.addChild(icon);
                var text = this.menu.globalStrings.game.characters[chr.characterID] || "CHOMPY";
                charName.text = text.toUpperCase();
                charTime.text = Skylanders.GameData.formatTimeFromFrames(chr.time);
                charPlace.text = num + this.menu.globalStrings.game.placement["suffix" + num];
            }
        };
        ResultsOverlayCommands.prototype.exitLevel = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            if(Skylanders.PlayerData.getSelectedTrack() == "Track003" && screenVars.placed) {
                this.setScene({
                    args: {
                        scene: "GameMenu",
                        args: [
                            "EndScreen"
                        ]
                    }
                });
            } else {
                this.setScene(command);
            }
        };
        ResultsOverlayCommands.prototype.startResultsScreen = function (command) {
            var _this = this;
            var screenVars = this.menu.getActiveMenuData();
            var tweens = screenVars.tweens;
            this.menu.disableButtons(0);
            var timeline = new TimelineMax({
                onComplete: end.bind(this)
            });
            timeline.insert(TweenMax.to(tweens.gearbits, 1, {
                value: screenVars.gearbits,
                onUpdate: updateGearbit.bind(this),
                ease: Linear.easeInOut
            }));
            timeline.insert(TweenMax.to(tweens.time, 1, {
                value: screenVars.time,
                onUpdate: updateTime.bind(this),
                ease: Linear.easeInOut
            }));
            timeline.insert(TweenMax.to(tweens.score, 3, {
                value: screenVars.score,
                onUpdate: updateScore.bind(this),
                ease: Linear.easeInOut
            }));
            var stars = Skylanders.GameData.getStarsForScore(screenVars.score, screenVars.trackID);
            for(var i = 0; i < 3; i++) {
                var num = i + 1;
                var starGroup = this.menu.get("ResultsStarGroup" + num);
                starGroup.alpha = 1;
                timeline.insert(TweenMax.from(starGroup, num <= stars ? 2 : 0.5, {
                    scale: 0,
                    ease: num <= stars ? Elastic.easeOut : Power2.easeOut,
                    delay: 3 + (i * 0.1)
                }));
            }
            if(stars > 0) {
                timeline.insert(TweenMax.delayedCall(3, function () {
                    return _this.menu.soundManager.playSound("SUIResultsStar");
                }));
            } else if(stars == 3) {
                timeline.insert(TweenMax.delayedCall(3, function () {
                    return _this.menu.soundManager.playSound("SUIResultsWin");
                }));
            }
            function updateGearbit() {
                var sv = this.menu.getActiveMenuData();
                var t = sv.tweens;
                var txt = this.menu.get("ResultGearBitText");
                txt.text = "X" + Math.floor(t.gearbits.value);
            }
            function updateTime() {
                var sv = this.menu.getActiveMenuData();
                var t = sv.tweens;
                var txt = this.menu.get("ResultTimeText");
                txt.text = Skylanders.GameData.formatTimeFromFrames(Math.floor(t.time.value));
            }
            function updateScore() {
                var sv = this.menu.getActiveMenuData();
                var t = sv.tweens;
                var txt = this.menu.get("ResultScoreText");
                txt.text = Avota.NumberUtil.addCommas(Math.floor(t.score.value));
            }
            function end() {
                var nextBtn = this.menu.get("NextButtonRSLTS");
                var playAgainBtn = this.menu.get("PlayAgainButtonRSLTS");
                this.menu.controller.resetImage(nextBtn.name);
                if(playAgainBtn) {
                    this.menu.controller.resetImage(playAgainBtn.name);
                }
                nextBtn.alpha = 1;
                if(playAgainBtn) {
                    playAgainBtn.alpha = 1;
                }
                TweenMax.from(nextBtn, 0.3, {
                    x: "+=500"
                });
                if(playAgainBtn) {
                    TweenMax.from(playAgainBtn, 0.3, {
                        x: "-=500"
                    });
                }
                this.menu.enableButtons();
            }
        };
        return ResultsOverlayCommands;
    })(Skylanders.MenuCommands);
    Skylanders.ResultsOverlayCommands = ResultsOverlayCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var TitleScreenCommands = (function (_super) {
        __extends(TitleScreenCommands, _super);
        function TitleScreenCommands(menu) {
                _super.call(this, menu);
        }
        TitleScreenCommands.NAME = "TitleScreenCommands";
        TitleScreenCommands.COMMAND_AUTOLOAD = true;
        TitleScreenCommands.SCREENS = [
            "TitleScreen"
        ];
        TitleScreenCommands.prototype.enterTitleScreen = function (command) {
            if(!Avota.EnvUtil.isMobile) {
            }
            this.menu.controller.transitionScreen(this.menu.getAsset("ScreenConfig").transitions.idle.GameMenuTitle);
        };
        TitleScreenCommands.prototype.endTitleScreen = function (command) {
            var screenVars = this.menu.menuData[this.menu.activeScreen];
            this.menu.controller.showScreen(command.args.screen);
            this.menu.controller.transitionScreen(this.menu.getAsset("ScreenConfig").transitions.idle.GameMenuPostTitle);
        };
        return TitleScreenCommands;
    })(Skylanders.MenuCommands);
    Skylanders.TitleScreenCommands = TitleScreenCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var EndScreenCommands = (function (_super) {
        __extends(EndScreenCommands, _super);
        function EndScreenCommands(menu) {
                _super.call(this, menu);
        }
        EndScreenCommands.NAME = "EndScreenCommands";
        EndScreenCommands.COMMAND_AUTOLOAD = true;
        EndScreenCommands.SCREENS = [
            "EndScreen"
        ];
        EndScreenCommands.prototype.enterEndScreen = function (command) {
            var _this = this;
            var screenVars = this.menu.getActiveMenuData();
            var resultsData = Skylanders.PlayerData.getRaceResults();
            var charGroup = this.menu.get("EndCharacterGroup");
            var charData = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getSelectedCharacter());
            if(charData.endScreenImage) {
                var img = Skylanders.ScreenUtil.makeImage(this.menu, "EndScreenCharacter", charData.endScreenImage, {
                    zIndex: 5
                });
                img.y = (640 - img.height) / 2;
                charGroup.addChild(img);
            }
            TweenMax.delayedCall(0.25, function () {
                return _this.menu.soundManager.playSound("SUIEndScreenWin");
            });
            for(var i = 0; i < 3; i++) {
                var racerData = resultsData.charData[i];
                var num = i + 1;
                var vehicleGroup = this.menu.get("EndScreenVehicleGroup" + num);
                var placeText = this.menu.get("EndPlaceText" + num);
                var placeSuffix = this.menu.get("EndPlaceSuffix" + num);
                placeText.text = num.toString();
                placeSuffix.text = this.menu.globalStrings.game.placement["suffix" + num];
                switch(racerData.id) {
                    case "player":
                        var vehicleSprite = this.menu.create(Skylanders.VehicleSprite, this.menu.timeManager, this.menu.renderManager, this.menu.spatialManager, "EndScreenVehicle" + num);
                        vehicleSprite.set({
                            zIndex: 10,
                            scale: 0.70
                        });
                        vehicleSprite.setup();
                        vehicleSprite.showVehicle(Skylanders.PlayerData.getSelectedVehicle(), Skylanders.PlayerData.getActiveUpgrades());
                        vehicleGroup.addChild(vehicleSprite);
                        var glow = this.menu.get("EndScreenGlow" + num);
                        glow.alpha = 1;
                        TweenMax.to(glow, 20, {
                            rotation: 360,
                            ease: Linear.easeInOut,
                            repeat: -1
                        });
                        break;
                    case "rival":
                        var vehicleSprite = this.menu.create(Skylanders.VehicleSprite, this.menu.timeManager, this.menu.renderManager, this.menu.spatialManager, "EndScreenVehicle" + num);
                        vehicleSprite.set({
                            zIndex: 10,
                            scale: 0.70
                        });
                        vehicleSprite.setup();
                        vehicleSprite.showVehicle(Skylanders.PlayerData.getRivalVehicle(), Skylanders.GameData.getOpponentData("rival").upgrades);
                        vehicleGroup.addChild(vehicleSprite);
                        break;
                    default:
                        var vehicleSprite = this.menu.create(Skylanders.VehicleSprite, this.menu.timeManager, this.menu.renderManager, this.menu.spatialManager, "EndScreenVehicle" + num);
                        vehicleSprite.set({
                            zIndex: 10,
                            scale: 0.70
                        });
                        vehicleSprite.setup();
                        vehicleSprite.showVehicle(Skylanders.PlayerData.getRivalVehicle(2), Skylanders.GameData.getOpponentData("rival").upgrades);
                        vehicleGroup.addChild(vehicleSprite);
                        break;
                }
            }
        };
        EndScreenCommands.prototype.exitEndScreen = function (command) {
            var img = this.menu.get("EndScreenCharacter");
            img.destroy();
            for(var i = 0; i < 3; i++) {
                var num = i + 1;
                var vehicleGroup = this.menu.get("EndScreenVehicleGroup" + num);
                var vehicleSprite = this.menu.get("EndScreenVehicle" + num);
                vehicleSprite.destroy();
            }
        };
        EndScreenCommands.prototype.startEndScreen = function (command) {
            var screenVars = this.menu.getActiveMenuData();
            var resultsData = Skylanders.PlayerData.getRaceResults();
            this.menu.startBGM("BGMMenu", true);
            for(var i = 0; i < 3; i++) {
                var racerData = resultsData.charData[i];
                var num = i + 1;
                var placeGroup = this.menu.get("EndPlaceGroup" + num);
                switch(racerData.id) {
                    case "player":
                        if(num == 1) {
                            this.menu.soundManager.playSound("VOYouWon");
                        }
                        TweenMax.to(placeGroup, 0.75, {
                            scale: 0.96,
                            yoyo: true,
                            repeat: -1,
                            ease: Power1.easeInOut
                        });
                        break;
                }
            }
        };
        return EndScreenCommands;
    })(Skylanders.MenuCommands);
    Skylanders.EndScreenCommands = EndScreenCommands;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var VehicleSprite = (function (_super) {
        __extends(VehicleSprite, _super);
        function VehicleSprite(timeManager, renderManager, spatialManager, name) {
            if (typeof name === "undefined") { name = VehicleSprite.NAME; }
                _super.call(this, timeManager, renderManager, spatialManager, null, name);
            this._graphics = {
            };
            this._game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
        }
        VehicleSprite.NAME = "VehicleSprite";
        VehicleSprite.prototype.setup = function () {
            var upgrades = Skylanders.GameData.getUpgradeData();
            var vehicles = Skylanders.GameData.getSelectableVehicleList();
            for(var k in upgrades) {
                var upgrade = upgrades[k];
                if(!upgrade.image) {
                    continue;
                }
                var asset = this.getAsset(upgrade.image);
                var graphic = Skylanders.ScreenUtil.makeImage(this._group, upgrade.image + "_" + this.name, upgrade.image, {
                    zIndex: this.zIndex + 5,
                    x: 0,
                    y: 0
                });
                this._graphics[upgrade.image] = graphic;
                this.addChild(graphic);
            }
            for(var i = 0; i < vehicles.length; i++) {
                var vehicle = Skylanders.GameData.getVehicleData(vehicles[i]);
                if(!vehicle.base) {
                    continue;
                }
                var asset = this.getAsset(vehicle.base);
                var graphic = Skylanders.ScreenUtil.makeImage(this._group, vehicle.base + "_" + this.name, vehicle.base, {
                    zIndex: this.zIndex + 4,
                    x: 0,
                    y: 0
                });
                this._graphics[vehicle.base] = graphic;
                this.addChild(graphic);
            }
        };
        VehicleSprite.prototype.getAsset = function (assetID, node) {
            return this._game.getAsset(assetID, node);
        };
        VehicleSprite.prototype.showVehicle = function (vehicleID, upgrades) {
            this.clear();
            var upgradeData = Skylanders.GameData.getUpgradeData();
            var vehicle = Skylanders.GameData.getVehicleData(vehicleID);
            var layering = Skylanders.GameData.getData("shopVehicleLayering")[vehicleID];
            var base = this._graphics[vehicle.base];
            if(!base) {
                return;
            }
            base.visible = true;
            if(layering) {
                base.zIndex = this.zIndex + layering.base;
            }
            for(var i = 0; i < upgrades.length; i++) {
                var upgrade = upgradeData[upgrades[i]];
                if(upgrade.vehicle != vehicleID) {
                    continue;
                }
                var graphic = this._graphics[upgrade.image];
                graphic.visible = true;
                if(layering) {
                    graphic.zIndex = this.zIndex + (upgrade.type == "special" ? layering.specialty : layering.performance);
                }
            }
        };
        VehicleSprite.prototype.destroy = function () {
            for(var k in this._graphics) {
                this._graphics[k].destroy();
            }
            this._graphics = null;
            this._game = null;
            _super.prototype.destroy.call(this);
        };
        VehicleSprite.prototype.clear = function () {
            for(var i = 0; i < this._children.length; i++) {
                var child = this._children[i];
                child.visible = false;
            }
        };
        return VehicleSprite;
    })(Avota.ImageSprite);
    Skylanders.VehicleSprite = VehicleSprite;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var LevelGUI = (function (_super) {
        __extends(LevelGUI, _super);
        function LevelGUI(scene, racerWorld, inventory, boardDisplay, touchInput) {
                _super.call(this, scene, scene.globalStrings.ui.GUI, LevelGUI.NAME);
            this._beenAttacked = false;
            this._bonusEnabled = true;
            this.date = new Date();
            this._racerWorld = racerWorld;
            this._inventory = inventory;
            this._boardDisplay = boardDisplay;
            this.touchInput = touchInput;
        }
        LevelGUI.NAME = "LevelGUI";
        LevelGUI.prototype._onCreate = function () {
            _super.prototype._onCreate.call(this);
            this.setScreenVars();
            Skylanders.ScreenUtil.buildElements(this, this.getAsset("ScreenConfig").ui.GUI);
            var portraitGroup = this.get("HUDPortraitGroup");
            var charGroup = this.get("HUDCharGroup");
            var rescuedGroup1 = this.get("HUDRescuedCharGroup1");
            var rescuedGroup2 = this.get("HUDRescuedCharGroup2");
            var rescuedGroup3 = this.get("HUDRescuedCharGroup3");
            var rescuedAnim1 = this.get("HUDRescuedCharAnim1");
            var rescuedAnim2 = this.get("HUDRescuedCharAnim2");
            var rescuedAnim3 = this.get("HUDRescuedCharAnim3");
            rescuedAnim1.stop();
            rescuedAnim2.stop();
            rescuedAnim3.stop();
            this._screenFX = this.create(Skylanders.ScreenFX, this._scene, this._scene.timeManager, this._scene.renderManager, this._scene.globalStrings, this._scene.screenWidth, this._scene.screenHeight);
            this._screenFX.zIndex = 100;
            var barfill = this.create(Avota.CanvasGraphic, this._scene.timeManager, this._scene.renderManager, 175, 175, "BarFill");
            barfill.set({
                x: 15,
                y: 15,
                zIndex: 3,
                rotation: 115
            });
            var barglow = this.create(Avota.CanvasGraphic, this._scene.timeManager, this._scene.renderManager, 175, 175, "BarGlow");
            barglow.set({
                x: 15,
                y: 15,
                zIndex: 4,
                rotation: 115,
                alpha: 0
            });
            charGroup.addChild(barfill);
            charGroup.addChild(barglow);
            if(!Avota.EnvUtil.isMobile) {
                for(var i = 0; i < 3; i++) {
                    var num = i + 1;
                    var progressVGroup = this.get("HUDProgressVehicleG" + num);
                    var vehicleSprite = this.create(Skylanders.VehicleSprite, this.timeManager, this.renderManager, this.spatialManager, "HUDProgressVehicle" + num);
                    vehicleSprite.set({
                        zIndex: progressVGroup.zIndex
                    });
                    vehicleSprite.setup();
                    progressVGroup.addChild(vehicleSprite);
                }
            }
            var charData = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getSelectedCharacter());
            var portrait = Skylanders.ScreenUtil.makeImage(this, "HUDPortrait", charData.portraitHUD, {
                zIndex: 5
            });
            portraitGroup.addChild(portrait);
            this.initTouchArea();
            this.setHP();
            this.setupRescuePortraits();
            this.setupMap();
            this.buttonSignal.add(this.buttonHandler, this);
            this._inventory.eventSignal.add(this.inventoryHandler, this, 1);
            this._racerWorld.eventSignal.add(this.onWorldEvent, this);
            this._racerWorld.entitySignal.add(this.onEntityEvent, this);
            this.enableButtons();
        };
        LevelGUI.prototype.setupRescuePortraits = function () {
            var allies = this._racerWorld.getEntitiesInCategory("allies");
            if(allies) {
                for(var i = 0; i < allies.length; i++) {
                    var ally = this._racerWorld.getEntity(allies[i]);
                    var allyData = Skylanders.GameData.getData("allies")[ally.type];
                    if(!allyData) {
                        continue;
                    }
                    var imgGroup = this.get("HUDRescuedCharGroup" + (i + 1));
                    if(imgGroup) {
                        var allyImage = Skylanders.ScreenUtil.makeImage(this, "ally_img_" + (i + 1), allyData.image, {
                            zIndex: 10
                        });
                        imgGroup.addChild(allyImage);
                    }
                }
            }
            this.updateRescuePortraits();
        };
        LevelGUI.prototype.updateRescuePortraits = function () {
            var allies = this._racerWorld.getEntitiesInCategory("allies");
            if(allies) {
                for(var i = 0; i < allies.length; i++) {
                    var num = i + 1;
                    var ally = this._racerWorld.getEntity(allies[i]);
                    var allyData = Skylanders.GameData.getData("allies")[ally.type];
                    if(!allyData) {
                        continue;
                    }
                    var allyImage = this.get("ally_img_" + num);
                    var lock = this.get("HUDRescuedLock" + num);
                    var portNeed = this.get("HUDRescuedPortNeed" + num);
                    var portFound = this.get("HUDRescuedPortFound" + num);
                    var portAnim = this.get("HUDRescuedCharAnim" + num);
                    if(lock && portNeed && portFound) {
                        var isUnlocked = this._inventory.isAllyUnlocked(ally.type);
                        if(isUnlocked) {
                            if(!TweenMax.isTweening(lock) && lock.visible == true) {
                                portAnim.alpha = 1;
                                portAnim.play("unlock", 0, 0, (function () {
                                    this.alpha = 0;
                                }).bind(portAnim));
                                TweenMax.to(lock, 0.2, {
                                    alpha: 0,
                                    scale: 1.2,
                                    onComplete: function () {
                                        this.visible = false;
                                    },
                                    onCompleteScope: lock,
                                    delay: (portAnim.duration * 0.6) / 1000
                                });
                            }
                            if(!TweenMax.isTweening(portFound) && portFound.visible == false) {
                                portFound.visible = true;
                                TweenMax.from(portFound, 0.2, {
                                    alpha: 0,
                                    delay: (portAnim.duration * 0.6) / 1000
                                });
                            }
                        } else {
                            lock.visible = true;
                            lock.alpha = 1;
                            lock.scale = 1;
                            portAnim.alpha = 0;
                            portNeed.visible = true;
                            portFound.visible = false;
                        }
                    }
                }
            }
        };
        LevelGUI.prototype.onWorldEvent = function (eventID) {
            switch(eventID) {
                case Skylanders.EventSignals.ENEMY_APPROACH:
                    this.soundManager.playSound("SUIAlarm");
                    this._screenFX.showMessage(this._scene.globalStrings.game.messages.EnemyApproach);
                    break;
                case Skylanders.EventSignals.RACE_BEGIN:
                    if(this._boardDisplay) {
                        this._boardDisplay.unlock();
                        this._boardDisplay.enableInput();
                    }
                    break;
                case Skylanders.EventSignals.RACE_END:
                    if(this._boardDisplay) {
                        this._boardDisplay.disableInput();
                        this._boardDisplay.lock();
                    }
                    this._bonusEnabled = false;
                    this.disableButtons();
                    break;
            }
        };
        LevelGUI.prototype.onEntityEvent = function (eventID, data) {
            switch(eventID) {
                case Skylanders.EntitySignals.DAMAGED:
                    var entity = this._racerWorld.getEntity(data);
                    if(entity.id == "player" && !this._beenAttacked) {
                        this._screenFX.showMessage(this._scene.globalStrings.game.messages.EnemyHint, null, null, 1);
                        this._beenAttacked = true;
                    }
                    break;
            }
        };
        LevelGUI.prototype.initTouchArea = function () {
            for(var i = 0; i < this._inventory.maxBonuses; i++) {
                var hitbox = this.get("BonusHit" + (i + 1));
                var input = this.create(Avota.InputComponent, this.inputManager);
                input.inputMove.add(this.onMove, this);
                input.inputDown.add(this.onDown, this);
                input.inputUp.add(this.onUp, this);
                hitbox.addComponent(input, Avota.EngineConstants.INPUT);
            }
        };
        LevelGUI.prototype.onMove = function (sprite, x, y, id) {
        };
        LevelGUI.prototype.onDown = function (sprite, x, y, id) {
        };
        LevelGUI.prototype.onUp = function (sprite, x, y, id) {
            if(!this._bonusEnabled) {
                return;
            }
            var slotNum = parseInt(sprite.name.match(/\d+/)[0]);
            if(this._inventory.getBonusInSlot(slotNum - 1) == Skylanders.GamePiece.KEY && this._notification) {
                TweenMax.killTweensOf(this._notification.target);
            }
            this._inventory.useBonusInSlot(slotNum - 1);
        };
        LevelGUI.prototype.buttonHandler = function (button, action, id) {
            switch(action) {
                case Avota.Button.OVER:
                    break;
                case Avota.Button.DOWN:
                    this.onButtonDown(button, id);
                    break;
                case Avota.Button.UP:
                    this.onButtonPress(button, id);
                    break;
                case Avota.Button.OUT:
                    break;
            }
        };
        LevelGUI.prototype.inventoryHandler = function (id, data) {
            var _this = this;
            if(this._racerWorld.hasEnded()) {
                return;
            }
            switch(id) {
                case Skylanders.InventoryEvent.BONUS_GET:
                    break;
                case Skylanders.InventoryEvent.BONUS_USE:
                    var message, x, y;
                    switch(data.bonus) {
                        case Skylanders.EntityCommand.BONUS_SHIELD:
                            message = message = this._scene.globalStrings.game.messages.ShieldUse;
                            x = 20;
                            y = 20;
                            break;
                        case Skylanders.EntityCommand.BONUS_ELIXIR:
                            message = message = this._scene.globalStrings.game.messages.ElixirUse;
                            x = 20;
                            y = 20;
                            break;
                        case Skylanders.EntityCommand.BONUS_SHOE:
                            message = message = this._scene.globalStrings.game.messages.ShoeUse;
                            x = 20;
                            y = 20;
                            break;
                        case "attack_extra":
                        case "sattack_extra":
                        case "engine_extra":
                            message = message = this._scene.globalStrings.game.messages.Shuffle;
                            break;
                    }
                    if(message) {
                        this._screenFX.showMessage(message);
                    }
                    this.bonusIndicationCheck();
                    break;
                case Skylanders.InventoryEvent.SLOT_FILLED:
                    var slotGroup = this.get("HUDBonusGroup" + (data.slotIndex + 1));
                    var bonusData = Skylanders.GameData.getData("bonuses")[data.bonus];
                    slotGroup.removeAllChildren();
                    var img = Skylanders.ScreenUtil.makeImage(this, slotGroup.name + "Bonus", bonusData.display, {
                        zIndex: 20
                    });
                    slotGroup.addChild(img);
                    var sourceLocation = this._boardDisplay.getPieceLocation(data.sourceID);
                    TweenMax.from(img, 0.5, {
                        scale: 0.5,
                        alpha: 0
                    });
                    if(sourceLocation) {
                        var screenPos = slotGroup.globalToLocal(sourceLocation);
                        TweenMax.from(img, 0.6, {
                            x: screenPos.x,
                            y: screenPos.y
                        });
                    }
                    this.bonusIndicationCheck(0.8);
                    break;
                case Skylanders.InventoryEvent.SLOT_EMPTIED:
                    var slotGroup = this.get("HUDBonusGroup" + (data.slotIndex + 1));
                    var img = this.get(slotGroup.name + "Bonus");
                    if(!img) {
                        return;
                    }
                    TweenMax.to(img, 0.2, {
                        scale: 1.2,
                        alpha: 0,
                        onComplete: function () {
                            return img.destroy();
                        }
                    });
                    break;
                case Skylanders.InventoryEvent.ALLY_UNLOCKED:
                    this._screenFX.showMessage(this._scene.globalStrings.game.messages.RescueMessage);
                    this.updateRescuePortraits();
                    this.bonusIndicationCheck();
                    break;
                case Skylanders.InventoryEvent.ALLY_UNLOCKABLE:
                    this._screenFX.showMessage(this._scene.globalStrings.game.messages.RescueAlert);
                    if(this._inventory.hasBonus(Skylanders.GamePiece.KEY)) {
                        this._notification = TweenMax.delayedCall(3, function () {
                            return _this._screenFX.showMessage(_this._scene.globalStrings.game.messages.HintMessageKey);
                        });
                    }
                    this.bonusIndicationCheck();
                    break;
                case Skylanders.InventoryEvent.ALLY_OFFSCREEN:
                    this.bonusIndicationCheck();
                    break;
            }
        };
        LevelGUI.prototype.bonusIndicationCheck = function (delay) {
            if (typeof delay === "undefined") { delay = 0; }
            for(var i = 0; i < this._inventory.maxBonuses; i++) {
                var bonus = this._inventory.getBonusInSlot(i);
                if(!bonus) {
                    continue;
                }
                var slotGroup = this.get("HUDBonusGroup" + (i + 1));
                var img = this.get(slotGroup.name + "Bonus");
                if(!img) {
                    continue;
                }
                TweenMax.killTweensOf(slotGroup);
                slotGroup.scale = 1;
                if(bonus == Skylanders.EntityCommand.BONUS_KEY) {
                    var allies = this._racerWorld.getEntitiesInCategory("allies");
                    var shouldTween = false;
                    for(var j = 0; j < allies.length; j++) {
                        var ally = this._racerWorld.getEntity(allies[j]);
                        if(ally.state == Skylanders.EntityState.UNLOCKABLE) {
                            shouldTween = true;
                            break;
                        }
                    }
                    if(shouldTween) {
                        if(!TweenMax.isTweening(slotGroup)) {
                            TweenMax.to(slotGroup, 0.6, {
                                scale: 1.2,
                                delay: delay,
                                yoyo: true,
                                repeat: -1
                            });
                        }
                    } else {
                    }
                } else {
                    TweenMax.to(slotGroup, 0.6, {
                        scale: 1.2,
                        delay: delay,
                        yoyo: true,
                        repeat: -1
                    });
                }
            }
        };
        LevelGUI.prototype.onButtonDown = function (button, id) {
        };
        LevelGUI.prototype.onButtonPress = function (button, id) {
            var _this = this;
            switch(button.name) {
                case "PauseButton":
                    if(this.menuOverlay) {
                        this.pauseGame();
                        this.menuOverlay.showPauseScreen(function () {
                            return _this.unpauseGame();
                        });
                    }
                    break;
                case "SoundButton":
                    this.toggleMute(null, null);
                    break;
                case "AccelButton":
                    if(this.touchInput) {
                        this.touchInput.onReleaseAccel();
                    }
                    break;
                case "BrakeButton":
                    if(this.touchInput) {
                        this.touchInput.onReleaseBrake();
                    }
                    break;
                case "Fire1Button":
                    if(this.touchInput) {
                        this.touchInput.onReleaseFire();
                    }
                    break;
                case "Fire2Button":
                    if(this.touchInput) {
                        this.touchInput.onReleaseFire2();
                    }
                    break;
            }
        };
        LevelGUI.prototype.hideAll = function () {
            var elements = this.getAll();
            for(var i = 0; i < elements.length; i++) {
                elements[i].visible = false;
            }
        };
        LevelGUI.prototype.pauseGame = function () {
            this._scene.pause();
            this.disableButtons();
        };
        LevelGUI.prototype.unpauseGame = function () {
            this._scene.resume();
            this.enableButtons();
        };
        LevelGUI.prototype.scaleMeter = function (graphic, degrees, color) {
            graphic.clear();
            graphic.beginPath();
            graphic.arc(graphic.width / 2, graphic.height / 2, graphic.width / 2, 0, Avota.GeomUtil.degreesToRadians(degrees), false);
            graphic.lineTo(graphic.width / 2, graphic.height / 2);
            graphic.fillStyle = color || '#367EEA';
            graphic.fill();
        };
        LevelGUI.prototype.setPlacement = function () {
            var placeStrings = this._scene.globalStrings.game.placement;
            var nameStrings = this._scene.globalStrings.game.characters;
            var racers = this._racerWorld.getEntitiesInCategory("racers");
            for(var i = 0; i < racers.length; i++) {
                var racer = this._racerWorld.getEntity(racers[i]);
                var place = "" + racer.place;
                var name = nameStrings[Skylanders.PlayerData.getCharIDForEntity(racer.id)];
                var suffix = "";
                for(var k in placeStrings) {
                    if(String(k).match(String(racer.place))) {
                        suffix = placeStrings[k];
                        break;
                    }
                }
                if(suffix == "") {
                    suffix = placeStrings["suffix4"];
                }
                if(racer.place <= 3) {
                    var placeText = this.get("HUDProgressPlace" + racer.place);
                    var placeSuffix = this.get("HUDProgressSuffix" + racer.place);
                    var placeName = this.get("HUDProgressName" + racer.place);
                    var vehicleGraphic = this.get("HUDProgressVehicle" + place);
                    if(placeText.text != place) {
                        placeText.text = place;
                    }
                    if(placeSuffix.text != suffix) {
                        placeSuffix.text = suffix;
                    }
                    if(placeName.text != name) {
                        placeName.text = name;
                        if(vehicleGraphic) {
                            vehicleGraphic.showVehicle(racer.type, racer.id == "player" ? Skylanders.PlayerData.getActiveUpgrades() : Skylanders.GameData.getOpponentData("rival").upgrades);
                        }
                    }
                }
                if(racer.id == "player") {
                    var hudPlace = this.get("HUDPlacementText");
                    var hudSuffix = this.get("HUDPlacementSuffix");
                    if(hudPlace.text != place) {
                        hudPlace.text = place;
                    }
                    if(hudSuffix.text != suffix) {
                        hudSuffix.text = suffix;
                    }
                }
            }
        };
        LevelGUI.prototype.setHP = function () {
            var scale = this.screenVars.HP.barScale;
            var deg = Math.round(scale * 180);
            var graphic = this.get("BarFill");
            this.scaleMeter(graphic, deg, this.screenVars.HP.barColor);
        };
        LevelGUI.prototype.setCurrency = function () {
            var text = this.get("HUDCurrencyText");
            var currency = Math.floor(this.screenVars.CURRENCY.textValue);
            text.text = Avota.NumberUtil.addLeadingZeros(currency, 5, false);
        };
        LevelGUI.prototype.setScore = function () {
            var text = this.get("HUDScoreText");
            var currency = Math.floor(this.screenVars.SCORE.textValue);
            text.text = Avota.NumberUtil.addLeadingZeros(currency, 6, false);
        };
        LevelGUI.prototype.setEnergy = function () {
            var maxWidth = this.screenVars.ENERGY.barWidth;
            var width = this.screenVars.ENERGY.barWidth * this.screenVars.ENERGY.barScale;
            var height = this.screenVars.ENERGY.barHeight;
            var offset = this.screenVars.ENERGY.barOffset;
            var graphic = this.get("EnergyFill");
            if(width < 0) {
                graphic.clear();
                return;
            }
            graphic.clear();
            graphic.beginPath();
            graphic.moveTo(maxWidth - offset, height);
            graphic.lineTo(maxWidth, 0);
            graphic.lineTo(maxWidth - width, 0);
            graphic.lineTo(maxWidth - width - offset, height);
            graphic.closePath();
            graphic.fillStyle = this.screenVars.ENERGY.barColor;
            graphic.fill();
        };
        LevelGUI.prototype.setupMap = function () {
            var racers = this._racerWorld.getEntitiesInCategory("racers");
            var mapData = this._racerWorld.track.mapData;
            var mapGroup = this.get("HUDMapGroup");
            var mapImage = Skylanders.ScreenUtil.makeImage(this, "HUDMap", this._racerWorld.track.mapImage, {
                zIndex: 7
            });
            var node = mapData.nodes[0];
            mapGroup.addChild(mapImage);
            var mapFlag = Skylanders.ScreenUtil.makeImage(this, "HUDMapFlag", "HUDMapFlag", {
                zIndex: 8
            });
            mapFlag.x = node.point.x - mapFlag.width / 2;
            mapFlag.y = node.point.y - mapFlag.height / 2;
            mapGroup.addChild(mapFlag);
            for(var i = 0; i < racers.length; i++) {
                var racerID = racers[i];
                var racer = this._racerWorld.getEntity(racerID);
                var assetID, charData;
                switch(racerID) {
                    case "player":
                        charData = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getSelectedCharacter());
                        assetID = charData.mapIcon;
                        break;
                    case "rival":
                        charData = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getRivalCharacter(1));
                        assetID = charData.mapIcon;
                        break;
                    default:
                        charData = Skylanders.GameData.getCharacterData(Skylanders.PlayerData.getRivalCharacter(2));
                        assetID = charData.mapIcon;
                        break;
                }
                var icon = Skylanders.ScreenUtil.makeImage(this, "MapIcon" + racerID, assetID, {
                    zIndex: racerID == "player" ? 20 + i : 10 + i
                });
                mapGroup.addChild(icon);
                icon.x = node.point.x - icon.width / 2;
                icon.y = node.point.y - icon.height / 2;
            }
        };
        LevelGUI.prototype.updateMap = function () {
            var racers = this._racerWorld.getEntitiesInCategory("racers");
            var marker = this._racerWorld.getEntity(this._racerWorld.getEntitiesInCategory("racemarker")[0]);
            var mapGroup = this.get("HUDMapGroup");
            var mapImage = this.get("HUDMap");
            var mapData = this._racerWorld.track.mapData;
            for(var i = 0; i < racers.length; i++) {
                var racerID = racers[i];
                var racer = this._racerWorld.getEntity(racerID);
                var icon = this.get("MapIcon" + racerID);
                var racerDist = racer.x;
                var racerPerc = racerDist / this._racerWorld.track.trackLength;
                var mapDist = mapData.totalDist * racerPerc;
                var nodeDist = 0;
                var nextNode, prevNode;
                for(var j = 1; j < mapData.nodes.length; j++) {
                    var node = mapData.nodes[j];
                    if(node.dist > mapDist) {
                        nextNode = mapData.nodes[j];
                        prevNode = mapData.nodes[j - 1];
                        break;
                    }
                    ;
                }
                var overlap = mapDist - prevNode.dist;
                var range = nextNode.distToPrev;
                var position = Avota.Point.interpolate(nextNode.point, prevNode.point, overlap / range);
                icon.centerX = position.x;
                icon.centerY = position.y;
            }
        };
        LevelGUI.prototype.getAsset = function (id) {
            return this._scene.getAsset(id);
        };
        LevelGUI.prototype.onTick = function (delta) {
            this.updateScreenVars();
            this.incrementTime();
            if(this.touchInput) {
                this.touchInput.detectGestures(delta);
            }
        };
        LevelGUI.prototype.setScreenVars = function () {
            this.screenVars = {
            };
            this.screenVars.HP = {
            };
            this.screenVars.HP.hpScale = 1;
            this.screenVars.HP.barScale = 1;
            this.screenVars.HP.barColor = "#367EEA";
            this.screenVars.HP.glowColor = "#A1E3E3";
            this.screenVars.SCORE = {
            };
            this.screenVars.SCORE.value = 1;
            this.screenVars.SCORE.textValue = 1;
            this.screenVars.CURRENCY = {
            };
            this.screenVars.CURRENCY.value = 0;
            this.screenVars.CURRENCY.textValue = 0;
            this.screenVars.PLACE = {
            };
            this.screenVars.PLACE.value = 0;
            this.screenVars.PLACE.textValue = 0;
            this.screenVars.MAP = {
            };
            this.screenVars.MAP.height = 180;
        };
        LevelGUI.prototype.updateScreenVars = function () {
            var player = this._racerWorld.getEntity("player");
            if(this.screenVars.HP.hpScale != player.getHPScale()) {
                var barGlow = this.get("BarGlow");
                barGlow.alpha = 1;
                TweenMax.killTweensOf(this.screenVars.HP);
                TweenMax.killTweensOf(barGlow);
                this.screenVars.HP.hpScale = player.getHPScale();
                this.scaleMeter(barGlow, Math.round(this.screenVars.HP.barScale * 180), this.screenVars.HP.glowColor);
                TweenMax.to(barGlow, 0.8, {
                    alpha: 0.01
                });
                TweenMax.to(this.screenVars.HP, 0.3, {
                    barScale: player.getHPScale(),
                    onUpdate: this.setHP.bind(this)
                });
            }
            if(this.screenVars.CURRENCY.value != Skylanders.PlayerData.getCurrency()) {
                this.screenVars.CURRENCY.value = Skylanders.PlayerData.getCurrency();
                if(!Avota.EnvUtil.isMobile) {
                    TweenMax.to(this.screenVars.CURRENCY, 0.3, {
                        textValue: Skylanders.PlayerData.getCurrency(),
                        onUpdate: this.setCurrency.bind(this)
                    });
                } else {
                    this.screenVars.CURRENCY.textValue = Skylanders.PlayerData.getCurrency();
                }
            }
            if(this.screenVars.SCORE.value != this._racerWorld.scoreData.getBaseScore()) {
                this.screenVars.SCORE.value = this._racerWorld.scoreData.getBaseScore();
                if(!Avota.EnvUtil.isMobile) {
                    TweenMax.to(this.screenVars.SCORE, 0.3, {
                        textValue: this._racerWorld.scoreData.getBaseScore(),
                        onUpdate: this.setScore.bind(this)
                    });
                } else {
                    this.screenVars.SCORE.textValue = this._racerWorld.scoreData.getBaseScore();
                }
            }
            if(this.screenVars.PLACE.value != player.place) {
                this.screenVars.PLACE.value = player.place;
            }
            this.setPlacement();
            this.updateMap();
        };
        LevelGUI.prototype.incrementTime = function () {
            if(this._racerWorld.frameCount % 3 == 0) {
                var txt = this.get("HUDTimeText");
                var frames = (this._racerWorld.raceEndFrame || this._racerWorld.frameCount) - (this._racerWorld.raceStartFrame || this._racerWorld.frameCount);
                txt.text = Skylanders.GameData.formatTimeFromFrames(frames, Avota.EnvUtil.isDesktop);
            }
        };
        return LevelGUI;
    })(Avota.GameUI);
    Skylanders.LevelGUI = LevelGUI;    
})(Skylanders || (Skylanders = {}));
var Skylanders;
(function (Skylanders) {
    var ScreenUtil = (function () {
        function ScreenUtil() { }
        ScreenUtil.NAME = "ScreenUtil";
        ScreenUtil.makeDebugGrid = function makeDebugGrid(group, width, height) {
            var cg = group.create(Avota.CanvasGraphic, group.timeManager || group.globalTimeManager, group.renderManager, width, height);
            cg.set({
                zIndex: 120,
                x: 0,
                y: 0,
                alpha: 0.5
            });
            for(var i = 0; i < (width > height ? width : height); i += 10) {
                cg.strokeStyle = i % 50 == 0 ? "#000088" : "#008800";
                cg.strokeStyle = i % 100 == 0 ? "#FF0000" : cg.strokeStyle;
                cg.beginPath();
                cg.moveTo(i, 0);
                cg.lineTo(i, height);
                cg.closePath();
                cg.stroke();
                cg.beginPath();
                cg.moveTo(0, i);
                cg.lineTo(width, i);
                cg.closePath();
                cg.stroke();
            }
            return cg;
        };
        ScreenUtil.drawBounds = function drawBounds(group, graphic) {
            var bounds = group.create(Avota.CanvasGraphic, group.timeManager || group.globalTimeManager, group.renderManager, graphic.width, graphic.height);
            bounds.strokeStyle = "#FF0000";
            bounds.beginPath();
            bounds.moveTo(1, 1);
            bounds.lineTo(1, bounds.height - 1);
            bounds.lineTo(bounds.width - 1, bounds.height - 1);
            bounds.lineTo(bounds.width - 1, 1);
            bounds.lineTo(1, 1);
            bounds.closePath();
            bounds.stroke();
            bounds.set({
                x: graphic.x,
                y: graphic.y,
                zIndex: graphic.zIndex + 1,
                scale: graphic.scale,
                rotation: graphic.rotation,
                registrationX: graphic.registrationX,
                registrationY: graphic.registrationY
            });
            if(graphic.text) {
                bounds.set({
                    left: graphic.left,
                    top: graphic.top
                });
            }
            return bounds;
        };
        ScreenUtil.getAssetListForElements = function getAssetListForElements(elements, list) {
            var assetList = list || [];
            if(elements.length) {
                traverseElementsList(elements, assetList);
            } else {
                traverseElementDefinitions(elements, assetList);
            }
            function traverseElementDefinitions(elmts, l) {
                for(var k in elmts) {
                    traverseElementsList(elmts[k], l);
                }
            }
            function traverseElementsList(elmnts, l) {
                for(var i = 0; i < elmnts.length; i++) {
                    var element = elmnts[i];
                    if(element.type == "image") {
                        var assetID = element.asset;
                        addToList(assetID, l);
                    } else if(element.type == "anim") {
                        var imgID = element.spritesheetID + "Image";
                        var jsonID = element.spritesheetID + "Data";
                        addToList(imgID, l);
                        addToList(jsonID, l);
                    }
                }
            }
            function addToList(id, l) {
                for(var i = 0; i < l.length; i++) {
                    if(id == l[i]) {
                        return;
                    }
                }
                l.push(id);
            }
            return assetList;
        };
        ScreenUtil.makeGroup = function makeGroup(parent, name, params) {
            new Avota.ImageSprite();
            var group = parent.create(Avota.ImageSprite, parent.timeManager || parent.globalTimeManager, parent.renderManager, parent.spatialManager, null, name);
            group.set(params);
            return group;
        };
        ScreenUtil.makeImage = function makeImage(group, name, assetID, params) {
            var img = group.create(Avota.ImageGraphic, group.timeManager || group.globalTimeManager, group.renderManager, group.getAsset(assetID), name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            img.set(properties);
            return img;
        };
        ScreenUtil.makeSprite = function makeSprite(group, name, spritesheets, animations, params) {
            var sprite = group.create(Avota.AnimatedGraphic, group.timeManager || group.globalTimeManager, group.renderManager, null, name);
            if(!(spritesheets instanceof Array)) {
                sprite.addSpriteSheet(spritesheets);
            } else if(spritesheets instanceof Array) {
                for(var i = 0; i < spritesheets.length; i++) {
                    sprite.addSpriteSheet(spritesheets[i]);
                }
            }
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            sprite.set(properties);
            for(var i = 0; i < animations.length; i++) {
                var animData = animations[i];
                sprite.addAnimation(animData.name, animData.spritesheet, animData.frame, animData.duration, animData.loop ? Avota.SpriteSheetAnimation.LOOP : Avota.SpriteSheetAnimation.PLAY_ONCE);
            }
            sprite.play(animations[0].name);
            return sprite;
        };
        ScreenUtil.makeText = function makeText(group, name, params, strings) {
            var text = group.create(Avota.TextGraphic, group.timeManager || group.globalTimeManager, group.renderManager, null, name);
            if(!strings) {
                strings = group._strings;
            }
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = params.active == null || params.active;
            properties.visible = params.visible == null || params.visible;
            var value = params.text || "                                ";
            if(strings) {
                for(var i = 0; i < strings.length; i++) {
                    var node = strings[i];
                    if(node.name == name) {
                        value = node.value;
                        params.style = node.style;
                        break;
                    }
                }
            }
            text.text = value;
            text.set(properties);
            if(params.style) {
                text.setStyle(params.style);
            }
            text.onTick(0);
            return text;
        };
        ScreenUtil.makeButton = function makeButton(group, name, spritesheet, prefix, params) {
            var ss = spritesheet;
            var buttonSetup = {
            };
            buttonSetup.label = {
                text: params.text || "",
                shadow: false,
                shadowStrength: 12,
                shadowColor: "#FFFFFF"
            } , ss.getFrame(prefix + "_up.png") ? buttonSetup.up = {
                prefix: prefix + "_up.png"
            } : null;
            ss.getFrame(prefix + "_over.png") ? buttonSetup.over = {
                prefix: prefix + "_over.png"
            } : null;
            ss.getFrame(prefix + "_down.png") ? buttonSetup.down = {
                prefix: prefix + "_down.png"
            } : null;
            var button = group.create(Avota.Button, name, group.timeManager || group.globalTimeManager, group.renderManager, group.inputManager, ss, buttonSetup);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.labelOffsetX = params.lableOffsetX || 0;
            properties.labelOffsetY = params.lableOffsetY || -3;
            button.set(properties);
            button.textLabel.onTick(0);
            return button;
        };
        ScreenUtil.makeRect = function makeRect(group, name, color, width, height, params) {
            var img = group.create(Avota.RectSprite, group.timeManager || group.globalTimeManager, group.renderManager, group.spatialManager, width, height, color, name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            img.set(properties);
            return img;
        };
        ScreenUtil.makeSingleFrameSprite = function makeSingleFrameSprite(group, name, spritesheetPrefix, frame, params) {
            var spritesheet = group.create(Avota.SpriteSheet, group.getAsset(spritesheetPrefix + "Image", group.config.loader), group.getAsset(spritesheetPrefix + "Data", group.config.loader));
            var sprite = group.create(Avota.SingleFrameGraphic, group.timeManager || group.globalTimeManager, group.renderManager, spritesheet, frame, name);
            var properties = {
            };
            for(var k in params) {
                properties[k] = params[k];
            }
            properties.active = (params.active == null || params.active);
            properties.visible = (params.visible == null || params.visible);
            sprite.set(properties);
            return sprite;
        };
        ScreenUtil.buildElements = function buildElements(group, elements, strings, spritesheets) {
            spritesheets = spritesheets || {
            };
            for(var i = 0; i < elements.length; i++) {
                var element = elements[i];
                var item;
                if(element.env) {
                    if(element.env == "mobile" && !Avota.EnvUtil.isMobile) {
                        continue;
                    }
                    if(element.env == "desktop" && !Avota.EnvUtil.isDesktop) {
                        continue;
                    }
                }
                switch(element.type) {
                    case "image":
                        item = ScreenUtil.makeImage(group, element.name, element.asset, element.params);
                        break;
                    case "text":
                        item = ScreenUtil.makeText(group, element.name, element.params, strings);
                        break;
                    case "grid":
                        var game = Avota.Context.getContext(Skylanders.SuperChargersGame.NAME);
                        item = ScreenUtil.makeDebugGrid(group, game.config.config.width, game.config.config.height);
                        break;
                    case "rect":
                        item = ScreenUtil.makeRect(group, element.name, element.color, element.width, element.height, element.params);
                        break;
                    case "button":
                        var spritesheet = spritesheets[element.spritesheetID] ? spritesheets[element.spritesheetID] : group.create(Avota.SpriteSheet, group.getAsset(element.spritesheetID + "Image"), group.getAsset(element.spritesheetID + "Data"));
                        if(!spritesheets[element.spritesheetID]) {
                            spritesheets[element.spritesheetID] = spritesheet;
                        }
                        item = ScreenUtil.makeButton(group, element.name, spritesheet, element.prefix, element.params);
                        break;
                    case "group":
                        item = ScreenUtil.makeGroup(group, element.name, element.params);
                        break;
                    case "anim":
                        var spritesheet = spritesheets[element.spritesheetID] ? spritesheets[element.spritesheetID] : group.create(Avota.SpriteSheet, group.getAsset(element.spritesheetID + "Image"), group.getAsset(element.spritesheetID + "Data"), element.spritesheetID);
                        if(!spritesheets[element.spritesheetID]) {
                            spritesheets[element.spritesheetID] = spritesheet;
                        }
                        item = ScreenUtil.makeSprite(group, element.name, spritesheet, element.animations, element.params);
                        break;
                }
                if(element.group) {
                    var parent = group.get(element.group);
                    if(!parent) {
                        console.error("[!ScreenUtil] Parent", element.group, "not defined");
                        continue;
                    }
                    parent.addChild(item);
                }
            }
        };
        return ScreenUtil;
    })();
    Skylanders.ScreenUtil = ScreenUtil;    
})(Skylanders || (Skylanders = {}));
//@ sourceMappingURL=skylanderssuperchargers.js.map
